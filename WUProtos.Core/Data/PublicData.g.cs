// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/PublicData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/PublicData.proto</summary>
  public static partial class PublicDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/PublicData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PublicDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XVVByb3Rvcy9EYXRhL1B1YmxpY0RhdGEucHJvdG8SDVdVUHJvdG9zLkRh",
            "dGEipwMKClB1YmxpY0RhdGESDQoFbGV2ZWwYASABKAUSGgoSZGlzdGFuY2Vf",
            "d2Fsa2VkX2ttGAIgASgCEhUKDXByb2Zlc3Npb25faWQYAyABKAkSEAoIaG91",
            "c2VfaWQYBCABKAkSMwoEd2FuZBgFIAEoCzIlLldVUHJvdG9zLkRhdGEuUHVi",
            "bGljRGF0YS5XYW5kT3B0aW9ucxIaChJmYXZvcml0ZV9iYWRnZV9pZHMYBiAD",
            "KAkSGgoSZmF2b3JpdGVfdGl0bGVfaWRzGAcgAygJEhsKE2xpZmV0aW1lX2lu",
            "bl9sb290ZWQYCCABKAMSIgoabGlmZXRpbWVfZ3JlZW5ob3VzZV9sb290ZWQY",
            "CSABKAMSIgoabGlmZXRpbWVfbWFwX2VuY291bnRlcl93b24YCiABKAMSFwoP",
            "bGlmZXRpbWVfd2Nfd29uGAsgASgDGloKC1dhbmRPcHRpb25zEg8KB2NvcmVf",
            "aWQYASABKAkSDwoHd29vZF9pZBgCIAEoCRIWCg5mbGV4aWJpbGl0eV9pZBgD",
            "IAEoCRIRCglsZW5ndGhfaWQYBCABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.PublicData), global::WUProtos.Data.PublicData.Parser, new[]{ "Level", "DistanceWalkedKm", "ProfessionId", "HouseId", "Wand", "FavoriteBadgeIds", "FavoriteTitleIds", "LifetimeInnLooted", "LifetimeGreenhouseLooted", "LifetimeMapEncounterWon", "LifetimeWcWon" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.PublicData.Types.WandOptions), global::WUProtos.Data.PublicData.Types.WandOptions.Parser, new[]{ "CoreId", "WoodId", "FlexibilityId", "LengthId" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PublicData : pb::IMessage<PublicData> {
    private static readonly pb::MessageParser<PublicData> _parser = new pb::MessageParser<PublicData>(() => new PublicData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.PublicDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicData(PublicData other) : this() {
      level_ = other.level_;
      distanceWalkedKm_ = other.distanceWalkedKm_;
      professionId_ = other.professionId_;
      houseId_ = other.houseId_;
      wand_ = other.wand_ != null ? other.wand_.Clone() : null;
      favoriteBadgeIds_ = other.favoriteBadgeIds_.Clone();
      favoriteTitleIds_ = other.favoriteTitleIds_.Clone();
      lifetimeInnLooted_ = other.lifetimeInnLooted_;
      lifetimeGreenhouseLooted_ = other.lifetimeGreenhouseLooted_;
      lifetimeMapEncounterWon_ = other.lifetimeMapEncounterWon_;
      lifetimeWcWon_ = other.lifetimeWcWon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicData Clone() {
      return new PublicData(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "distance_walked_km" field.</summary>
    public const int DistanceWalkedKmFieldNumber = 2;
    private float distanceWalkedKm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistanceWalkedKm {
      get { return distanceWalkedKm_; }
      set {
        distanceWalkedKm_ = value;
      }
    }

    /// <summary>Field number for the "profession_id" field.</summary>
    public const int ProfessionIdFieldNumber = 3;
    private string professionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfessionId {
      get { return professionId_; }
      set {
        professionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "house_id" field.</summary>
    public const int HouseIdFieldNumber = 4;
    private string houseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HouseId {
      get { return houseId_; }
      set {
        houseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wand" field.</summary>
    public const int WandFieldNumber = 5;
    private global::WUProtos.Data.PublicData.Types.WandOptions wand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.PublicData.Types.WandOptions Wand {
      get { return wand_; }
      set {
        wand_ = value;
      }
    }

    /// <summary>Field number for the "favorite_badge_ids" field.</summary>
    public const int FavoriteBadgeIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_favoriteBadgeIds_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> favoriteBadgeIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FavoriteBadgeIds {
      get { return favoriteBadgeIds_; }
    }

    /// <summary>Field number for the "favorite_title_ids" field.</summary>
    public const int FavoriteTitleIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_favoriteTitleIds_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> favoriteTitleIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FavoriteTitleIds {
      get { return favoriteTitleIds_; }
    }

    /// <summary>Field number for the "lifetime_inn_looted" field.</summary>
    public const int LifetimeInnLootedFieldNumber = 8;
    private long lifetimeInnLooted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LifetimeInnLooted {
      get { return lifetimeInnLooted_; }
      set {
        lifetimeInnLooted_ = value;
      }
    }

    /// <summary>Field number for the "lifetime_greenhouse_looted" field.</summary>
    public const int LifetimeGreenhouseLootedFieldNumber = 9;
    private long lifetimeGreenhouseLooted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LifetimeGreenhouseLooted {
      get { return lifetimeGreenhouseLooted_; }
      set {
        lifetimeGreenhouseLooted_ = value;
      }
    }

    /// <summary>Field number for the "lifetime_map_encounter_won" field.</summary>
    public const int LifetimeMapEncounterWonFieldNumber = 10;
    private long lifetimeMapEncounterWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LifetimeMapEncounterWon {
      get { return lifetimeMapEncounterWon_; }
      set {
        lifetimeMapEncounterWon_ = value;
      }
    }

    /// <summary>Field number for the "lifetime_wc_won" field.</summary>
    public const int LifetimeWcWonFieldNumber = 11;
    private long lifetimeWcWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LifetimeWcWon {
      get { return lifetimeWcWon_; }
      set {
        lifetimeWcWon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistanceWalkedKm, other.DistanceWalkedKm)) return false;
      if (ProfessionId != other.ProfessionId) return false;
      if (HouseId != other.HouseId) return false;
      if (!object.Equals(Wand, other.Wand)) return false;
      if(!favoriteBadgeIds_.Equals(other.favoriteBadgeIds_)) return false;
      if(!favoriteTitleIds_.Equals(other.favoriteTitleIds_)) return false;
      if (LifetimeInnLooted != other.LifetimeInnLooted) return false;
      if (LifetimeGreenhouseLooted != other.LifetimeGreenhouseLooted) return false;
      if (LifetimeMapEncounterWon != other.LifetimeMapEncounterWon) return false;
      if (LifetimeWcWon != other.LifetimeWcWon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (DistanceWalkedKm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistanceWalkedKm);
      if (ProfessionId.Length != 0) hash ^= ProfessionId.GetHashCode();
      if (HouseId.Length != 0) hash ^= HouseId.GetHashCode();
      if (wand_ != null) hash ^= Wand.GetHashCode();
      hash ^= favoriteBadgeIds_.GetHashCode();
      hash ^= favoriteTitleIds_.GetHashCode();
      if (LifetimeInnLooted != 0L) hash ^= LifetimeInnLooted.GetHashCode();
      if (LifetimeGreenhouseLooted != 0L) hash ^= LifetimeGreenhouseLooted.GetHashCode();
      if (LifetimeMapEncounterWon != 0L) hash ^= LifetimeMapEncounterWon.GetHashCode();
      if (LifetimeWcWon != 0L) hash ^= LifetimeWcWon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (DistanceWalkedKm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DistanceWalkedKm);
      }
      if (ProfessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProfessionId);
      }
      if (HouseId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HouseId);
      }
      if (wand_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Wand);
      }
      favoriteBadgeIds_.WriteTo(output, _repeated_favoriteBadgeIds_codec);
      favoriteTitleIds_.WriteTo(output, _repeated_favoriteTitleIds_codec);
      if (LifetimeInnLooted != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LifetimeInnLooted);
      }
      if (LifetimeGreenhouseLooted != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LifetimeGreenhouseLooted);
      }
      if (LifetimeMapEncounterWon != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LifetimeMapEncounterWon);
      }
      if (LifetimeWcWon != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(LifetimeWcWon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (DistanceWalkedKm != 0F) {
        size += 1 + 4;
      }
      if (ProfessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionId);
      }
      if (HouseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HouseId);
      }
      if (wand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wand);
      }
      size += favoriteBadgeIds_.CalculateSize(_repeated_favoriteBadgeIds_codec);
      size += favoriteTitleIds_.CalculateSize(_repeated_favoriteTitleIds_codec);
      if (LifetimeInnLooted != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LifetimeInnLooted);
      }
      if (LifetimeGreenhouseLooted != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LifetimeGreenhouseLooted);
      }
      if (LifetimeMapEncounterWon != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LifetimeMapEncounterWon);
      }
      if (LifetimeWcWon != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LifetimeWcWon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicData other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.DistanceWalkedKm != 0F) {
        DistanceWalkedKm = other.DistanceWalkedKm;
      }
      if (other.ProfessionId.Length != 0) {
        ProfessionId = other.ProfessionId;
      }
      if (other.HouseId.Length != 0) {
        HouseId = other.HouseId;
      }
      if (other.wand_ != null) {
        if (wand_ == null) {
          Wand = new global::WUProtos.Data.PublicData.Types.WandOptions();
        }
        Wand.MergeFrom(other.Wand);
      }
      favoriteBadgeIds_.Add(other.favoriteBadgeIds_);
      favoriteTitleIds_.Add(other.favoriteTitleIds_);
      if (other.LifetimeInnLooted != 0L) {
        LifetimeInnLooted = other.LifetimeInnLooted;
      }
      if (other.LifetimeGreenhouseLooted != 0L) {
        LifetimeGreenhouseLooted = other.LifetimeGreenhouseLooted;
      }
      if (other.LifetimeMapEncounterWon != 0L) {
        LifetimeMapEncounterWon = other.LifetimeMapEncounterWon;
      }
      if (other.LifetimeWcWon != 0L) {
        LifetimeWcWon = other.LifetimeWcWon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 21: {
            DistanceWalkedKm = input.ReadFloat();
            break;
          }
          case 26: {
            ProfessionId = input.ReadString();
            break;
          }
          case 34: {
            HouseId = input.ReadString();
            break;
          }
          case 42: {
            if (wand_ == null) {
              Wand = new global::WUProtos.Data.PublicData.Types.WandOptions();
            }
            input.ReadMessage(Wand);
            break;
          }
          case 50: {
            favoriteBadgeIds_.AddEntriesFrom(input, _repeated_favoriteBadgeIds_codec);
            break;
          }
          case 58: {
            favoriteTitleIds_.AddEntriesFrom(input, _repeated_favoriteTitleIds_codec);
            break;
          }
          case 64: {
            LifetimeInnLooted = input.ReadInt64();
            break;
          }
          case 72: {
            LifetimeGreenhouseLooted = input.ReadInt64();
            break;
          }
          case 80: {
            LifetimeMapEncounterWon = input.ReadInt64();
            break;
          }
          case 88: {
            LifetimeWcWon = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PublicData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class WandOptions : pb::IMessage<WandOptions> {
        private static readonly pb::MessageParser<WandOptions> _parser = new pb::MessageParser<WandOptions>(() => new WandOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WandOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.PublicData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WandOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WandOptions(WandOptions other) : this() {
          coreId_ = other.coreId_;
          woodId_ = other.woodId_;
          flexibilityId_ = other.flexibilityId_;
          lengthId_ = other.lengthId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WandOptions Clone() {
          return new WandOptions(this);
        }

        /// <summary>Field number for the "core_id" field.</summary>
        public const int CoreIdFieldNumber = 1;
        private string coreId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CoreId {
          get { return coreId_; }
          set {
            coreId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wood_id" field.</summary>
        public const int WoodIdFieldNumber = 2;
        private string woodId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WoodId {
          get { return woodId_; }
          set {
            woodId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "flexibility_id" field.</summary>
        public const int FlexibilityIdFieldNumber = 3;
        private string flexibilityId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FlexibilityId {
          get { return flexibilityId_; }
          set {
            flexibilityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "length_id" field.</summary>
        public const int LengthIdFieldNumber = 4;
        private string lengthId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LengthId {
          get { return lengthId_; }
          set {
            lengthId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WandOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WandOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CoreId != other.CoreId) return false;
          if (WoodId != other.WoodId) return false;
          if (FlexibilityId != other.FlexibilityId) return false;
          if (LengthId != other.LengthId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CoreId.Length != 0) hash ^= CoreId.GetHashCode();
          if (WoodId.Length != 0) hash ^= WoodId.GetHashCode();
          if (FlexibilityId.Length != 0) hash ^= FlexibilityId.GetHashCode();
          if (LengthId.Length != 0) hash ^= LengthId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CoreId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CoreId);
          }
          if (WoodId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(WoodId);
          }
          if (FlexibilityId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FlexibilityId);
          }
          if (LengthId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LengthId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CoreId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreId);
          }
          if (WoodId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WoodId);
          }
          if (FlexibilityId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FlexibilityId);
          }
          if (LengthId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LengthId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WandOptions other) {
          if (other == null) {
            return;
          }
          if (other.CoreId.Length != 0) {
            CoreId = other.CoreId;
          }
          if (other.WoodId.Length != 0) {
            WoodId = other.WoodId;
          }
          if (other.FlexibilityId.Length != 0) {
            FlexibilityId = other.FlexibilityId;
          }
          if (other.LengthId.Length != 0) {
            LengthId = other.LengthId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CoreId = input.ReadString();
                break;
              }
              case 18: {
                WoodId = input.ReadString();
                break;
              }
              case 26: {
                FlexibilityId = input.ReadString();
                break;
              }
              case 34: {
                LengthId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
