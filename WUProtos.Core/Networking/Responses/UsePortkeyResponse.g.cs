// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Networking/Responses/UsePortkeyResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Networking.Responses {

  /// <summary>Holder for reflection information generated from WUProtos/Networking/Responses/UsePortkeyResponse.proto</summary>
  public static partial class UsePortkeyResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Networking/Responses/UsePortkeyResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UsePortkeyResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZXVVByb3Rvcy9OZXR3b3JraW5nL1Jlc3BvbnNlcy9Vc2VQb3J0a2V5UmVz",
            "cG9uc2UucHJvdG8SHVdVUHJvdG9zLk5ldHdvcmtpbmcuUmVzcG9uc2VzGiNX",
            "VVByb3Rvcy9EYXRhL0xvb3QvTG9vdFJld2FyZC5wcm90byL0BAoSVXNlUG9y",
            "dGtleVJlc3BvbnNlEkgKBnN0YXR1cxgBIAEoDjI4LldVUHJvdG9zLk5ldHdv",
            "cmtpbmcuUmVzcG9uc2VzLlVzZVBvcnRrZXlSZXNwb25zZS5TdGF0dXMSRgoP",
            "cG9ydGtleV9yZXdhcmRzGAIgASgLMi0uV1VQcm90b3MuRGF0YS5Mb290Lkxv",
            "b3RSZXdhcmQuTG9vdENvbGxlY3Rpb24SbgoXYWxsX2JvbnVzX25vZGVzX3Jl",
            "d2FyZHMYBCADKAsyTS5XVVByb3Rvcy5OZXR3b3JraW5nLlJlc3BvbnNlcy5V",
            "c2VQb3J0a2V5UmVzcG9uc2UuUG9ydGtleUJvbnVzR2FtZU5vZGVSZXdhcmRz",
            "GpcCChtQb3J0a2V5Qm9udXNHYW1lTm9kZVJld2FyZHMSegoHcmV3YXJkcxgB",
            "IAMoCzJpLldVUHJvdG9zLk5ldHdvcmtpbmcuUmVzcG9uc2VzLlVzZVBvcnRr",
            "ZXlSZXNwb25zZS5Qb3J0a2V5Qm9udXNHYW1lTm9kZVJld2FyZHMuUG9ydGtl",
            "eUJvbnVzR2FtZVJld2FyZFR1cGxlGnwKG1BvcnRrZXlCb251c0dhbWVSZXdh",
            "cmRUdXBsZRIuCgZyZXdhcmQYASABKAsyHi5XVVByb3Rvcy5EYXRhLkxvb3Qu",
            "TG9vdFJld2FyZBISCgptdWx0aXBsaWVyGAIgASgCEhkKEWNhdGVnb3J5X3By",
            "b3RvX2lkGAMgASgJIkIKBlN0YXR1cxILCgdVTktOT1dOEAASCwoHU1VDQ0VT",
            "UxABEgkKBUVSUk9SEAISEwoPSU5WQUxJRF9QT1JUS0VZEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Loot.LootRewardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Networking.Responses.UsePortkeyResponse), global::WUProtos.Networking.Responses.UsePortkeyResponse.Parser, new[]{ "Status", "PortkeyRewards", "AllBonusNodesRewards" }, null, new[]{ typeof(global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards), global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Parser, new[]{ "Rewards" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple), global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple.Parser, new[]{ "Reward", "Multiplier", "CategoryProtoId" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UsePortkeyResponse : pb::IMessage<UsePortkeyResponse> {
    private static readonly pb::MessageParser<UsePortkeyResponse> _parser = new pb::MessageParser<UsePortkeyResponse>(() => new UsePortkeyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePortkeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Networking.Responses.UsePortkeyResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePortkeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePortkeyResponse(UsePortkeyResponse other) : this() {
      status_ = other.status_;
      portkeyRewards_ = other.portkeyRewards_ != null ? other.portkeyRewards_.Clone() : null;
      allBonusNodesRewards_ = other.allBonusNodesRewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePortkeyResponse Clone() {
      return new UsePortkeyResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "portkey_rewards" field.</summary>
    public const int PortkeyRewardsFieldNumber = 2;
    private global::WUProtos.Data.Loot.LootReward.Types.LootCollection portkeyRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.LootCollection PortkeyRewards {
      get { return portkeyRewards_; }
      set {
        portkeyRewards_ = value;
      }
    }

    /// <summary>Field number for the "all_bonus_nodes_rewards" field.</summary>
    public const int AllBonusNodesRewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards> _repeated_allBonusNodesRewards_codec
        = pb::FieldCodec.ForMessage(34, global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards> allBonusNodesRewards_ = new pbc::RepeatedField<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards> AllBonusNodesRewards {
      get { return allBonusNodesRewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePortkeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePortkeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(PortkeyRewards, other.PortkeyRewards)) return false;
      if(!allBonusNodesRewards_.Equals(other.allBonusNodesRewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (portkeyRewards_ != null) hash ^= PortkeyRewards.GetHashCode();
      hash ^= allBonusNodesRewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (portkeyRewards_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PortkeyRewards);
      }
      allBonusNodesRewards_.WriteTo(output, _repeated_allBonusNodesRewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (portkeyRewards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeyRewards);
      }
      size += allBonusNodesRewards_.CalculateSize(_repeated_allBonusNodesRewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePortkeyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.portkeyRewards_ != null) {
        if (portkeyRewards_ == null) {
          PortkeyRewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
        }
        PortkeyRewards.MergeFrom(other.PortkeyRewards);
      }
      allBonusNodesRewards_.Add(other.allBonusNodesRewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (portkeyRewards_ == null) {
              PortkeyRewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            input.ReadMessage(PortkeyRewards);
            break;
          }
          case 34: {
            allBonusNodesRewards_.AddEntriesFrom(input, _repeated_allBonusNodesRewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UsePortkeyResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("INVALID_PORTKEY")] InvalidPortkey = 3,
      }

      public sealed partial class PortkeyBonusGameNodeRewards : pb::IMessage<PortkeyBonusGameNodeRewards> {
        private static readonly pb::MessageParser<PortkeyBonusGameNodeRewards> _parser = new pb::MessageParser<PortkeyBonusGameNodeRewards>(() => new PortkeyBonusGameNodeRewards());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PortkeyBonusGameNodeRewards> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Networking.Responses.UsePortkeyResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyBonusGameNodeRewards() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyBonusGameNodeRewards(PortkeyBonusGameNodeRewards other) : this() {
          rewards_ = other.rewards_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyBonusGameNodeRewards Clone() {
          return new PortkeyBonusGameNodeRewards(this);
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple> _repeated_rewards_codec
            = pb::FieldCodec.ForMessage(10, global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple> rewards_ = new pbc::RepeatedField<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Types.PortkeyBonusGameRewardTuple> Rewards {
          get { return rewards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PortkeyBonusGameNodeRewards);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PortkeyBonusGameNodeRewards other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rewards_.Equals(other.rewards_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rewards_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rewards_.WriteTo(output, _repeated_rewards_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rewards_.CalculateSize(_repeated_rewards_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PortkeyBonusGameNodeRewards other) {
          if (other == null) {
            return;
          }
          rewards_.Add(other.rewards_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PortkeyBonusGameNodeRewards message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PortkeyBonusGameRewardTuple : pb::IMessage<PortkeyBonusGameRewardTuple> {
            private static readonly pb::MessageParser<PortkeyBonusGameRewardTuple> _parser = new pb::MessageParser<PortkeyBonusGameRewardTuple>(() => new PortkeyBonusGameRewardTuple());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PortkeyBonusGameRewardTuple> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.PortkeyBonusGameNodeRewards.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PortkeyBonusGameRewardTuple() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PortkeyBonusGameRewardTuple(PortkeyBonusGameRewardTuple other) : this() {
              reward_ = other.reward_ != null ? other.reward_.Clone() : null;
              multiplier_ = other.multiplier_;
              categoryProtoId_ = other.categoryProtoId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PortkeyBonusGameRewardTuple Clone() {
              return new PortkeyBonusGameRewardTuple(this);
            }

            /// <summary>Field number for the "reward" field.</summary>
            public const int RewardFieldNumber = 1;
            private global::WUProtos.Data.Loot.LootReward reward_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward Reward {
              get { return reward_; }
              set {
                reward_ = value;
              }
            }

            /// <summary>Field number for the "multiplier" field.</summary>
            public const int MultiplierFieldNumber = 2;
            private float multiplier_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Multiplier {
              get { return multiplier_; }
              set {
                multiplier_ = value;
              }
            }

            /// <summary>Field number for the "category_proto_id" field.</summary>
            public const int CategoryProtoIdFieldNumber = 3;
            private string categoryProtoId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CategoryProtoId {
              get { return categoryProtoId_; }
              set {
                categoryProtoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PortkeyBonusGameRewardTuple);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PortkeyBonusGameRewardTuple other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Reward, other.Reward)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Multiplier, other.Multiplier)) return false;
              if (CategoryProtoId != other.CategoryProtoId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (reward_ != null) hash ^= Reward.GetHashCode();
              if (Multiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Multiplier);
              if (CategoryProtoId.Length != 0) hash ^= CategoryProtoId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (reward_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Reward);
              }
              if (Multiplier != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Multiplier);
              }
              if (CategoryProtoId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(CategoryProtoId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (reward_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
              }
              if (Multiplier != 0F) {
                size += 1 + 4;
              }
              if (CategoryProtoId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryProtoId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PortkeyBonusGameRewardTuple other) {
              if (other == null) {
                return;
              }
              if (other.reward_ != null) {
                if (reward_ == null) {
                  Reward = new global::WUProtos.Data.Loot.LootReward();
                }
                Reward.MergeFrom(other.Reward);
              }
              if (other.Multiplier != 0F) {
                Multiplier = other.Multiplier;
              }
              if (other.CategoryProtoId.Length != 0) {
                CategoryProtoId = other.CategoryProtoId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (reward_ == null) {
                      Reward = new global::WUProtos.Data.Loot.LootReward();
                    }
                    input.ReadMessage(Reward);
                    break;
                  }
                  case 21: {
                    Multiplier = input.ReadFloat();
                    break;
                  }
                  case 26: {
                    CategoryProtoId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
