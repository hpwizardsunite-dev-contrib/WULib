// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/QualityLevel.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/QualityLevel.proto</summary>
  public static partial class QualityLevelReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/QualityLevel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QualityLevelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBXVVByb3Rvcy9EYXRhL1F1YWxpdHlMZXZlbC5wcm90bxINV1VQcm90b3Mu",
            "RGF0YSLoCAoMUXVhbGl0eUxldmVsEgoKAmlkGAEgASgJEkUKDXF1YWxpdHlf",
            "bGV2ZWwYAiABKAsyLi5XVVByb3Rvcy5EYXRhLlF1YWxpdHlMZXZlbC5TaGFy",
            "ZWRRdWFsaXR5TGV2ZWwaqgYKElNoYXJlZFF1YWxpdHlMZXZlbBIMCgRuYW1l",
            "GAEgASgJEhcKD3RleHR1cmVfcXVhbGl0eRgCIAEoBRISCgpzaGFkZXJfbG9k",
            "GAMgASgFEhoKEmRlZmF1bHRfdGFyZ2V0X2ZwcxgEIAEoBRIUCgxhbnRpYWxp",
            "YXNpbmcYBSABKAUSHQoVYW5pc290cm9waWNfZmlsdGVyaW5nGAcgASgFEicK",
            "H2JpbGxib2FyZHNfZmFjZV9jYW1lcmFfcG9zaXRpb24YCSABKAgSGAoQcmVh",
            "bHRpbWVfc2hhZG93cxgKIAEoBRIbChNhcl9hemltdXRoX2JsdXJyaW5nGAsg",
            "ASgIEmEKEmdhbWVtb2RlX292ZXJyaWRlcxgNIAMoCzJFLldVUHJvdG9zLkRh",
            "dGEuUXVhbGl0eUxldmVsLlNoYXJlZFF1YWxpdHlMZXZlbC5HYW1lbW9kZU92",
            "ZXJyaWRlc0VudHJ5EiEKGWFyX2VuY291bnRlcl9wYXJ0aWNsZV9jYXAYDiAB",
            "KAUSJQodbG9ja2VkX2VuY291bnRlcl9wYXJ0aWNsZV9jYXAYDyABKAUSGQoR",
            "bWVudV9wYXJ0aWNsZV9jYXAYECABKAUSIAoYYXJfYXppbXV0aF9jb2xvcl9n",
            "cmFkaW5nGBEgASgIEhcKD3NoYWRvd19tYXBfc2l6ZRgSIAEoBRInCh9lbmNv",
            "dW50ZXJfY2FtZXJhX3RhcmdldF9zY2FsaW5nGBMgASgFEiUKHWFkdmFuY2Vk",
            "X2FyX2NhbWVyYV9yZXNvbHV0aW9uGBQgASgFEg8KB3ZmeF9sb2QYFSABKAUS",
            "FwoPZm9yY2Vfc2ltcGxlX2FyGBYgASgIGn4KFkdhbWVtb2RlT3ZlcnJpZGVz",
            "RW50cnkSCwoDa2V5GAEgASgJElMKBXZhbHVlGAIgASgLMkQuV1VQcm90b3Mu",
            "RGF0YS5RdWFsaXR5TGV2ZWwuU2hhcmVkUXVhbGl0eUxldmVsLlF1YWxpdHlM",
            "ZXZlbE92ZXJyaWRlczoCOAEaKwoVUXVhbGl0eUxldmVsT3ZlcnJpZGVzEhIK",
            "CnRhcmdldF9mcHMYASABKAUiQwoTQW50aWFsaWFzaW5nU2V0dGluZxIICgRv",
            "ZmZmEAASCgoGbXNhYTJ4EAISCgoGbXNhYTR4EAQSCgoGbXNhYTh4EAgiXgoW",
            "UmVhbHRpbWVTaGFkb3dzU2V0dGluZxIHCgNvZmYQABITCg9yZWFsdGltZV9w",
            "bGFuYXIQARImCiJyZWFsdGltZV9wbGFuYXJfYW5kX3NlbGZfc2hhZG93aW5n",
            "EAIiMwoVVGV4dHVyZVF1YWxpdHlTZXR0aW5nEgwKCGZ1bGxfcmVzEAASDAoI",
            "aGFsZl9yZXMQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.QualityLevel), global::WUProtos.Data.QualityLevel.Parser, new[]{ "Id", "QualityLevel_" }, null, new[]{ typeof(global::WUProtos.Data.QualityLevel.Types.AntialiasingSetting), typeof(global::WUProtos.Data.QualityLevel.Types.RealtimeShadowsSetting), typeof(global::WUProtos.Data.QualityLevel.Types.TextureQualitySetting) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel), global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Parser, new[]{ "Name", "TextureQuality", "ShaderLod", "DefaultTargetFps", "Antialiasing", "AnisotropicFiltering", "BillboardsFaceCameraPosition", "RealtimeShadows", "ArAzimuthBlurring", "GamemodeOverrides", "ArEncounterParticleCap", "LockedEncounterParticleCap", "MenuParticleCap", "ArAzimuthColorGrading", "ShadowMapSize", "EncounterCameraTargetScaling", "AdvancedArCameraResolution", "VfxLod", "ForceSimpleAr" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides), global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides.Parser, new[]{ "TargetFps" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QualityLevel : pb::IMessage<QualityLevel> {
    private static readonly pb::MessageParser<QualityLevel> _parser = new pb::MessageParser<QualityLevel>(() => new QualityLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QualityLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.QualityLevelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QualityLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QualityLevel(QualityLevel other) : this() {
      id_ = other.id_;
      qualityLevel_ = other.qualityLevel_ != null ? other.qualityLevel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QualityLevel Clone() {
      return new QualityLevel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quality_level" field.</summary>
    public const int QualityLevel_FieldNumber = 2;
    private global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel qualityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel QualityLevel_ {
      get { return qualityLevel_; }
      set {
        qualityLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QualityLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QualityLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(QualityLevel_, other.QualityLevel_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (qualityLevel_ != null) hash ^= QualityLevel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (qualityLevel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(QualityLevel_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (qualityLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityLevel_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QualityLevel other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.qualityLevel_ != null) {
        if (qualityLevel_ == null) {
          QualityLevel_ = new global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel();
        }
        QualityLevel_.MergeFrom(other.QualityLevel_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (qualityLevel_ == null) {
              QualityLevel_ = new global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel();
            }
            input.ReadMessage(QualityLevel_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QualityLevel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AntialiasingSetting {
        [pbr::OriginalName("offf")] Offf = 0,
        [pbr::OriginalName("msaa2x")] Msaa2X = 2,
        [pbr::OriginalName("msaa4x")] Msaa4X = 4,
        [pbr::OriginalName("msaa8x")] Msaa8X = 8,
      }

      public enum RealtimeShadowsSetting {
        [pbr::OriginalName("off")] Off = 0,
        [pbr::OriginalName("realtime_planar")] RealtimePlanar = 1,
        [pbr::OriginalName("realtime_planar_and_self_shadowing")] RealtimePlanarAndSelfShadowing = 2,
      }

      public enum TextureQualitySetting {
        [pbr::OriginalName("full_res")] FullRes = 0,
        [pbr::OriginalName("half_res")] HalfRes = 1,
      }

      public sealed partial class SharedQualityLevel : pb::IMessage<SharedQualityLevel> {
        private static readonly pb::MessageParser<SharedQualityLevel> _parser = new pb::MessageParser<SharedQualityLevel>(() => new SharedQualityLevel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SharedQualityLevel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.QualityLevel.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedQualityLevel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedQualityLevel(SharedQualityLevel other) : this() {
          name_ = other.name_;
          textureQuality_ = other.textureQuality_;
          shaderLod_ = other.shaderLod_;
          defaultTargetFps_ = other.defaultTargetFps_;
          antialiasing_ = other.antialiasing_;
          anisotropicFiltering_ = other.anisotropicFiltering_;
          billboardsFaceCameraPosition_ = other.billboardsFaceCameraPosition_;
          realtimeShadows_ = other.realtimeShadows_;
          arAzimuthBlurring_ = other.arAzimuthBlurring_;
          gamemodeOverrides_ = other.gamemodeOverrides_.Clone();
          arEncounterParticleCap_ = other.arEncounterParticleCap_;
          lockedEncounterParticleCap_ = other.lockedEncounterParticleCap_;
          menuParticleCap_ = other.menuParticleCap_;
          arAzimuthColorGrading_ = other.arAzimuthColorGrading_;
          shadowMapSize_ = other.shadowMapSize_;
          encounterCameraTargetScaling_ = other.encounterCameraTargetScaling_;
          advancedArCameraResolution_ = other.advancedArCameraResolution_;
          vfxLod_ = other.vfxLod_;
          forceSimpleAr_ = other.forceSimpleAr_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedQualityLevel Clone() {
          return new SharedQualityLevel(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "texture_quality" field.</summary>
        public const int TextureQualityFieldNumber = 2;
        private int textureQuality_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TextureQuality {
          get { return textureQuality_; }
          set {
            textureQuality_ = value;
          }
        }

        /// <summary>Field number for the "shader_lod" field.</summary>
        public const int ShaderLodFieldNumber = 3;
        private int shaderLod_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ShaderLod {
          get { return shaderLod_; }
          set {
            shaderLod_ = value;
          }
        }

        /// <summary>Field number for the "default_target_fps" field.</summary>
        public const int DefaultTargetFpsFieldNumber = 4;
        private int defaultTargetFps_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DefaultTargetFps {
          get { return defaultTargetFps_; }
          set {
            defaultTargetFps_ = value;
          }
        }

        /// <summary>Field number for the "antialiasing" field.</summary>
        public const int AntialiasingFieldNumber = 5;
        private int antialiasing_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Antialiasing {
          get { return antialiasing_; }
          set {
            antialiasing_ = value;
          }
        }

        /// <summary>Field number for the "anisotropic_filtering" field.</summary>
        public const int AnisotropicFilteringFieldNumber = 7;
        private int anisotropicFiltering_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AnisotropicFiltering {
          get { return anisotropicFiltering_; }
          set {
            anisotropicFiltering_ = value;
          }
        }

        /// <summary>Field number for the "billboards_face_camera_position" field.</summary>
        public const int BillboardsFaceCameraPositionFieldNumber = 9;
        private bool billboardsFaceCameraPosition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BillboardsFaceCameraPosition {
          get { return billboardsFaceCameraPosition_; }
          set {
            billboardsFaceCameraPosition_ = value;
          }
        }

        /// <summary>Field number for the "realtime_shadows" field.</summary>
        public const int RealtimeShadowsFieldNumber = 10;
        private int realtimeShadows_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RealtimeShadows {
          get { return realtimeShadows_; }
          set {
            realtimeShadows_ = value;
          }
        }

        /// <summary>Field number for the "ar_azimuth_blurring" field.</summary>
        public const int ArAzimuthBlurringFieldNumber = 11;
        private bool arAzimuthBlurring_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ArAzimuthBlurring {
          get { return arAzimuthBlurring_; }
          set {
            arAzimuthBlurring_ = value;
          }
        }

        /// <summary>Field number for the "gamemode_overrides" field.</summary>
        public const int GamemodeOverridesFieldNumber = 13;
        private static readonly pbc::MapField<string, global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides>.Codec _map_gamemodeOverrides_codec
            = new pbc::MapField<string, global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides.Parser), 106);
        private readonly pbc::MapField<string, global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides> gamemodeOverrides_ = new pbc::MapField<string, global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Types.QualityLevelOverrides> GamemodeOverrides {
          get { return gamemodeOverrides_; }
        }

        /// <summary>Field number for the "ar_encounter_particle_cap" field.</summary>
        public const int ArEncounterParticleCapFieldNumber = 14;
        private int arEncounterParticleCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ArEncounterParticleCap {
          get { return arEncounterParticleCap_; }
          set {
            arEncounterParticleCap_ = value;
          }
        }

        /// <summary>Field number for the "locked_encounter_particle_cap" field.</summary>
        public const int LockedEncounterParticleCapFieldNumber = 15;
        private int lockedEncounterParticleCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LockedEncounterParticleCap {
          get { return lockedEncounterParticleCap_; }
          set {
            lockedEncounterParticleCap_ = value;
          }
        }

        /// <summary>Field number for the "menu_particle_cap" field.</summary>
        public const int MenuParticleCapFieldNumber = 16;
        private int menuParticleCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MenuParticleCap {
          get { return menuParticleCap_; }
          set {
            menuParticleCap_ = value;
          }
        }

        /// <summary>Field number for the "ar_azimuth_color_grading" field.</summary>
        public const int ArAzimuthColorGradingFieldNumber = 17;
        private bool arAzimuthColorGrading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ArAzimuthColorGrading {
          get { return arAzimuthColorGrading_; }
          set {
            arAzimuthColorGrading_ = value;
          }
        }

        /// <summary>Field number for the "shadow_map_size" field.</summary>
        public const int ShadowMapSizeFieldNumber = 18;
        private int shadowMapSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ShadowMapSize {
          get { return shadowMapSize_; }
          set {
            shadowMapSize_ = value;
          }
        }

        /// <summary>Field number for the "encounter_camera_target_scaling" field.</summary>
        public const int EncounterCameraTargetScalingFieldNumber = 19;
        private int encounterCameraTargetScaling_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EncounterCameraTargetScaling {
          get { return encounterCameraTargetScaling_; }
          set {
            encounterCameraTargetScaling_ = value;
          }
        }

        /// <summary>Field number for the "advanced_ar_camera_resolution" field.</summary>
        public const int AdvancedArCameraResolutionFieldNumber = 20;
        private int advancedArCameraResolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AdvancedArCameraResolution {
          get { return advancedArCameraResolution_; }
          set {
            advancedArCameraResolution_ = value;
          }
        }

        /// <summary>Field number for the "vfx_lod" field.</summary>
        public const int VfxLodFieldNumber = 21;
        private int vfxLod_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VfxLod {
          get { return vfxLod_; }
          set {
            vfxLod_ = value;
          }
        }

        /// <summary>Field number for the "force_simple_ar" field.</summary>
        public const int ForceSimpleArFieldNumber = 22;
        private bool forceSimpleAr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ForceSimpleAr {
          get { return forceSimpleAr_; }
          set {
            forceSimpleAr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SharedQualityLevel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SharedQualityLevel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (TextureQuality != other.TextureQuality) return false;
          if (ShaderLod != other.ShaderLod) return false;
          if (DefaultTargetFps != other.DefaultTargetFps) return false;
          if (Antialiasing != other.Antialiasing) return false;
          if (AnisotropicFiltering != other.AnisotropicFiltering) return false;
          if (BillboardsFaceCameraPosition != other.BillboardsFaceCameraPosition) return false;
          if (RealtimeShadows != other.RealtimeShadows) return false;
          if (ArAzimuthBlurring != other.ArAzimuthBlurring) return false;
          if (!GamemodeOverrides.Equals(other.GamemodeOverrides)) return false;
          if (ArEncounterParticleCap != other.ArEncounterParticleCap) return false;
          if (LockedEncounterParticleCap != other.LockedEncounterParticleCap) return false;
          if (MenuParticleCap != other.MenuParticleCap) return false;
          if (ArAzimuthColorGrading != other.ArAzimuthColorGrading) return false;
          if (ShadowMapSize != other.ShadowMapSize) return false;
          if (EncounterCameraTargetScaling != other.EncounterCameraTargetScaling) return false;
          if (AdvancedArCameraResolution != other.AdvancedArCameraResolution) return false;
          if (VfxLod != other.VfxLod) return false;
          if (ForceSimpleAr != other.ForceSimpleAr) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (TextureQuality != 0) hash ^= TextureQuality.GetHashCode();
          if (ShaderLod != 0) hash ^= ShaderLod.GetHashCode();
          if (DefaultTargetFps != 0) hash ^= DefaultTargetFps.GetHashCode();
          if (Antialiasing != 0) hash ^= Antialiasing.GetHashCode();
          if (AnisotropicFiltering != 0) hash ^= AnisotropicFiltering.GetHashCode();
          if (BillboardsFaceCameraPosition != false) hash ^= BillboardsFaceCameraPosition.GetHashCode();
          if (RealtimeShadows != 0) hash ^= RealtimeShadows.GetHashCode();
          if (ArAzimuthBlurring != false) hash ^= ArAzimuthBlurring.GetHashCode();
          hash ^= GamemodeOverrides.GetHashCode();
          if (ArEncounterParticleCap != 0) hash ^= ArEncounterParticleCap.GetHashCode();
          if (LockedEncounterParticleCap != 0) hash ^= LockedEncounterParticleCap.GetHashCode();
          if (MenuParticleCap != 0) hash ^= MenuParticleCap.GetHashCode();
          if (ArAzimuthColorGrading != false) hash ^= ArAzimuthColorGrading.GetHashCode();
          if (ShadowMapSize != 0) hash ^= ShadowMapSize.GetHashCode();
          if (EncounterCameraTargetScaling != 0) hash ^= EncounterCameraTargetScaling.GetHashCode();
          if (AdvancedArCameraResolution != 0) hash ^= AdvancedArCameraResolution.GetHashCode();
          if (VfxLod != 0) hash ^= VfxLod.GetHashCode();
          if (ForceSimpleAr != false) hash ^= ForceSimpleAr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (TextureQuality != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TextureQuality);
          }
          if (ShaderLod != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ShaderLod);
          }
          if (DefaultTargetFps != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(DefaultTargetFps);
          }
          if (Antialiasing != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Antialiasing);
          }
          if (AnisotropicFiltering != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(AnisotropicFiltering);
          }
          if (BillboardsFaceCameraPosition != false) {
            output.WriteRawTag(72);
            output.WriteBool(BillboardsFaceCameraPosition);
          }
          if (RealtimeShadows != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(RealtimeShadows);
          }
          if (ArAzimuthBlurring != false) {
            output.WriteRawTag(88);
            output.WriteBool(ArAzimuthBlurring);
          }
          gamemodeOverrides_.WriteTo(output, _map_gamemodeOverrides_codec);
          if (ArEncounterParticleCap != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(ArEncounterParticleCap);
          }
          if (LockedEncounterParticleCap != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(LockedEncounterParticleCap);
          }
          if (MenuParticleCap != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(MenuParticleCap);
          }
          if (ArAzimuthColorGrading != false) {
            output.WriteRawTag(136, 1);
            output.WriteBool(ArAzimuthColorGrading);
          }
          if (ShadowMapSize != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(ShadowMapSize);
          }
          if (EncounterCameraTargetScaling != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(EncounterCameraTargetScaling);
          }
          if (AdvancedArCameraResolution != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(AdvancedArCameraResolution);
          }
          if (VfxLod != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(VfxLod);
          }
          if (ForceSimpleAr != false) {
            output.WriteRawTag(176, 1);
            output.WriteBool(ForceSimpleAr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (TextureQuality != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TextureQuality);
          }
          if (ShaderLod != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShaderLod);
          }
          if (DefaultTargetFps != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultTargetFps);
          }
          if (Antialiasing != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Antialiasing);
          }
          if (AnisotropicFiltering != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnisotropicFiltering);
          }
          if (BillboardsFaceCameraPosition != false) {
            size += 1 + 1;
          }
          if (RealtimeShadows != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealtimeShadows);
          }
          if (ArAzimuthBlurring != false) {
            size += 1 + 1;
          }
          size += gamemodeOverrides_.CalculateSize(_map_gamemodeOverrides_codec);
          if (ArEncounterParticleCap != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArEncounterParticleCap);
          }
          if (LockedEncounterParticleCap != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockedEncounterParticleCap);
          }
          if (MenuParticleCap != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MenuParticleCap);
          }
          if (ArAzimuthColorGrading != false) {
            size += 2 + 1;
          }
          if (ShadowMapSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowMapSize);
          }
          if (EncounterCameraTargetScaling != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(EncounterCameraTargetScaling);
          }
          if (AdvancedArCameraResolution != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdvancedArCameraResolution);
          }
          if (VfxLod != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(VfxLod);
          }
          if (ForceSimpleAr != false) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SharedQualityLevel other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.TextureQuality != 0) {
            TextureQuality = other.TextureQuality;
          }
          if (other.ShaderLod != 0) {
            ShaderLod = other.ShaderLod;
          }
          if (other.DefaultTargetFps != 0) {
            DefaultTargetFps = other.DefaultTargetFps;
          }
          if (other.Antialiasing != 0) {
            Antialiasing = other.Antialiasing;
          }
          if (other.AnisotropicFiltering != 0) {
            AnisotropicFiltering = other.AnisotropicFiltering;
          }
          if (other.BillboardsFaceCameraPosition != false) {
            BillboardsFaceCameraPosition = other.BillboardsFaceCameraPosition;
          }
          if (other.RealtimeShadows != 0) {
            RealtimeShadows = other.RealtimeShadows;
          }
          if (other.ArAzimuthBlurring != false) {
            ArAzimuthBlurring = other.ArAzimuthBlurring;
          }
          gamemodeOverrides_.Add(other.gamemodeOverrides_);
          if (other.ArEncounterParticleCap != 0) {
            ArEncounterParticleCap = other.ArEncounterParticleCap;
          }
          if (other.LockedEncounterParticleCap != 0) {
            LockedEncounterParticleCap = other.LockedEncounterParticleCap;
          }
          if (other.MenuParticleCap != 0) {
            MenuParticleCap = other.MenuParticleCap;
          }
          if (other.ArAzimuthColorGrading != false) {
            ArAzimuthColorGrading = other.ArAzimuthColorGrading;
          }
          if (other.ShadowMapSize != 0) {
            ShadowMapSize = other.ShadowMapSize;
          }
          if (other.EncounterCameraTargetScaling != 0) {
            EncounterCameraTargetScaling = other.EncounterCameraTargetScaling;
          }
          if (other.AdvancedArCameraResolution != 0) {
            AdvancedArCameraResolution = other.AdvancedArCameraResolution;
          }
          if (other.VfxLod != 0) {
            VfxLod = other.VfxLod;
          }
          if (other.ForceSimpleAr != false) {
            ForceSimpleAr = other.ForceSimpleAr;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                TextureQuality = input.ReadInt32();
                break;
              }
              case 24: {
                ShaderLod = input.ReadInt32();
                break;
              }
              case 32: {
                DefaultTargetFps = input.ReadInt32();
                break;
              }
              case 40: {
                Antialiasing = input.ReadInt32();
                break;
              }
              case 56: {
                AnisotropicFiltering = input.ReadInt32();
                break;
              }
              case 72: {
                BillboardsFaceCameraPosition = input.ReadBool();
                break;
              }
              case 80: {
                RealtimeShadows = input.ReadInt32();
                break;
              }
              case 88: {
                ArAzimuthBlurring = input.ReadBool();
                break;
              }
              case 106: {
                gamemodeOverrides_.AddEntriesFrom(input, _map_gamemodeOverrides_codec);
                break;
              }
              case 112: {
                ArEncounterParticleCap = input.ReadInt32();
                break;
              }
              case 120: {
                LockedEncounterParticleCap = input.ReadInt32();
                break;
              }
              case 128: {
                MenuParticleCap = input.ReadInt32();
                break;
              }
              case 136: {
                ArAzimuthColorGrading = input.ReadBool();
                break;
              }
              case 144: {
                ShadowMapSize = input.ReadInt32();
                break;
              }
              case 152: {
                EncounterCameraTargetScaling = input.ReadInt32();
                break;
              }
              case 160: {
                AdvancedArCameraResolution = input.ReadInt32();
                break;
              }
              case 168: {
                VfxLod = input.ReadInt32();
                break;
              }
              case 176: {
                ForceSimpleAr = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SharedQualityLevel message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class QualityLevelOverrides : pb::IMessage<QualityLevelOverrides> {
            private static readonly pb::MessageParser<QualityLevelOverrides> _parser = new pb::MessageParser<QualityLevelOverrides>(() => new QualityLevelOverrides());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<QualityLevelOverrides> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.QualityLevel.Types.SharedQualityLevel.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QualityLevelOverrides() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QualityLevelOverrides(QualityLevelOverrides other) : this() {
              targetFps_ = other.targetFps_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QualityLevelOverrides Clone() {
              return new QualityLevelOverrides(this);
            }

            /// <summary>Field number for the "target_fps" field.</summary>
            public const int TargetFpsFieldNumber = 1;
            private int targetFps_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int TargetFps {
              get { return targetFps_; }
              set {
                targetFps_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as QualityLevelOverrides);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(QualityLevelOverrides other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TargetFps != other.TargetFps) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TargetFps != 0) hash ^= TargetFps.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TargetFps != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(TargetFps);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TargetFps != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetFps);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(QualityLevelOverrides other) {
              if (other == null) {
                return;
              }
              if (other.TargetFps != 0) {
                TargetFps = other.TargetFps;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TargetFps = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
