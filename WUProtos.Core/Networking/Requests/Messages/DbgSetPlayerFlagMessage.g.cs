// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Networking/Requests/Messages/DbgSetPlayerFlagMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Networking.Requests.Messages {

  /// <summary>Holder for reflection information generated from WUProtos/Networking/Requests/Messages/DbgSetPlayerFlagMessage.proto</summary>
  public static partial class DbgSetPlayerFlagMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Networking/Requests/Messages/DbgSetPlayerFlagMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbgSetPlayerFlagMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkNXVVByb3Rvcy9OZXR3b3JraW5nL1JlcXVlc3RzL01lc3NhZ2VzL0RiZ1Nl",
            "dFBsYXllckZsYWdNZXNzYWdlLnByb3RvEiVXVVByb3Rvcy5OZXR3b3JraW5n",
            "LlJlcXVlc3RzLk1lc3NhZ2VzInsKF0RiZ1NldFBsYXllckZsYWdNZXNzYWdl",
            "EhcKD2ZlYXR1cmVfZmxhZ19pZBgBIAEoCRIOCgRidmFsGAIgASgISAASDgoE",
            "bHZhbBgDIAEoA0gAEg4KBHN2YWwYBCABKAlIABIOCgRmdmFsGAUgASgCSABC",
            "BwoFVmFsdWViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Networking.Requests.Messages.DbgSetPlayerFlagMessage), global::WUProtos.Networking.Requests.Messages.DbgSetPlayerFlagMessage.Parser, new[]{ "FeatureFlagId", "Bval", "Lval", "Sval", "Fval" }, new[]{ "Value" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DbgSetPlayerFlagMessage : pb::IMessage<DbgSetPlayerFlagMessage> {
    private static readonly pb::MessageParser<DbgSetPlayerFlagMessage> _parser = new pb::MessageParser<DbgSetPlayerFlagMessage>(() => new DbgSetPlayerFlagMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DbgSetPlayerFlagMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Networking.Requests.Messages.DbgSetPlayerFlagMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbgSetPlayerFlagMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbgSetPlayerFlagMessage(DbgSetPlayerFlagMessage other) : this() {
      featureFlagId_ = other.featureFlagId_;
      switch (other.ValueCase) {
        case ValueOneofCase.Bval:
          Bval = other.Bval;
          break;
        case ValueOneofCase.Lval:
          Lval = other.Lval;
          break;
        case ValueOneofCase.Sval:
          Sval = other.Sval;
          break;
        case ValueOneofCase.Fval:
          Fval = other.Fval;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbgSetPlayerFlagMessage Clone() {
      return new DbgSetPlayerFlagMessage(this);
    }

    /// <summary>Field number for the "feature_flag_id" field.</summary>
    public const int FeatureFlagIdFieldNumber = 1;
    private string featureFlagId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureFlagId {
      get { return featureFlagId_; }
      set {
        featureFlagId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bval" field.</summary>
    public const int BvalFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bval {
      get { return valueCase_ == ValueOneofCase.Bval ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Bval;
      }
    }

    /// <summary>Field number for the "lval" field.</summary>
    public const int LvalFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lval {
      get { return valueCase_ == ValueOneofCase.Lval ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Lval;
      }
    }

    /// <summary>Field number for the "sval" field.</summary>
    public const int SvalFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sval {
      get { return valueCase_ == ValueOneofCase.Sval ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Sval;
      }
    }

    /// <summary>Field number for the "fval" field.</summary>
    public const int FvalFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fval {
      get { return valueCase_ == ValueOneofCase.Fval ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Fval;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "Value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Bval = 2,
      Lval = 3,
      Sval = 4,
      Fval = 5,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DbgSetPlayerFlagMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DbgSetPlayerFlagMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatureFlagId != other.FeatureFlagId) return false;
      if (Bval != other.Bval) return false;
      if (Lval != other.Lval) return false;
      if (Sval != other.Sval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fval, other.Fval)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeatureFlagId.Length != 0) hash ^= FeatureFlagId.GetHashCode();
      if (valueCase_ == ValueOneofCase.Bval) hash ^= Bval.GetHashCode();
      if (valueCase_ == ValueOneofCase.Lval) hash ^= Lval.GetHashCode();
      if (valueCase_ == ValueOneofCase.Sval) hash ^= Sval.GetHashCode();
      if (valueCase_ == ValueOneofCase.Fval) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fval);
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeatureFlagId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatureFlagId);
      }
      if (valueCase_ == ValueOneofCase.Bval) {
        output.WriteRawTag(16);
        output.WriteBool(Bval);
      }
      if (valueCase_ == ValueOneofCase.Lval) {
        output.WriteRawTag(24);
        output.WriteInt64(Lval);
      }
      if (valueCase_ == ValueOneofCase.Sval) {
        output.WriteRawTag(34);
        output.WriteString(Sval);
      }
      if (valueCase_ == ValueOneofCase.Fval) {
        output.WriteRawTag(45);
        output.WriteFloat(Fval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeatureFlagId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureFlagId);
      }
      if (valueCase_ == ValueOneofCase.Bval) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Lval) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lval);
      }
      if (valueCase_ == ValueOneofCase.Sval) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sval);
      }
      if (valueCase_ == ValueOneofCase.Fval) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DbgSetPlayerFlagMessage other) {
      if (other == null) {
        return;
      }
      if (other.FeatureFlagId.Length != 0) {
        FeatureFlagId = other.FeatureFlagId;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Bval:
          Bval = other.Bval;
          break;
        case ValueOneofCase.Lval:
          Lval = other.Lval;
          break;
        case ValueOneofCase.Sval:
          Sval = other.Sval;
          break;
        case ValueOneofCase.Fval:
          Fval = other.Fval;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FeatureFlagId = input.ReadString();
            break;
          }
          case 16: {
            Bval = input.ReadBool();
            break;
          }
          case 24: {
            Lval = input.ReadInt64();
            break;
          }
          case 34: {
            Sval = input.ReadString();
            break;
          }
          case 45: {
            Fval = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
