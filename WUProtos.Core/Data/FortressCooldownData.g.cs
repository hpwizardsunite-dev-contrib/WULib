// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/FortressCooldownData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/FortressCooldownData.proto</summary>
  public static partial class FortressCooldownDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/FortressCooldownData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FortressCooldownDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihXVVByb3Rvcy9EYXRhL0ZvcnRyZXNzQ29vbGRvd25EYXRhLnByb3RvEg1X",
            "VVByb3Rvcy5EYXRhIkoKFEZvcnRyZXNzQ29vbGRvd25EYXRhEh4KFmNvb2xk",
            "b3duX3V0Y190aW1lc3RhbXAYASABKAMSEgoKcGxheXNfbGVmdBgCIAEoBWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.FortressCooldownData), global::WUProtos.Data.FortressCooldownData.Parser, new[]{ "CooldownUtcTimestamp", "PlaysLeft" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FortressCooldownData : pb::IMessage<FortressCooldownData> {
    private static readonly pb::MessageParser<FortressCooldownData> _parser = new pb::MessageParser<FortressCooldownData>(() => new FortressCooldownData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FortressCooldownData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.FortressCooldownDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortressCooldownData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortressCooldownData(FortressCooldownData other) : this() {
      cooldownUtcTimestamp_ = other.cooldownUtcTimestamp_;
      playsLeft_ = other.playsLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortressCooldownData Clone() {
      return new FortressCooldownData(this);
    }

    /// <summary>Field number for the "cooldown_utc_timestamp" field.</summary>
    public const int CooldownUtcTimestampFieldNumber = 1;
    private long cooldownUtcTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CooldownUtcTimestamp {
      get { return cooldownUtcTimestamp_; }
      set {
        cooldownUtcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "plays_left" field.</summary>
    public const int PlaysLeftFieldNumber = 2;
    private int playsLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaysLeft {
      get { return playsLeft_; }
      set {
        playsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FortressCooldownData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FortressCooldownData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CooldownUtcTimestamp != other.CooldownUtcTimestamp) return false;
      if (PlaysLeft != other.PlaysLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CooldownUtcTimestamp != 0L) hash ^= CooldownUtcTimestamp.GetHashCode();
      if (PlaysLeft != 0) hash ^= PlaysLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CooldownUtcTimestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CooldownUtcTimestamp);
      }
      if (PlaysLeft != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlaysLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CooldownUtcTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownUtcTimestamp);
      }
      if (PlaysLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaysLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FortressCooldownData other) {
      if (other == null) {
        return;
      }
      if (other.CooldownUtcTimestamp != 0L) {
        CooldownUtcTimestamp = other.CooldownUtcTimestamp;
      }
      if (other.PlaysLeft != 0) {
        PlaysLeft = other.PlaysLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CooldownUtcTimestamp = input.ReadInt64();
            break;
          }
          case 16: {
            PlaysLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
