// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Inventory/AtlasInventoryItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Inventory {

  /// <summary>Holder for reflection information generated from WUProtos/Inventory/AtlasInventoryItem.proto</summary>
  public static partial class AtlasInventoryItemReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Inventory/AtlasInventoryItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AtlasInventoryItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitXVVByb3Rvcy9JbnZlbnRvcnkvQXRsYXNJbnZlbnRvcnlJdGVtLnByb3Rv",
            "EhJXVVByb3Rvcy5JbnZlbnRvcnkaHVdVUHJvdG9zL0RhdGEvRW1haWxPcHRz",
            "LnByb3RvGjZXVVByb3Rvcy9EYXRhL1BsYXllci9QbGF5ZXJQcm9mZXNzaW9u",
            "c1Byb2dyZXNzVjMucHJvdG8aI1dVUHJvdG9zL0RhdGEvTG9vdC9Mb290UmV3",
            "YXJkLnByb3RvGiVXVVByb3Rvcy9EYXRhL0hvb2tRdWVzdFByb2dyZXNzLnBy",
            "b3RvGidXVVByb3Rvcy9EYXRhL0J1ZmYvQWN0aXZlQnVmZkxpc3QucHJvdG8i",
            "mDsKEkF0bGFzSW52ZW50b3J5SXRlbRJHCgdwcm9maWxlGAEgASgLMjQuV1VQ",
            "cm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5QbGF5ZXJQcm9m",
            "aWxlSAASTwoKdmF1bHRfaXRlbRgCIAEoCzI5LldVUHJvdG9zLkludmVudG9y",
            "eS5BdGxhc0ludmVudG9yeUl0ZW0uSW52ZW50b3J5VmF1bHRJdGVtSAASWQoP",
            "Y29sbGVjdGlvbl9pdGVtGAMgASgLMj4uV1VQcm90b3MuSW52ZW50b3J5LkF0",
            "bGFzSW52ZW50b3J5SXRlbS5JbnZlbnRvcnlDb2xsZWN0aW9uSXRlbUgAEl0K",
            "EWNvbGxlY3Rpb25fZmFtaWx5GAQgASgLMkAuV1VQcm90b3MuSW52ZW50b3J5",
            "LkF0bGFzSW52ZW50b3J5SXRlbS5JbnZlbnRvcnlDb2xsZWN0aW9uRmFtaWx5",
            "SAASTgoHd2Fsa2JveBgFIAEoCzI7LldVUHJvdG9zLkludmVudG9yeS5BdGxh",
            "c0ludmVudG9yeUl0ZW0uSW52ZW50b3J5V2Fsa2JveEl0ZW1IABJUCgxwbGF5",
            "ZXJfZmxhZ3MYBiABKAsyPC5XVVByb3Rvcy5JbnZlbnRvcnkuQXRsYXNJbnZl",
            "bnRvcnlJdGVtLkludmVudG9yeUZlYXR1cmVGbGFnc0gAEk4KB3BvcnRrZXkY",
            "ByABKAsyOy5XVVByb3Rvcy5JbnZlbnRvcnkuQXRsYXNJbnZlbnRvcnlJdGVt",
            "LkludmVudG9yeVBvcnRrZXlJdGVtSAASRQoXcGxheWVyX2FjdGl2ZV9idWZm",
            "X2xpc3QYCCABKAsyIi5XVVByb3Rvcy5EYXRhLkJ1ZmYuQWN0aXZlQnVmZkxp",
            "c3RIABJZCg9jb2xsZWN0aW9uX3BhZ2UYCSABKAsyPi5XVVByb3Rvcy5JbnZl",
            "bnRvcnkuQXRsYXNJbnZlbnRvcnlJdGVtLkludmVudG9yeUNvbGxlY3Rpb25Q",
            "YWdlSAASVwoOdmF1bHRfY2FwYWNpdHkYCyABKAsyPS5XVVByb3Rvcy5JbnZl",
            "bnRvcnkuQXRsYXNJbnZlbnRvcnlJdGVtLkludmVudG9yeVZhdWx0Q2FwYWNp",
            "dHlIABJMCghjYXVsZHJvbhgMIAEoCzI4LldVUHJvdG9zLkludmVudG9yeS5B",
            "dGxhc0ludmVudG9yeUl0ZW0uSW52ZW50b3J5Q2F1bGRyb25IABJbChBlc2Ny",
            "b3dlZF9yZXdhcmRzGA0gASgLMj8uV1VQcm90b3MuSW52ZW50b3J5LkF0bGFz",
            "SW52ZW50b3J5SXRlbS5JbnZlbnRvcnlFc2Nyb3dlZFJld2FyZHNIABJUChdw",
            "cm9mZXNzaW9uc19wcm9ncmVzc192MxgOIAEoCzIxLldVUHJvdG9zLkRhdGEu",
            "UGxheWVyLlBsYXllclByb2Zlc3Npb25zUHJvZ3Jlc3NWM0gAEk0KCXF1ZXN0",
            "X2xvZxgPIAEoCzI4LldVUHJvdG9zLkludmVudG9yeS5BdGxhc0ludmVudG9y",
            "eUl0ZW0uSW52ZW50b3J5UXVlc3RMb2dIABJSChBsaWZldGltZV9tZXRyaWNz",
            "GBAgASgLMjYuV1VQcm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRl",
            "bS5MaWZldGltZU1ldHJpY3NIABqhAwoRSW52ZW50b3J5Q2F1bGRyb24SCgoC",
            "aWQYASABKAMSEwoLdGVtcGxhdGVfaWQYAiABKAkSZQoNY2F1bGRyb25fc2xv",
            "dBgDIAMoCzJOLldVUHJvdG9zLkludmVudG9yeS5BdGxhc0ludmVudG9yeUl0",
            "ZW0uSW52ZW50b3J5Q2F1bGRyb24uSW52ZW50b3J5Q2F1bGRyb25TbG90Eh8K",
            "F2JyZXdpbmdfc3RhcnRfdGltZXN0YW1wGAQgASgDEiQKHGF2YWlsYWJpbGl0",
            "eV9zdGFydF90aW1lc3RhbXAYBSABKAMSGQoRYXZhaWxhYmlsaXR5X3RpbWUY",
            "BiABKAMaoQEKFUludmVudG9yeUNhdWxkcm9uU2xvdBI+CgdyZXdhcmRzGAEg",
            "ASgLMi0uV1VQcm90b3MuRGF0YS5Mb290Lkxvb3RSZXdhcmQuTG9vdENvbGxl",
            "Y3Rpb24SFAoMdGltZV90b19icmV3GAIgASgDEhUKDXJlY2lwZV9nbXRfaWQY",
            "AyABKAkSGwoTbWFzdGVyX25vdGVfYXBwbGllZBgEIAEoCBryAQoVSW52ZW50",
            "b3J5RmVhdHVyZUZsYWdzEgoKAmlkGAEgASgJEmAKBWZsYWdzGAIgAygLMlEu",
            "V1VQcm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5JbnZlbnRv",
            "cnlGZWF0dXJlRmxhZ3MuSW52ZW50b3J5RmVhdHVyZUZsYWcaawoUSW52ZW50",
            "b3J5RmVhdHVyZUZsYWcSCgoCaWQYASABKAkSDgoEYnZhbBgCIAEoCEgAEg4K",
            "BGx2YWwYAyABKANIABIOCgRzdmFsGAQgASgJSAASDgoEZnZhbBgFIAEoAkgA",
            "QgcKBVZhbHVlGqYCChRJbnZlbnRvcnlXYWxrYm94SXRlbRIKCgJpZBgBIAEo",
            "AxITCgt0ZW1wbGF0ZV9pZBgCIAEoCRJbCgZzdGF0dXMYAyABKA4ySy5XVVBy",
            "b3Rvcy5JbnZlbnRvcnkuQXRsYXNJbnZlbnRvcnlJdGVtLkludmVudG9yeVdh",
            "bGtib3hJdGVtLlVubG9ja2luZ1N0YXR1cxIfChdjb21wbGV0aW9uX3BlZG9t",
            "ZXRlcl9rbRgEIAEoAhIRCgl0aW1lc3RhbXAYBSABKAMiXAoPVW5sb2NraW5n",
            "U3RhdHVzEgsKB1VOS05PV04QABIPCgtOT1RfU1RBUlRFRBABEhUKEUlORklO",
            "SVRFX1VOTE9DS0VSEAISFAoQUFJFTUlVTV9VTkxPQ0tFUhADGi0KEkludmVu",
            "dG9yeVZhdWx0SXRlbRIKCgJpZBgBIAEoCRILCgNxdHkYAiABKAMawQEKFklu",
            "dmVudG9yeVZhdWx0Q2FwYWNpdHkSbgoRY2F0ZWdvcnlfY2FwYWNpdHkYASAD",
            "KAsyUy5XVVByb3Rvcy5JbnZlbnRvcnkuQXRsYXNJbnZlbnRvcnlJdGVtLklu",
            "dmVudG9yeVZhdWx0Q2FwYWNpdHkuQ2F0ZWdvcnlDYXBhY2l0eUVudHJ5GjcK",
            "FUNhdGVnb3J5Q2FwYWNpdHlFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAM6AjgBGkoKFEludmVudG9yeVBvcnRrZXlJdGVtEgoKAmlkGAEgASgD",
            "EhEKCXRpbWVzdGFtcBgCIAEoAxITCgt0ZW1wbGF0ZV9pZBgDIAEoCRrvBgoR",
            "SW52ZW50b3J5UXVlc3RMb2cSYQoGcXVlc3RzGAEgAygLMlEuV1VQcm90b3Mu",
            "SW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5JbnZlbnRvcnlRdWVzdExv",
            "Zy5JbnZlbnRvcnlJblByb2dyZXNzUXVlc3QSagoQY29tcGxldGVkX3F1ZXN0",
            "cxgCIAMoCzJQLldVUHJvdG9zLkludmVudG9yeS5BdGxhc0ludmVudG9yeUl0",
            "ZW0uSW52ZW50b3J5UXVlc3RMb2cuSW52ZW50b3J5Q29tcGxldGVkUXVlc3Qa",
            "fgoXSW52ZW50b3J5Q29tcGxldGVkUXVlc3QSFAoMcXVlc3RfZ210X2lkGAEg",
            "ASgJEioKImNvbXBsZXRlZF9kYXlfc2luY2VfZXBvY2hfaWZfZGFpbHkYAiAB",
            "KAMSIQoZY29tcGxldGVkX2RheV9zaW5jZV9lcG9jaBgDIAEoAxqKBAoYSW52",
            "ZW50b3J5SW5Qcm9ncmVzc1F1ZXN0EhQKDHF1ZXN0X2dtdF9pZBgBIAEoCRJ6",
            "ChFwcm9ncmVzc19wZXJfdGFzaxgCIAMoCzJfLldVUHJvdG9zLkludmVudG9y",
            "eS5BdGxhc0ludmVudG9yeUl0ZW0uSW52ZW50b3J5UXVlc3RMb2cuSW52ZW50",
            "b3J5SW5Qcm9ncmVzc1F1ZXN0LlF1ZXN0UHJvZ3Jlc3MSDwoHdmVyc2lvbhgD",
            "IAEoBRImCh5zdGFydF9kYXlfc2luY2VfZXBvY2hfaWZfZGFpbHkYBCABKAMS",
            "HQoVc3RhcnRfZGF5X3NpbmNlX2Vwb2NoGAUgASgDGoMCCg1RdWVzdFByb2dy",
            "ZXNzEpEBCgxyZXFfcHJvZ3Jlc3MYASABKAsyeS5XVVByb3Rvcy5JbnZlbnRv",
            "cnkuQXRsYXNJbnZlbnRvcnlJdGVtLkludmVudG9yeVF1ZXN0TG9nLkludmVu",
            "dG9yeUluUHJvZ3Jlc3NRdWVzdC5RdWVzdFByb2dyZXNzLlJlcXVpcmVtZW50",
            "c1F1ZXN0UHJvZ3Jlc3NIABI5Cg1ob29rX3Byb2dyZXNzGAIgASgLMiAuV1VQ",
            "cm90b3MuRGF0YS5Ib29rUXVlc3RQcm9ncmVzc0gAGhsKGVJlcXVpcmVtZW50",
            "c1F1ZXN0UHJvZ3Jlc3NCBgoEVHlwZRpaChhJbnZlbnRvcnlFc2Nyb3dlZFJl",
            "d2FyZHMSPgoHcmV3YXJkcxgBIAEoCzItLldVUHJvdG9zLkRhdGEuTG9vdC5M",
            "b290UmV3YXJkLkxvb3RDb2xsZWN0aW9uGrABChdJbnZlbnRvcnlDb2xsZWN0",
            "aW9uUGFnZRIKCgJpZBgBIAEoCRIcChRmaXJzdF9zdGlja2VyX2dtdF9pZBgC",
            "IAEoCRIfChdmaXJzdF9zdGlja2VyX3RpbWVzdGFtcBgDIAEoAxIbChNsYXN0",
            "X3N0aWNrZXJfZ210X2lkGAQgASgJEh4KFmxhc3Rfc3RpY2tlcl90aW1lc3Rh",
            "bXAYBSABKAMSDQoFbGV2ZWwYBiABKAUa5AEKF0ludmVudG9yeUNvbGxlY3Rp",
            "b25JdGVtEgoKAmlkGAEgASgJEhkKEXRpbWVzX2VuY291bnRlcmVkGAIgASgF",
            "EhYKDnRpbWVzX3JldHVybmVkGAMgASgFEiQKHGZpcnN0X3RpbWVfcmV3YXJk",
            "c19jb2xsZWN0ZWQYBCABKAgSFgoOZm91bmRfbG9jYXRpb24YBSABKAkSEgoK",
            "Zm91bmRfdGltZRgGIAEoAxIOCgZwbGFjZWQYCCABKAgSGAoQY3VycmVudF9y",
            "ZXR1cm5lZBgJIAEoBRIOCgZzaGFyZHMYCiABKA0akAEKGUludmVudG9yeUNv",
            "bGxlY3Rpb25GYW1pbHkSCgoCaWQYASABKAkSEQoJZmFtaWx5X3hwGAIgASgF",
            "EhQKDGZhbWlseV9sZXZlbBgDIAEoBRIfChdyZXdhcmRzX2NvbGxlY3RlZF9s",
            "ZXZlbBgEIAEoBRIdChVjdXJyZW50X2NoZXN0c19vcGVuZWQYBSABKAUamRAK",
            "D0xpZmV0aW1lTWV0cmljcxJhCg5mYW1pbHlfbWV0cmljcxgBIAMoCzJJLldV",
            "UHJvdG9zLkludmVudG9yeS5BdGxhc0ludmVudG9yeUl0ZW0uTGlmZXRpbWVN",
            "ZXRyaWNzLkZhbWlseU1ldHJpY3NFbnRyeRJbCgpwb2lfbG9vdGVkGAIgASgL",
            "MkcuV1VQcm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5MaWZl",
            "dGltZU1ldHJpY3MuUG9pTG9vdGVkTWV0cmljcxJhCg1tYXBfZW5jb3VudGVy",
            "GAMgASgLMkouV1VQcm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRl",
            "bS5MaWZldGltZU1ldHJpY3MuTWFwRW5jb3VudGVyTWV0cmljcxJMCgJ3YxgE",
            "IAEoCzJALldVUHJvdG9zLkludmVudG9yeS5BdGxhc0ludmVudG9yeUl0ZW0u",
            "TGlmZXRpbWVNZXRyaWNzLldjTWV0cmljcxIfChdjb2xsZWN0ZWRfZ29sZF9x",
            "dWFudGl0eRgFIAEoBRIaChJ1c2VkX2dvbGRfcXVhbnRpdHkYBiABKAUSbgoV",
            "ZGFya19kZXRlY3RvcnNfcGxhY2VkGAcgAygLMk8uV1VQcm90b3MuSW52ZW50",
            "b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5MaWZldGltZU1ldHJpY3MuRGFya0Rl",
            "dGVjdG9yc1BsYWNlZEVudHJ5EnoKG2NvbGxlY3RlZF9jYXRlZ29yeV9xdWFu",
            "dGl0eRgIIAMoCzJVLldVUHJvdG9zLkludmVudG9yeS5BdGxhc0ludmVudG9y",
            "eUl0ZW0uTGlmZXRpbWVNZXRyaWNzLkNvbGxlY3RlZENhdGVnb3J5UXVhbnRp",
            "dHlFbnRyeRJwChZ1c2VkX2NhdGVnb3J5X3F1YW50aXR5GAkgAygLMlAuV1VQ",
            "cm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5MaWZldGltZU1l",
            "dHJpY3MuVXNlZENhdGVnb3J5UXVhbnRpdHlFbnRyeRIiChpzdWNjZXNzZnVs",
            "X3N3aXNoX3NwZWxsY2FzdBgKIAEoBRIqCiJzdWNjZXNzZnVsX2NvbWJhdF9h",
            "dHRhY2tfc3BlbGxjYXN0GAsgASgFEioKInN1Y2Nlc3NmdWxfY29tYmF0X2Rl",
            "ZmVuZF9zcGVsbGNhc3QYDCABKAUSFwoPcG9ydGtleXNfb3BlbmVkGA0gASgF",
            "EhYKDnBvdGlvbnNfYnJld2VkGA4gASgFEiAKGG1hcF9pbmdyZWRpZW50X2Nv",
            "bGxlY3RlZBgPIAEoBRIeChZwb3Rpb25fZXhzdGltdWxvMV91c2VkGBAgASgF",
            "Eh4KFnBvdGlvbl9leHN0aW11bG8yX3VzZWQYESABKAUSHgoWcG90aW9uX2V4",
            "c3RpbXVsbzNfdXNlZBgSIAEoBRIgChhwb3Rpb25fYnJhaW5fZWxpeGlyX3Vz",
            "ZWQYEyABKAUSHQoVcG90aW9uX3VzZWRfZW5jb3VudGVyGBQgASgFEhYKDnBv",
            "dGlvbl91c2VkX3djGBUgASgFEiEKGXN3aXNoX21hc3RlcmZ1bF9zcGVsbGNh",
            "c3QYFiABKAUSGwoTbW9ic19kZWZlYXRlZF9ieV9tZRgXIAEoBRIVCg1zZWVk",
            "c19wbGFudGVkGBggASgFEhsKE215c3RlcnlfaXRlbXNfZm91bmQYGSABKAUS",
            "JQodZW5jb3VudGVyX2NvbXBsZXRlZF9jb3VudHJpZXMYGiADKAkSIQoZZWxp",
            "dGVfbW9ic19kZWZlYXRlZF9ieV9tZRgbIAEoBRIaChJtYXBfYWJpbGl0aWVz",
            "X3VzZWQYHCABKAUaegoSRmFtaWx5TWV0cmljc0VudHJ5EgsKA2tleRgBIAEo",
            "CRJTCgV2YWx1ZRgCIAEoCzJELldVUHJvdG9zLkludmVudG9yeS5BdGxhc0lu",
            "dmVudG9yeUl0ZW0uTGlmZXRpbWVNZXRyaWNzLkZhbWlseU1ldHJpY3M6AjgB",
            "GjoKGERhcmtEZXRlY3RvcnNQbGFjZWRFbnRyeRILCgNrZXkYASABKAUSDQoF",
            "dmFsdWUYAiABKAU6AjgBGkAKHkNvbGxlY3RlZENhdGVnb3J5UXVhbnRpdHlF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBGjsKGVVzZWRD",
            "YXRlZ29yeVF1YW50aXR5RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgFOgI4ARpQCg1GYW1pbHlNZXRyaWNzEhEKCWZhbWlseV94cBgBIAEoAxIU",
            "CgxmYW1pbHlfY2hlc3QYAiABKAMSFgoOZmFtaWx5X3N0aWNrZXIYAyABKAMa",
            "rAEKE01hcEVuY291bnRlck1ldHJpY3MSFwoPc3dpc2hfY29tcGxldGVkGAEg",
            "ASgDEhcKD3N3aXNoX3VzZXJfZmxlZBgCIAEoAxIWCg5zd2lzaF9jYXB0dXJl",
            "ZBgDIAEoAxIYChBjb21iYXRfY29tcGxldGVkGAQgASgDEhgKEGNvbWJhdF91",
            "c2VyX2ZsZWQYBSABKAMSFwoPY29tYmF0X2NhcHR1cmVkGAYgASgDGjMKEFBv",
            "aUxvb3RlZE1ldHJpY3MSCwoDaW5uGAEgASgDEhIKCmdyZWVuaG91c2UYAiAB",
            "KAMaKwoJV2NNZXRyaWNzEhEKCWNvbXBsZXRlZBgBIAEoAxILCgN3b24YAiAB",
            "KAMa+AoKDVBsYXllclByb2ZpbGUSEAoIbmlja25hbWUYASABKAkSDQoFbGV2",
            "ZWwYAiABKAUSGgoSZGlzdGFuY2Vfd2Fsa2VkX2ttGAMgASgCEg4KBm1heF9o",
            "cBgEIAEoAxIUCgxhdHRhY2tfcG93ZXIYBSABKAMSFgoOcGxheWVyX3RlYW1f",
            "aWQYBiABKAkSFQoNcHJvZmVzc2lvbl9pZBgHIAEoCRIQCgh0aXRsZV9pZBgI",
            "IAEoCRIaChJ1bmxvY2tlZF90aXRsZV9pZHMYCSADKAkSEAoIdGhlbWVfaWQY",
            "CiABKAkSGgoSdW5sb2NrZWRfdGhlbWVfaWRzGAsgAygJEhAKCGhvdXNlX2lk",
            "GAwgASgJEk4KBHdhbmQYDSABKAsyQC5XVVByb3Rvcy5JbnZlbnRvcnkuQXRs",
            "YXNJbnZlbnRvcnlJdGVtLlBsYXllclByb2ZpbGUuV2FuZE9wdGlvbnMSGgoS",
            "ZmF2b3JpdGVfYmFkZ2VfaWRzGA4gAygJEhoKEnVubG9ja2VkX2JhZGdlX2lk",
            "cxgPIAMoCRIaChJmYXZvcml0ZV90aXRsZV9pZHMYECADKAkSEgoKZmlyc3Rf",
            "bmFtZRgRIAEoCRIRCglsYXN0X25hbWUYEiABKAkSIQoZcHJvZmlsZV9jcmVh",
            "dGlvbl9sb2NhdGlvbhgTIAEoCRIhChl1bmxvY2tlZF9zZWxmaWVfYXNzZXRf",
            "aWRzGBQgAygJEiEKGXRvdGFsX3N3aXNoX3N1Y2Nlc3Nfc3BlbGwYFSABKAMS",
            "KgoiZGlzY292ZXJlZF9wb3Rpb25zX21hc3Rlcl9ub3RlX2lkcxgWIAMoCRJ5",
            "ChxtYXN0ZXJfbm90ZV9kaXNjb3Zlcnlfc3RhdHVzGBcgAygLMlMuV1VQcm90",
            "b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5QbGF5ZXJQcm9maWxl",
            "Lk1hc3Rlck5vdGVEaXNjb3ZlcnlTdGF0dXNFbnRyeRJjChBzd2lzaF9zcGVs",
            "bGNhc3RzGBggAygLMkkuV1VQcm90b3MuSW52ZW50b3J5LkF0bGFzSW52ZW50",
            "b3J5SXRlbS5QbGF5ZXJQcm9maWxlLlN3aXNoU3BlbGxjYXN0c0VudHJ5EmoK",
            "FHN0b3JlX3BhY2tfcHVyY2hhc2VkGBkgAygLMkwuV1VQcm90b3MuSW52ZW50",
            "b3J5LkF0bGFzSW52ZW50b3J5SXRlbS5QbGF5ZXJQcm9maWxlLlN0b3JlUGFj",
            "a1B1cmNoYXNlZEVudHJ5EiwKCmVtYWlsX29wdHMYGiABKAsyGC5XVVByb3Rv",
            "cy5EYXRhLkVtYWlsT3B0cxIbChNsaWZldGltZV9pbm5fbG9vdGVkGBsgASgD",
            "EiIKGmxpZmV0aW1lX2dyZWVuaG91c2VfbG9vdGVkGBwgASgDEiIKGmxpZmV0",
            "aW1lX21hcF9lbmNvdW50ZXJfd29uGB0gASgDEhcKD2xpZmV0aW1lX3djX3dv",
            "bhgeIAEoAxpACh5NYXN0ZXJOb3RlRGlzY292ZXJ5U3RhdHVzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ARo2ChRTd2lzaFNwZWxsY2Fz",
            "dHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBGjkKF1N0",
            "b3JlUGFja1B1cmNoYXNlZEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoAzoCOAEaWgoLV2FuZE9wdGlvbnMSDwoHY29yZV9pZBgBIAEoCRIPCgd3",
            "b29kX2lkGAIgASgJEhYKDmZsZXhpYmlsaXR5X2lkGAMgASgJEhEKCWxlbmd0",
            "aF9pZBgEIAEoCUIGCgRUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.EmailOptsReflection.Descriptor, global::WUProtos.Data.Player.PlayerProfessionsProgressV3Reflection.Descriptor, global::WUProtos.Data.Loot.LootRewardReflection.Descriptor, global::WUProtos.Data.HookQuestProgressReflection.Descriptor, global::WUProtos.Data.Buff.ActiveBuffListReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem), global::WUProtos.Inventory.AtlasInventoryItem.Parser, new[]{ "Profile", "VaultItem", "CollectionItem", "CollectionFamily", "Walkbox", "PlayerFlags", "Portkey", "PlayerActiveBuffList", "CollectionPage", "VaultCapacity", "Cauldron", "EscrowedRewards", "ProfessionsProgressV3", "QuestLog", "LifetimeMetrics" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Parser, new[]{ "Id", "TemplateId", "CauldronSlot", "BrewingStartTimestamp", "AvailabilityStartTimestamp", "AvailabilityTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot.Parser, new[]{ "Rewards", "TimeToBrew", "RecipeGmtId", "MasterNoteApplied" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Parser, new[]{ "Id", "Flags" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag.Parser, new[]{ "Id", "Bval", "Lval", "Sval", "Fval" }, new[]{ "Value" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem.Parser, new[]{ "Id", "TemplateId", "Status", "CompletionPedometerKm", "Timestamp" }, null, new[]{ typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem.Types.UnlockingStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem.Parser, new[]{ "Id", "Qty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity.Parser, new[]{ "CategoryCapacity" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem.Parser, new[]{ "Id", "Timestamp", "TemplateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Parser, new[]{ "Quests", "CompletedQuests" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest.Parser, new[]{ "QuestGmtId", "CompletedDaySinceEpochIfDaily", "CompletedDaySinceEpoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Parser, new[]{ "QuestGmtId", "ProgressPerTask", "Version", "StartDaySinceEpochIfDaily", "StartDaySinceEpoch" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Parser, new[]{ "ReqProgress", "HookProgress" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress.Parser, null, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards.Parser, new[]{ "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage.Parser, new[]{ "Id", "FirstStickerGmtId", "FirstStickerTimestamp", "LastStickerGmtId", "LastStickerTimestamp", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem.Parser, new[]{ "Id", "TimesEncountered", "TimesReturned", "FirstTimeRewardsCollected", "FoundLocation", "FoundTime", "Placed", "CurrentReturned", "Shards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily), global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily.Parser, new[]{ "Id", "FamilyXp", "FamilyLevel", "RewardsCollectedLevel", "CurrentChestsOpened" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics), global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Parser, new[]{ "FamilyMetrics", "PoiLooted", "MapEncounter", "Wc", "CollectedGoldQuantity", "UsedGoldQuantity", "DarkDetectorsPlaced", "CollectedCategoryQuantity", "UsedCategoryQuantity", "SuccessfulSwishSpellcast", "SuccessfulCombatAttackSpellcast", "SuccessfulCombatDefendSpellcast", "PortkeysOpened", "PotionsBrewed", "MapIngredientCollected", "PotionExstimulo1Used", "PotionExstimulo2Used", "PotionExstimulo3Used", "PotionBrainElixirUsed", "PotionUsedEncounter", "PotionUsedWc", "SwishMasterfulSpellcast", "MobsDefeatedByMe", "SeedsPlanted", "MysteryItemsFound", "EncounterCompletedCountries", "EliteMobsDefeatedByMe", "MapAbilitiesUsed" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics), global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics.Parser, new[]{ "FamilyXp", "FamilyChest", "FamilySticker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.MapEncounterMetrics), global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.MapEncounterMetrics.Parser, new[]{ "SwishCompleted", "SwishUserFled", "SwishCaptured", "CombatCompleted", "CombatUserFled", "CombatCaptured" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.PoiLootedMetrics), global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.PoiLootedMetrics.Parser, new[]{ "Inn", "Greenhouse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.WcMetrics), global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.WcMetrics.Parser, new[]{ "Completed", "Won" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile), global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Parser, new[]{ "Nickname", "Level", "DistanceWalkedKm", "MaxHp", "AttackPower", "PlayerTeamId", "ProfessionId", "TitleId", "UnlockedTitleIds", "ThemeId", "UnlockedThemeIds", "HouseId", "Wand", "FavoriteBadgeIds", "UnlockedBadgeIds", "FavoriteTitleIds", "FirstName", "LastName", "ProfileCreationLocation", "UnlockedSelfieAssetIds", "TotalSwishSuccessSpell", "DiscoveredPotionsMasterNoteIds", "MasterNoteDiscoveryStatus", "SwishSpellcasts", "StorePackPurchased", "EmailOpts", "LifetimeInnLooted", "LifetimeGreenhouseLooted", "LifetimeMapEncounterWon", "LifetimeWcWon" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Types.WandOptions), global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Types.WandOptions.Parser, new[]{ "CoreId", "WoodId", "FlexibilityId", "LengthId" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AtlasInventoryItem : pb::IMessage<AtlasInventoryItem> {
    private static readonly pb::MessageParser<AtlasInventoryItem> _parser = new pb::MessageParser<AtlasInventoryItem>(() => new AtlasInventoryItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AtlasInventoryItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Inventory.AtlasInventoryItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryItem(AtlasInventoryItem other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Profile:
          Profile = other.Profile.Clone();
          break;
        case TypeOneofCase.VaultItem:
          VaultItem = other.VaultItem.Clone();
          break;
        case TypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem.Clone();
          break;
        case TypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily.Clone();
          break;
        case TypeOneofCase.Walkbox:
          Walkbox = other.Walkbox.Clone();
          break;
        case TypeOneofCase.PlayerFlags:
          PlayerFlags = other.PlayerFlags.Clone();
          break;
        case TypeOneofCase.Portkey:
          Portkey = other.Portkey.Clone();
          break;
        case TypeOneofCase.PlayerActiveBuffList:
          PlayerActiveBuffList = other.PlayerActiveBuffList.Clone();
          break;
        case TypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage.Clone();
          break;
        case TypeOneofCase.VaultCapacity:
          VaultCapacity = other.VaultCapacity.Clone();
          break;
        case TypeOneofCase.Cauldron:
          Cauldron = other.Cauldron.Clone();
          break;
        case TypeOneofCase.EscrowedRewards:
          EscrowedRewards = other.EscrowedRewards.Clone();
          break;
        case TypeOneofCase.ProfessionsProgressV3:
          ProfessionsProgressV3 = other.ProfessionsProgressV3.Clone();
          break;
        case TypeOneofCase.QuestLog:
          QuestLog = other.QuestLog.Clone();
          break;
        case TypeOneofCase.LifetimeMetrics:
          LifetimeMetrics = other.LifetimeMetrics.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryItem Clone() {
      return new AtlasInventoryItem(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile Profile {
      get { return typeCase_ == TypeOneofCase.Profile ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Profile;
      }
    }

    /// <summary>Field number for the "vault_item" field.</summary>
    public const int VaultItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem VaultItem {
      get { return typeCase_ == TypeOneofCase.VaultItem ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.VaultItem;
      }
    }

    /// <summary>Field number for the "collection_item" field.</summary>
    public const int CollectionItemFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem CollectionItem {
      get { return typeCase_ == TypeOneofCase.CollectionItem ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectionItem;
      }
    }

    /// <summary>Field number for the "collection_family" field.</summary>
    public const int CollectionFamilyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily CollectionFamily {
      get { return typeCase_ == TypeOneofCase.CollectionFamily ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectionFamily;
      }
    }

    /// <summary>Field number for the "walkbox" field.</summary>
    public const int WalkboxFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem Walkbox {
      get { return typeCase_ == TypeOneofCase.Walkbox ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Walkbox;
      }
    }

    /// <summary>Field number for the "player_flags" field.</summary>
    public const int PlayerFlagsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags PlayerFlags {
      get { return typeCase_ == TypeOneofCase.PlayerFlags ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlayerFlags;
      }
    }

    /// <summary>Field number for the "portkey" field.</summary>
    public const int PortkeyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem Portkey {
      get { return typeCase_ == TypeOneofCase.Portkey ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Portkey;
      }
    }

    /// <summary>Field number for the "player_active_buff_list" field.</summary>
    public const int PlayerActiveBuffListFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.ActiveBuffList PlayerActiveBuffList {
      get { return typeCase_ == TypeOneofCase.PlayerActiveBuffList ? (global::WUProtos.Data.Buff.ActiveBuffList) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlayerActiveBuffList;
      }
    }

    /// <summary>Field number for the "collection_page" field.</summary>
    public const int CollectionPageFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage CollectionPage {
      get { return typeCase_ == TypeOneofCase.CollectionPage ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectionPage;
      }
    }

    /// <summary>Field number for the "vault_capacity" field.</summary>
    public const int VaultCapacityFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity VaultCapacity {
      get { return typeCase_ == TypeOneofCase.VaultCapacity ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.VaultCapacity;
      }
    }

    /// <summary>Field number for the "cauldron" field.</summary>
    public const int CauldronFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron Cauldron {
      get { return typeCase_ == TypeOneofCase.Cauldron ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Cauldron;
      }
    }

    /// <summary>Field number for the "escrowed_rewards" field.</summary>
    public const int EscrowedRewardsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards EscrowedRewards {
      get { return typeCase_ == TypeOneofCase.EscrowedRewards ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.EscrowedRewards;
      }
    }

    /// <summary>Field number for the "professions_progress_v3" field.</summary>
    public const int ProfessionsProgressV3FieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Player.PlayerProfessionsProgressV3 ProfessionsProgressV3 {
      get { return typeCase_ == TypeOneofCase.ProfessionsProgressV3 ? (global::WUProtos.Data.Player.PlayerProfessionsProgressV3) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ProfessionsProgressV3;
      }
    }

    /// <summary>Field number for the "quest_log" field.</summary>
    public const int QuestLogFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog QuestLog {
      get { return typeCase_ == TypeOneofCase.QuestLog ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.QuestLog;
      }
    }

    /// <summary>Field number for the "lifetime_metrics" field.</summary>
    public const int LifetimeMetricsFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics LifetimeMetrics {
      get { return typeCase_ == TypeOneofCase.LifetimeMetrics ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.LifetimeMetrics;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Profile = 1,
      VaultItem = 2,
      CollectionItem = 3,
      CollectionFamily = 4,
      Walkbox = 5,
      PlayerFlags = 6,
      Portkey = 7,
      PlayerActiveBuffList = 8,
      CollectionPage = 9,
      VaultCapacity = 11,
      Cauldron = 12,
      EscrowedRewards = 13,
      ProfessionsProgressV3 = 14,
      QuestLog = 15,
      LifetimeMetrics = 16,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AtlasInventoryItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AtlasInventoryItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      if (!object.Equals(VaultItem, other.VaultItem)) return false;
      if (!object.Equals(CollectionItem, other.CollectionItem)) return false;
      if (!object.Equals(CollectionFamily, other.CollectionFamily)) return false;
      if (!object.Equals(Walkbox, other.Walkbox)) return false;
      if (!object.Equals(PlayerFlags, other.PlayerFlags)) return false;
      if (!object.Equals(Portkey, other.Portkey)) return false;
      if (!object.Equals(PlayerActiveBuffList, other.PlayerActiveBuffList)) return false;
      if (!object.Equals(CollectionPage, other.CollectionPage)) return false;
      if (!object.Equals(VaultCapacity, other.VaultCapacity)) return false;
      if (!object.Equals(Cauldron, other.Cauldron)) return false;
      if (!object.Equals(EscrowedRewards, other.EscrowedRewards)) return false;
      if (!object.Equals(ProfessionsProgressV3, other.ProfessionsProgressV3)) return false;
      if (!object.Equals(QuestLog, other.QuestLog)) return false;
      if (!object.Equals(LifetimeMetrics, other.LifetimeMetrics)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Profile) hash ^= Profile.GetHashCode();
      if (typeCase_ == TypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionItem) hash ^= CollectionItem.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionFamily) hash ^= CollectionFamily.GetHashCode();
      if (typeCase_ == TypeOneofCase.Walkbox) hash ^= Walkbox.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayerFlags) hash ^= PlayerFlags.GetHashCode();
      if (typeCase_ == TypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) hash ^= PlayerActiveBuffList.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionPage) hash ^= CollectionPage.GetHashCode();
      if (typeCase_ == TypeOneofCase.VaultCapacity) hash ^= VaultCapacity.GetHashCode();
      if (typeCase_ == TypeOneofCase.Cauldron) hash ^= Cauldron.GetHashCode();
      if (typeCase_ == TypeOneofCase.EscrowedRewards) hash ^= EscrowedRewards.GetHashCode();
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) hash ^= ProfessionsProgressV3.GetHashCode();
      if (typeCase_ == TypeOneofCase.QuestLog) hash ^= QuestLog.GetHashCode();
      if (typeCase_ == TypeOneofCase.LifetimeMetrics) hash ^= LifetimeMetrics.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Profile) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (typeCase_ == TypeOneofCase.VaultItem) {
        output.WriteRawTag(18);
        output.WriteMessage(VaultItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionItem) {
        output.WriteRawTag(26);
        output.WriteMessage(CollectionItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionFamily) {
        output.WriteRawTag(34);
        output.WriteMessage(CollectionFamily);
      }
      if (typeCase_ == TypeOneofCase.Walkbox) {
        output.WriteRawTag(42);
        output.WriteMessage(Walkbox);
      }
      if (typeCase_ == TypeOneofCase.PlayerFlags) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerFlags);
      }
      if (typeCase_ == TypeOneofCase.Portkey) {
        output.WriteRawTag(58);
        output.WriteMessage(Portkey);
      }
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
        output.WriteRawTag(66);
        output.WriteMessage(PlayerActiveBuffList);
      }
      if (typeCase_ == TypeOneofCase.CollectionPage) {
        output.WriteRawTag(74);
        output.WriteMessage(CollectionPage);
      }
      if (typeCase_ == TypeOneofCase.VaultCapacity) {
        output.WriteRawTag(90);
        output.WriteMessage(VaultCapacity);
      }
      if (typeCase_ == TypeOneofCase.Cauldron) {
        output.WriteRawTag(98);
        output.WriteMessage(Cauldron);
      }
      if (typeCase_ == TypeOneofCase.EscrowedRewards) {
        output.WriteRawTag(106);
        output.WriteMessage(EscrowedRewards);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
        output.WriteRawTag(114);
        output.WriteMessage(ProfessionsProgressV3);
      }
      if (typeCase_ == TypeOneofCase.QuestLog) {
        output.WriteRawTag(122);
        output.WriteMessage(QuestLog);
      }
      if (typeCase_ == TypeOneofCase.LifetimeMetrics) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LifetimeMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Profile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (typeCase_ == TypeOneofCase.VaultItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionFamily) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamily);
      }
      if (typeCase_ == TypeOneofCase.Walkbox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Walkbox);
      }
      if (typeCase_ == TypeOneofCase.PlayerFlags) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerFlags);
      }
      if (typeCase_ == TypeOneofCase.Portkey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portkey);
      }
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerActiveBuffList);
      }
      if (typeCase_ == TypeOneofCase.CollectionPage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionPage);
      }
      if (typeCase_ == TypeOneofCase.VaultCapacity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultCapacity);
      }
      if (typeCase_ == TypeOneofCase.Cauldron) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cauldron);
      }
      if (typeCase_ == TypeOneofCase.EscrowedRewards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EscrowedRewards);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionsProgressV3);
      }
      if (typeCase_ == TypeOneofCase.QuestLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuestLog);
      }
      if (typeCase_ == TypeOneofCase.LifetimeMetrics) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LifetimeMetrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AtlasInventoryItem other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Profile:
          if (Profile == null) {
            Profile = new global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile();
          }
          Profile.MergeFrom(other.Profile);
          break;
        case TypeOneofCase.VaultItem:
          if (VaultItem == null) {
            VaultItem = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem();
          }
          VaultItem.MergeFrom(other.VaultItem);
          break;
        case TypeOneofCase.CollectionItem:
          if (CollectionItem == null) {
            CollectionItem = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem();
          }
          CollectionItem.MergeFrom(other.CollectionItem);
          break;
        case TypeOneofCase.CollectionFamily:
          if (CollectionFamily == null) {
            CollectionFamily = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily();
          }
          CollectionFamily.MergeFrom(other.CollectionFamily);
          break;
        case TypeOneofCase.Walkbox:
          if (Walkbox == null) {
            Walkbox = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem();
          }
          Walkbox.MergeFrom(other.Walkbox);
          break;
        case TypeOneofCase.PlayerFlags:
          if (PlayerFlags == null) {
            PlayerFlags = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags();
          }
          PlayerFlags.MergeFrom(other.PlayerFlags);
          break;
        case TypeOneofCase.Portkey:
          if (Portkey == null) {
            Portkey = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem();
          }
          Portkey.MergeFrom(other.Portkey);
          break;
        case TypeOneofCase.PlayerActiveBuffList:
          if (PlayerActiveBuffList == null) {
            PlayerActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
          }
          PlayerActiveBuffList.MergeFrom(other.PlayerActiveBuffList);
          break;
        case TypeOneofCase.CollectionPage:
          if (CollectionPage == null) {
            CollectionPage = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage();
          }
          CollectionPage.MergeFrom(other.CollectionPage);
          break;
        case TypeOneofCase.VaultCapacity:
          if (VaultCapacity == null) {
            VaultCapacity = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity();
          }
          VaultCapacity.MergeFrom(other.VaultCapacity);
          break;
        case TypeOneofCase.Cauldron:
          if (Cauldron == null) {
            Cauldron = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron();
          }
          Cauldron.MergeFrom(other.Cauldron);
          break;
        case TypeOneofCase.EscrowedRewards:
          if (EscrowedRewards == null) {
            EscrowedRewards = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards();
          }
          EscrowedRewards.MergeFrom(other.EscrowedRewards);
          break;
        case TypeOneofCase.ProfessionsProgressV3:
          if (ProfessionsProgressV3 == null) {
            ProfessionsProgressV3 = new global::WUProtos.Data.Player.PlayerProfessionsProgressV3();
          }
          ProfessionsProgressV3.MergeFrom(other.ProfessionsProgressV3);
          break;
        case TypeOneofCase.QuestLog:
          if (QuestLog == null) {
            QuestLog = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog();
          }
          QuestLog.MergeFrom(other.QuestLog);
          break;
        case TypeOneofCase.LifetimeMetrics:
          if (LifetimeMetrics == null) {
            LifetimeMetrics = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics();
          }
          LifetimeMetrics.MergeFrom(other.LifetimeMetrics);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile();
            if (typeCase_ == TypeOneofCase.Profile) {
              subBuilder.MergeFrom(Profile);
            }
            input.ReadMessage(subBuilder);
            Profile = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultItem();
            if (typeCase_ == TypeOneofCase.VaultItem) {
              subBuilder.MergeFrom(VaultItem);
            }
            input.ReadMessage(subBuilder);
            VaultItem = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionItem();
            if (typeCase_ == TypeOneofCase.CollectionItem) {
              subBuilder.MergeFrom(CollectionItem);
            }
            input.ReadMessage(subBuilder);
            CollectionItem = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionFamily();
            if (typeCase_ == TypeOneofCase.CollectionFamily) {
              subBuilder.MergeFrom(CollectionFamily);
            }
            input.ReadMessage(subBuilder);
            CollectionFamily = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem();
            if (typeCase_ == TypeOneofCase.Walkbox) {
              subBuilder.MergeFrom(Walkbox);
            }
            input.ReadMessage(subBuilder);
            Walkbox = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags();
            if (typeCase_ == TypeOneofCase.PlayerFlags) {
              subBuilder.MergeFrom(PlayerFlags);
            }
            input.ReadMessage(subBuilder);
            PlayerFlags = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryPortkeyItem();
            if (typeCase_ == TypeOneofCase.Portkey) {
              subBuilder.MergeFrom(Portkey);
            }
            input.ReadMessage(subBuilder);
            Portkey = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Buff.ActiveBuffList subBuilder = new global::WUProtos.Data.Buff.ActiveBuffList();
            if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
              subBuilder.MergeFrom(PlayerActiveBuffList);
            }
            input.ReadMessage(subBuilder);
            PlayerActiveBuffList = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCollectionPage();
            if (typeCase_ == TypeOneofCase.CollectionPage) {
              subBuilder.MergeFrom(CollectionPage);
            }
            input.ReadMessage(subBuilder);
            CollectionPage = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryVaultCapacity();
            if (typeCase_ == TypeOneofCase.VaultCapacity) {
              subBuilder.MergeFrom(VaultCapacity);
            }
            input.ReadMessage(subBuilder);
            VaultCapacity = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron();
            if (typeCase_ == TypeOneofCase.Cauldron) {
              subBuilder.MergeFrom(Cauldron);
            }
            input.ReadMessage(subBuilder);
            Cauldron = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryEscrowedRewards();
            if (typeCase_ == TypeOneofCase.EscrowedRewards) {
              subBuilder.MergeFrom(EscrowedRewards);
            }
            input.ReadMessage(subBuilder);
            EscrowedRewards = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.Player.PlayerProfessionsProgressV3 subBuilder = new global::WUProtos.Data.Player.PlayerProfessionsProgressV3();
            if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
              subBuilder.MergeFrom(ProfessionsProgressV3);
            }
            input.ReadMessage(subBuilder);
            ProfessionsProgressV3 = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog();
            if (typeCase_ == TypeOneofCase.QuestLog) {
              subBuilder.MergeFrom(QuestLog);
            }
            input.ReadMessage(subBuilder);
            QuestLog = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics();
            if (typeCase_ == TypeOneofCase.LifetimeMetrics) {
              subBuilder.MergeFrom(LifetimeMetrics);
            }
            input.ReadMessage(subBuilder);
            LifetimeMetrics = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AtlasInventoryItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class InventoryCauldron : pb::IMessage<InventoryCauldron> {
        private static readonly pb::MessageParser<InventoryCauldron> _parser = new pb::MessageParser<InventoryCauldron>(() => new InventoryCauldron());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryCauldron> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCauldron() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCauldron(InventoryCauldron other) : this() {
          id_ = other.id_;
          templateId_ = other.templateId_;
          cauldronSlot_ = other.cauldronSlot_.Clone();
          brewingStartTimestamp_ = other.brewingStartTimestamp_;
          availabilityStartTimestamp_ = other.availabilityStartTimestamp_;
          availabilityTime_ = other.availabilityTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCauldron Clone() {
          return new InventoryCauldron(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "template_id" field.</summary>
        public const int TemplateIdFieldNumber = 2;
        private string templateId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TemplateId {
          get { return templateId_; }
          set {
            templateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cauldron_slot" field.</summary>
        public const int CauldronSlotFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot> _repeated_cauldronSlot_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot> cauldronSlot_ = new pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Types.InventoryCauldronSlot> CauldronSlot {
          get { return cauldronSlot_; }
        }

        /// <summary>Field number for the "brewing_start_timestamp" field.</summary>
        public const int BrewingStartTimestampFieldNumber = 4;
        private long brewingStartTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long BrewingStartTimestamp {
          get { return brewingStartTimestamp_; }
          set {
            brewingStartTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "availability_start_timestamp" field.</summary>
        public const int AvailabilityStartTimestampFieldNumber = 5;
        private long availabilityStartTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AvailabilityStartTimestamp {
          get { return availabilityStartTimestamp_; }
          set {
            availabilityStartTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "availability_time" field.</summary>
        public const int AvailabilityTimeFieldNumber = 6;
        private long availabilityTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AvailabilityTime {
          get { return availabilityTime_; }
          set {
            availabilityTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryCauldron);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryCauldron other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TemplateId != other.TemplateId) return false;
          if(!cauldronSlot_.Equals(other.cauldronSlot_)) return false;
          if (BrewingStartTimestamp != other.BrewingStartTimestamp) return false;
          if (AvailabilityStartTimestamp != other.AvailabilityStartTimestamp) return false;
          if (AvailabilityTime != other.AvailabilityTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0L) hash ^= Id.GetHashCode();
          if (TemplateId.Length != 0) hash ^= TemplateId.GetHashCode();
          hash ^= cauldronSlot_.GetHashCode();
          if (BrewingStartTimestamp != 0L) hash ^= BrewingStartTimestamp.GetHashCode();
          if (AvailabilityStartTimestamp != 0L) hash ^= AvailabilityStartTimestamp.GetHashCode();
          if (AvailabilityTime != 0L) hash ^= AvailabilityTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
          }
          if (TemplateId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TemplateId);
          }
          cauldronSlot_.WriteTo(output, _repeated_cauldronSlot_codec);
          if (BrewingStartTimestamp != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(BrewingStartTimestamp);
          }
          if (AvailabilityStartTimestamp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(AvailabilityStartTimestamp);
          }
          if (AvailabilityTime != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(AvailabilityTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
          }
          if (TemplateId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
          }
          size += cauldronSlot_.CalculateSize(_repeated_cauldronSlot_codec);
          if (BrewingStartTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BrewingStartTimestamp);
          }
          if (AvailabilityStartTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailabilityStartTimestamp);
          }
          if (AvailabilityTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailabilityTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryCauldron other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0L) {
            Id = other.Id;
          }
          if (other.TemplateId.Length != 0) {
            TemplateId = other.TemplateId;
          }
          cauldronSlot_.Add(other.cauldronSlot_);
          if (other.BrewingStartTimestamp != 0L) {
            BrewingStartTimestamp = other.BrewingStartTimestamp;
          }
          if (other.AvailabilityStartTimestamp != 0L) {
            AvailabilityStartTimestamp = other.AvailabilityStartTimestamp;
          }
          if (other.AvailabilityTime != 0L) {
            AvailabilityTime = other.AvailabilityTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt64();
                break;
              }
              case 18: {
                TemplateId = input.ReadString();
                break;
              }
              case 26: {
                cauldronSlot_.AddEntriesFrom(input, _repeated_cauldronSlot_codec);
                break;
              }
              case 32: {
                BrewingStartTimestamp = input.ReadInt64();
                break;
              }
              case 40: {
                AvailabilityStartTimestamp = input.ReadInt64();
                break;
              }
              case 48: {
                AvailabilityTime = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InventoryCauldron message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class InventoryCauldronSlot : pb::IMessage<InventoryCauldronSlot> {
            private static readonly pb::MessageParser<InventoryCauldronSlot> _parser = new pb::MessageParser<InventoryCauldronSlot>(() => new InventoryCauldronSlot());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InventoryCauldronSlot> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryCauldron.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryCauldronSlot() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryCauldronSlot(InventoryCauldronSlot other) : this() {
              rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
              timeToBrew_ = other.timeToBrew_;
              recipeGmtId_ = other.recipeGmtId_;
              masterNoteApplied_ = other.masterNoteApplied_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryCauldronSlot Clone() {
              return new InventoryCauldronSlot(this);
            }

            /// <summary>Field number for the "rewards" field.</summary>
            public const int RewardsFieldNumber = 1;
            private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
              get { return rewards_; }
              set {
                rewards_ = value;
              }
            }

            /// <summary>Field number for the "time_to_brew" field.</summary>
            public const int TimeToBrewFieldNumber = 2;
            private long timeToBrew_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long TimeToBrew {
              get { return timeToBrew_; }
              set {
                timeToBrew_ = value;
              }
            }

            /// <summary>Field number for the "recipe_gmt_id" field.</summary>
            public const int RecipeGmtIdFieldNumber = 3;
            private string recipeGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string RecipeGmtId {
              get { return recipeGmtId_; }
              set {
                recipeGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "master_note_applied" field.</summary>
            public const int MasterNoteAppliedFieldNumber = 4;
            private bool masterNoteApplied_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool MasterNoteApplied {
              get { return masterNoteApplied_; }
              set {
                masterNoteApplied_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InventoryCauldronSlot);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InventoryCauldronSlot other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Rewards, other.Rewards)) return false;
              if (TimeToBrew != other.TimeToBrew) return false;
              if (RecipeGmtId != other.RecipeGmtId) return false;
              if (MasterNoteApplied != other.MasterNoteApplied) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (rewards_ != null) hash ^= Rewards.GetHashCode();
              if (TimeToBrew != 0L) hash ^= TimeToBrew.GetHashCode();
              if (RecipeGmtId.Length != 0) hash ^= RecipeGmtId.GetHashCode();
              if (MasterNoteApplied != false) hash ^= MasterNoteApplied.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (rewards_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Rewards);
              }
              if (TimeToBrew != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(TimeToBrew);
              }
              if (RecipeGmtId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(RecipeGmtId);
              }
              if (MasterNoteApplied != false) {
                output.WriteRawTag(32);
                output.WriteBool(MasterNoteApplied);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (rewards_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
              }
              if (TimeToBrew != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToBrew);
              }
              if (RecipeGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipeGmtId);
              }
              if (MasterNoteApplied != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InventoryCauldronSlot other) {
              if (other == null) {
                return;
              }
              if (other.rewards_ != null) {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                Rewards.MergeFrom(other.Rewards);
              }
              if (other.TimeToBrew != 0L) {
                TimeToBrew = other.TimeToBrew;
              }
              if (other.RecipeGmtId.Length != 0) {
                RecipeGmtId = other.RecipeGmtId;
              }
              if (other.MasterNoteApplied != false) {
                MasterNoteApplied = other.MasterNoteApplied;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (rewards_ == null) {
                      Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                    }
                    input.ReadMessage(Rewards);
                    break;
                  }
                  case 16: {
                    TimeToBrew = input.ReadInt64();
                    break;
                  }
                  case 26: {
                    RecipeGmtId = input.ReadString();
                    break;
                  }
                  case 32: {
                    MasterNoteApplied = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class InventoryFeatureFlags : pb::IMessage<InventoryFeatureFlags> {
        private static readonly pb::MessageParser<InventoryFeatureFlags> _parser = new pb::MessageParser<InventoryFeatureFlags>(() => new InventoryFeatureFlags());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryFeatureFlags> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryFeatureFlags() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryFeatureFlags(InventoryFeatureFlags other) : this() {
          id_ = other.id_;
          flags_ = other.flags_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryFeatureFlags Clone() {
          return new InventoryFeatureFlags(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "flags" field.</summary>
        public const int FlagsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag> _repeated_flags_codec
            = pb::FieldCodec.ForMessage(18, global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag> flags_ = new pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Types.InventoryFeatureFlag> Flags {
          get { return flags_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryFeatureFlags);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryFeatureFlags other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!flags_.Equals(other.flags_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= flags_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          flags_.WriteTo(output, _repeated_flags_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += flags_.CalculateSize(_repeated_flags_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryFeatureFlags other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          flags_.Add(other.flags_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                flags_.AddEntriesFrom(input, _repeated_flags_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InventoryFeatureFlags message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class InventoryFeatureFlag : pb::IMessage<InventoryFeatureFlag> {
            private static readonly pb::MessageParser<InventoryFeatureFlag> _parser = new pb::MessageParser<InventoryFeatureFlag>(() => new InventoryFeatureFlag());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InventoryFeatureFlag> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryFeatureFlags.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryFeatureFlag() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryFeatureFlag(InventoryFeatureFlag other) : this() {
              id_ = other.id_;
              switch (other.ValueCase) {
                case ValueOneofCase.Bval:
                  Bval = other.Bval;
                  break;
                case ValueOneofCase.Lval:
                  Lval = other.Lval;
                  break;
                case ValueOneofCase.Sval:
                  Sval = other.Sval;
                  break;
                case ValueOneofCase.Fval:
                  Fval = other.Fval;
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryFeatureFlag Clone() {
              return new InventoryFeatureFlag(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private string id_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "bval" field.</summary>
            public const int BvalFieldNumber = 2;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Bval {
              get { return valueCase_ == ValueOneofCase.Bval ? (bool) value_ : false; }
              set {
                value_ = value;
                valueCase_ = ValueOneofCase.Bval;
              }
            }

            /// <summary>Field number for the "lval" field.</summary>
            public const int LvalFieldNumber = 3;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Lval {
              get { return valueCase_ == ValueOneofCase.Lval ? (long) value_ : 0L; }
              set {
                value_ = value;
                valueCase_ = ValueOneofCase.Lval;
              }
            }

            /// <summary>Field number for the "sval" field.</summary>
            public const int SvalFieldNumber = 4;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Sval {
              get { return valueCase_ == ValueOneofCase.Sval ? (string) value_ : ""; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                valueCase_ = ValueOneofCase.Sval;
              }
            }

            /// <summary>Field number for the "fval" field.</summary>
            public const int FvalFieldNumber = 5;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Fval {
              get { return valueCase_ == ValueOneofCase.Fval ? (float) value_ : 0F; }
              set {
                value_ = value;
                valueCase_ = ValueOneofCase.Fval;
              }
            }

            private object value_;
            /// <summary>Enum of possible cases for the "Value" oneof.</summary>
            public enum ValueOneofCase {
              None = 0,
              Bval = 2,
              Lval = 3,
              Sval = 4,
              Fval = 5,
            }
            private ValueOneofCase valueCase_ = ValueOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ValueOneofCase ValueCase {
              get { return valueCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              valueCase_ = ValueOneofCase.None;
              value_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InventoryFeatureFlag);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InventoryFeatureFlag other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (Bval != other.Bval) return false;
              if (Lval != other.Lval) return false;
              if (Sval != other.Sval) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fval, other.Fval)) return false;
              if (ValueCase != other.ValueCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (valueCase_ == ValueOneofCase.Bval) hash ^= Bval.GetHashCode();
              if (valueCase_ == ValueOneofCase.Lval) hash ^= Lval.GetHashCode();
              if (valueCase_ == ValueOneofCase.Sval) hash ^= Sval.GetHashCode();
              if (valueCase_ == ValueOneofCase.Fval) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fval);
              hash ^= (int) valueCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Id);
              }
              if (valueCase_ == ValueOneofCase.Bval) {
                output.WriteRawTag(16);
                output.WriteBool(Bval);
              }
              if (valueCase_ == ValueOneofCase.Lval) {
                output.WriteRawTag(24);
                output.WriteInt64(Lval);
              }
              if (valueCase_ == ValueOneofCase.Sval) {
                output.WriteRawTag(34);
                output.WriteString(Sval);
              }
              if (valueCase_ == ValueOneofCase.Fval) {
                output.WriteRawTag(45);
                output.WriteFloat(Fval);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (valueCase_ == ValueOneofCase.Bval) {
                size += 1 + 1;
              }
              if (valueCase_ == ValueOneofCase.Lval) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lval);
              }
              if (valueCase_ == ValueOneofCase.Sval) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Sval);
              }
              if (valueCase_ == ValueOneofCase.Fval) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InventoryFeatureFlag other) {
              if (other == null) {
                return;
              }
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              switch (other.ValueCase) {
                case ValueOneofCase.Bval:
                  Bval = other.Bval;
                  break;
                case ValueOneofCase.Lval:
                  Lval = other.Lval;
                  break;
                case ValueOneofCase.Sval:
                  Sval = other.Sval;
                  break;
                case ValueOneofCase.Fval:
                  Fval = other.Fval;
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Id = input.ReadString();
                    break;
                  }
                  case 16: {
                    Bval = input.ReadBool();
                    break;
                  }
                  case 24: {
                    Lval = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    Sval = input.ReadString();
                    break;
                  }
                  case 45: {
                    Fval = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class InventoryWalkboxItem : pb::IMessage<InventoryWalkboxItem> {
        private static readonly pb::MessageParser<InventoryWalkboxItem> _parser = new pb::MessageParser<InventoryWalkboxItem>(() => new InventoryWalkboxItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryWalkboxItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryWalkboxItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryWalkboxItem(InventoryWalkboxItem other) : this() {
          id_ = other.id_;
          templateId_ = other.templateId_;
          status_ = other.status_;
          completionPedometerKm_ = other.completionPedometerKm_;
          timestamp_ = other.timestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryWalkboxItem Clone() {
          return new InventoryWalkboxItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "template_id" field.</summary>
        public const int TemplateIdFieldNumber = 2;
        private string templateId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TemplateId {
          get { return templateId_; }
          set {
            templateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 3;
        private global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem.Types.UnlockingStatus status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem.Types.UnlockingStatus Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "completion_pedometer_km" field.</summary>
        public const int CompletionPedometerKmFieldNumber = 4;
        private float completionPedometerKm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CompletionPedometerKm {
          get { return completionPedometerKm_; }
          set {
            completionPedometerKm_ = value;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 5;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryWalkboxItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryWalkboxItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TemplateId != other.TemplateId) return false;
          if (Status != other.Status) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CompletionPedometerKm, other.CompletionPedometerKm)) return false;
          if (Timestamp != other.Timestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0L) hash ^= Id.GetHashCode();
          if (TemplateId.Length != 0) hash ^= TemplateId.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          if (CompletionPedometerKm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CompletionPedometerKm);
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
          }
          if (TemplateId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TemplateId);
          }
          if (Status != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Status);
          }
          if (CompletionPedometerKm != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(CompletionPedometerKm);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(Timestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
          }
          if (TemplateId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (CompletionPedometerKm != 0F) {
            size += 1 + 4;
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryWalkboxItem other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0L) {
            Id = other.Id;
          }
          if (other.TemplateId.Length != 0) {
            TemplateId = other.TemplateId;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.CompletionPedometerKm != 0F) {
            CompletionPedometerKm = other.CompletionPedometerKm;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt64();
                break;
              }
              case 18: {
                TemplateId = input.ReadString();
                break;
              }
              case 24: {
                Status = (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryWalkboxItem.Types.UnlockingStatus) input.ReadEnum();
                break;
              }
              case 37: {
                CompletionPedometerKm = input.ReadFloat();
                break;
              }
              case 40: {
                Timestamp = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InventoryWalkboxItem message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum UnlockingStatus {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("NOT_STARTED")] NotStarted = 1,
            [pbr::OriginalName("INFINITE_UNLOCKER")] InfiniteUnlocker = 2,
            [pbr::OriginalName("PREMIUM_UNLOCKER")] PremiumUnlocker = 3,
          }

        }
        #endregion

      }

      public sealed partial class InventoryVaultItem : pb::IMessage<InventoryVaultItem> {
        private static readonly pb::MessageParser<InventoryVaultItem> _parser = new pb::MessageParser<InventoryVaultItem>(() => new InventoryVaultItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryVaultItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryVaultItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryVaultItem(InventoryVaultItem other) : this() {
          id_ = other.id_;
          qty_ = other.qty_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryVaultItem Clone() {
          return new InventoryVaultItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "qty" field.</summary>
        public const int QtyFieldNumber = 2;
        private long qty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Qty {
          get { return qty_; }
          set {
            qty_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryVaultItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryVaultItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Qty != other.Qty) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Qty != 0L) hash ^= Qty.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Qty != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Qty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Qty != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Qty);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryVaultItem other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Qty != 0L) {
            Qty = other.Qty;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                Qty = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class InventoryVaultCapacity : pb::IMessage<InventoryVaultCapacity> {
        private static readonly pb::MessageParser<InventoryVaultCapacity> _parser = new pb::MessageParser<InventoryVaultCapacity>(() => new InventoryVaultCapacity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryVaultCapacity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryVaultCapacity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryVaultCapacity(InventoryVaultCapacity other) : this() {
          categoryCapacity_ = other.categoryCapacity_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryVaultCapacity Clone() {
          return new InventoryVaultCapacity(this);
        }

        /// <summary>Field number for the "category_capacity" field.</summary>
        public const int CategoryCapacityFieldNumber = 1;
        private static readonly pbc::MapField<string, long>.Codec _map_categoryCapacity_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 10);
        private readonly pbc::MapField<string, long> categoryCapacity_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> CategoryCapacity {
          get { return categoryCapacity_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryVaultCapacity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryVaultCapacity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!CategoryCapacity.Equals(other.CategoryCapacity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= CategoryCapacity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          categoryCapacity_.WriteTo(output, _map_categoryCapacity_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += categoryCapacity_.CalculateSize(_map_categoryCapacity_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryVaultCapacity other) {
          if (other == null) {
            return;
          }
          categoryCapacity_.Add(other.categoryCapacity_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                categoryCapacity_.AddEntriesFrom(input, _map_categoryCapacity_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class InventoryPortkeyItem : pb::IMessage<InventoryPortkeyItem> {
        private static readonly pb::MessageParser<InventoryPortkeyItem> _parser = new pb::MessageParser<InventoryPortkeyItem>(() => new InventoryPortkeyItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryPortkeyItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryPortkeyItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryPortkeyItem(InventoryPortkeyItem other) : this() {
          id_ = other.id_;
          timestamp_ = other.timestamp_;
          templateId_ = other.templateId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryPortkeyItem Clone() {
          return new InventoryPortkeyItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "template_id" field.</summary>
        public const int TemplateIdFieldNumber = 3;
        private string templateId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TemplateId {
          get { return templateId_; }
          set {
            templateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryPortkeyItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryPortkeyItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Timestamp != other.Timestamp) return false;
          if (TemplateId != other.TemplateId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0L) hash ^= Id.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (TemplateId.Length != 0) hash ^= TemplateId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Timestamp);
          }
          if (TemplateId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TemplateId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (TemplateId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryPortkeyItem other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0L) {
            Id = other.Id;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.TemplateId.Length != 0) {
            TemplateId = other.TemplateId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt64();
                break;
              }
              case 16: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 26: {
                TemplateId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class InventoryQuestLog : pb::IMessage<InventoryQuestLog> {
        private static readonly pb::MessageParser<InventoryQuestLog> _parser = new pb::MessageParser<InventoryQuestLog>(() => new InventoryQuestLog());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryQuestLog> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryQuestLog() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryQuestLog(InventoryQuestLog other) : this() {
          quests_ = other.quests_.Clone();
          completedQuests_ = other.completedQuests_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryQuestLog Clone() {
          return new InventoryQuestLog(this);
        }

        /// <summary>Field number for the "quests" field.</summary>
        public const int QuestsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest> _repeated_quests_codec
            = pb::FieldCodec.ForMessage(10, global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest> quests_ = new pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest> Quests {
          get { return quests_; }
        }

        /// <summary>Field number for the "completed_quests" field.</summary>
        public const int CompletedQuestsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest> _repeated_completedQuests_codec
            = pb::FieldCodec.ForMessage(18, global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest> completedQuests_ = new pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryCompletedQuest> CompletedQuests {
          get { return completedQuests_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryQuestLog);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryQuestLog other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!quests_.Equals(other.quests_)) return false;
          if(!completedQuests_.Equals(other.completedQuests_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= quests_.GetHashCode();
          hash ^= completedQuests_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          quests_.WriteTo(output, _repeated_quests_codec);
          completedQuests_.WriteTo(output, _repeated_completedQuests_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += quests_.CalculateSize(_repeated_quests_codec);
          size += completedQuests_.CalculateSize(_repeated_completedQuests_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryQuestLog other) {
          if (other == null) {
            return;
          }
          quests_.Add(other.quests_);
          completedQuests_.Add(other.completedQuests_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                quests_.AddEntriesFrom(input, _repeated_quests_codec);
                break;
              }
              case 18: {
                completedQuests_.AddEntriesFrom(input, _repeated_completedQuests_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InventoryQuestLog message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class InventoryCompletedQuest : pb::IMessage<InventoryCompletedQuest> {
            private static readonly pb::MessageParser<InventoryCompletedQuest> _parser = new pb::MessageParser<InventoryCompletedQuest>(() => new InventoryCompletedQuest());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InventoryCompletedQuest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryCompletedQuest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryCompletedQuest(InventoryCompletedQuest other) : this() {
              questGmtId_ = other.questGmtId_;
              completedDaySinceEpochIfDaily_ = other.completedDaySinceEpochIfDaily_;
              completedDaySinceEpoch_ = other.completedDaySinceEpoch_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryCompletedQuest Clone() {
              return new InventoryCompletedQuest(this);
            }

            /// <summary>Field number for the "quest_gmt_id" field.</summary>
            public const int QuestGmtIdFieldNumber = 1;
            private string questGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string QuestGmtId {
              get { return questGmtId_; }
              set {
                questGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "completed_day_since_epoch_if_daily" field.</summary>
            public const int CompletedDaySinceEpochIfDailyFieldNumber = 2;
            private long completedDaySinceEpochIfDaily_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CompletedDaySinceEpochIfDaily {
              get { return completedDaySinceEpochIfDaily_; }
              set {
                completedDaySinceEpochIfDaily_ = value;
              }
            }

            /// <summary>Field number for the "completed_day_since_epoch" field.</summary>
            public const int CompletedDaySinceEpochFieldNumber = 3;
            private long completedDaySinceEpoch_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CompletedDaySinceEpoch {
              get { return completedDaySinceEpoch_; }
              set {
                completedDaySinceEpoch_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InventoryCompletedQuest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InventoryCompletedQuest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (QuestGmtId != other.QuestGmtId) return false;
              if (CompletedDaySinceEpochIfDaily != other.CompletedDaySinceEpochIfDaily) return false;
              if (CompletedDaySinceEpoch != other.CompletedDaySinceEpoch) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (QuestGmtId.Length != 0) hash ^= QuestGmtId.GetHashCode();
              if (CompletedDaySinceEpochIfDaily != 0L) hash ^= CompletedDaySinceEpochIfDaily.GetHashCode();
              if (CompletedDaySinceEpoch != 0L) hash ^= CompletedDaySinceEpoch.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (QuestGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(QuestGmtId);
              }
              if (CompletedDaySinceEpochIfDaily != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(CompletedDaySinceEpochIfDaily);
              }
              if (CompletedDaySinceEpoch != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(CompletedDaySinceEpoch);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (QuestGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestGmtId);
              }
              if (CompletedDaySinceEpochIfDaily != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompletedDaySinceEpochIfDaily);
              }
              if (CompletedDaySinceEpoch != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompletedDaySinceEpoch);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InventoryCompletedQuest other) {
              if (other == null) {
                return;
              }
              if (other.QuestGmtId.Length != 0) {
                QuestGmtId = other.QuestGmtId;
              }
              if (other.CompletedDaySinceEpochIfDaily != 0L) {
                CompletedDaySinceEpochIfDaily = other.CompletedDaySinceEpochIfDaily;
              }
              if (other.CompletedDaySinceEpoch != 0L) {
                CompletedDaySinceEpoch = other.CompletedDaySinceEpoch;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    QuestGmtId = input.ReadString();
                    break;
                  }
                  case 16: {
                    CompletedDaySinceEpochIfDaily = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    CompletedDaySinceEpoch = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class InventoryInProgressQuest : pb::IMessage<InventoryInProgressQuest> {
            private static readonly pb::MessageParser<InventoryInProgressQuest> _parser = new pb::MessageParser<InventoryInProgressQuest>(() => new InventoryInProgressQuest());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InventoryInProgressQuest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryInProgressQuest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryInProgressQuest(InventoryInProgressQuest other) : this() {
              questGmtId_ = other.questGmtId_;
              progressPerTask_ = other.progressPerTask_.Clone();
              version_ = other.version_;
              startDaySinceEpochIfDaily_ = other.startDaySinceEpochIfDaily_;
              startDaySinceEpoch_ = other.startDaySinceEpoch_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InventoryInProgressQuest Clone() {
              return new InventoryInProgressQuest(this);
            }

            /// <summary>Field number for the "quest_gmt_id" field.</summary>
            public const int QuestGmtIdFieldNumber = 1;
            private string questGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string QuestGmtId {
              get { return questGmtId_; }
              set {
                questGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "progress_per_task" field.</summary>
            public const int ProgressPerTaskFieldNumber = 2;
            private static readonly pb::FieldCodec<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress> _repeated_progressPerTask_codec
                = pb::FieldCodec.ForMessage(18, global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Parser);
            private readonly pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress> progressPerTask_ = new pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress> ProgressPerTask {
              get { return progressPerTask_; }
            }

            /// <summary>Field number for the "version" field.</summary>
            public const int VersionFieldNumber = 3;
            private int version_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Version {
              get { return version_; }
              set {
                version_ = value;
              }
            }

            /// <summary>Field number for the "start_day_since_epoch_if_daily" field.</summary>
            public const int StartDaySinceEpochIfDailyFieldNumber = 4;
            private long startDaySinceEpochIfDaily_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long StartDaySinceEpochIfDaily {
              get { return startDaySinceEpochIfDaily_; }
              set {
                startDaySinceEpochIfDaily_ = value;
              }
            }

            /// <summary>Field number for the "start_day_since_epoch" field.</summary>
            public const int StartDaySinceEpochFieldNumber = 5;
            private long startDaySinceEpoch_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long StartDaySinceEpoch {
              get { return startDaySinceEpoch_; }
              set {
                startDaySinceEpoch_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InventoryInProgressQuest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InventoryInProgressQuest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (QuestGmtId != other.QuestGmtId) return false;
              if(!progressPerTask_.Equals(other.progressPerTask_)) return false;
              if (Version != other.Version) return false;
              if (StartDaySinceEpochIfDaily != other.StartDaySinceEpochIfDaily) return false;
              if (StartDaySinceEpoch != other.StartDaySinceEpoch) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (QuestGmtId.Length != 0) hash ^= QuestGmtId.GetHashCode();
              hash ^= progressPerTask_.GetHashCode();
              if (Version != 0) hash ^= Version.GetHashCode();
              if (StartDaySinceEpochIfDaily != 0L) hash ^= StartDaySinceEpochIfDaily.GetHashCode();
              if (StartDaySinceEpoch != 0L) hash ^= StartDaySinceEpoch.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (QuestGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(QuestGmtId);
              }
              progressPerTask_.WriteTo(output, _repeated_progressPerTask_codec);
              if (Version != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(Version);
              }
              if (StartDaySinceEpochIfDaily != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(StartDaySinceEpochIfDaily);
              }
              if (StartDaySinceEpoch != 0L) {
                output.WriteRawTag(40);
                output.WriteInt64(StartDaySinceEpoch);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (QuestGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestGmtId);
              }
              size += progressPerTask_.CalculateSize(_repeated_progressPerTask_codec);
              if (Version != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
              }
              if (StartDaySinceEpochIfDaily != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDaySinceEpochIfDaily);
              }
              if (StartDaySinceEpoch != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDaySinceEpoch);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InventoryInProgressQuest other) {
              if (other == null) {
                return;
              }
              if (other.QuestGmtId.Length != 0) {
                QuestGmtId = other.QuestGmtId;
              }
              progressPerTask_.Add(other.progressPerTask_);
              if (other.Version != 0) {
                Version = other.Version;
              }
              if (other.StartDaySinceEpochIfDaily != 0L) {
                StartDaySinceEpochIfDaily = other.StartDaySinceEpochIfDaily;
              }
              if (other.StartDaySinceEpoch != 0L) {
                StartDaySinceEpoch = other.StartDaySinceEpoch;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    QuestGmtId = input.ReadString();
                    break;
                  }
                  case 18: {
                    progressPerTask_.AddEntriesFrom(input, _repeated_progressPerTask_codec);
                    break;
                  }
                  case 24: {
                    Version = input.ReadInt32();
                    break;
                  }
                  case 32: {
                    StartDaySinceEpochIfDaily = input.ReadInt64();
                    break;
                  }
                  case 40: {
                    StartDaySinceEpoch = input.ReadInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the InventoryInProgressQuest message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class QuestProgress : pb::IMessage<QuestProgress> {
                private static readonly pb::MessageParser<QuestProgress> _parser = new pb::MessageParser<QuestProgress>(() => new QuestProgress());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<QuestProgress> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QuestProgress() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QuestProgress(QuestProgress other) : this() {
                  switch (other.TypeCase) {
                    case TypeOneofCase.ReqProgress:
                      ReqProgress = other.ReqProgress.Clone();
                      break;
                    case TypeOneofCase.HookProgress:
                      HookProgress = other.HookProgress.Clone();
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QuestProgress Clone() {
                  return new QuestProgress(this);
                }

                /// <summary>Field number for the "req_progress" field.</summary>
                public const int ReqProgressFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress ReqProgress {
                  get { return typeCase_ == TypeOneofCase.ReqProgress ? (global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress) type_ : null; }
                  set {
                    type_ = value;
                    typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ReqProgress;
                  }
                }

                /// <summary>Field number for the "hook_progress" field.</summary>
                public const int HookProgressFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::WUProtos.Data.HookQuestProgress HookProgress {
                  get { return typeCase_ == TypeOneofCase.HookProgress ? (global::WUProtos.Data.HookQuestProgress) type_ : null; }
                  set {
                    type_ = value;
                    typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.HookProgress;
                  }
                }

                private object type_;
                /// <summary>Enum of possible cases for the "Type" oneof.</summary>
                public enum TypeOneofCase {
                  None = 0,
                  ReqProgress = 1,
                  HookProgress = 2,
                }
                private TypeOneofCase typeCase_ = TypeOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TypeOneofCase TypeCase {
                  get { return typeCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearType() {
                  typeCase_ = TypeOneofCase.None;
                  type_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as QuestProgress);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(QuestProgress other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(ReqProgress, other.ReqProgress)) return false;
                  if (!object.Equals(HookProgress, other.HookProgress)) return false;
                  if (TypeCase != other.TypeCase) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (typeCase_ == TypeOneofCase.ReqProgress) hash ^= ReqProgress.GetHashCode();
                  if (typeCase_ == TypeOneofCase.HookProgress) hash ^= HookProgress.GetHashCode();
                  hash ^= (int) typeCase_;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (typeCase_ == TypeOneofCase.ReqProgress) {
                    output.WriteRawTag(10);
                    output.WriteMessage(ReqProgress);
                  }
                  if (typeCase_ == TypeOneofCase.HookProgress) {
                    output.WriteRawTag(18);
                    output.WriteMessage(HookProgress);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (typeCase_ == TypeOneofCase.ReqProgress) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqProgress);
                  }
                  if (typeCase_ == TypeOneofCase.HookProgress) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(HookProgress);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(QuestProgress other) {
                  if (other == null) {
                    return;
                  }
                  switch (other.TypeCase) {
                    case TypeOneofCase.ReqProgress:
                      if (ReqProgress == null) {
                        ReqProgress = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress();
                      }
                      ReqProgress.MergeFrom(other.ReqProgress);
                      break;
                    case TypeOneofCase.HookProgress:
                      if (HookProgress == null) {
                        HookProgress = new global::WUProtos.Data.HookQuestProgress();
                      }
                      HookProgress.MergeFrom(other.HookProgress);
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress subBuilder = new global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Types.RequirementsQuestProgress();
                        if (typeCase_ == TypeOneofCase.ReqProgress) {
                          subBuilder.MergeFrom(ReqProgress);
                        }
                        input.ReadMessage(subBuilder);
                        ReqProgress = subBuilder;
                        break;
                      }
                      case 18: {
                        global::WUProtos.Data.HookQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress();
                        if (typeCase_ == TypeOneofCase.HookProgress) {
                          subBuilder.MergeFrom(HookProgress);
                        }
                        input.ReadMessage(subBuilder);
                        HookProgress = subBuilder;
                        break;
                      }
                    }
                  }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the QuestProgress message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  public sealed partial class RequirementsQuestProgress : pb::IMessage<RequirementsQuestProgress> {
                    private static readonly pb::MessageParser<RequirementsQuestProgress> _parser = new pb::MessageParser<RequirementsQuestProgress>(() => new RequirementsQuestProgress());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<RequirementsQuestProgress> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.InventoryQuestLog.Types.InventoryInProgressQuest.Types.QuestProgress.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public RequirementsQuestProgress() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public RequirementsQuestProgress(RequirementsQuestProgress other) : this() {
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public RequirementsQuestProgress Clone() {
                      return new RequirementsQuestProgress(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as RequirementsQuestProgress);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(RequirementsQuestProgress other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(RequirementsQuestProgress other) {
                      if (other == null) {
                        return;
                      }
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                        }
                      }
                    }

                  }

                }
                #endregion

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class InventoryEscrowedRewards : pb::IMessage<InventoryEscrowedRewards> {
        private static readonly pb::MessageParser<InventoryEscrowedRewards> _parser = new pb::MessageParser<InventoryEscrowedRewards>(() => new InventoryEscrowedRewards());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryEscrowedRewards> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryEscrowedRewards() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryEscrowedRewards(InventoryEscrowedRewards other) : this() {
          rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryEscrowedRewards Clone() {
          return new InventoryEscrowedRewards(this);
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 1;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
          get { return rewards_; }
          set {
            rewards_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryEscrowedRewards);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryEscrowedRewards other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Rewards, other.Rewards)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (rewards_ != null) hash ^= Rewards.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (rewards_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rewards);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (rewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryEscrowedRewards other) {
          if (other == null) {
            return;
          }
          if (other.rewards_ != null) {
            if (rewards_ == null) {
              Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Rewards.MergeFrom(other.Rewards);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Rewards);
                break;
              }
            }
          }
        }

      }

      public sealed partial class InventoryCollectionPage : pb::IMessage<InventoryCollectionPage> {
        private static readonly pb::MessageParser<InventoryCollectionPage> _parser = new pb::MessageParser<InventoryCollectionPage>(() => new InventoryCollectionPage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryCollectionPage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionPage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionPage(InventoryCollectionPage other) : this() {
          id_ = other.id_;
          firstStickerGmtId_ = other.firstStickerGmtId_;
          firstStickerTimestamp_ = other.firstStickerTimestamp_;
          lastStickerGmtId_ = other.lastStickerGmtId_;
          lastStickerTimestamp_ = other.lastStickerTimestamp_;
          level_ = other.level_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionPage Clone() {
          return new InventoryCollectionPage(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "first_sticker_gmt_id" field.</summary>
        public const int FirstStickerGmtIdFieldNumber = 2;
        private string firstStickerGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirstStickerGmtId {
          get { return firstStickerGmtId_; }
          set {
            firstStickerGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "first_sticker_timestamp" field.</summary>
        public const int FirstStickerTimestampFieldNumber = 3;
        private long firstStickerTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FirstStickerTimestamp {
          get { return firstStickerTimestamp_; }
          set {
            firstStickerTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "last_sticker_gmt_id" field.</summary>
        public const int LastStickerGmtIdFieldNumber = 4;
        private string lastStickerGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastStickerGmtId {
          get { return lastStickerGmtId_; }
          set {
            lastStickerGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "last_sticker_timestamp" field.</summary>
        public const int LastStickerTimestampFieldNumber = 5;
        private long lastStickerTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastStickerTimestamp {
          get { return lastStickerTimestamp_; }
          set {
            lastStickerTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 6;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryCollectionPage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryCollectionPage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (FirstStickerGmtId != other.FirstStickerGmtId) return false;
          if (FirstStickerTimestamp != other.FirstStickerTimestamp) return false;
          if (LastStickerGmtId != other.LastStickerGmtId) return false;
          if (LastStickerTimestamp != other.LastStickerTimestamp) return false;
          if (Level != other.Level) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (FirstStickerGmtId.Length != 0) hash ^= FirstStickerGmtId.GetHashCode();
          if (FirstStickerTimestamp != 0L) hash ^= FirstStickerTimestamp.GetHashCode();
          if (LastStickerGmtId.Length != 0) hash ^= LastStickerGmtId.GetHashCode();
          if (LastStickerTimestamp != 0L) hash ^= LastStickerTimestamp.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (FirstStickerGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FirstStickerGmtId);
          }
          if (FirstStickerTimestamp != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(FirstStickerTimestamp);
          }
          if (LastStickerGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LastStickerGmtId);
          }
          if (LastStickerTimestamp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(LastStickerTimestamp);
          }
          if (Level != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Level);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (FirstStickerGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstStickerGmtId);
          }
          if (FirstStickerTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstStickerTimestamp);
          }
          if (LastStickerGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LastStickerGmtId);
          }
          if (LastStickerTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastStickerTimestamp);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryCollectionPage other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.FirstStickerGmtId.Length != 0) {
            FirstStickerGmtId = other.FirstStickerGmtId;
          }
          if (other.FirstStickerTimestamp != 0L) {
            FirstStickerTimestamp = other.FirstStickerTimestamp;
          }
          if (other.LastStickerGmtId.Length != 0) {
            LastStickerGmtId = other.LastStickerGmtId;
          }
          if (other.LastStickerTimestamp != 0L) {
            LastStickerTimestamp = other.LastStickerTimestamp;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                FirstStickerGmtId = input.ReadString();
                break;
              }
              case 24: {
                FirstStickerTimestamp = input.ReadInt64();
                break;
              }
              case 34: {
                LastStickerGmtId = input.ReadString();
                break;
              }
              case 40: {
                LastStickerTimestamp = input.ReadInt64();
                break;
              }
              case 48: {
                Level = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class InventoryCollectionItem : pb::IMessage<InventoryCollectionItem> {
        private static readonly pb::MessageParser<InventoryCollectionItem> _parser = new pb::MessageParser<InventoryCollectionItem>(() => new InventoryCollectionItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryCollectionItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionItem(InventoryCollectionItem other) : this() {
          id_ = other.id_;
          timesEncountered_ = other.timesEncountered_;
          timesReturned_ = other.timesReturned_;
          firstTimeRewardsCollected_ = other.firstTimeRewardsCollected_;
          foundLocation_ = other.foundLocation_;
          foundTime_ = other.foundTime_;
          placed_ = other.placed_;
          currentReturned_ = other.currentReturned_;
          shards_ = other.shards_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionItem Clone() {
          return new InventoryCollectionItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "times_encountered" field.</summary>
        public const int TimesEncounteredFieldNumber = 2;
        private int timesEncountered_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TimesEncountered {
          get { return timesEncountered_; }
          set {
            timesEncountered_ = value;
          }
        }

        /// <summary>Field number for the "times_returned" field.</summary>
        public const int TimesReturnedFieldNumber = 3;
        private int timesReturned_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TimesReturned {
          get { return timesReturned_; }
          set {
            timesReturned_ = value;
          }
        }

        /// <summary>Field number for the "first_time_rewards_collected" field.</summary>
        public const int FirstTimeRewardsCollectedFieldNumber = 4;
        private bool firstTimeRewardsCollected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FirstTimeRewardsCollected {
          get { return firstTimeRewardsCollected_; }
          set {
            firstTimeRewardsCollected_ = value;
          }
        }

        /// <summary>Field number for the "found_location" field.</summary>
        public const int FoundLocationFieldNumber = 5;
        private string foundLocation_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FoundLocation {
          get { return foundLocation_; }
          set {
            foundLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "found_time" field.</summary>
        public const int FoundTimeFieldNumber = 6;
        private long foundTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FoundTime {
          get { return foundTime_; }
          set {
            foundTime_ = value;
          }
        }

        /// <summary>Field number for the "placed" field.</summary>
        public const int PlacedFieldNumber = 8;
        private bool placed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Placed {
          get { return placed_; }
          set {
            placed_ = value;
          }
        }

        /// <summary>Field number for the "current_returned" field.</summary>
        public const int CurrentReturnedFieldNumber = 9;
        private int currentReturned_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentReturned {
          get { return currentReturned_; }
          set {
            currentReturned_ = value;
          }
        }

        /// <summary>Field number for the "shards" field.</summary>
        public const int ShardsFieldNumber = 10;
        private uint shards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Shards {
          get { return shards_; }
          set {
            shards_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryCollectionItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryCollectionItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TimesEncountered != other.TimesEncountered) return false;
          if (TimesReturned != other.TimesReturned) return false;
          if (FirstTimeRewardsCollected != other.FirstTimeRewardsCollected) return false;
          if (FoundLocation != other.FoundLocation) return false;
          if (FoundTime != other.FoundTime) return false;
          if (Placed != other.Placed) return false;
          if (CurrentReturned != other.CurrentReturned) return false;
          if (Shards != other.Shards) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (TimesEncountered != 0) hash ^= TimesEncountered.GetHashCode();
          if (TimesReturned != 0) hash ^= TimesReturned.GetHashCode();
          if (FirstTimeRewardsCollected != false) hash ^= FirstTimeRewardsCollected.GetHashCode();
          if (FoundLocation.Length != 0) hash ^= FoundLocation.GetHashCode();
          if (FoundTime != 0L) hash ^= FoundTime.GetHashCode();
          if (Placed != false) hash ^= Placed.GetHashCode();
          if (CurrentReturned != 0) hash ^= CurrentReturned.GetHashCode();
          if (Shards != 0) hash ^= Shards.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (TimesEncountered != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TimesEncountered);
          }
          if (TimesReturned != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(TimesReturned);
          }
          if (FirstTimeRewardsCollected != false) {
            output.WriteRawTag(32);
            output.WriteBool(FirstTimeRewardsCollected);
          }
          if (FoundLocation.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(FoundLocation);
          }
          if (FoundTime != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(FoundTime);
          }
          if (Placed != false) {
            output.WriteRawTag(64);
            output.WriteBool(Placed);
          }
          if (CurrentReturned != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(CurrentReturned);
          }
          if (Shards != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Shards);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (TimesEncountered != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesEncountered);
          }
          if (TimesReturned != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesReturned);
          }
          if (FirstTimeRewardsCollected != false) {
            size += 1 + 1;
          }
          if (FoundLocation.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FoundLocation);
          }
          if (FoundTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FoundTime);
          }
          if (Placed != false) {
            size += 1 + 1;
          }
          if (CurrentReturned != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentReturned);
          }
          if (Shards != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shards);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryCollectionItem other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.TimesEncountered != 0) {
            TimesEncountered = other.TimesEncountered;
          }
          if (other.TimesReturned != 0) {
            TimesReturned = other.TimesReturned;
          }
          if (other.FirstTimeRewardsCollected != false) {
            FirstTimeRewardsCollected = other.FirstTimeRewardsCollected;
          }
          if (other.FoundLocation.Length != 0) {
            FoundLocation = other.FoundLocation;
          }
          if (other.FoundTime != 0L) {
            FoundTime = other.FoundTime;
          }
          if (other.Placed != false) {
            Placed = other.Placed;
          }
          if (other.CurrentReturned != 0) {
            CurrentReturned = other.CurrentReturned;
          }
          if (other.Shards != 0) {
            Shards = other.Shards;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                TimesEncountered = input.ReadInt32();
                break;
              }
              case 24: {
                TimesReturned = input.ReadInt32();
                break;
              }
              case 32: {
                FirstTimeRewardsCollected = input.ReadBool();
                break;
              }
              case 42: {
                FoundLocation = input.ReadString();
                break;
              }
              case 48: {
                FoundTime = input.ReadInt64();
                break;
              }
              case 64: {
                Placed = input.ReadBool();
                break;
              }
              case 72: {
                CurrentReturned = input.ReadInt32();
                break;
              }
              case 80: {
                Shards = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class InventoryCollectionFamily : pb::IMessage<InventoryCollectionFamily> {
        private static readonly pb::MessageParser<InventoryCollectionFamily> _parser = new pb::MessageParser<InventoryCollectionFamily>(() => new InventoryCollectionFamily());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryCollectionFamily> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionFamily() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionFamily(InventoryCollectionFamily other) : this() {
          id_ = other.id_;
          familyXp_ = other.familyXp_;
          familyLevel_ = other.familyLevel_;
          rewardsCollectedLevel_ = other.rewardsCollectedLevel_;
          currentChestsOpened_ = other.currentChestsOpened_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryCollectionFamily Clone() {
          return new InventoryCollectionFamily(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "family_xp" field.</summary>
        public const int FamilyXpFieldNumber = 2;
        private int familyXp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FamilyXp {
          get { return familyXp_; }
          set {
            familyXp_ = value;
          }
        }

        /// <summary>Field number for the "family_level" field.</summary>
        public const int FamilyLevelFieldNumber = 3;
        private int familyLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FamilyLevel {
          get { return familyLevel_; }
          set {
            familyLevel_ = value;
          }
        }

        /// <summary>Field number for the "rewards_collected_level" field.</summary>
        public const int RewardsCollectedLevelFieldNumber = 4;
        private int rewardsCollectedLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RewardsCollectedLevel {
          get { return rewardsCollectedLevel_; }
          set {
            rewardsCollectedLevel_ = value;
          }
        }

        /// <summary>Field number for the "current_chests_opened" field.</summary>
        public const int CurrentChestsOpenedFieldNumber = 5;
        private int currentChestsOpened_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentChestsOpened {
          get { return currentChestsOpened_; }
          set {
            currentChestsOpened_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryCollectionFamily);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryCollectionFamily other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (FamilyXp != other.FamilyXp) return false;
          if (FamilyLevel != other.FamilyLevel) return false;
          if (RewardsCollectedLevel != other.RewardsCollectedLevel) return false;
          if (CurrentChestsOpened != other.CurrentChestsOpened) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (FamilyXp != 0) hash ^= FamilyXp.GetHashCode();
          if (FamilyLevel != 0) hash ^= FamilyLevel.GetHashCode();
          if (RewardsCollectedLevel != 0) hash ^= RewardsCollectedLevel.GetHashCode();
          if (CurrentChestsOpened != 0) hash ^= CurrentChestsOpened.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (FamilyXp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(FamilyXp);
          }
          if (FamilyLevel != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(FamilyLevel);
          }
          if (RewardsCollectedLevel != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(RewardsCollectedLevel);
          }
          if (CurrentChestsOpened != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CurrentChestsOpened);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (FamilyXp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyXp);
          }
          if (FamilyLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyLevel);
          }
          if (RewardsCollectedLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardsCollectedLevel);
          }
          if (CurrentChestsOpened != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentChestsOpened);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryCollectionFamily other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.FamilyXp != 0) {
            FamilyXp = other.FamilyXp;
          }
          if (other.FamilyLevel != 0) {
            FamilyLevel = other.FamilyLevel;
          }
          if (other.RewardsCollectedLevel != 0) {
            RewardsCollectedLevel = other.RewardsCollectedLevel;
          }
          if (other.CurrentChestsOpened != 0) {
            CurrentChestsOpened = other.CurrentChestsOpened;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                FamilyXp = input.ReadInt32();
                break;
              }
              case 24: {
                FamilyLevel = input.ReadInt32();
                break;
              }
              case 32: {
                RewardsCollectedLevel = input.ReadInt32();
                break;
              }
              case 40: {
                CurrentChestsOpened = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LifetimeMetrics : pb::IMessage<LifetimeMetrics> {
        private static readonly pb::MessageParser<LifetimeMetrics> _parser = new pb::MessageParser<LifetimeMetrics>(() => new LifetimeMetrics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LifetimeMetrics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LifetimeMetrics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LifetimeMetrics(LifetimeMetrics other) : this() {
          familyMetrics_ = other.familyMetrics_.Clone();
          poiLooted_ = other.poiLooted_ != null ? other.poiLooted_.Clone() : null;
          mapEncounter_ = other.mapEncounter_ != null ? other.mapEncounter_.Clone() : null;
          wc_ = other.wc_ != null ? other.wc_.Clone() : null;
          collectedGoldQuantity_ = other.collectedGoldQuantity_;
          usedGoldQuantity_ = other.usedGoldQuantity_;
          darkDetectorsPlaced_ = other.darkDetectorsPlaced_.Clone();
          collectedCategoryQuantity_ = other.collectedCategoryQuantity_.Clone();
          usedCategoryQuantity_ = other.usedCategoryQuantity_.Clone();
          successfulSwishSpellcast_ = other.successfulSwishSpellcast_;
          successfulCombatAttackSpellcast_ = other.successfulCombatAttackSpellcast_;
          successfulCombatDefendSpellcast_ = other.successfulCombatDefendSpellcast_;
          portkeysOpened_ = other.portkeysOpened_;
          potionsBrewed_ = other.potionsBrewed_;
          mapIngredientCollected_ = other.mapIngredientCollected_;
          potionExstimulo1Used_ = other.potionExstimulo1Used_;
          potionExstimulo2Used_ = other.potionExstimulo2Used_;
          potionExstimulo3Used_ = other.potionExstimulo3Used_;
          potionBrainElixirUsed_ = other.potionBrainElixirUsed_;
          potionUsedEncounter_ = other.potionUsedEncounter_;
          potionUsedWc_ = other.potionUsedWc_;
          swishMasterfulSpellcast_ = other.swishMasterfulSpellcast_;
          mobsDefeatedByMe_ = other.mobsDefeatedByMe_;
          seedsPlanted_ = other.seedsPlanted_;
          mysteryItemsFound_ = other.mysteryItemsFound_;
          encounterCompletedCountries_ = other.encounterCompletedCountries_.Clone();
          eliteMobsDefeatedByMe_ = other.eliteMobsDefeatedByMe_;
          mapAbilitiesUsed_ = other.mapAbilitiesUsed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LifetimeMetrics Clone() {
          return new LifetimeMetrics(this);
        }

        /// <summary>Field number for the "family_metrics" field.</summary>
        public const int FamilyMetricsFieldNumber = 1;
        private static readonly pbc::MapField<string, global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics>.Codec _map_familyMetrics_codec
            = new pbc::MapField<string, global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics.Parser), 10);
        private readonly pbc::MapField<string, global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics> familyMetrics_ = new pbc::MapField<string, global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.FamilyMetrics> FamilyMetrics {
          get { return familyMetrics_; }
        }

        /// <summary>Field number for the "poi_looted" field.</summary>
        public const int PoiLootedFieldNumber = 2;
        private global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.PoiLootedMetrics poiLooted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.PoiLootedMetrics PoiLooted {
          get { return poiLooted_; }
          set {
            poiLooted_ = value;
          }
        }

        /// <summary>Field number for the "map_encounter" field.</summary>
        public const int MapEncounterFieldNumber = 3;
        private global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.MapEncounterMetrics mapEncounter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.MapEncounterMetrics MapEncounter {
          get { return mapEncounter_; }
          set {
            mapEncounter_ = value;
          }
        }

        /// <summary>Field number for the "wc" field.</summary>
        public const int WcFieldNumber = 4;
        private global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.WcMetrics wc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.WcMetrics Wc {
          get { return wc_; }
          set {
            wc_ = value;
          }
        }

        /// <summary>Field number for the "collected_gold_quantity" field.</summary>
        public const int CollectedGoldQuantityFieldNumber = 5;
        private int collectedGoldQuantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CollectedGoldQuantity {
          get { return collectedGoldQuantity_; }
          set {
            collectedGoldQuantity_ = value;
          }
        }

        /// <summary>Field number for the "used_gold_quantity" field.</summary>
        public const int UsedGoldQuantityFieldNumber = 6;
        private int usedGoldQuantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UsedGoldQuantity {
          get { return usedGoldQuantity_; }
          set {
            usedGoldQuantity_ = value;
          }
        }

        /// <summary>Field number for the "dark_detectors_placed" field.</summary>
        public const int DarkDetectorsPlacedFieldNumber = 7;
        private static readonly pbc::MapField<int, int>.Codec _map_darkDetectorsPlaced_codec
            = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 58);
        private readonly pbc::MapField<int, int> darkDetectorsPlaced_ = new pbc::MapField<int, int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, int> DarkDetectorsPlaced {
          get { return darkDetectorsPlaced_; }
        }

        /// <summary>Field number for the "collected_category_quantity" field.</summary>
        public const int CollectedCategoryQuantityFieldNumber = 8;
        private static readonly pbc::MapField<string, int>.Codec _map_collectedCategoryQuantity_codec
            = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 66);
        private readonly pbc::MapField<string, int> collectedCategoryQuantity_ = new pbc::MapField<string, int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, int> CollectedCategoryQuantity {
          get { return collectedCategoryQuantity_; }
        }

        /// <summary>Field number for the "used_category_quantity" field.</summary>
        public const int UsedCategoryQuantityFieldNumber = 9;
        private static readonly pbc::MapField<string, int>.Codec _map_usedCategoryQuantity_codec
            = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 74);
        private readonly pbc::MapField<string, int> usedCategoryQuantity_ = new pbc::MapField<string, int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, int> UsedCategoryQuantity {
          get { return usedCategoryQuantity_; }
        }

        /// <summary>Field number for the "successful_swish_spellcast" field.</summary>
        public const int SuccessfulSwishSpellcastFieldNumber = 10;
        private int successfulSwishSpellcast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SuccessfulSwishSpellcast {
          get { return successfulSwishSpellcast_; }
          set {
            successfulSwishSpellcast_ = value;
          }
        }

        /// <summary>Field number for the "successful_combat_attack_spellcast" field.</summary>
        public const int SuccessfulCombatAttackSpellcastFieldNumber = 11;
        private int successfulCombatAttackSpellcast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SuccessfulCombatAttackSpellcast {
          get { return successfulCombatAttackSpellcast_; }
          set {
            successfulCombatAttackSpellcast_ = value;
          }
        }

        /// <summary>Field number for the "successful_combat_defend_spellcast" field.</summary>
        public const int SuccessfulCombatDefendSpellcastFieldNumber = 12;
        private int successfulCombatDefendSpellcast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SuccessfulCombatDefendSpellcast {
          get { return successfulCombatDefendSpellcast_; }
          set {
            successfulCombatDefendSpellcast_ = value;
          }
        }

        /// <summary>Field number for the "portkeys_opened" field.</summary>
        public const int PortkeysOpenedFieldNumber = 13;
        private int portkeysOpened_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PortkeysOpened {
          get { return portkeysOpened_; }
          set {
            portkeysOpened_ = value;
          }
        }

        /// <summary>Field number for the "potions_brewed" field.</summary>
        public const int PotionsBrewedFieldNumber = 14;
        private int potionsBrewed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionsBrewed {
          get { return potionsBrewed_; }
          set {
            potionsBrewed_ = value;
          }
        }

        /// <summary>Field number for the "map_ingredient_collected" field.</summary>
        public const int MapIngredientCollectedFieldNumber = 15;
        private int mapIngredientCollected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapIngredientCollected {
          get { return mapIngredientCollected_; }
          set {
            mapIngredientCollected_ = value;
          }
        }

        /// <summary>Field number for the "potion_exstimulo1_used" field.</summary>
        public const int PotionExstimulo1UsedFieldNumber = 16;
        private int potionExstimulo1Used_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionExstimulo1Used {
          get { return potionExstimulo1Used_; }
          set {
            potionExstimulo1Used_ = value;
          }
        }

        /// <summary>Field number for the "potion_exstimulo2_used" field.</summary>
        public const int PotionExstimulo2UsedFieldNumber = 17;
        private int potionExstimulo2Used_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionExstimulo2Used {
          get { return potionExstimulo2Used_; }
          set {
            potionExstimulo2Used_ = value;
          }
        }

        /// <summary>Field number for the "potion_exstimulo3_used" field.</summary>
        public const int PotionExstimulo3UsedFieldNumber = 18;
        private int potionExstimulo3Used_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionExstimulo3Used {
          get { return potionExstimulo3Used_; }
          set {
            potionExstimulo3Used_ = value;
          }
        }

        /// <summary>Field number for the "potion_brain_elixir_used" field.</summary>
        public const int PotionBrainElixirUsedFieldNumber = 19;
        private int potionBrainElixirUsed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionBrainElixirUsed {
          get { return potionBrainElixirUsed_; }
          set {
            potionBrainElixirUsed_ = value;
          }
        }

        /// <summary>Field number for the "potion_used_encounter" field.</summary>
        public const int PotionUsedEncounterFieldNumber = 20;
        private int potionUsedEncounter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionUsedEncounter {
          get { return potionUsedEncounter_; }
          set {
            potionUsedEncounter_ = value;
          }
        }

        /// <summary>Field number for the "potion_used_wc" field.</summary>
        public const int PotionUsedWcFieldNumber = 21;
        private int potionUsedWc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PotionUsedWc {
          get { return potionUsedWc_; }
          set {
            potionUsedWc_ = value;
          }
        }

        /// <summary>Field number for the "swish_masterful_spellcast" field.</summary>
        public const int SwishMasterfulSpellcastFieldNumber = 22;
        private int swishMasterfulSpellcast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SwishMasterfulSpellcast {
          get { return swishMasterfulSpellcast_; }
          set {
            swishMasterfulSpellcast_ = value;
          }
        }

        /// <summary>Field number for the "mobs_defeated_by_me" field.</summary>
        public const int MobsDefeatedByMeFieldNumber = 23;
        private int mobsDefeatedByMe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MobsDefeatedByMe {
          get { return mobsDefeatedByMe_; }
          set {
            mobsDefeatedByMe_ = value;
          }
        }

        /// <summary>Field number for the "seeds_planted" field.</summary>
        public const int SeedsPlantedFieldNumber = 24;
        private int seedsPlanted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SeedsPlanted {
          get { return seedsPlanted_; }
          set {
            seedsPlanted_ = value;
          }
        }

        /// <summary>Field number for the "mystery_items_found" field.</summary>
        public const int MysteryItemsFoundFieldNumber = 25;
        private int mysteryItemsFound_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MysteryItemsFound {
          get { return mysteryItemsFound_; }
          set {
            mysteryItemsFound_ = value;
          }
        }

        /// <summary>Field number for the "encounter_completed_countries" field.</summary>
        public const int EncounterCompletedCountriesFieldNumber = 26;
        private static readonly pb::FieldCodec<string> _repeated_encounterCompletedCountries_codec
            = pb::FieldCodec.ForString(210);
        private readonly pbc::RepeatedField<string> encounterCompletedCountries_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> EncounterCompletedCountries {
          get { return encounterCompletedCountries_; }
        }

        /// <summary>Field number for the "elite_mobs_defeated_by_me" field.</summary>
        public const int EliteMobsDefeatedByMeFieldNumber = 27;
        private int eliteMobsDefeatedByMe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EliteMobsDefeatedByMe {
          get { return eliteMobsDefeatedByMe_; }
          set {
            eliteMobsDefeatedByMe_ = value;
          }
        }

        /// <summary>Field number for the "map_abilities_used" field.</summary>
        public const int MapAbilitiesUsedFieldNumber = 28;
        private int mapAbilitiesUsed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapAbilitiesUsed {
          get { return mapAbilitiesUsed_; }
          set {
            mapAbilitiesUsed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LifetimeMetrics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LifetimeMetrics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!FamilyMetrics.Equals(other.FamilyMetrics)) return false;
          if (!object.Equals(PoiLooted, other.PoiLooted)) return false;
          if (!object.Equals(MapEncounter, other.MapEncounter)) return false;
          if (!object.Equals(Wc, other.Wc)) return false;
          if (CollectedGoldQuantity != other.CollectedGoldQuantity) return false;
          if (UsedGoldQuantity != other.UsedGoldQuantity) return false;
          if (!DarkDetectorsPlaced.Equals(other.DarkDetectorsPlaced)) return false;
          if (!CollectedCategoryQuantity.Equals(other.CollectedCategoryQuantity)) return false;
          if (!UsedCategoryQuantity.Equals(other.UsedCategoryQuantity)) return false;
          if (SuccessfulSwishSpellcast != other.SuccessfulSwishSpellcast) return false;
          if (SuccessfulCombatAttackSpellcast != other.SuccessfulCombatAttackSpellcast) return false;
          if (SuccessfulCombatDefendSpellcast != other.SuccessfulCombatDefendSpellcast) return false;
          if (PortkeysOpened != other.PortkeysOpened) return false;
          if (PotionsBrewed != other.PotionsBrewed) return false;
          if (MapIngredientCollected != other.MapIngredientCollected) return false;
          if (PotionExstimulo1Used != other.PotionExstimulo1Used) return false;
          if (PotionExstimulo2Used != other.PotionExstimulo2Used) return false;
          if (PotionExstimulo3Used != other.PotionExstimulo3Used) return false;
          if (PotionBrainElixirUsed != other.PotionBrainElixirUsed) return false;
          if (PotionUsedEncounter != other.PotionUsedEncounter) return false;
          if (PotionUsedWc != other.PotionUsedWc) return false;
          if (SwishMasterfulSpellcast != other.SwishMasterfulSpellcast) return false;
          if (MobsDefeatedByMe != other.MobsDefeatedByMe) return false;
          if (SeedsPlanted != other.SeedsPlanted) return false;
          if (MysteryItemsFound != other.MysteryItemsFound) return false;
          if(!encounterCompletedCountries_.Equals(other.encounterCompletedCountries_)) return false;
          if (EliteMobsDefeatedByMe != other.EliteMobsDefeatedByMe) return false;
          if (MapAbilitiesUsed != other.MapAbilitiesUsed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= FamilyMetrics.GetHashCode();
          if (poiLooted_ != null) hash ^= PoiLooted.GetHashCode();
          if (mapEncounter_ != null) hash ^= MapEncounter.GetHashCode();
          if (wc_ != null) hash ^= Wc.GetHashCode();
          if (CollectedGoldQuantity != 0) hash ^= CollectedGoldQuantity.GetHashCode();
          if (UsedGoldQuantity != 0) hash ^= UsedGoldQuantity.GetHashCode();
          hash ^= DarkDetectorsPlaced.GetHashCode();
          hash ^= CollectedCategoryQuantity.GetHashCode();
          hash ^= UsedCategoryQuantity.GetHashCode();
          if (SuccessfulSwishSpellcast != 0) hash ^= SuccessfulSwishSpellcast.GetHashCode();
          if (SuccessfulCombatAttackSpellcast != 0) hash ^= SuccessfulCombatAttackSpellcast.GetHashCode();
          if (SuccessfulCombatDefendSpellcast != 0) hash ^= SuccessfulCombatDefendSpellcast.GetHashCode();
          if (PortkeysOpened != 0) hash ^= PortkeysOpened.GetHashCode();
          if (PotionsBrewed != 0) hash ^= PotionsBrewed.GetHashCode();
          if (MapIngredientCollected != 0) hash ^= MapIngredientCollected.GetHashCode();
          if (PotionExstimulo1Used != 0) hash ^= PotionExstimulo1Used.GetHashCode();
          if (PotionExstimulo2Used != 0) hash ^= PotionExstimulo2Used.GetHashCode();
          if (PotionExstimulo3Used != 0) hash ^= PotionExstimulo3Used.GetHashCode();
          if (PotionBrainElixirUsed != 0) hash ^= PotionBrainElixirUsed.GetHashCode();
          if (PotionUsedEncounter != 0) hash ^= PotionUsedEncounter.GetHashCode();
          if (PotionUsedWc != 0) hash ^= PotionUsedWc.GetHashCode();
          if (SwishMasterfulSpellcast != 0) hash ^= SwishMasterfulSpellcast.GetHashCode();
          if (MobsDefeatedByMe != 0) hash ^= MobsDefeatedByMe.GetHashCode();
          if (SeedsPlanted != 0) hash ^= SeedsPlanted.GetHashCode();
          if (MysteryItemsFound != 0) hash ^= MysteryItemsFound.GetHashCode();
          hash ^= encounterCompletedCountries_.GetHashCode();
          if (EliteMobsDefeatedByMe != 0) hash ^= EliteMobsDefeatedByMe.GetHashCode();
          if (MapAbilitiesUsed != 0) hash ^= MapAbilitiesUsed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          familyMetrics_.WriteTo(output, _map_familyMetrics_codec);
          if (poiLooted_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PoiLooted);
          }
          if (mapEncounter_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MapEncounter);
          }
          if (wc_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Wc);
          }
          if (CollectedGoldQuantity != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CollectedGoldQuantity);
          }
          if (UsedGoldQuantity != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(UsedGoldQuantity);
          }
          darkDetectorsPlaced_.WriteTo(output, _map_darkDetectorsPlaced_codec);
          collectedCategoryQuantity_.WriteTo(output, _map_collectedCategoryQuantity_codec);
          usedCategoryQuantity_.WriteTo(output, _map_usedCategoryQuantity_codec);
          if (SuccessfulSwishSpellcast != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(SuccessfulSwishSpellcast);
          }
          if (SuccessfulCombatAttackSpellcast != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(SuccessfulCombatAttackSpellcast);
          }
          if (SuccessfulCombatDefendSpellcast != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(SuccessfulCombatDefendSpellcast);
          }
          if (PortkeysOpened != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(PortkeysOpened);
          }
          if (PotionsBrewed != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(PotionsBrewed);
          }
          if (MapIngredientCollected != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(MapIngredientCollected);
          }
          if (PotionExstimulo1Used != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(PotionExstimulo1Used);
          }
          if (PotionExstimulo2Used != 0) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(PotionExstimulo2Used);
          }
          if (PotionExstimulo3Used != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(PotionExstimulo3Used);
          }
          if (PotionBrainElixirUsed != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(PotionBrainElixirUsed);
          }
          if (PotionUsedEncounter != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(PotionUsedEncounter);
          }
          if (PotionUsedWc != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(PotionUsedWc);
          }
          if (SwishMasterfulSpellcast != 0) {
            output.WriteRawTag(176, 1);
            output.WriteInt32(SwishMasterfulSpellcast);
          }
          if (MobsDefeatedByMe != 0) {
            output.WriteRawTag(184, 1);
            output.WriteInt32(MobsDefeatedByMe);
          }
          if (SeedsPlanted != 0) {
            output.WriteRawTag(192, 1);
            output.WriteInt32(SeedsPlanted);
          }
          if (MysteryItemsFound != 0) {
            output.WriteRawTag(200, 1);
            output.WriteInt32(MysteryItemsFound);
          }
          encounterCompletedCountries_.WriteTo(output, _repeated_encounterCompletedCountries_codec);
          if (EliteMobsDefeatedByMe != 0) {
            output.WriteRawTag(216, 1);
            output.WriteInt32(EliteMobsDefeatedByMe);
          }
          if (MapAbilitiesUsed != 0) {
            output.WriteRawTag(224, 1);
            output.WriteInt32(MapAbilitiesUsed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += familyMetrics_.CalculateSize(_map_familyMetrics_codec);
          if (poiLooted_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoiLooted);
          }
          if (mapEncounter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapEncounter);
          }
          if (wc_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wc);
          }
          if (CollectedGoldQuantity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectedGoldQuantity);
          }
          if (UsedGoldQuantity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedGoldQuantity);
          }
          size += darkDetectorsPlaced_.CalculateSize(_map_darkDetectorsPlaced_codec);
          size += collectedCategoryQuantity_.CalculateSize(_map_collectedCategoryQuantity_codec);
          size += usedCategoryQuantity_.CalculateSize(_map_usedCategoryQuantity_codec);
          if (SuccessfulSwishSpellcast != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuccessfulSwishSpellcast);
          }
          if (SuccessfulCombatAttackSpellcast != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuccessfulCombatAttackSpellcast);
          }
          if (SuccessfulCombatDefendSpellcast != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuccessfulCombatDefendSpellcast);
          }
          if (PortkeysOpened != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortkeysOpened);
          }
          if (PotionsBrewed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PotionsBrewed);
          }
          if (MapIngredientCollected != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapIngredientCollected);
          }
          if (PotionExstimulo1Used != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionExstimulo1Used);
          }
          if (PotionExstimulo2Used != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionExstimulo2Used);
          }
          if (PotionExstimulo3Used != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionExstimulo3Used);
          }
          if (PotionBrainElixirUsed != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionBrainElixirUsed);
          }
          if (PotionUsedEncounter != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionUsedEncounter);
          }
          if (PotionUsedWc != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionUsedWc);
          }
          if (SwishMasterfulSpellcast != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwishMasterfulSpellcast);
          }
          if (MobsDefeatedByMe != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MobsDefeatedByMe);
          }
          if (SeedsPlanted != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeedsPlanted);
          }
          if (MysteryItemsFound != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MysteryItemsFound);
          }
          size += encounterCompletedCountries_.CalculateSize(_repeated_encounterCompletedCountries_codec);
          if (EliteMobsDefeatedByMe != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(EliteMobsDefeatedByMe);
          }
          if (MapAbilitiesUsed != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MapAbilitiesUsed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LifetimeMetrics other) {
          if (other == null) {
            return;
          }
          familyMetrics_.Add(other.familyMetrics_);
          if (other.poiLooted_ != null) {
            if (poiLooted_ == null) {
              PoiLooted = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.PoiLootedMetrics();
            }
            PoiLooted.MergeFrom(other.PoiLooted);
          }
          if (other.mapEncounter_ != null) {
            if (mapEncounter_ == null) {
              MapEncounter = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.MapEncounterMetrics();
            }
            MapEncounter.MergeFrom(other.MapEncounter);
          }
          if (other.wc_ != null) {
            if (wc_ == null) {
              Wc = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.WcMetrics();
            }
            Wc.MergeFrom(other.Wc);
          }
          if (other.CollectedGoldQuantity != 0) {
            CollectedGoldQuantity = other.CollectedGoldQuantity;
          }
          if (other.UsedGoldQuantity != 0) {
            UsedGoldQuantity = other.UsedGoldQuantity;
          }
          darkDetectorsPlaced_.Add(other.darkDetectorsPlaced_);
          collectedCategoryQuantity_.Add(other.collectedCategoryQuantity_);
          usedCategoryQuantity_.Add(other.usedCategoryQuantity_);
          if (other.SuccessfulSwishSpellcast != 0) {
            SuccessfulSwishSpellcast = other.SuccessfulSwishSpellcast;
          }
          if (other.SuccessfulCombatAttackSpellcast != 0) {
            SuccessfulCombatAttackSpellcast = other.SuccessfulCombatAttackSpellcast;
          }
          if (other.SuccessfulCombatDefendSpellcast != 0) {
            SuccessfulCombatDefendSpellcast = other.SuccessfulCombatDefendSpellcast;
          }
          if (other.PortkeysOpened != 0) {
            PortkeysOpened = other.PortkeysOpened;
          }
          if (other.PotionsBrewed != 0) {
            PotionsBrewed = other.PotionsBrewed;
          }
          if (other.MapIngredientCollected != 0) {
            MapIngredientCollected = other.MapIngredientCollected;
          }
          if (other.PotionExstimulo1Used != 0) {
            PotionExstimulo1Used = other.PotionExstimulo1Used;
          }
          if (other.PotionExstimulo2Used != 0) {
            PotionExstimulo2Used = other.PotionExstimulo2Used;
          }
          if (other.PotionExstimulo3Used != 0) {
            PotionExstimulo3Used = other.PotionExstimulo3Used;
          }
          if (other.PotionBrainElixirUsed != 0) {
            PotionBrainElixirUsed = other.PotionBrainElixirUsed;
          }
          if (other.PotionUsedEncounter != 0) {
            PotionUsedEncounter = other.PotionUsedEncounter;
          }
          if (other.PotionUsedWc != 0) {
            PotionUsedWc = other.PotionUsedWc;
          }
          if (other.SwishMasterfulSpellcast != 0) {
            SwishMasterfulSpellcast = other.SwishMasterfulSpellcast;
          }
          if (other.MobsDefeatedByMe != 0) {
            MobsDefeatedByMe = other.MobsDefeatedByMe;
          }
          if (other.SeedsPlanted != 0) {
            SeedsPlanted = other.SeedsPlanted;
          }
          if (other.MysteryItemsFound != 0) {
            MysteryItemsFound = other.MysteryItemsFound;
          }
          encounterCompletedCountries_.Add(other.encounterCompletedCountries_);
          if (other.EliteMobsDefeatedByMe != 0) {
            EliteMobsDefeatedByMe = other.EliteMobsDefeatedByMe;
          }
          if (other.MapAbilitiesUsed != 0) {
            MapAbilitiesUsed = other.MapAbilitiesUsed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                familyMetrics_.AddEntriesFrom(input, _map_familyMetrics_codec);
                break;
              }
              case 18: {
                if (poiLooted_ == null) {
                  PoiLooted = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.PoiLootedMetrics();
                }
                input.ReadMessage(PoiLooted);
                break;
              }
              case 26: {
                if (mapEncounter_ == null) {
                  MapEncounter = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.MapEncounterMetrics();
                }
                input.ReadMessage(MapEncounter);
                break;
              }
              case 34: {
                if (wc_ == null) {
                  Wc = new global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Types.WcMetrics();
                }
                input.ReadMessage(Wc);
                break;
              }
              case 40: {
                CollectedGoldQuantity = input.ReadInt32();
                break;
              }
              case 48: {
                UsedGoldQuantity = input.ReadInt32();
                break;
              }
              case 58: {
                darkDetectorsPlaced_.AddEntriesFrom(input, _map_darkDetectorsPlaced_codec);
                break;
              }
              case 66: {
                collectedCategoryQuantity_.AddEntriesFrom(input, _map_collectedCategoryQuantity_codec);
                break;
              }
              case 74: {
                usedCategoryQuantity_.AddEntriesFrom(input, _map_usedCategoryQuantity_codec);
                break;
              }
              case 80: {
                SuccessfulSwishSpellcast = input.ReadInt32();
                break;
              }
              case 88: {
                SuccessfulCombatAttackSpellcast = input.ReadInt32();
                break;
              }
              case 96: {
                SuccessfulCombatDefendSpellcast = input.ReadInt32();
                break;
              }
              case 104: {
                PortkeysOpened = input.ReadInt32();
                break;
              }
              case 112: {
                PotionsBrewed = input.ReadInt32();
                break;
              }
              case 120: {
                MapIngredientCollected = input.ReadInt32();
                break;
              }
              case 128: {
                PotionExstimulo1Used = input.ReadInt32();
                break;
              }
              case 136: {
                PotionExstimulo2Used = input.ReadInt32();
                break;
              }
              case 144: {
                PotionExstimulo3Used = input.ReadInt32();
                break;
              }
              case 152: {
                PotionBrainElixirUsed = input.ReadInt32();
                break;
              }
              case 160: {
                PotionUsedEncounter = input.ReadInt32();
                break;
              }
              case 168: {
                PotionUsedWc = input.ReadInt32();
                break;
              }
              case 176: {
                SwishMasterfulSpellcast = input.ReadInt32();
                break;
              }
              case 184: {
                MobsDefeatedByMe = input.ReadInt32();
                break;
              }
              case 192: {
                SeedsPlanted = input.ReadInt32();
                break;
              }
              case 200: {
                MysteryItemsFound = input.ReadInt32();
                break;
              }
              case 210: {
                encounterCompletedCountries_.AddEntriesFrom(input, _repeated_encounterCompletedCountries_codec);
                break;
              }
              case 216: {
                EliteMobsDefeatedByMe = input.ReadInt32();
                break;
              }
              case 224: {
                MapAbilitiesUsed = input.ReadInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LifetimeMetrics message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class FamilyMetrics : pb::IMessage<FamilyMetrics> {
            private static readonly pb::MessageParser<FamilyMetrics> _parser = new pb::MessageParser<FamilyMetrics>(() => new FamilyMetrics());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FamilyMetrics> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FamilyMetrics() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FamilyMetrics(FamilyMetrics other) : this() {
              familyXp_ = other.familyXp_;
              familyChest_ = other.familyChest_;
              familySticker_ = other.familySticker_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FamilyMetrics Clone() {
              return new FamilyMetrics(this);
            }

            /// <summary>Field number for the "family_xp" field.</summary>
            public const int FamilyXpFieldNumber = 1;
            private long familyXp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long FamilyXp {
              get { return familyXp_; }
              set {
                familyXp_ = value;
              }
            }

            /// <summary>Field number for the "family_chest" field.</summary>
            public const int FamilyChestFieldNumber = 2;
            private long familyChest_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long FamilyChest {
              get { return familyChest_; }
              set {
                familyChest_ = value;
              }
            }

            /// <summary>Field number for the "family_sticker" field.</summary>
            public const int FamilyStickerFieldNumber = 3;
            private long familySticker_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long FamilySticker {
              get { return familySticker_; }
              set {
                familySticker_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FamilyMetrics);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FamilyMetrics other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (FamilyXp != other.FamilyXp) return false;
              if (FamilyChest != other.FamilyChest) return false;
              if (FamilySticker != other.FamilySticker) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (FamilyXp != 0L) hash ^= FamilyXp.GetHashCode();
              if (FamilyChest != 0L) hash ^= FamilyChest.GetHashCode();
              if (FamilySticker != 0L) hash ^= FamilySticker.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (FamilyXp != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(FamilyXp);
              }
              if (FamilyChest != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(FamilyChest);
              }
              if (FamilySticker != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(FamilySticker);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (FamilyXp != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(FamilyXp);
              }
              if (FamilyChest != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(FamilyChest);
              }
              if (FamilySticker != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(FamilySticker);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FamilyMetrics other) {
              if (other == null) {
                return;
              }
              if (other.FamilyXp != 0L) {
                FamilyXp = other.FamilyXp;
              }
              if (other.FamilyChest != 0L) {
                FamilyChest = other.FamilyChest;
              }
              if (other.FamilySticker != 0L) {
                FamilySticker = other.FamilySticker;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    FamilyXp = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    FamilyChest = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    FamilySticker = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MapEncounterMetrics : pb::IMessage<MapEncounterMetrics> {
            private static readonly pb::MessageParser<MapEncounterMetrics> _parser = new pb::MessageParser<MapEncounterMetrics>(() => new MapEncounterMetrics());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MapEncounterMetrics> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapEncounterMetrics() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapEncounterMetrics(MapEncounterMetrics other) : this() {
              swishCompleted_ = other.swishCompleted_;
              swishUserFled_ = other.swishUserFled_;
              swishCaptured_ = other.swishCaptured_;
              combatCompleted_ = other.combatCompleted_;
              combatUserFled_ = other.combatUserFled_;
              combatCaptured_ = other.combatCaptured_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapEncounterMetrics Clone() {
              return new MapEncounterMetrics(this);
            }

            /// <summary>Field number for the "swish_completed" field.</summary>
            public const int SwishCompletedFieldNumber = 1;
            private long swishCompleted_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SwishCompleted {
              get { return swishCompleted_; }
              set {
                swishCompleted_ = value;
              }
            }

            /// <summary>Field number for the "swish_user_fled" field.</summary>
            public const int SwishUserFledFieldNumber = 2;
            private long swishUserFled_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SwishUserFled {
              get { return swishUserFled_; }
              set {
                swishUserFled_ = value;
              }
            }

            /// <summary>Field number for the "swish_captured" field.</summary>
            public const int SwishCapturedFieldNumber = 3;
            private long swishCaptured_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SwishCaptured {
              get { return swishCaptured_; }
              set {
                swishCaptured_ = value;
              }
            }

            /// <summary>Field number for the "combat_completed" field.</summary>
            public const int CombatCompletedFieldNumber = 4;
            private long combatCompleted_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CombatCompleted {
              get { return combatCompleted_; }
              set {
                combatCompleted_ = value;
              }
            }

            /// <summary>Field number for the "combat_user_fled" field.</summary>
            public const int CombatUserFledFieldNumber = 5;
            private long combatUserFled_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CombatUserFled {
              get { return combatUserFled_; }
              set {
                combatUserFled_ = value;
              }
            }

            /// <summary>Field number for the "combat_captured" field.</summary>
            public const int CombatCapturedFieldNumber = 6;
            private long combatCaptured_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CombatCaptured {
              get { return combatCaptured_; }
              set {
                combatCaptured_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MapEncounterMetrics);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MapEncounterMetrics other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SwishCompleted != other.SwishCompleted) return false;
              if (SwishUserFled != other.SwishUserFled) return false;
              if (SwishCaptured != other.SwishCaptured) return false;
              if (CombatCompleted != other.CombatCompleted) return false;
              if (CombatUserFled != other.CombatUserFled) return false;
              if (CombatCaptured != other.CombatCaptured) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SwishCompleted != 0L) hash ^= SwishCompleted.GetHashCode();
              if (SwishUserFled != 0L) hash ^= SwishUserFled.GetHashCode();
              if (SwishCaptured != 0L) hash ^= SwishCaptured.GetHashCode();
              if (CombatCompleted != 0L) hash ^= CombatCompleted.GetHashCode();
              if (CombatUserFled != 0L) hash ^= CombatUserFled.GetHashCode();
              if (CombatCaptured != 0L) hash ^= CombatCaptured.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SwishCompleted != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(SwishCompleted);
              }
              if (SwishUserFled != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(SwishUserFled);
              }
              if (SwishCaptured != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(SwishCaptured);
              }
              if (CombatCompleted != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(CombatCompleted);
              }
              if (CombatUserFled != 0L) {
                output.WriteRawTag(40);
                output.WriteInt64(CombatUserFled);
              }
              if (CombatCaptured != 0L) {
                output.WriteRawTag(48);
                output.WriteInt64(CombatCaptured);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SwishCompleted != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwishCompleted);
              }
              if (SwishUserFled != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwishUserFled);
              }
              if (SwishCaptured != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwishCaptured);
              }
              if (CombatCompleted != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CombatCompleted);
              }
              if (CombatUserFled != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CombatUserFled);
              }
              if (CombatCaptured != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CombatCaptured);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MapEncounterMetrics other) {
              if (other == null) {
                return;
              }
              if (other.SwishCompleted != 0L) {
                SwishCompleted = other.SwishCompleted;
              }
              if (other.SwishUserFled != 0L) {
                SwishUserFled = other.SwishUserFled;
              }
              if (other.SwishCaptured != 0L) {
                SwishCaptured = other.SwishCaptured;
              }
              if (other.CombatCompleted != 0L) {
                CombatCompleted = other.CombatCompleted;
              }
              if (other.CombatUserFled != 0L) {
                CombatUserFled = other.CombatUserFled;
              }
              if (other.CombatCaptured != 0L) {
                CombatCaptured = other.CombatCaptured;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    SwishCompleted = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    SwishUserFled = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    SwishCaptured = input.ReadInt64();
                    break;
                  }
                  case 32: {
                    CombatCompleted = input.ReadInt64();
                    break;
                  }
                  case 40: {
                    CombatUserFled = input.ReadInt64();
                    break;
                  }
                  case 48: {
                    CombatCaptured = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PoiLootedMetrics : pb::IMessage<PoiLootedMetrics> {
            private static readonly pb::MessageParser<PoiLootedMetrics> _parser = new pb::MessageParser<PoiLootedMetrics>(() => new PoiLootedMetrics());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PoiLootedMetrics> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PoiLootedMetrics() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PoiLootedMetrics(PoiLootedMetrics other) : this() {
              inn_ = other.inn_;
              greenhouse_ = other.greenhouse_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PoiLootedMetrics Clone() {
              return new PoiLootedMetrics(this);
            }

            /// <summary>Field number for the "inn" field.</summary>
            public const int InnFieldNumber = 1;
            private long inn_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Inn {
              get { return inn_; }
              set {
                inn_ = value;
              }
            }

            /// <summary>Field number for the "greenhouse" field.</summary>
            public const int GreenhouseFieldNumber = 2;
            private long greenhouse_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Greenhouse {
              get { return greenhouse_; }
              set {
                greenhouse_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PoiLootedMetrics);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PoiLootedMetrics other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Inn != other.Inn) return false;
              if (Greenhouse != other.Greenhouse) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Inn != 0L) hash ^= Inn.GetHashCode();
              if (Greenhouse != 0L) hash ^= Greenhouse.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Inn != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Inn);
              }
              if (Greenhouse != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Greenhouse);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Inn != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Inn);
              }
              if (Greenhouse != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Greenhouse);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PoiLootedMetrics other) {
              if (other == null) {
                return;
              }
              if (other.Inn != 0L) {
                Inn = other.Inn;
              }
              if (other.Greenhouse != 0L) {
                Greenhouse = other.Greenhouse;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Inn = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    Greenhouse = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class WcMetrics : pb::IMessage<WcMetrics> {
            private static readonly pb::MessageParser<WcMetrics> _parser = new pb::MessageParser<WcMetrics>(() => new WcMetrics());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WcMetrics> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.LifetimeMetrics.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WcMetrics() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WcMetrics(WcMetrics other) : this() {
              completed_ = other.completed_;
              won_ = other.won_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WcMetrics Clone() {
              return new WcMetrics(this);
            }

            /// <summary>Field number for the "completed" field.</summary>
            public const int CompletedFieldNumber = 1;
            private long completed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Completed {
              get { return completed_; }
              set {
                completed_ = value;
              }
            }

            /// <summary>Field number for the "won" field.</summary>
            public const int WonFieldNumber = 2;
            private long won_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Won {
              get { return won_; }
              set {
                won_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WcMetrics);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WcMetrics other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Completed != other.Completed) return false;
              if (Won != other.Won) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Completed != 0L) hash ^= Completed.GetHashCode();
              if (Won != 0L) hash ^= Won.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Completed != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Completed);
              }
              if (Won != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Won);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Completed != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Completed);
              }
              if (Won != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Won);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WcMetrics other) {
              if (other == null) {
                return;
              }
              if (other.Completed != 0L) {
                Completed = other.Completed;
              }
              if (other.Won != 0L) {
                Won = other.Won;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Completed = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    Won = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class PlayerProfile : pb::IMessage<PlayerProfile> {
        private static readonly pb::MessageParser<PlayerProfile> _parser = new pb::MessageParser<PlayerProfile>(() => new PlayerProfile());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerProfile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Inventory.AtlasInventoryItem.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProfile() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProfile(PlayerProfile other) : this() {
          nickname_ = other.nickname_;
          level_ = other.level_;
          distanceWalkedKm_ = other.distanceWalkedKm_;
          maxHp_ = other.maxHp_;
          attackPower_ = other.attackPower_;
          playerTeamId_ = other.playerTeamId_;
          professionId_ = other.professionId_;
          titleId_ = other.titleId_;
          unlockedTitleIds_ = other.unlockedTitleIds_.Clone();
          themeId_ = other.themeId_;
          unlockedThemeIds_ = other.unlockedThemeIds_.Clone();
          houseId_ = other.houseId_;
          wand_ = other.wand_ != null ? other.wand_.Clone() : null;
          favoriteBadgeIds_ = other.favoriteBadgeIds_.Clone();
          unlockedBadgeIds_ = other.unlockedBadgeIds_.Clone();
          favoriteTitleIds_ = other.favoriteTitleIds_.Clone();
          firstName_ = other.firstName_;
          lastName_ = other.lastName_;
          profileCreationLocation_ = other.profileCreationLocation_;
          unlockedSelfieAssetIds_ = other.unlockedSelfieAssetIds_.Clone();
          totalSwishSuccessSpell_ = other.totalSwishSuccessSpell_;
          discoveredPotionsMasterNoteIds_ = other.discoveredPotionsMasterNoteIds_.Clone();
          masterNoteDiscoveryStatus_ = other.masterNoteDiscoveryStatus_.Clone();
          swishSpellcasts_ = other.swishSpellcasts_.Clone();
          storePackPurchased_ = other.storePackPurchased_.Clone();
          emailOpts_ = other.emailOpts_ != null ? other.emailOpts_.Clone() : null;
          lifetimeInnLooted_ = other.lifetimeInnLooted_;
          lifetimeGreenhouseLooted_ = other.lifetimeGreenhouseLooted_;
          lifetimeMapEncounterWon_ = other.lifetimeMapEncounterWon_;
          lifetimeWcWon_ = other.lifetimeWcWon_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProfile Clone() {
          return new PlayerProfile(this);
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 1;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "distance_walked_km" field.</summary>
        public const int DistanceWalkedKmFieldNumber = 3;
        private float distanceWalkedKm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DistanceWalkedKm {
          get { return distanceWalkedKm_; }
          set {
            distanceWalkedKm_ = value;
          }
        }

        /// <summary>Field number for the "max_hp" field.</summary>
        public const int MaxHpFieldNumber = 4;
        private long maxHp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxHp {
          get { return maxHp_; }
          set {
            maxHp_ = value;
          }
        }

        /// <summary>Field number for the "attack_power" field.</summary>
        public const int AttackPowerFieldNumber = 5;
        private long attackPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AttackPower {
          get { return attackPower_; }
          set {
            attackPower_ = value;
          }
        }

        /// <summary>Field number for the "player_team_id" field.</summary>
        public const int PlayerTeamIdFieldNumber = 6;
        private string playerTeamId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerTeamId {
          get { return playerTeamId_; }
          set {
            playerTeamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "profession_id" field.</summary>
        public const int ProfessionIdFieldNumber = 7;
        private string professionId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProfessionId {
          get { return professionId_; }
          set {
            professionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "title_id" field.</summary>
        public const int TitleIdFieldNumber = 8;
        private string titleId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TitleId {
          get { return titleId_; }
          set {
            titleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unlocked_title_ids" field.</summary>
        public const int UnlockedTitleIdsFieldNumber = 9;
        private static readonly pb::FieldCodec<string> _repeated_unlockedTitleIds_codec
            = pb::FieldCodec.ForString(74);
        private readonly pbc::RepeatedField<string> unlockedTitleIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UnlockedTitleIds {
          get { return unlockedTitleIds_; }
        }

        /// <summary>Field number for the "theme_id" field.</summary>
        public const int ThemeIdFieldNumber = 10;
        private string themeId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ThemeId {
          get { return themeId_; }
          set {
            themeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unlocked_theme_ids" field.</summary>
        public const int UnlockedThemeIdsFieldNumber = 11;
        private static readonly pb::FieldCodec<string> _repeated_unlockedThemeIds_codec
            = pb::FieldCodec.ForString(90);
        private readonly pbc::RepeatedField<string> unlockedThemeIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UnlockedThemeIds {
          get { return unlockedThemeIds_; }
        }

        /// <summary>Field number for the "house_id" field.</summary>
        public const int HouseIdFieldNumber = 12;
        private string houseId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HouseId {
          get { return houseId_; }
          set {
            houseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wand" field.</summary>
        public const int WandFieldNumber = 13;
        private global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Types.WandOptions wand_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Types.WandOptions Wand {
          get { return wand_; }
          set {
            wand_ = value;
          }
        }

        /// <summary>Field number for the "favorite_badge_ids" field.</summary>
        public const int FavoriteBadgeIdsFieldNumber = 14;
        private static readonly pb::FieldCodec<string> _repeated_favoriteBadgeIds_codec
            = pb::FieldCodec.ForString(114);
        private readonly pbc::RepeatedField<string> favoriteBadgeIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> FavoriteBadgeIds {
          get { return favoriteBadgeIds_; }
        }

        /// <summary>Field number for the "unlocked_badge_ids" field.</summary>
        public const int UnlockedBadgeIdsFieldNumber = 15;
        private static readonly pb::FieldCodec<string> _repeated_unlockedBadgeIds_codec
            = pb::FieldCodec.ForString(122);
        private readonly pbc::RepeatedField<string> unlockedBadgeIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UnlockedBadgeIds {
          get { return unlockedBadgeIds_; }
        }

        /// <summary>Field number for the "favorite_title_ids" field.</summary>
        public const int FavoriteTitleIdsFieldNumber = 16;
        private static readonly pb::FieldCodec<string> _repeated_favoriteTitleIds_codec
            = pb::FieldCodec.ForString(130);
        private readonly pbc::RepeatedField<string> favoriteTitleIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> FavoriteTitleIds {
          get { return favoriteTitleIds_; }
        }

        /// <summary>Field number for the "first_name" field.</summary>
        public const int FirstNameFieldNumber = 17;
        private string firstName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirstName {
          get { return firstName_; }
          set {
            firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "last_name" field.</summary>
        public const int LastNameFieldNumber = 18;
        private string lastName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastName {
          get { return lastName_; }
          set {
            lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "profile_creation_location" field.</summary>
        public const int ProfileCreationLocationFieldNumber = 19;
        private string profileCreationLocation_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProfileCreationLocation {
          get { return profileCreationLocation_; }
          set {
            profileCreationLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unlocked_selfie_asset_ids" field.</summary>
        public const int UnlockedSelfieAssetIdsFieldNumber = 20;
        private static readonly pb::FieldCodec<string> _repeated_unlockedSelfieAssetIds_codec
            = pb::FieldCodec.ForString(162);
        private readonly pbc::RepeatedField<string> unlockedSelfieAssetIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> UnlockedSelfieAssetIds {
          get { return unlockedSelfieAssetIds_; }
        }

        /// <summary>Field number for the "total_swish_success_spell" field.</summary>
        public const int TotalSwishSuccessSpellFieldNumber = 21;
        private long totalSwishSuccessSpell_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalSwishSuccessSpell {
          get { return totalSwishSuccessSpell_; }
          set {
            totalSwishSuccessSpell_ = value;
          }
        }

        /// <summary>Field number for the "discovered_potions_master_note_ids" field.</summary>
        public const int DiscoveredPotionsMasterNoteIdsFieldNumber = 22;
        private static readonly pb::FieldCodec<string> _repeated_discoveredPotionsMasterNoteIds_codec
            = pb::FieldCodec.ForString(178);
        private readonly pbc::RepeatedField<string> discoveredPotionsMasterNoteIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> DiscoveredPotionsMasterNoteIds {
          get { return discoveredPotionsMasterNoteIds_; }
        }

        /// <summary>Field number for the "master_note_discovery_status" field.</summary>
        public const int MasterNoteDiscoveryStatusFieldNumber = 23;
        private static readonly pbc::MapField<string, long>.Codec _map_masterNoteDiscoveryStatus_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 186);
        private readonly pbc::MapField<string, long> masterNoteDiscoveryStatus_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> MasterNoteDiscoveryStatus {
          get { return masterNoteDiscoveryStatus_; }
        }

        /// <summary>Field number for the "swish_spellcasts" field.</summary>
        public const int SwishSpellcastsFieldNumber = 24;
        private static readonly pbc::MapField<string, long>.Codec _map_swishSpellcasts_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 194);
        private readonly pbc::MapField<string, long> swishSpellcasts_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> SwishSpellcasts {
          get { return swishSpellcasts_; }
        }

        /// <summary>Field number for the "store_pack_purchased" field.</summary>
        public const int StorePackPurchasedFieldNumber = 25;
        private static readonly pbc::MapField<string, long>.Codec _map_storePackPurchased_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 202);
        private readonly pbc::MapField<string, long> storePackPurchased_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> StorePackPurchased {
          get { return storePackPurchased_; }
        }

        /// <summary>Field number for the "email_opts" field.</summary>
        public const int EmailOptsFieldNumber = 26;
        private global::WUProtos.Data.EmailOpts emailOpts_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.EmailOpts EmailOpts {
          get { return emailOpts_; }
          set {
            emailOpts_ = value;
          }
        }

        /// <summary>Field number for the "lifetime_inn_looted" field.</summary>
        public const int LifetimeInnLootedFieldNumber = 27;
        private long lifetimeInnLooted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LifetimeInnLooted {
          get { return lifetimeInnLooted_; }
          set {
            lifetimeInnLooted_ = value;
          }
        }

        /// <summary>Field number for the "lifetime_greenhouse_looted" field.</summary>
        public const int LifetimeGreenhouseLootedFieldNumber = 28;
        private long lifetimeGreenhouseLooted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LifetimeGreenhouseLooted {
          get { return lifetimeGreenhouseLooted_; }
          set {
            lifetimeGreenhouseLooted_ = value;
          }
        }

        /// <summary>Field number for the "lifetime_map_encounter_won" field.</summary>
        public const int LifetimeMapEncounterWonFieldNumber = 29;
        private long lifetimeMapEncounterWon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LifetimeMapEncounterWon {
          get { return lifetimeMapEncounterWon_; }
          set {
            lifetimeMapEncounterWon_ = value;
          }
        }

        /// <summary>Field number for the "lifetime_wc_won" field.</summary>
        public const int LifetimeWcWonFieldNumber = 30;
        private long lifetimeWcWon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LifetimeWcWon {
          get { return lifetimeWcWon_; }
          set {
            lifetimeWcWon_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerProfile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerProfile other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Nickname != other.Nickname) return false;
          if (Level != other.Level) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistanceWalkedKm, other.DistanceWalkedKm)) return false;
          if (MaxHp != other.MaxHp) return false;
          if (AttackPower != other.AttackPower) return false;
          if (PlayerTeamId != other.PlayerTeamId) return false;
          if (ProfessionId != other.ProfessionId) return false;
          if (TitleId != other.TitleId) return false;
          if(!unlockedTitleIds_.Equals(other.unlockedTitleIds_)) return false;
          if (ThemeId != other.ThemeId) return false;
          if(!unlockedThemeIds_.Equals(other.unlockedThemeIds_)) return false;
          if (HouseId != other.HouseId) return false;
          if (!object.Equals(Wand, other.Wand)) return false;
          if(!favoriteBadgeIds_.Equals(other.favoriteBadgeIds_)) return false;
          if(!unlockedBadgeIds_.Equals(other.unlockedBadgeIds_)) return false;
          if(!favoriteTitleIds_.Equals(other.favoriteTitleIds_)) return false;
          if (FirstName != other.FirstName) return false;
          if (LastName != other.LastName) return false;
          if (ProfileCreationLocation != other.ProfileCreationLocation) return false;
          if(!unlockedSelfieAssetIds_.Equals(other.unlockedSelfieAssetIds_)) return false;
          if (TotalSwishSuccessSpell != other.TotalSwishSuccessSpell) return false;
          if(!discoveredPotionsMasterNoteIds_.Equals(other.discoveredPotionsMasterNoteIds_)) return false;
          if (!MasterNoteDiscoveryStatus.Equals(other.MasterNoteDiscoveryStatus)) return false;
          if (!SwishSpellcasts.Equals(other.SwishSpellcasts)) return false;
          if (!StorePackPurchased.Equals(other.StorePackPurchased)) return false;
          if (!object.Equals(EmailOpts, other.EmailOpts)) return false;
          if (LifetimeInnLooted != other.LifetimeInnLooted) return false;
          if (LifetimeGreenhouseLooted != other.LifetimeGreenhouseLooted) return false;
          if (LifetimeMapEncounterWon != other.LifetimeMapEncounterWon) return false;
          if (LifetimeWcWon != other.LifetimeWcWon) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (DistanceWalkedKm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistanceWalkedKm);
          if (MaxHp != 0L) hash ^= MaxHp.GetHashCode();
          if (AttackPower != 0L) hash ^= AttackPower.GetHashCode();
          if (PlayerTeamId.Length != 0) hash ^= PlayerTeamId.GetHashCode();
          if (ProfessionId.Length != 0) hash ^= ProfessionId.GetHashCode();
          if (TitleId.Length != 0) hash ^= TitleId.GetHashCode();
          hash ^= unlockedTitleIds_.GetHashCode();
          if (ThemeId.Length != 0) hash ^= ThemeId.GetHashCode();
          hash ^= unlockedThemeIds_.GetHashCode();
          if (HouseId.Length != 0) hash ^= HouseId.GetHashCode();
          if (wand_ != null) hash ^= Wand.GetHashCode();
          hash ^= favoriteBadgeIds_.GetHashCode();
          hash ^= unlockedBadgeIds_.GetHashCode();
          hash ^= favoriteTitleIds_.GetHashCode();
          if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
          if (LastName.Length != 0) hash ^= LastName.GetHashCode();
          if (ProfileCreationLocation.Length != 0) hash ^= ProfileCreationLocation.GetHashCode();
          hash ^= unlockedSelfieAssetIds_.GetHashCode();
          if (TotalSwishSuccessSpell != 0L) hash ^= TotalSwishSuccessSpell.GetHashCode();
          hash ^= discoveredPotionsMasterNoteIds_.GetHashCode();
          hash ^= MasterNoteDiscoveryStatus.GetHashCode();
          hash ^= SwishSpellcasts.GetHashCode();
          hash ^= StorePackPurchased.GetHashCode();
          if (emailOpts_ != null) hash ^= EmailOpts.GetHashCode();
          if (LifetimeInnLooted != 0L) hash ^= LifetimeInnLooted.GetHashCode();
          if (LifetimeGreenhouseLooted != 0L) hash ^= LifetimeGreenhouseLooted.GetHashCode();
          if (LifetimeMapEncounterWon != 0L) hash ^= LifetimeMapEncounterWon.GetHashCode();
          if (LifetimeWcWon != 0L) hash ^= LifetimeWcWon.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Nickname.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Nickname);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Level);
          }
          if (DistanceWalkedKm != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(DistanceWalkedKm);
          }
          if (MaxHp != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(MaxHp);
          }
          if (AttackPower != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(AttackPower);
          }
          if (PlayerTeamId.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(PlayerTeamId);
          }
          if (ProfessionId.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(ProfessionId);
          }
          if (TitleId.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(TitleId);
          }
          unlockedTitleIds_.WriteTo(output, _repeated_unlockedTitleIds_codec);
          if (ThemeId.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(ThemeId);
          }
          unlockedThemeIds_.WriteTo(output, _repeated_unlockedThemeIds_codec);
          if (HouseId.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(HouseId);
          }
          if (wand_ != null) {
            output.WriteRawTag(106);
            output.WriteMessage(Wand);
          }
          favoriteBadgeIds_.WriteTo(output, _repeated_favoriteBadgeIds_codec);
          unlockedBadgeIds_.WriteTo(output, _repeated_unlockedBadgeIds_codec);
          favoriteTitleIds_.WriteTo(output, _repeated_favoriteTitleIds_codec);
          if (FirstName.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(FirstName);
          }
          if (LastName.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(LastName);
          }
          if (ProfileCreationLocation.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(ProfileCreationLocation);
          }
          unlockedSelfieAssetIds_.WriteTo(output, _repeated_unlockedSelfieAssetIds_codec);
          if (TotalSwishSuccessSpell != 0L) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(TotalSwishSuccessSpell);
          }
          discoveredPotionsMasterNoteIds_.WriteTo(output, _repeated_discoveredPotionsMasterNoteIds_codec);
          masterNoteDiscoveryStatus_.WriteTo(output, _map_masterNoteDiscoveryStatus_codec);
          swishSpellcasts_.WriteTo(output, _map_swishSpellcasts_codec);
          storePackPurchased_.WriteTo(output, _map_storePackPurchased_codec);
          if (emailOpts_ != null) {
            output.WriteRawTag(210, 1);
            output.WriteMessage(EmailOpts);
          }
          if (LifetimeInnLooted != 0L) {
            output.WriteRawTag(216, 1);
            output.WriteInt64(LifetimeInnLooted);
          }
          if (LifetimeGreenhouseLooted != 0L) {
            output.WriteRawTag(224, 1);
            output.WriteInt64(LifetimeGreenhouseLooted);
          }
          if (LifetimeMapEncounterWon != 0L) {
            output.WriteRawTag(232, 1);
            output.WriteInt64(LifetimeMapEncounterWon);
          }
          if (LifetimeWcWon != 0L) {
            output.WriteRawTag(240, 1);
            output.WriteInt64(LifetimeWcWon);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (DistanceWalkedKm != 0F) {
            size += 1 + 4;
          }
          if (MaxHp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
          }
          if (AttackPower != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttackPower);
          }
          if (PlayerTeamId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerTeamId);
          }
          if (ProfessionId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionId);
          }
          if (TitleId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleId);
          }
          size += unlockedTitleIds_.CalculateSize(_repeated_unlockedTitleIds_codec);
          if (ThemeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ThemeId);
          }
          size += unlockedThemeIds_.CalculateSize(_repeated_unlockedThemeIds_codec);
          if (HouseId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(HouseId);
          }
          if (wand_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wand);
          }
          size += favoriteBadgeIds_.CalculateSize(_repeated_favoriteBadgeIds_codec);
          size += unlockedBadgeIds_.CalculateSize(_repeated_unlockedBadgeIds_codec);
          size += favoriteTitleIds_.CalculateSize(_repeated_favoriteTitleIds_codec);
          if (FirstName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstName);
          }
          if (LastName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(LastName);
          }
          if (ProfileCreationLocation.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfileCreationLocation);
          }
          size += unlockedSelfieAssetIds_.CalculateSize(_repeated_unlockedSelfieAssetIds_codec);
          if (TotalSwishSuccessSpell != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalSwishSuccessSpell);
          }
          size += discoveredPotionsMasterNoteIds_.CalculateSize(_repeated_discoveredPotionsMasterNoteIds_codec);
          size += masterNoteDiscoveryStatus_.CalculateSize(_map_masterNoteDiscoveryStatus_codec);
          size += swishSpellcasts_.CalculateSize(_map_swishSpellcasts_codec);
          size += storePackPurchased_.CalculateSize(_map_storePackPurchased_codec);
          if (emailOpts_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(EmailOpts);
          }
          if (LifetimeInnLooted != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LifetimeInnLooted);
          }
          if (LifetimeGreenhouseLooted != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LifetimeGreenhouseLooted);
          }
          if (LifetimeMapEncounterWon != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LifetimeMapEncounterWon);
          }
          if (LifetimeWcWon != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(LifetimeWcWon);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerProfile other) {
          if (other == null) {
            return;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.DistanceWalkedKm != 0F) {
            DistanceWalkedKm = other.DistanceWalkedKm;
          }
          if (other.MaxHp != 0L) {
            MaxHp = other.MaxHp;
          }
          if (other.AttackPower != 0L) {
            AttackPower = other.AttackPower;
          }
          if (other.PlayerTeamId.Length != 0) {
            PlayerTeamId = other.PlayerTeamId;
          }
          if (other.ProfessionId.Length != 0) {
            ProfessionId = other.ProfessionId;
          }
          if (other.TitleId.Length != 0) {
            TitleId = other.TitleId;
          }
          unlockedTitleIds_.Add(other.unlockedTitleIds_);
          if (other.ThemeId.Length != 0) {
            ThemeId = other.ThemeId;
          }
          unlockedThemeIds_.Add(other.unlockedThemeIds_);
          if (other.HouseId.Length != 0) {
            HouseId = other.HouseId;
          }
          if (other.wand_ != null) {
            if (wand_ == null) {
              Wand = new global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Types.WandOptions();
            }
            Wand.MergeFrom(other.Wand);
          }
          favoriteBadgeIds_.Add(other.favoriteBadgeIds_);
          unlockedBadgeIds_.Add(other.unlockedBadgeIds_);
          favoriteTitleIds_.Add(other.favoriteTitleIds_);
          if (other.FirstName.Length != 0) {
            FirstName = other.FirstName;
          }
          if (other.LastName.Length != 0) {
            LastName = other.LastName;
          }
          if (other.ProfileCreationLocation.Length != 0) {
            ProfileCreationLocation = other.ProfileCreationLocation;
          }
          unlockedSelfieAssetIds_.Add(other.unlockedSelfieAssetIds_);
          if (other.TotalSwishSuccessSpell != 0L) {
            TotalSwishSuccessSpell = other.TotalSwishSuccessSpell;
          }
          discoveredPotionsMasterNoteIds_.Add(other.discoveredPotionsMasterNoteIds_);
          masterNoteDiscoveryStatus_.Add(other.masterNoteDiscoveryStatus_);
          swishSpellcasts_.Add(other.swishSpellcasts_);
          storePackPurchased_.Add(other.storePackPurchased_);
          if (other.emailOpts_ != null) {
            if (emailOpts_ == null) {
              EmailOpts = new global::WUProtos.Data.EmailOpts();
            }
            EmailOpts.MergeFrom(other.EmailOpts);
          }
          if (other.LifetimeInnLooted != 0L) {
            LifetimeInnLooted = other.LifetimeInnLooted;
          }
          if (other.LifetimeGreenhouseLooted != 0L) {
            LifetimeGreenhouseLooted = other.LifetimeGreenhouseLooted;
          }
          if (other.LifetimeMapEncounterWon != 0L) {
            LifetimeMapEncounterWon = other.LifetimeMapEncounterWon;
          }
          if (other.LifetimeWcWon != 0L) {
            LifetimeWcWon = other.LifetimeWcWon;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Nickname = input.ReadString();
                break;
              }
              case 16: {
                Level = input.ReadInt32();
                break;
              }
              case 29: {
                DistanceWalkedKm = input.ReadFloat();
                break;
              }
              case 32: {
                MaxHp = input.ReadInt64();
                break;
              }
              case 40: {
                AttackPower = input.ReadInt64();
                break;
              }
              case 50: {
                PlayerTeamId = input.ReadString();
                break;
              }
              case 58: {
                ProfessionId = input.ReadString();
                break;
              }
              case 66: {
                TitleId = input.ReadString();
                break;
              }
              case 74: {
                unlockedTitleIds_.AddEntriesFrom(input, _repeated_unlockedTitleIds_codec);
                break;
              }
              case 82: {
                ThemeId = input.ReadString();
                break;
              }
              case 90: {
                unlockedThemeIds_.AddEntriesFrom(input, _repeated_unlockedThemeIds_codec);
                break;
              }
              case 98: {
                HouseId = input.ReadString();
                break;
              }
              case 106: {
                if (wand_ == null) {
                  Wand = new global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Types.WandOptions();
                }
                input.ReadMessage(Wand);
                break;
              }
              case 114: {
                favoriteBadgeIds_.AddEntriesFrom(input, _repeated_favoriteBadgeIds_codec);
                break;
              }
              case 122: {
                unlockedBadgeIds_.AddEntriesFrom(input, _repeated_unlockedBadgeIds_codec);
                break;
              }
              case 130: {
                favoriteTitleIds_.AddEntriesFrom(input, _repeated_favoriteTitleIds_codec);
                break;
              }
              case 138: {
                FirstName = input.ReadString();
                break;
              }
              case 146: {
                LastName = input.ReadString();
                break;
              }
              case 154: {
                ProfileCreationLocation = input.ReadString();
                break;
              }
              case 162: {
                unlockedSelfieAssetIds_.AddEntriesFrom(input, _repeated_unlockedSelfieAssetIds_codec);
                break;
              }
              case 168: {
                TotalSwishSuccessSpell = input.ReadInt64();
                break;
              }
              case 178: {
                discoveredPotionsMasterNoteIds_.AddEntriesFrom(input, _repeated_discoveredPotionsMasterNoteIds_codec);
                break;
              }
              case 186: {
                masterNoteDiscoveryStatus_.AddEntriesFrom(input, _map_masterNoteDiscoveryStatus_codec);
                break;
              }
              case 194: {
                swishSpellcasts_.AddEntriesFrom(input, _map_swishSpellcasts_codec);
                break;
              }
              case 202: {
                storePackPurchased_.AddEntriesFrom(input, _map_storePackPurchased_codec);
                break;
              }
              case 210: {
                if (emailOpts_ == null) {
                  EmailOpts = new global::WUProtos.Data.EmailOpts();
                }
                input.ReadMessage(EmailOpts);
                break;
              }
              case 216: {
                LifetimeInnLooted = input.ReadInt64();
                break;
              }
              case 224: {
                LifetimeGreenhouseLooted = input.ReadInt64();
                break;
              }
              case 232: {
                LifetimeMapEncounterWon = input.ReadInt64();
                break;
              }
              case 240: {
                LifetimeWcWon = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PlayerProfile message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class WandOptions : pb::IMessage<WandOptions> {
            private static readonly pb::MessageParser<WandOptions> _parser = new pb::MessageParser<WandOptions>(() => new WandOptions());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WandOptions> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Inventory.AtlasInventoryItem.Types.PlayerProfile.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WandOptions() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WandOptions(WandOptions other) : this() {
              coreId_ = other.coreId_;
              woodId_ = other.woodId_;
              flexibilityId_ = other.flexibilityId_;
              lengthId_ = other.lengthId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WandOptions Clone() {
              return new WandOptions(this);
            }

            /// <summary>Field number for the "core_id" field.</summary>
            public const int CoreIdFieldNumber = 1;
            private string coreId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CoreId {
              get { return coreId_; }
              set {
                coreId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "wood_id" field.</summary>
            public const int WoodIdFieldNumber = 2;
            private string woodId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string WoodId {
              get { return woodId_; }
              set {
                woodId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "flexibility_id" field.</summary>
            public const int FlexibilityIdFieldNumber = 3;
            private string flexibilityId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FlexibilityId {
              get { return flexibilityId_; }
              set {
                flexibilityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "length_id" field.</summary>
            public const int LengthIdFieldNumber = 4;
            private string lengthId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string LengthId {
              get { return lengthId_; }
              set {
                lengthId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WandOptions);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WandOptions other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (CoreId != other.CoreId) return false;
              if (WoodId != other.WoodId) return false;
              if (FlexibilityId != other.FlexibilityId) return false;
              if (LengthId != other.LengthId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (CoreId.Length != 0) hash ^= CoreId.GetHashCode();
              if (WoodId.Length != 0) hash ^= WoodId.GetHashCode();
              if (FlexibilityId.Length != 0) hash ^= FlexibilityId.GetHashCode();
              if (LengthId.Length != 0) hash ^= LengthId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (CoreId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(CoreId);
              }
              if (WoodId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(WoodId);
              }
              if (FlexibilityId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(FlexibilityId);
              }
              if (LengthId.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(LengthId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (CoreId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreId);
              }
              if (WoodId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(WoodId);
              }
              if (FlexibilityId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FlexibilityId);
              }
              if (LengthId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LengthId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WandOptions other) {
              if (other == null) {
                return;
              }
              if (other.CoreId.Length != 0) {
                CoreId = other.CoreId;
              }
              if (other.WoodId.Length != 0) {
                WoodId = other.WoodId;
              }
              if (other.FlexibilityId.Length != 0) {
                FlexibilityId = other.FlexibilityId;
              }
              if (other.LengthId.Length != 0) {
                LengthId = other.LengthId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    CoreId = input.ReadString();
                    break;
                  }
                  case 18: {
                    WoodId = input.ReadString();
                    break;
                  }
                  case 26: {
                    FlexibilityId = input.ReadString();
                    break;
                  }
                  case 34: {
                    LengthId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
