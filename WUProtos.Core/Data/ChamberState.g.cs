// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/ChamberState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/ChamberState.proto</summary>
  public static partial class ChamberStateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/ChamberState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChamberStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBXVVByb3Rvcy9EYXRhL0NoYW1iZXJTdGF0ZS5wcm90bxINV1VQcm90b3Mu",
            "RGF0YRojV1VQcm90b3MvRGF0YS9Mb290L0xvb3RSZXdhcmQucHJvdG8aIFdV",
            "UHJvdG9zL01hcC9NYXBDb29yZGluYXRlLnByb3RvGihXVVByb3Rvcy9EYXRh",
            "L0ZvcnRyZXNzQ29vbGRvd25EYXRhLnByb3RvGiFXVVByb3Rvcy9EYXRhL01v",
            "Yi9Nb2JSZXdhcmQucHJvdG8aJ1dVUHJvdG9zL0RhdGEvQnVmZi9BY3RpdmVC",
            "dWZmTGlzdC5wcm90byKsFwoMQ2hhbWJlclN0YXRlEh8KF2NoYW1iZXJfdGVt",
            "cGxhdGVfZ210X2lkGAEgASgJEj4KBnBsYXllchgCIAMoCzIuLldVUHJvdG9z",
            "LkRhdGEuQ2hhbWJlclN0YXRlLkNoYW1iZXJQbGF5ZXJTdGF0ZRJLChB3YWl0",
            "aW5nX3RvX3N0YXJ0GAQgASgLMi8uV1VQcm90b3MuRGF0YS5DaGFtYmVyU3Rh",
            "dGUuV2FpdGluZ1RvU3RhcnRTdGF0ZUgAEkIKC2luX3Byb2dyZXNzGAUgASgL",
            "MisuV1VQcm90b3MuRGF0YS5DaGFtYmVyU3RhdGUuSW5Qcm9ncmVzc1N0YXRl",
            "SAASPQoIZmluaXNoZWQYBiABKAsyKS5XVVByb3Rvcy5EYXRhLkNoYW1iZXJT",
            "dGF0ZS5GaW5pc2hlZFN0YXRlSAASEQoJdGltZXN0YW1wGAcgASgDGtUBCg1G",
            "aW5pc2hlZFN0YXRlEkgKDWZpbmlzaF9zdGF0dXMYASABKA4yMS5XVVByb3Rv",
            "cy5EYXRhLkNoYW1iZXJTdGF0ZS5DaGFsbGVuZ2VGaW5pc2hTdGF0dXMSPgoH",
            "cmV3YXJkcxgCIAEoCzItLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJk",
            "Lkxvb3RDb2xsZWN0aW9uEjoKDWNvb2xkb3duX2RhdGEYAyABKAsyIy5XVVBy",
            "b3Rvcy5EYXRhLkZvcnRyZXNzQ29vbGRvd25EYXRhGsABCg9JblByb2dyZXNz",
            "U3RhdGUSEwoLZW5kX3RpbWVfbXMYASABKAMSOQoEbW9icxgCIAMoCzIrLldV",
            "UHJvdG9zLkRhdGEuQ2hhbWJlclN0YXRlLkNoYW1iZXJNb2JTdGF0ZRJEChB1",
            "c2VkX21hcF9hYmlsaXR5GAMgAygLMiouV1VQcm90b3MuRGF0YS5DaGFtYmVy",
            "U3RhdGUuVXNlZE1hcEFiaWxpdHkSFwoPdG90YWxfbW9iX2NvdW50GAQgASgF",
            "GsYBCg5Vc2VkTWFwQWJpbGl0eRIaChJtYXBfYWJpbGl0eV9nbXRfaWQYASAB",
            "KAkSEQoJY2FzdGVyX2lkGAIgASgJEjMKDm1hcF9jb29yZGluYXRlGAYgASgL",
            "MhsuV1VQcm90b3MuTWFwLk1hcENvb3JkaW5hdGUSGQoRbWFwX2FiaWxpdHlf",
            "bGV2ZWwYByABKAUSFQoNdGFyZ2V0X21vYl9pZBgIIAEoDBIeChZ0YXJnZXRf",
            "cGxheWVyX25pY2tuYW1lGAkgASgJGiwKE1dhaXRpbmdUb1N0YXJ0U3RhdGUS",
            "FQoNc3RhcnRfdGltZV9tcxgBIAEoAxqaAgoPQ2hhbWJlck1vYlN0YXRlEg4K",
            "Bm1vYl9pZBgBIAEoDBIYChBlbmNvdW50ZXJfZ210X2lkGAIgASgJEgoKAmhw",
            "GAUgASgDEg4KBm1heF9ocBgGIAEoAxINCgVsZXZlbBgHIAEoBRIYChBlbmNv",
            "dW50ZXJfdGlja2V0GAggASgMEgkKAXgYCSABKAESCQoBeRgKIAEoARI8ChBh",
            "Y3RpdmVfYnVmZl9saXN0GAsgASgLMiIuV1VQcm90b3MuRGF0YS5CdWZmLkFj",
            "dGl2ZUJ1ZmZMaXN0Ei0KB3Jld2FyZHMYDCADKAsyHC5XVVByb3Rvcy5EYXRh",
            "Lk1vYi5Nb2JSZXdhcmQSFQoNdGltZV90b19zcGF3bhhlIAEoAxqPDAoSQ2hh",
            "bWJlclBsYXllclN0YXRlEhAKCG5pY2tuYW1lGAEgASgJEmsKF3J1bmVzdG9u",
            "ZV9jb250cmlidXRpb25zGAIgAygLMkouV1VQcm90b3MuRGF0YS5DaGFtYmVy",
            "U3RhdGUuQ2hhbWJlclBsYXllclN0YXRlLlJ1bmVzdG9uZUNvbnRyaWJ1dGlv",
            "bnNFbnRyeRJUCgd3YWl0aW5nGAMgASgLMkEuV1VQcm90b3MuRGF0YS5DaGFt",
            "YmVyU3RhdGUuQ2hhbWJlclBsYXllclN0YXRlLlBsYXllcldhaXRpbmdTdGF0",
            "ZUgAElsKC2luX3Byb2dyZXNzGAQgASgLMkQuV1VQcm90b3MuRGF0YS5DaGFt",
            "YmVyU3RhdGUuQ2hhbWJlclBsYXllclN0YXRlLlBsYXllckluUHJvZ3Jlc3NT",
            "dGF0ZUgAElYKCGZpbmlzaGVkGAUgASgLMkIuV1VQcm90b3MuRGF0YS5DaGFt",
            "YmVyU3RhdGUuQ2hhbWJlclBsYXllclN0YXRlLlBsYXllckZpbmlzaGVkU3Rh",
            "dGVIABJcCg9wcm9mZXNzaW9uX2luZm8YBiABKAsyQy5XVVByb3Rvcy5EYXRh",
            "LkNoYW1iZXJTdGF0ZS5DaGFtYmVyUGxheWVyU3RhdGUuUGxheWVyUHJvZmVz",
            "c2lvbkluZm8SPAoQYWN0aXZlX2J1ZmZfbGlzdBgHIAEoCzIiLldVUHJvdG9z",
            "LkRhdGEuQnVmZi5BY3RpdmVCdWZmTGlzdBo9ChtSdW5lc3RvbmVDb250cmli",
            "dXRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ARot",
            "CgdIZWFsdGh5EgoKAmhwGAEgASgDEhYKDmVuZ2FnZWRfbW9iX2lkGAIgASgM",
            "GkAKCktub2NrZWRPdXQSGAoQa25vY2tvdXRfdGltZV9tcxgBIAEoAxIYChBy",
            "ZWNvdmVyeV90aW1lX21zGAIgASgDGlgKCk1hcEFiaWxpdHkSGgoSbWFwX2Fi",
            "aWxpdHlfZ210X2lkGAEgASgJEhMKC2Nvb2xkb3duX21zGAMgASgDEhkKEW1h",
            "cF9hYmlsaXR5X2xldmVsGAQgASgFGjIKE1BsYXllckZpbmlzaGVkU3RhdGUS",
            "GwoTaGFzX2NsYWltZWRfcmV3YXJkcxgBIAEoCBrCBAoVUGxheWVySW5Qcm9n",
            "cmVzc1N0YXRlEhAKCGxhdGl0dWRlGAEgASgBEhEKCWxvbmdpdHVkZRgCIAEo",
            "ARIOCgZtYXhfaHAYBSABKAMSUAoNbWFwX2FiaWxpdGllcxgGIAMoCzI5LldV",
            "UHJvdG9zLkRhdGEuQ2hhbWJlclN0YXRlLkNoYW1iZXJQbGF5ZXJTdGF0ZS5N",
            "YXBBYmlsaXR5EkkKB2hlYWx0aHkYByABKAsyNi5XVVByb3Rvcy5EYXRhLkNo",
            "YW1iZXJTdGF0ZS5DaGFtYmVyUGxheWVyU3RhdGUuSGVhbHRoeUgAElAKC2tu",
            "b2NrZWRfb3V0GAggASgLMjkuV1VQcm90b3MuRGF0YS5DaGFtYmVyU3RhdGUu",
            "Q2hhbWJlclBsYXllclN0YXRlLktub2NrZWRPdXRIABINCgVmb2N1cxgJIAEo",
            "BRIRCgltYXhfZm9jdXMYCiABKAUaLQoHSGVhbHRoeRIKCgJocBgBIAEoAxIW",
            "Cg5lbmdhZ2VkX21vYl9pZBgCIAEoDBpACgpLbm9ja2VkT3V0EhgKEGtub2Nr",
            "b3V0X3RpbWVfbXMYASABKAMSGAoQcmVjb3ZlcnlfdGltZV9tcxgCIAEoAxpo",
            "CgpNYXBBYmlsaXR5EhoKEm1hcF9hYmlsaXR5X2dtdF9pZBgBIAEoCRIOCgZy",
            "YWRpdXMYAiABKAISEwoLY29vbGRvd25fbXMYAyABKAMSGQoRbWFwX2FiaWxp",
            "dHlfbGV2ZWwYBCABKAVCCAoGU3RhdHVzGjEKFFBsYXllclByb2Zlc3Npb25J",
            "bmZvEhkKEXByb2Zlc3Npb25fZ210X2lkGAEgASgJGhQKElBsYXllcldhaXRp",
            "bmdTdGF0ZUIHCgVTdGF0ZSKNAQoVQ2hhbGxlbmdlRmluaXNoU3RhdHVzEiMK",
            "H0NIQUxMRU5HRV9GSU5JU0hfU1RBVFVTX1VOS05PV04QABImCiJDSEFMTEVO",
            "R0VfRklOSVNIX1NUQVRVU19QTEFZRVJfV09OEAESJwojQ0hBTExFTkdFX0ZJ",
            "TklTSF9TVEFUVVNfUExBWUVSX0xPU0UQAkIHCgVTdGF0ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Loot.LootRewardReflection.Descriptor, global::WUProtos.Map.MapCoordinateReflection.Descriptor, global::WUProtos.Data.FortressCooldownDataReflection.Descriptor, global::WUProtos.Data.Mob.MobRewardReflection.Descriptor, global::WUProtos.Data.Buff.ActiveBuffListReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState), global::WUProtos.Data.ChamberState.Parser, new[]{ "ChamberTemplateGmtId", "Player", "WaitingToStart", "InProgress", "Finished", "Timestamp" }, new[]{ "State" }, new[]{ typeof(global::WUProtos.Data.ChamberState.Types.ChallengeFinishStatus) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.FinishedState), global::WUProtos.Data.ChamberState.Types.FinishedState.Parser, new[]{ "FinishStatus", "Rewards", "CooldownData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.InProgressState), global::WUProtos.Data.ChamberState.Types.InProgressState.Parser, new[]{ "EndTimeMs", "Mobs", "UsedMapAbility", "TotalMobCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.UsedMapAbility), global::WUProtos.Data.ChamberState.Types.UsedMapAbility.Parser, new[]{ "MapAbilityGmtId", "CasterId", "MapCoordinate", "MapAbilityLevel", "TargetMobId", "TargetPlayerNickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.WaitingToStartState), global::WUProtos.Data.ChamberState.Types.WaitingToStartState.Parser, new[]{ "StartTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberMobState), global::WUProtos.Data.ChamberState.Types.ChamberMobState.Parser, new[]{ "MobId", "EncounterGmtId", "Hp", "MaxHp", "Level", "EncounterTicket", "X", "Y", "ActiveBuffList", "Rewards", "TimeToSpawn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Parser, new[]{ "Nickname", "RunestoneContributions", "Waiting", "InProgress", "Finished", "ProfessionInfo", "ActiveBuffList" }, new[]{ "State" }, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy.Parser, new[]{ "Hp", "EngagedMobId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut.Parser, new[]{ "KnockoutTimeMs", "RecoveryTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility.Parser, new[]{ "MapAbilityGmtId", "CooldownMs", "MapAbilityLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState.Parser, new[]{ "HasClaimedRewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Parser, new[]{ "Latitude", "Longitude", "MaxHp", "MapAbilities", "Healthy", "KnockedOut", "Focus", "MaxFocus" }, new[]{ "Status" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Types.Healthy), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Types.Healthy.Parser, new[]{ "Hp", "EngagedMobId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Types.KnockedOut), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Types.KnockedOut.Parser, new[]{ "KnockoutTimeMs", "RecoveryTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Types.MapAbility), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Types.MapAbility.Parser, new[]{ "MapAbilityGmtId", "Radius", "CooldownMs", "MapAbilityLevel" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerProfessionInfo), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerProfessionInfo.Parser, new[]{ "ProfessionGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState), global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState.Parser, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChamberState : pb::IMessage<ChamberState> {
    private static readonly pb::MessageParser<ChamberState> _parser = new pb::MessageParser<ChamberState>(() => new ChamberState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChamberState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.ChamberStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberState(ChamberState other) : this() {
      chamberTemplateGmtId_ = other.chamberTemplateGmtId_;
      player_ = other.player_.Clone();
      timestamp_ = other.timestamp_;
      switch (other.StateCase) {
        case StateOneofCase.WaitingToStart:
          WaitingToStart = other.WaitingToStart.Clone();
          break;
        case StateOneofCase.InProgress:
          InProgress = other.InProgress.Clone();
          break;
        case StateOneofCase.Finished:
          Finished = other.Finished.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberState Clone() {
      return new ChamberState(this);
    }

    /// <summary>Field number for the "chamber_template_gmt_id" field.</summary>
    public const int ChamberTemplateGmtIdFieldNumber = 1;
    private string chamberTemplateGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChamberTemplateGmtId {
      get { return chamberTemplateGmtId_; }
      set {
        chamberTemplateGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState> _repeated_player_codec
        = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState> player_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "waiting_to_start" field.</summary>
    public const int WaitingToStartFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberState.Types.WaitingToStartState WaitingToStart {
      get { return stateCase_ == StateOneofCase.WaitingToStart ? (global::WUProtos.Data.ChamberState.Types.WaitingToStartState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.WaitingToStart;
      }
    }

    /// <summary>Field number for the "in_progress" field.</summary>
    public const int InProgressFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberState.Types.InProgressState InProgress {
      get { return stateCase_ == StateOneofCase.InProgress ? (global::WUProtos.Data.ChamberState.Types.InProgressState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.InProgress;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberState.Types.FinishedState Finished {
      get { return stateCase_ == StateOneofCase.Finished ? (global::WUProtos.Data.ChamberState.Types.FinishedState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Finished;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    private object state_;
    /// <summary>Enum of possible cases for the "State" oneof.</summary>
    public enum StateOneofCase {
      None = 0,
      WaitingToStart = 4,
      InProgress = 5,
      Finished = 6,
    }
    private StateOneofCase stateCase_ = StateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateOneofCase StateCase {
      get { return stateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      stateCase_ = StateOneofCase.None;
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChamberState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChamberState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChamberTemplateGmtId != other.ChamberTemplateGmtId) return false;
      if(!player_.Equals(other.player_)) return false;
      if (!object.Equals(WaitingToStart, other.WaitingToStart)) return false;
      if (!object.Equals(InProgress, other.InProgress)) return false;
      if (!object.Equals(Finished, other.Finished)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (StateCase != other.StateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChamberTemplateGmtId.Length != 0) hash ^= ChamberTemplateGmtId.GetHashCode();
      hash ^= player_.GetHashCode();
      if (stateCase_ == StateOneofCase.WaitingToStart) hash ^= WaitingToStart.GetHashCode();
      if (stateCase_ == StateOneofCase.InProgress) hash ^= InProgress.GetHashCode();
      if (stateCase_ == StateOneofCase.Finished) hash ^= Finished.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= (int) stateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChamberTemplateGmtId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChamberTemplateGmtId);
      }
      player_.WriteTo(output, _repeated_player_codec);
      if (stateCase_ == StateOneofCase.WaitingToStart) {
        output.WriteRawTag(34);
        output.WriteMessage(WaitingToStart);
      }
      if (stateCase_ == StateOneofCase.InProgress) {
        output.WriteRawTag(42);
        output.WriteMessage(InProgress);
      }
      if (stateCase_ == StateOneofCase.Finished) {
        output.WriteRawTag(50);
        output.WriteMessage(Finished);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChamberTemplateGmtId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChamberTemplateGmtId);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      if (stateCase_ == StateOneofCase.WaitingToStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WaitingToStart);
      }
      if (stateCase_ == StateOneofCase.InProgress) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InProgress);
      }
      if (stateCase_ == StateOneofCase.Finished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finished);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChamberState other) {
      if (other == null) {
        return;
      }
      if (other.ChamberTemplateGmtId.Length != 0) {
        ChamberTemplateGmtId = other.ChamberTemplateGmtId;
      }
      player_.Add(other.player_);
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      switch (other.StateCase) {
        case StateOneofCase.WaitingToStart:
          if (WaitingToStart == null) {
            WaitingToStart = new global::WUProtos.Data.ChamberState.Types.WaitingToStartState();
          }
          WaitingToStart.MergeFrom(other.WaitingToStart);
          break;
        case StateOneofCase.InProgress:
          if (InProgress == null) {
            InProgress = new global::WUProtos.Data.ChamberState.Types.InProgressState();
          }
          InProgress.MergeFrom(other.InProgress);
          break;
        case StateOneofCase.Finished:
          if (Finished == null) {
            Finished = new global::WUProtos.Data.ChamberState.Types.FinishedState();
          }
          Finished.MergeFrom(other.Finished);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChamberTemplateGmtId = input.ReadString();
            break;
          }
          case 18: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 34: {
            global::WUProtos.Data.ChamberState.Types.WaitingToStartState subBuilder = new global::WUProtos.Data.ChamberState.Types.WaitingToStartState();
            if (stateCase_ == StateOneofCase.WaitingToStart) {
              subBuilder.MergeFrom(WaitingToStart);
            }
            input.ReadMessage(subBuilder);
            WaitingToStart = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.ChamberState.Types.InProgressState subBuilder = new global::WUProtos.Data.ChamberState.Types.InProgressState();
            if (stateCase_ == StateOneofCase.InProgress) {
              subBuilder.MergeFrom(InProgress);
            }
            input.ReadMessage(subBuilder);
            InProgress = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.ChamberState.Types.FinishedState subBuilder = new global::WUProtos.Data.ChamberState.Types.FinishedState();
            if (stateCase_ == StateOneofCase.Finished) {
              subBuilder.MergeFrom(Finished);
            }
            input.ReadMessage(subBuilder);
            Finished = subBuilder;
            break;
          }
          case 56: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChamberState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ChallengeFinishStatus {
        [pbr::OriginalName("CHALLENGE_FINISH_STATUS_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CHALLENGE_FINISH_STATUS_PLAYER_WON")] PlayerWon = 1,
        [pbr::OriginalName("CHALLENGE_FINISH_STATUS_PLAYER_LOSE")] PlayerLose = 2,
      }

      public sealed partial class FinishedState : pb::IMessage<FinishedState> {
        private static readonly pb::MessageParser<FinishedState> _parser = new pb::MessageParser<FinishedState>(() => new FinishedState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FinishedState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinishedState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinishedState(FinishedState other) : this() {
          finishStatus_ = other.finishStatus_;
          rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
          cooldownData_ = other.cooldownData_ != null ? other.cooldownData_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinishedState Clone() {
          return new FinishedState(this);
        }

        /// <summary>Field number for the "finish_status" field.</summary>
        public const int FinishStatusFieldNumber = 1;
        private global::WUProtos.Data.ChamberState.Types.ChallengeFinishStatus finishStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberState.Types.ChallengeFinishStatus FinishStatus {
          get { return finishStatus_; }
          set {
            finishStatus_ = value;
          }
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 2;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
          get { return rewards_; }
          set {
            rewards_ = value;
          }
        }

        /// <summary>Field number for the "cooldown_data" field.</summary>
        public const int CooldownDataFieldNumber = 3;
        private global::WUProtos.Data.FortressCooldownData cooldownData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.FortressCooldownData CooldownData {
          get { return cooldownData_; }
          set {
            cooldownData_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FinishedState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FinishedState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FinishStatus != other.FinishStatus) return false;
          if (!object.Equals(Rewards, other.Rewards)) return false;
          if (!object.Equals(CooldownData, other.CooldownData)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FinishStatus != 0) hash ^= FinishStatus.GetHashCode();
          if (rewards_ != null) hash ^= Rewards.GetHashCode();
          if (cooldownData_ != null) hash ^= CooldownData.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FinishStatus != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) FinishStatus);
          }
          if (rewards_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Rewards);
          }
          if (cooldownData_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(CooldownData);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FinishStatus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FinishStatus);
          }
          if (rewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
          }
          if (cooldownData_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CooldownData);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FinishedState other) {
          if (other == null) {
            return;
          }
          if (other.FinishStatus != 0) {
            FinishStatus = other.FinishStatus;
          }
          if (other.rewards_ != null) {
            if (rewards_ == null) {
              Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Rewards.MergeFrom(other.Rewards);
          }
          if (other.cooldownData_ != null) {
            if (cooldownData_ == null) {
              CooldownData = new global::WUProtos.Data.FortressCooldownData();
            }
            CooldownData.MergeFrom(other.CooldownData);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FinishStatus = (global::WUProtos.Data.ChamberState.Types.ChallengeFinishStatus) input.ReadEnum();
                break;
              }
              case 18: {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Rewards);
                break;
              }
              case 26: {
                if (cooldownData_ == null) {
                  CooldownData = new global::WUProtos.Data.FortressCooldownData();
                }
                input.ReadMessage(CooldownData);
                break;
              }
            }
          }
        }

      }

      public sealed partial class InProgressState : pb::IMessage<InProgressState> {
        private static readonly pb::MessageParser<InProgressState> _parser = new pb::MessageParser<InProgressState>(() => new InProgressState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InProgressState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InProgressState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InProgressState(InProgressState other) : this() {
          endTimeMs_ = other.endTimeMs_;
          mobs_ = other.mobs_.Clone();
          usedMapAbility_ = other.usedMapAbility_.Clone();
          totalMobCount_ = other.totalMobCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InProgressState Clone() {
          return new InProgressState(this);
        }

        /// <summary>Field number for the "end_time_ms" field.</summary>
        public const int EndTimeMsFieldNumber = 1;
        private long endTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTimeMs {
          get { return endTimeMs_; }
          set {
            endTimeMs_ = value;
          }
        }

        /// <summary>Field number for the "mobs" field.</summary>
        public const int MobsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberState.Types.ChamberMobState> _repeated_mobs_codec
            = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.ChamberState.Types.ChamberMobState.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberMobState> mobs_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberMobState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberMobState> Mobs {
          get { return mobs_; }
        }

        /// <summary>Field number for the "used_map_ability" field.</summary>
        public const int UsedMapAbilityFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberState.Types.UsedMapAbility> _repeated_usedMapAbility_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.ChamberState.Types.UsedMapAbility.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.UsedMapAbility> usedMapAbility_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.UsedMapAbility>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.UsedMapAbility> UsedMapAbility {
          get { return usedMapAbility_; }
        }

        /// <summary>Field number for the "total_mob_count" field.</summary>
        public const int TotalMobCountFieldNumber = 4;
        private int totalMobCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalMobCount {
          get { return totalMobCount_; }
          set {
            totalMobCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InProgressState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InProgressState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EndTimeMs != other.EndTimeMs) return false;
          if(!mobs_.Equals(other.mobs_)) return false;
          if(!usedMapAbility_.Equals(other.usedMapAbility_)) return false;
          if (TotalMobCount != other.TotalMobCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EndTimeMs != 0L) hash ^= EndTimeMs.GetHashCode();
          hash ^= mobs_.GetHashCode();
          hash ^= usedMapAbility_.GetHashCode();
          if (TotalMobCount != 0) hash ^= TotalMobCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EndTimeMs != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(EndTimeMs);
          }
          mobs_.WriteTo(output, _repeated_mobs_codec);
          usedMapAbility_.WriteTo(output, _repeated_usedMapAbility_codec);
          if (TotalMobCount != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(TotalMobCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EndTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimeMs);
          }
          size += mobs_.CalculateSize(_repeated_mobs_codec);
          size += usedMapAbility_.CalculateSize(_repeated_usedMapAbility_codec);
          if (TotalMobCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalMobCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InProgressState other) {
          if (other == null) {
            return;
          }
          if (other.EndTimeMs != 0L) {
            EndTimeMs = other.EndTimeMs;
          }
          mobs_.Add(other.mobs_);
          usedMapAbility_.Add(other.usedMapAbility_);
          if (other.TotalMobCount != 0) {
            TotalMobCount = other.TotalMobCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EndTimeMs = input.ReadInt64();
                break;
              }
              case 18: {
                mobs_.AddEntriesFrom(input, _repeated_mobs_codec);
                break;
              }
              case 26: {
                usedMapAbility_.AddEntriesFrom(input, _repeated_usedMapAbility_codec);
                break;
              }
              case 32: {
                TotalMobCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UsedMapAbility : pb::IMessage<UsedMapAbility> {
        private static readonly pb::MessageParser<UsedMapAbility> _parser = new pb::MessageParser<UsedMapAbility>(() => new UsedMapAbility());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UsedMapAbility> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsedMapAbility() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsedMapAbility(UsedMapAbility other) : this() {
          mapAbilityGmtId_ = other.mapAbilityGmtId_;
          casterId_ = other.casterId_;
          mapCoordinate_ = other.mapCoordinate_ != null ? other.mapCoordinate_.Clone() : null;
          mapAbilityLevel_ = other.mapAbilityLevel_;
          targetMobId_ = other.targetMobId_;
          targetPlayerNickname_ = other.targetPlayerNickname_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsedMapAbility Clone() {
          return new UsedMapAbility(this);
        }

        /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
        public const int MapAbilityGmtIdFieldNumber = 1;
        private string mapAbilityGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapAbilityGmtId {
          get { return mapAbilityGmtId_; }
          set {
            mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "caster_id" field.</summary>
        public const int CasterIdFieldNumber = 2;
        private string casterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CasterId {
          get { return casterId_; }
          set {
            casterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "map_coordinate" field.</summary>
        public const int MapCoordinateFieldNumber = 6;
        private global::WUProtos.Map.MapCoordinate mapCoordinate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Map.MapCoordinate MapCoordinate {
          get { return mapCoordinate_; }
          set {
            mapCoordinate_ = value;
          }
        }

        /// <summary>Field number for the "map_ability_level" field.</summary>
        public const int MapAbilityLevelFieldNumber = 7;
        private int mapAbilityLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapAbilityLevel {
          get { return mapAbilityLevel_; }
          set {
            mapAbilityLevel_ = value;
          }
        }

        /// <summary>Field number for the "target_mob_id" field.</summary>
        public const int TargetMobIdFieldNumber = 8;
        private pb::ByteString targetMobId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TargetMobId {
          get { return targetMobId_; }
          set {
            targetMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "target_player_nickname" field.</summary>
        public const int TargetPlayerNicknameFieldNumber = 9;
        private string targetPlayerNickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TargetPlayerNickname {
          get { return targetPlayerNickname_; }
          set {
            targetPlayerNickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UsedMapAbility);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UsedMapAbility other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
          if (CasterId != other.CasterId) return false;
          if (!object.Equals(MapCoordinate, other.MapCoordinate)) return false;
          if (MapAbilityLevel != other.MapAbilityLevel) return false;
          if (TargetMobId != other.TargetMobId) return false;
          if (TargetPlayerNickname != other.TargetPlayerNickname) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
          if (CasterId.Length != 0) hash ^= CasterId.GetHashCode();
          if (mapCoordinate_ != null) hash ^= MapCoordinate.GetHashCode();
          if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
          if (TargetMobId.Length != 0) hash ^= TargetMobId.GetHashCode();
          if (TargetPlayerNickname.Length != 0) hash ^= TargetPlayerNickname.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MapAbilityGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MapAbilityGmtId);
          }
          if (CasterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CasterId);
          }
          if (mapCoordinate_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(MapCoordinate);
          }
          if (MapAbilityLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(MapAbilityLevel);
          }
          if (TargetMobId.Length != 0) {
            output.WriteRawTag(66);
            output.WriteBytes(TargetMobId);
          }
          if (TargetPlayerNickname.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(TargetPlayerNickname);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MapAbilityGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
          }
          if (CasterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CasterId);
          }
          if (mapCoordinate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapCoordinate);
          }
          if (MapAbilityLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
          }
          if (TargetMobId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetMobId);
          }
          if (TargetPlayerNickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetPlayerNickname);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UsedMapAbility other) {
          if (other == null) {
            return;
          }
          if (other.MapAbilityGmtId.Length != 0) {
            MapAbilityGmtId = other.MapAbilityGmtId;
          }
          if (other.CasterId.Length != 0) {
            CasterId = other.CasterId;
          }
          if (other.mapCoordinate_ != null) {
            if (mapCoordinate_ == null) {
              MapCoordinate = new global::WUProtos.Map.MapCoordinate();
            }
            MapCoordinate.MergeFrom(other.MapCoordinate);
          }
          if (other.MapAbilityLevel != 0) {
            MapAbilityLevel = other.MapAbilityLevel;
          }
          if (other.TargetMobId.Length != 0) {
            TargetMobId = other.TargetMobId;
          }
          if (other.TargetPlayerNickname.Length != 0) {
            TargetPlayerNickname = other.TargetPlayerNickname;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MapAbilityGmtId = input.ReadString();
                break;
              }
              case 18: {
                CasterId = input.ReadString();
                break;
              }
              case 50: {
                if (mapCoordinate_ == null) {
                  MapCoordinate = new global::WUProtos.Map.MapCoordinate();
                }
                input.ReadMessage(MapCoordinate);
                break;
              }
              case 56: {
                MapAbilityLevel = input.ReadInt32();
                break;
              }
              case 66: {
                TargetMobId = input.ReadBytes();
                break;
              }
              case 74: {
                TargetPlayerNickname = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WaitingToStartState : pb::IMessage<WaitingToStartState> {
        private static readonly pb::MessageParser<WaitingToStartState> _parser = new pb::MessageParser<WaitingToStartState>(() => new WaitingToStartState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WaitingToStartState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingToStartState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingToStartState(WaitingToStartState other) : this() {
          startTimeMs_ = other.startTimeMs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingToStartState Clone() {
          return new WaitingToStartState(this);
        }

        /// <summary>Field number for the "start_time_ms" field.</summary>
        public const int StartTimeMsFieldNumber = 1;
        private long startTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StartTimeMs {
          get { return startTimeMs_; }
          set {
            startTimeMs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WaitingToStartState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WaitingToStartState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StartTimeMs != other.StartTimeMs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StartTimeMs != 0L) hash ^= StartTimeMs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StartTimeMs != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(StartTimeMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StartTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeMs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WaitingToStartState other) {
          if (other == null) {
            return;
          }
          if (other.StartTimeMs != 0L) {
            StartTimeMs = other.StartTimeMs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                StartTimeMs = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ChamberMobState : pb::IMessage<ChamberMobState> {
        private static readonly pb::MessageParser<ChamberMobState> _parser = new pb::MessageParser<ChamberMobState>(() => new ChamberMobState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChamberMobState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberMobState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberMobState(ChamberMobState other) : this() {
          mobId_ = other.mobId_;
          encounterGmtId_ = other.encounterGmtId_;
          hp_ = other.hp_;
          maxHp_ = other.maxHp_;
          level_ = other.level_;
          encounterTicket_ = other.encounterTicket_;
          x_ = other.x_;
          y_ = other.y_;
          activeBuffList_ = other.activeBuffList_ != null ? other.activeBuffList_.Clone() : null;
          rewards_ = other.rewards_.Clone();
          timeToSpawn_ = other.timeToSpawn_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberMobState Clone() {
          return new ChamberMobState(this);
        }

        /// <summary>Field number for the "mob_id" field.</summary>
        public const int MobIdFieldNumber = 1;
        private pb::ByteString mobId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString MobId {
          get { return mobId_; }
          set {
            mobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "encounter_gmt_id" field.</summary>
        public const int EncounterGmtIdFieldNumber = 2;
        private string encounterGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterGmtId {
          get { return encounterGmtId_; }
          set {
            encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 5;
        private long hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "max_hp" field.</summary>
        public const int MaxHpFieldNumber = 6;
        private long maxHp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxHp {
          get { return maxHp_; }
          set {
            maxHp_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 7;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "encounter_ticket" field.</summary>
        public const int EncounterTicketFieldNumber = 8;
        private pb::ByteString encounterTicket_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString EncounterTicket {
          get { return encounterTicket_; }
          set {
            encounterTicket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 9;
        private double x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 10;
        private double y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "active_buff_list" field.</summary>
        public const int ActiveBuffListFieldNumber = 11;
        private global::WUProtos.Data.Buff.ActiveBuffList activeBuffList_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuffList ActiveBuffList {
          get { return activeBuffList_; }
          set {
            activeBuffList_ = value;
          }
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 12;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Mob.MobReward> _repeated_rewards_codec
            = pb::FieldCodec.ForMessage(98, global::WUProtos.Data.Mob.MobReward.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Mob.MobReward> rewards_ = new pbc::RepeatedField<global::WUProtos.Data.Mob.MobReward>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Mob.MobReward> Rewards {
          get { return rewards_; }
        }

        /// <summary>Field number for the "time_to_spawn" field.</summary>
        public const int TimeToSpawnFieldNumber = 101;
        private long timeToSpawn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TimeToSpawn {
          get { return timeToSpawn_; }
          set {
            timeToSpawn_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChamberMobState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChamberMobState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MobId != other.MobId) return false;
          if (EncounterGmtId != other.EncounterGmtId) return false;
          if (Hp != other.Hp) return false;
          if (MaxHp != other.MaxHp) return false;
          if (Level != other.Level) return false;
          if (EncounterTicket != other.EncounterTicket) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!object.Equals(ActiveBuffList, other.ActiveBuffList)) return false;
          if(!rewards_.Equals(other.rewards_)) return false;
          if (TimeToSpawn != other.TimeToSpawn) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MobId.Length != 0) hash ^= MobId.GetHashCode();
          if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
          if (Hp != 0L) hash ^= Hp.GetHashCode();
          if (MaxHp != 0L) hash ^= MaxHp.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (EncounterTicket.Length != 0) hash ^= EncounterTicket.GetHashCode();
          if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
          if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
          if (activeBuffList_ != null) hash ^= ActiveBuffList.GetHashCode();
          hash ^= rewards_.GetHashCode();
          if (TimeToSpawn != 0L) hash ^= TimeToSpawn.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MobId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(MobId);
          }
          if (EncounterGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterGmtId);
          }
          if (Hp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(Hp);
          }
          if (MaxHp != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(MaxHp);
          }
          if (Level != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(Level);
          }
          if (EncounterTicket.Length != 0) {
            output.WriteRawTag(66);
            output.WriteBytes(EncounterTicket);
          }
          if (X != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(X);
          }
          if (Y != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(Y);
          }
          if (activeBuffList_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(ActiveBuffList);
          }
          rewards_.WriteTo(output, _repeated_rewards_codec);
          if (TimeToSpawn != 0L) {
            output.WriteRawTag(168, 6);
            output.WriteInt64(TimeToSpawn);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MobId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(MobId);
          }
          if (EncounterGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
          }
          if (Hp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
          }
          if (MaxHp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (EncounterTicket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncounterTicket);
          }
          if (X != 0D) {
            size += 1 + 8;
          }
          if (Y != 0D) {
            size += 1 + 8;
          }
          if (activeBuffList_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveBuffList);
          }
          size += rewards_.CalculateSize(_repeated_rewards_codec);
          if (TimeToSpawn != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TimeToSpawn);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChamberMobState other) {
          if (other == null) {
            return;
          }
          if (other.MobId.Length != 0) {
            MobId = other.MobId;
          }
          if (other.EncounterGmtId.Length != 0) {
            EncounterGmtId = other.EncounterGmtId;
          }
          if (other.Hp != 0L) {
            Hp = other.Hp;
          }
          if (other.MaxHp != 0L) {
            MaxHp = other.MaxHp;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.EncounterTicket.Length != 0) {
            EncounterTicket = other.EncounterTicket;
          }
          if (other.X != 0D) {
            X = other.X;
          }
          if (other.Y != 0D) {
            Y = other.Y;
          }
          if (other.activeBuffList_ != null) {
            if (activeBuffList_ == null) {
              ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
            }
            ActiveBuffList.MergeFrom(other.ActiveBuffList);
          }
          rewards_.Add(other.rewards_);
          if (other.TimeToSpawn != 0L) {
            TimeToSpawn = other.TimeToSpawn;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MobId = input.ReadBytes();
                break;
              }
              case 18: {
                EncounterGmtId = input.ReadString();
                break;
              }
              case 40: {
                Hp = input.ReadInt64();
                break;
              }
              case 48: {
                MaxHp = input.ReadInt64();
                break;
              }
              case 56: {
                Level = input.ReadInt32();
                break;
              }
              case 66: {
                EncounterTicket = input.ReadBytes();
                break;
              }
              case 73: {
                X = input.ReadDouble();
                break;
              }
              case 81: {
                Y = input.ReadDouble();
                break;
              }
              case 90: {
                if (activeBuffList_ == null) {
                  ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
                }
                input.ReadMessage(ActiveBuffList);
                break;
              }
              case 98: {
                rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
                break;
              }
              case 808: {
                TimeToSpawn = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ChamberPlayerState : pb::IMessage<ChamberPlayerState> {
        private static readonly pb::MessageParser<ChamberPlayerState> _parser = new pb::MessageParser<ChamberPlayerState>(() => new ChamberPlayerState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChamberPlayerState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberPlayerState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberPlayerState(ChamberPlayerState other) : this() {
          nickname_ = other.nickname_;
          runestoneContributions_ = other.runestoneContributions_.Clone();
          professionInfo_ = other.professionInfo_ != null ? other.professionInfo_.Clone() : null;
          activeBuffList_ = other.activeBuffList_ != null ? other.activeBuffList_.Clone() : null;
          switch (other.StateCase) {
            case StateOneofCase.Waiting:
              Waiting = other.Waiting.Clone();
              break;
            case StateOneofCase.InProgress:
              InProgress = other.InProgress.Clone();
              break;
            case StateOneofCase.Finished:
              Finished = other.Finished.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberPlayerState Clone() {
          return new ChamberPlayerState(this);
        }

        /// <summary>Field number for the "nickname" field.</summary>
        public const int NicknameFieldNumber = 1;
        private string nickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nickname {
          get { return nickname_; }
          set {
            nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "runestone_contributions" field.</summary>
        public const int RunestoneContributionsFieldNumber = 2;
        private static readonly pbc::MapField<string, long>.Codec _map_runestoneContributions_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 18);
        private readonly pbc::MapField<string, long> runestoneContributions_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> RunestoneContributions {
          get { return runestoneContributions_; }
        }

        /// <summary>Field number for the "waiting" field.</summary>
        public const int WaitingFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState Waiting {
          get { return stateCase_ == StateOneofCase.Waiting ? (global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState) state_ : null; }
          set {
            state_ = value;
            stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Waiting;
          }
        }

        /// <summary>Field number for the "in_progress" field.</summary>
        public const int InProgressFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState InProgress {
          get { return stateCase_ == StateOneofCase.InProgress ? (global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState) state_ : null; }
          set {
            state_ = value;
            stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.InProgress;
          }
        }

        /// <summary>Field number for the "finished" field.</summary>
        public const int FinishedFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState Finished {
          get { return stateCase_ == StateOneofCase.Finished ? (global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState) state_ : null; }
          set {
            state_ = value;
            stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Finished;
          }
        }

        /// <summary>Field number for the "profession_info" field.</summary>
        public const int ProfessionInfoFieldNumber = 6;
        private global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerProfessionInfo professionInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerProfessionInfo ProfessionInfo {
          get { return professionInfo_; }
          set {
            professionInfo_ = value;
          }
        }

        /// <summary>Field number for the "active_buff_list" field.</summary>
        public const int ActiveBuffListFieldNumber = 7;
        private global::WUProtos.Data.Buff.ActiveBuffList activeBuffList_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuffList ActiveBuffList {
          get { return activeBuffList_; }
          set {
            activeBuffList_ = value;
          }
        }

        private object state_;
        /// <summary>Enum of possible cases for the "State" oneof.</summary>
        public enum StateOneofCase {
          None = 0,
          Waiting = 3,
          InProgress = 4,
          Finished = 5,
        }
        private StateOneofCase stateCase_ = StateOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StateOneofCase StateCase {
          get { return stateCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearState() {
          stateCase_ = StateOneofCase.None;
          state_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChamberPlayerState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChamberPlayerState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Nickname != other.Nickname) return false;
          if (!RunestoneContributions.Equals(other.RunestoneContributions)) return false;
          if (!object.Equals(Waiting, other.Waiting)) return false;
          if (!object.Equals(InProgress, other.InProgress)) return false;
          if (!object.Equals(Finished, other.Finished)) return false;
          if (!object.Equals(ProfessionInfo, other.ProfessionInfo)) return false;
          if (!object.Equals(ActiveBuffList, other.ActiveBuffList)) return false;
          if (StateCase != other.StateCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
          hash ^= RunestoneContributions.GetHashCode();
          if (stateCase_ == StateOneofCase.Waiting) hash ^= Waiting.GetHashCode();
          if (stateCase_ == StateOneofCase.InProgress) hash ^= InProgress.GetHashCode();
          if (stateCase_ == StateOneofCase.Finished) hash ^= Finished.GetHashCode();
          if (professionInfo_ != null) hash ^= ProfessionInfo.GetHashCode();
          if (activeBuffList_ != null) hash ^= ActiveBuffList.GetHashCode();
          hash ^= (int) stateCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Nickname.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Nickname);
          }
          runestoneContributions_.WriteTo(output, _map_runestoneContributions_codec);
          if (stateCase_ == StateOneofCase.Waiting) {
            output.WriteRawTag(26);
            output.WriteMessage(Waiting);
          }
          if (stateCase_ == StateOneofCase.InProgress) {
            output.WriteRawTag(34);
            output.WriteMessage(InProgress);
          }
          if (stateCase_ == StateOneofCase.Finished) {
            output.WriteRawTag(42);
            output.WriteMessage(Finished);
          }
          if (professionInfo_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(ProfessionInfo);
          }
          if (activeBuffList_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(ActiveBuffList);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Nickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
          }
          size += runestoneContributions_.CalculateSize(_map_runestoneContributions_codec);
          if (stateCase_ == StateOneofCase.Waiting) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Waiting);
          }
          if (stateCase_ == StateOneofCase.InProgress) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InProgress);
          }
          if (stateCase_ == StateOneofCase.Finished) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finished);
          }
          if (professionInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionInfo);
          }
          if (activeBuffList_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveBuffList);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChamberPlayerState other) {
          if (other == null) {
            return;
          }
          if (other.Nickname.Length != 0) {
            Nickname = other.Nickname;
          }
          runestoneContributions_.Add(other.runestoneContributions_);
          if (other.professionInfo_ != null) {
            if (professionInfo_ == null) {
              ProfessionInfo = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerProfessionInfo();
            }
            ProfessionInfo.MergeFrom(other.ProfessionInfo);
          }
          if (other.activeBuffList_ != null) {
            if (activeBuffList_ == null) {
              ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
            }
            ActiveBuffList.MergeFrom(other.ActiveBuffList);
          }
          switch (other.StateCase) {
            case StateOneofCase.Waiting:
              if (Waiting == null) {
                Waiting = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState();
              }
              Waiting.MergeFrom(other.Waiting);
              break;
            case StateOneofCase.InProgress:
              if (InProgress == null) {
                InProgress = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState();
              }
              InProgress.MergeFrom(other.InProgress);
              break;
            case StateOneofCase.Finished:
              if (Finished == null) {
                Finished = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState();
              }
              Finished.MergeFrom(other.Finished);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Nickname = input.ReadString();
                break;
              }
              case 18: {
                runestoneContributions_.AddEntriesFrom(input, _map_runestoneContributions_codec);
                break;
              }
              case 26: {
                global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState subBuilder = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerWaitingState();
                if (stateCase_ == StateOneofCase.Waiting) {
                  subBuilder.MergeFrom(Waiting);
                }
                input.ReadMessage(subBuilder);
                Waiting = subBuilder;
                break;
              }
              case 34: {
                global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState subBuilder = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState();
                if (stateCase_ == StateOneofCase.InProgress) {
                  subBuilder.MergeFrom(InProgress);
                }
                input.ReadMessage(subBuilder);
                InProgress = subBuilder;
                break;
              }
              case 42: {
                global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState subBuilder = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerFinishedState();
                if (stateCase_ == StateOneofCase.Finished) {
                  subBuilder.MergeFrom(Finished);
                }
                input.ReadMessage(subBuilder);
                Finished = subBuilder;
                break;
              }
              case 50: {
                if (professionInfo_ == null) {
                  ProfessionInfo = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerProfessionInfo();
                }
                input.ReadMessage(ProfessionInfo);
                break;
              }
              case 58: {
                if (activeBuffList_ == null) {
                  ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
                }
                input.ReadMessage(ActiveBuffList);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ChamberPlayerState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Healthy : pb::IMessage<Healthy> {
            private static readonly pb::MessageParser<Healthy> _parser = new pb::MessageParser<Healthy>(() => new Healthy());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Healthy> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Healthy() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Healthy(Healthy other) : this() {
              hp_ = other.hp_;
              engagedMobId_ = other.engagedMobId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Healthy Clone() {
              return new Healthy(this);
            }

            /// <summary>Field number for the "hp" field.</summary>
            public const int HpFieldNumber = 1;
            private long hp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Hp {
              get { return hp_; }
              set {
                hp_ = value;
              }
            }

            /// <summary>Field number for the "engaged_mob_id" field.</summary>
            public const int EngagedMobIdFieldNumber = 2;
            private pb::ByteString engagedMobId_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString EngagedMobId {
              get { return engagedMobId_; }
              set {
                engagedMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Healthy);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Healthy other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Hp != other.Hp) return false;
              if (EngagedMobId != other.EngagedMobId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Hp != 0L) hash ^= Hp.GetHashCode();
              if (EngagedMobId.Length != 0) hash ^= EngagedMobId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Hp != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Hp);
              }
              if (EngagedMobId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteBytes(EngagedMobId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Hp != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
              }
              if (EngagedMobId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(EngagedMobId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Healthy other) {
              if (other == null) {
                return;
              }
              if (other.Hp != 0L) {
                Hp = other.Hp;
              }
              if (other.EngagedMobId.Length != 0) {
                EngagedMobId = other.EngagedMobId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Hp = input.ReadInt64();
                    break;
                  }
                  case 18: {
                    EngagedMobId = input.ReadBytes();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class KnockedOut : pb::IMessage<KnockedOut> {
            private static readonly pb::MessageParser<KnockedOut> _parser = new pb::MessageParser<KnockedOut>(() => new KnockedOut());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KnockedOut> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnockedOut() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnockedOut(KnockedOut other) : this() {
              knockoutTimeMs_ = other.knockoutTimeMs_;
              recoveryTimeMs_ = other.recoveryTimeMs_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnockedOut Clone() {
              return new KnockedOut(this);
            }

            /// <summary>Field number for the "knockout_time_ms" field.</summary>
            public const int KnockoutTimeMsFieldNumber = 1;
            private long knockoutTimeMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long KnockoutTimeMs {
              get { return knockoutTimeMs_; }
              set {
                knockoutTimeMs_ = value;
              }
            }

            /// <summary>Field number for the "recovery_time_ms" field.</summary>
            public const int RecoveryTimeMsFieldNumber = 2;
            private long recoveryTimeMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long RecoveryTimeMs {
              get { return recoveryTimeMs_; }
              set {
                recoveryTimeMs_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KnockedOut);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KnockedOut other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (KnockoutTimeMs != other.KnockoutTimeMs) return false;
              if (RecoveryTimeMs != other.RecoveryTimeMs) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (KnockoutTimeMs != 0L) hash ^= KnockoutTimeMs.GetHashCode();
              if (RecoveryTimeMs != 0L) hash ^= RecoveryTimeMs.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (KnockoutTimeMs != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(KnockoutTimeMs);
              }
              if (RecoveryTimeMs != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(RecoveryTimeMs);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (KnockoutTimeMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(KnockoutTimeMs);
              }
              if (RecoveryTimeMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveryTimeMs);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KnockedOut other) {
              if (other == null) {
                return;
              }
              if (other.KnockoutTimeMs != 0L) {
                KnockoutTimeMs = other.KnockoutTimeMs;
              }
              if (other.RecoveryTimeMs != 0L) {
                RecoveryTimeMs = other.RecoveryTimeMs;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    KnockoutTimeMs = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    RecoveryTimeMs = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MapAbility : pb::IMessage<MapAbility> {
            private static readonly pb::MessageParser<MapAbility> _parser = new pb::MessageParser<MapAbility>(() => new MapAbility());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MapAbility> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbility() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbility(MapAbility other) : this() {
              mapAbilityGmtId_ = other.mapAbilityGmtId_;
              cooldownMs_ = other.cooldownMs_;
              mapAbilityLevel_ = other.mapAbilityLevel_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbility Clone() {
              return new MapAbility(this);
            }

            /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
            public const int MapAbilityGmtIdFieldNumber = 1;
            private string mapAbilityGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MapAbilityGmtId {
              get { return mapAbilityGmtId_; }
              set {
                mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "cooldown_ms" field.</summary>
            public const int CooldownMsFieldNumber = 3;
            private long cooldownMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CooldownMs {
              get { return cooldownMs_; }
              set {
                cooldownMs_ = value;
              }
            }

            /// <summary>Field number for the "map_ability_level" field.</summary>
            public const int MapAbilityLevelFieldNumber = 4;
            private int mapAbilityLevel_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int MapAbilityLevel {
              get { return mapAbilityLevel_; }
              set {
                mapAbilityLevel_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MapAbility);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MapAbility other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
              if (CooldownMs != other.CooldownMs) return false;
              if (MapAbilityLevel != other.MapAbilityLevel) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
              if (CooldownMs != 0L) hash ^= CooldownMs.GetHashCode();
              if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MapAbilityGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(MapAbilityGmtId);
              }
              if (CooldownMs != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(CooldownMs);
              }
              if (MapAbilityLevel != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(MapAbilityLevel);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MapAbilityGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
              }
              if (CooldownMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownMs);
              }
              if (MapAbilityLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MapAbility other) {
              if (other == null) {
                return;
              }
              if (other.MapAbilityGmtId.Length != 0) {
                MapAbilityGmtId = other.MapAbilityGmtId;
              }
              if (other.CooldownMs != 0L) {
                CooldownMs = other.CooldownMs;
              }
              if (other.MapAbilityLevel != 0) {
                MapAbilityLevel = other.MapAbilityLevel;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    MapAbilityGmtId = input.ReadString();
                    break;
                  }
                  case 24: {
                    CooldownMs = input.ReadInt64();
                    break;
                  }
                  case 32: {
                    MapAbilityLevel = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PlayerFinishedState : pb::IMessage<PlayerFinishedState> {
            private static readonly pb::MessageParser<PlayerFinishedState> _parser = new pb::MessageParser<PlayerFinishedState>(() => new PlayerFinishedState());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PlayerFinishedState> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerFinishedState() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerFinishedState(PlayerFinishedState other) : this() {
              hasClaimedRewards_ = other.hasClaimedRewards_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerFinishedState Clone() {
              return new PlayerFinishedState(this);
            }

            /// <summary>Field number for the "has_claimed_rewards" field.</summary>
            public const int HasClaimedRewardsFieldNumber = 1;
            private bool hasClaimedRewards_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasClaimedRewards {
              get { return hasClaimedRewards_; }
              set {
                hasClaimedRewards_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PlayerFinishedState);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PlayerFinishedState other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (HasClaimedRewards != other.HasClaimedRewards) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasClaimedRewards != false) hash ^= HasClaimedRewards.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasClaimedRewards != false) {
                output.WriteRawTag(8);
                output.WriteBool(HasClaimedRewards);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasClaimedRewards != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PlayerFinishedState other) {
              if (other == null) {
                return;
              }
              if (other.HasClaimedRewards != false) {
                HasClaimedRewards = other.HasClaimedRewards;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    HasClaimedRewards = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PlayerInProgressState : pb::IMessage<PlayerInProgressState> {
            private static readonly pb::MessageParser<PlayerInProgressState> _parser = new pb::MessageParser<PlayerInProgressState>(() => new PlayerInProgressState());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PlayerInProgressState> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerInProgressState() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerInProgressState(PlayerInProgressState other) : this() {
              latitude_ = other.latitude_;
              longitude_ = other.longitude_;
              maxHp_ = other.maxHp_;
              mapAbilities_ = other.mapAbilities_.Clone();
              focus_ = other.focus_;
              maxFocus_ = other.maxFocus_;
              switch (other.StatusCase) {
                case StatusOneofCase.Healthy:
                  Healthy = other.Healthy.Clone();
                  break;
                case StatusOneofCase.KnockedOut:
                  KnockedOut = other.KnockedOut.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerInProgressState Clone() {
              return new PlayerInProgressState(this);
            }

            /// <summary>Field number for the "latitude" field.</summary>
            public const int LatitudeFieldNumber = 1;
            private double latitude_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Latitude {
              get { return latitude_; }
              set {
                latitude_ = value;
              }
            }

            /// <summary>Field number for the "longitude" field.</summary>
            public const int LongitudeFieldNumber = 2;
            private double longitude_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Longitude {
              get { return longitude_; }
              set {
                longitude_ = value;
              }
            }

            /// <summary>Field number for the "max_hp" field.</summary>
            public const int MaxHpFieldNumber = 5;
            private long maxHp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long MaxHp {
              get { return maxHp_; }
              set {
                maxHp_ = value;
              }
            }

            /// <summary>Field number for the "map_abilities" field.</summary>
            public const int MapAbilitiesFieldNumber = 6;
            private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility> _repeated_mapAbilities_codec
                = pb::FieldCodec.ForMessage(50, global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility.Parser);
            private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility> mapAbilities_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.MapAbility> MapAbilities {
              get { return mapAbilities_; }
            }

            /// <summary>Field number for the "healthy" field.</summary>
            public const int HealthyFieldNumber = 7;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy Healthy {
              get { return statusCase_ == StatusOneofCase.Healthy ? (global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy) status_ : null; }
              set {
                status_ = value;
                statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.Healthy;
              }
            }

            /// <summary>Field number for the "knocked_out" field.</summary>
            public const int KnockedOutFieldNumber = 8;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut KnockedOut {
              get { return statusCase_ == StatusOneofCase.KnockedOut ? (global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut) status_ : null; }
              set {
                status_ = value;
                statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.KnockedOut;
              }
            }

            /// <summary>Field number for the "focus" field.</summary>
            public const int FocusFieldNumber = 9;
            private int focus_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Focus {
              get { return focus_; }
              set {
                focus_ = value;
              }
            }

            /// <summary>Field number for the "max_focus" field.</summary>
            public const int MaxFocusFieldNumber = 10;
            private int maxFocus_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int MaxFocus {
              get { return maxFocus_; }
              set {
                maxFocus_ = value;
              }
            }

            private object status_;
            /// <summary>Enum of possible cases for the "Status" oneof.</summary>
            public enum StatusOneofCase {
              None = 0,
              Healthy = 7,
              KnockedOut = 8,
            }
            private StatusOneofCase statusCase_ = StatusOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StatusOneofCase StatusCase {
              get { return statusCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatus() {
              statusCase_ = StatusOneofCase.None;
              status_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PlayerInProgressState);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PlayerInProgressState other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
              if (MaxHp != other.MaxHp) return false;
              if(!mapAbilities_.Equals(other.mapAbilities_)) return false;
              if (!object.Equals(Healthy, other.Healthy)) return false;
              if (!object.Equals(KnockedOut, other.KnockedOut)) return false;
              if (Focus != other.Focus) return false;
              if (MaxFocus != other.MaxFocus) return false;
              if (StatusCase != other.StatusCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
              if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
              if (MaxHp != 0L) hash ^= MaxHp.GetHashCode();
              hash ^= mapAbilities_.GetHashCode();
              if (statusCase_ == StatusOneofCase.Healthy) hash ^= Healthy.GetHashCode();
              if (statusCase_ == StatusOneofCase.KnockedOut) hash ^= KnockedOut.GetHashCode();
              if (Focus != 0) hash ^= Focus.GetHashCode();
              if (MaxFocus != 0) hash ^= MaxFocus.GetHashCode();
              hash ^= (int) statusCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Latitude != 0D) {
                output.WriteRawTag(9);
                output.WriteDouble(Latitude);
              }
              if (Longitude != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(Longitude);
              }
              if (MaxHp != 0L) {
                output.WriteRawTag(40);
                output.WriteInt64(MaxHp);
              }
              mapAbilities_.WriteTo(output, _repeated_mapAbilities_codec);
              if (statusCase_ == StatusOneofCase.Healthy) {
                output.WriteRawTag(58);
                output.WriteMessage(Healthy);
              }
              if (statusCase_ == StatusOneofCase.KnockedOut) {
                output.WriteRawTag(66);
                output.WriteMessage(KnockedOut);
              }
              if (Focus != 0) {
                output.WriteRawTag(72);
                output.WriteInt32(Focus);
              }
              if (MaxFocus != 0) {
                output.WriteRawTag(80);
                output.WriteInt32(MaxFocus);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Latitude != 0D) {
                size += 1 + 8;
              }
              if (Longitude != 0D) {
                size += 1 + 8;
              }
              if (MaxHp != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
              }
              size += mapAbilities_.CalculateSize(_repeated_mapAbilities_codec);
              if (statusCase_ == StatusOneofCase.Healthy) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Healthy);
              }
              if (statusCase_ == StatusOneofCase.KnockedOut) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(KnockedOut);
              }
              if (Focus != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Focus);
              }
              if (MaxFocus != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFocus);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PlayerInProgressState other) {
              if (other == null) {
                return;
              }
              if (other.Latitude != 0D) {
                Latitude = other.Latitude;
              }
              if (other.Longitude != 0D) {
                Longitude = other.Longitude;
              }
              if (other.MaxHp != 0L) {
                MaxHp = other.MaxHp;
              }
              mapAbilities_.Add(other.mapAbilities_);
              if (other.Focus != 0) {
                Focus = other.Focus;
              }
              if (other.MaxFocus != 0) {
                MaxFocus = other.MaxFocus;
              }
              switch (other.StatusCase) {
                case StatusOneofCase.Healthy:
                  if (Healthy == null) {
                    Healthy = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy();
                  }
                  Healthy.MergeFrom(other.Healthy);
                  break;
                case StatusOneofCase.KnockedOut:
                  if (KnockedOut == null) {
                    KnockedOut = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut();
                  }
                  KnockedOut.MergeFrom(other.KnockedOut);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 9: {
                    Latitude = input.ReadDouble();
                    break;
                  }
                  case 17: {
                    Longitude = input.ReadDouble();
                    break;
                  }
                  case 40: {
                    MaxHp = input.ReadInt64();
                    break;
                  }
                  case 50: {
                    mapAbilities_.AddEntriesFrom(input, _repeated_mapAbilities_codec);
                    break;
                  }
                  case 58: {
                    global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy subBuilder = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.Healthy();
                    if (statusCase_ == StatusOneofCase.Healthy) {
                      subBuilder.MergeFrom(Healthy);
                    }
                    input.ReadMessage(subBuilder);
                    Healthy = subBuilder;
                    break;
                  }
                  case 66: {
                    global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut subBuilder = new global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.KnockedOut();
                    if (statusCase_ == StatusOneofCase.KnockedOut) {
                      subBuilder.MergeFrom(KnockedOut);
                    }
                    input.ReadMessage(subBuilder);
                    KnockedOut = subBuilder;
                    break;
                  }
                  case 72: {
                    Focus = input.ReadInt32();
                    break;
                  }
                  case 80: {
                    MaxFocus = input.ReadInt32();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the PlayerInProgressState message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Healthy : pb::IMessage<Healthy> {
                private static readonly pb::MessageParser<Healthy> _parser = new pb::MessageParser<Healthy>(() => new Healthy());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Healthy> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Healthy() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Healthy(Healthy other) : this() {
                  hp_ = other.hp_;
                  engagedMobId_ = other.engagedMobId_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Healthy Clone() {
                  return new Healthy(this);
                }

                /// <summary>Field number for the "hp" field.</summary>
                public const int HpFieldNumber = 1;
                private long hp_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Hp {
                  get { return hp_; }
                  set {
                    hp_ = value;
                  }
                }

                /// <summary>Field number for the "engaged_mob_id" field.</summary>
                public const int EngagedMobIdFieldNumber = 2;
                private pb::ByteString engagedMobId_ = pb::ByteString.Empty;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString EngagedMobId {
                  get { return engagedMobId_; }
                  set {
                    engagedMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Healthy);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Healthy other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Hp != other.Hp) return false;
                  if (EngagedMobId != other.EngagedMobId) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Hp != 0L) hash ^= Hp.GetHashCode();
                  if (EngagedMobId.Length != 0) hash ^= EngagedMobId.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Hp != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Hp);
                  }
                  if (EngagedMobId.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteBytes(EngagedMobId);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Hp != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
                  }
                  if (EngagedMobId.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeBytesSize(EngagedMobId);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Healthy other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Hp != 0L) {
                    Hp = other.Hp;
                  }
                  if (other.EngagedMobId.Length != 0) {
                    EngagedMobId = other.EngagedMobId;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Hp = input.ReadInt64();
                        break;
                      }
                      case 18: {
                        EngagedMobId = input.ReadBytes();
                        break;
                      }
                    }
                  }
                }

              }

              public sealed partial class KnockedOut : pb::IMessage<KnockedOut> {
                private static readonly pb::MessageParser<KnockedOut> _parser = new pb::MessageParser<KnockedOut>(() => new KnockedOut());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<KnockedOut> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KnockedOut() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KnockedOut(KnockedOut other) : this() {
                  knockoutTimeMs_ = other.knockoutTimeMs_;
                  recoveryTimeMs_ = other.recoveryTimeMs_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public KnockedOut Clone() {
                  return new KnockedOut(this);
                }

                /// <summary>Field number for the "knockout_time_ms" field.</summary>
                public const int KnockoutTimeMsFieldNumber = 1;
                private long knockoutTimeMs_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long KnockoutTimeMs {
                  get { return knockoutTimeMs_; }
                  set {
                    knockoutTimeMs_ = value;
                  }
                }

                /// <summary>Field number for the "recovery_time_ms" field.</summary>
                public const int RecoveryTimeMsFieldNumber = 2;
                private long recoveryTimeMs_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long RecoveryTimeMs {
                  get { return recoveryTimeMs_; }
                  set {
                    recoveryTimeMs_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as KnockedOut);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(KnockedOut other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (KnockoutTimeMs != other.KnockoutTimeMs) return false;
                  if (RecoveryTimeMs != other.RecoveryTimeMs) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (KnockoutTimeMs != 0L) hash ^= KnockoutTimeMs.GetHashCode();
                  if (RecoveryTimeMs != 0L) hash ^= RecoveryTimeMs.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (KnockoutTimeMs != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(KnockoutTimeMs);
                  }
                  if (RecoveryTimeMs != 0L) {
                    output.WriteRawTag(16);
                    output.WriteInt64(RecoveryTimeMs);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (KnockoutTimeMs != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(KnockoutTimeMs);
                  }
                  if (RecoveryTimeMs != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveryTimeMs);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(KnockedOut other) {
                  if (other == null) {
                    return;
                  }
                  if (other.KnockoutTimeMs != 0L) {
                    KnockoutTimeMs = other.KnockoutTimeMs;
                  }
                  if (other.RecoveryTimeMs != 0L) {
                    RecoveryTimeMs = other.RecoveryTimeMs;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        KnockoutTimeMs = input.ReadInt64();
                        break;
                      }
                      case 16: {
                        RecoveryTimeMs = input.ReadInt64();
                        break;
                      }
                    }
                  }
                }

              }

              public sealed partial class MapAbility : pb::IMessage<MapAbility> {
                private static readonly pb::MessageParser<MapAbility> _parser = new pb::MessageParser<MapAbility>(() => new MapAbility());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<MapAbility> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Types.PlayerInProgressState.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public MapAbility() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public MapAbility(MapAbility other) : this() {
                  mapAbilityGmtId_ = other.mapAbilityGmtId_;
                  radius_ = other.radius_;
                  cooldownMs_ = other.cooldownMs_;
                  mapAbilityLevel_ = other.mapAbilityLevel_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public MapAbility Clone() {
                  return new MapAbility(this);
                }

                /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
                public const int MapAbilityGmtIdFieldNumber = 1;
                private string mapAbilityGmtId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string MapAbilityGmtId {
                  get { return mapAbilityGmtId_; }
                  set {
                    mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "radius" field.</summary>
                public const int RadiusFieldNumber = 2;
                private float radius_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Radius {
                  get { return radius_; }
                  set {
                    radius_ = value;
                  }
                }

                /// <summary>Field number for the "cooldown_ms" field.</summary>
                public const int CooldownMsFieldNumber = 3;
                private long cooldownMs_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CooldownMs {
                  get { return cooldownMs_; }
                  set {
                    cooldownMs_ = value;
                  }
                }

                /// <summary>Field number for the "map_ability_level" field.</summary>
                public const int MapAbilityLevelFieldNumber = 4;
                private int mapAbilityLevel_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int MapAbilityLevel {
                  get { return mapAbilityLevel_; }
                  set {
                    mapAbilityLevel_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as MapAbility);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(MapAbility other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
                  if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
                  if (CooldownMs != other.CooldownMs) return false;
                  if (MapAbilityLevel != other.MapAbilityLevel) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
                  if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
                  if (CooldownMs != 0L) hash ^= CooldownMs.GetHashCode();
                  if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (MapAbilityGmtId.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(MapAbilityGmtId);
                  }
                  if (Radius != 0F) {
                    output.WriteRawTag(21);
                    output.WriteFloat(Radius);
                  }
                  if (CooldownMs != 0L) {
                    output.WriteRawTag(24);
                    output.WriteInt64(CooldownMs);
                  }
                  if (MapAbilityLevel != 0) {
                    output.WriteRawTag(32);
                    output.WriteInt32(MapAbilityLevel);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (MapAbilityGmtId.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
                  }
                  if (Radius != 0F) {
                    size += 1 + 4;
                  }
                  if (CooldownMs != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownMs);
                  }
                  if (MapAbilityLevel != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(MapAbility other) {
                  if (other == null) {
                    return;
                  }
                  if (other.MapAbilityGmtId.Length != 0) {
                    MapAbilityGmtId = other.MapAbilityGmtId;
                  }
                  if (other.Radius != 0F) {
                    Radius = other.Radius;
                  }
                  if (other.CooldownMs != 0L) {
                    CooldownMs = other.CooldownMs;
                  }
                  if (other.MapAbilityLevel != 0) {
                    MapAbilityLevel = other.MapAbilityLevel;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        MapAbilityGmtId = input.ReadString();
                        break;
                      }
                      case 21: {
                        Radius = input.ReadFloat();
                        break;
                      }
                      case 24: {
                        CooldownMs = input.ReadInt64();
                        break;
                      }
                      case 32: {
                        MapAbilityLevel = input.ReadInt32();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          public sealed partial class PlayerProfessionInfo : pb::IMessage<PlayerProfessionInfo> {
            private static readonly pb::MessageParser<PlayerProfessionInfo> _parser = new pb::MessageParser<PlayerProfessionInfo>(() => new PlayerProfessionInfo());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PlayerProfessionInfo> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerProfessionInfo() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerProfessionInfo(PlayerProfessionInfo other) : this() {
              professionGmtId_ = other.professionGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerProfessionInfo Clone() {
              return new PlayerProfessionInfo(this);
            }

            /// <summary>Field number for the "profession_gmt_id" field.</summary>
            public const int ProfessionGmtIdFieldNumber = 1;
            private string professionGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ProfessionGmtId {
              get { return professionGmtId_; }
              set {
                professionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PlayerProfessionInfo);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PlayerProfessionInfo other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ProfessionGmtId != other.ProfessionGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ProfessionGmtId.Length != 0) hash ^= ProfessionGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ProfessionGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ProfessionGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ProfessionGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PlayerProfessionInfo other) {
              if (other == null) {
                return;
              }
              if (other.ProfessionGmtId.Length != 0) {
                ProfessionGmtId = other.ProfessionGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ProfessionGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PlayerWaitingState : pb::IMessage<PlayerWaitingState> {
            private static readonly pb::MessageParser<PlayerWaitingState> _parser = new pb::MessageParser<PlayerWaitingState>(() => new PlayerWaitingState());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PlayerWaitingState> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.ChamberPlayerState.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerWaitingState() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerWaitingState(PlayerWaitingState other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PlayerWaitingState Clone() {
              return new PlayerWaitingState(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PlayerWaitingState);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PlayerWaitingState other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PlayerWaitingState other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
