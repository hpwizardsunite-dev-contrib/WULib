// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Inventory/AtlasInventoryKey.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Inventory {

  /// <summary>Holder for reflection information generated from WUProtos/Inventory/AtlasInventoryKey.proto</summary>
  public static partial class AtlasInventoryKeyReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Inventory/AtlasInventoryKey.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AtlasInventoryKeyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipXVVByb3Rvcy9JbnZlbnRvcnkvQXRsYXNJbnZlbnRvcnlLZXkucHJvdG8S",
            "EldVUHJvdG9zLkludmVudG9yeSK2AwoRQXRsYXNJbnZlbnRvcnlLZXkSEQoH",
            "cHJvZmlsZRgBIAEoCEgAEhQKCnZhdWx0X2l0ZW0YAiABKAlIABIZCg9jb2xs",
            "ZWN0aW9uX2l0ZW0YAyABKAlIABIbChFjb2xsZWN0aW9uX2ZhbWlseRgEIAEo",
            "CUgAEhEKB3dhbGtib3gYBSABKANIABIWCgxwbGF5ZXJfZmxhZ3MYBiABKAlI",
            "ABIRCgdwb3J0a2V5GAcgASgDSAASIQoXcGxheWVyX2FjdGl2ZV9idWZmX2xp",
            "c3QYCCABKAhIABIZCg9jb2xsZWN0aW9uX3BhZ2UYCSABKAlIABIeChRwcm9m",
            "ZXNzaW9uc19wcm9ncmVzcxgKIAEoCEgAEhgKDnZhdWx0X2NhcGFjaXR5GAsg",
            "ASgISAASEgoIY2F1bGRyb24YDCABKANIABIaChBlc2Nyb3dlZF9yZXdhcmRz",
            "GA0gASgISAASIQoXcHJvZmVzc2lvbnNfcHJvZ3Jlc3NfdjMYDiABKAhIABIT",
            "CglxdWVzdF9sb2cYDyABKAhIABIaChBsaWZldGltZV9tZXRyaWNzGBAgASgI",
            "SABCBgoEVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryKey), global::WUProtos.Inventory.AtlasInventoryKey.Parser, new[]{ "Profile", "VaultItem", "CollectionItem", "CollectionFamily", "Walkbox", "PlayerFlags", "Portkey", "PlayerActiveBuffList", "CollectionPage", "ProfessionsProgress", "VaultCapacity", "Cauldron", "EscrowedRewards", "ProfessionsProgressV3", "QuestLog", "LifetimeMetrics" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AtlasInventoryKey : pb::IMessage<AtlasInventoryKey> {
    private static readonly pb::MessageParser<AtlasInventoryKey> _parser = new pb::MessageParser<AtlasInventoryKey>(() => new AtlasInventoryKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AtlasInventoryKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Inventory.AtlasInventoryKeyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryKey(AtlasInventoryKey other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Profile:
          Profile = other.Profile;
          break;
        case TypeOneofCase.VaultItem:
          VaultItem = other.VaultItem;
          break;
        case TypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem;
          break;
        case TypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily;
          break;
        case TypeOneofCase.Walkbox:
          Walkbox = other.Walkbox;
          break;
        case TypeOneofCase.PlayerFlags:
          PlayerFlags = other.PlayerFlags;
          break;
        case TypeOneofCase.Portkey:
          Portkey = other.Portkey;
          break;
        case TypeOneofCase.PlayerActiveBuffList:
          PlayerActiveBuffList = other.PlayerActiveBuffList;
          break;
        case TypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage;
          break;
        case TypeOneofCase.ProfessionsProgress:
          ProfessionsProgress = other.ProfessionsProgress;
          break;
        case TypeOneofCase.VaultCapacity:
          VaultCapacity = other.VaultCapacity;
          break;
        case TypeOneofCase.Cauldron:
          Cauldron = other.Cauldron;
          break;
        case TypeOneofCase.EscrowedRewards:
          EscrowedRewards = other.EscrowedRewards;
          break;
        case TypeOneofCase.ProfessionsProgressV3:
          ProfessionsProgressV3 = other.ProfessionsProgressV3;
          break;
        case TypeOneofCase.QuestLog:
          QuestLog = other.QuestLog;
          break;
        case TypeOneofCase.LifetimeMetrics:
          LifetimeMetrics = other.LifetimeMetrics;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryKey Clone() {
      return new AtlasInventoryKey(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Profile {
      get { return typeCase_ == TypeOneofCase.Profile ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Profile;
      }
    }

    /// <summary>Field number for the "vault_item" field.</summary>
    public const int VaultItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VaultItem {
      get { return typeCase_ == TypeOneofCase.VaultItem ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.VaultItem;
      }
    }

    /// <summary>Field number for the "collection_item" field.</summary>
    public const int CollectionItemFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionItem {
      get { return typeCase_ == TypeOneofCase.CollectionItem ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.CollectionItem;
      }
    }

    /// <summary>Field number for the "collection_family" field.</summary>
    public const int CollectionFamilyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionFamily {
      get { return typeCase_ == TypeOneofCase.CollectionFamily ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.CollectionFamily;
      }
    }

    /// <summary>Field number for the "walkbox" field.</summary>
    public const int WalkboxFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Walkbox {
      get { return typeCase_ == TypeOneofCase.Walkbox ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Walkbox;
      }
    }

    /// <summary>Field number for the "player_flags" field.</summary>
    public const int PlayerFlagsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerFlags {
      get { return typeCase_ == TypeOneofCase.PlayerFlags ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.PlayerFlags;
      }
    }

    /// <summary>Field number for the "portkey" field.</summary>
    public const int PortkeyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Portkey {
      get { return typeCase_ == TypeOneofCase.Portkey ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Portkey;
      }
    }

    /// <summary>Field number for the "player_active_buff_list" field.</summary>
    public const int PlayerActiveBuffListFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayerActiveBuffList {
      get { return typeCase_ == TypeOneofCase.PlayerActiveBuffList ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.PlayerActiveBuffList;
      }
    }

    /// <summary>Field number for the "collection_page" field.</summary>
    public const int CollectionPageFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionPage {
      get { return typeCase_ == TypeOneofCase.CollectionPage ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.CollectionPage;
      }
    }

    /// <summary>Field number for the "professions_progress" field.</summary>
    public const int ProfessionsProgressFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProfessionsProgress {
      get { return typeCase_ == TypeOneofCase.ProfessionsProgress ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.ProfessionsProgress;
      }
    }

    /// <summary>Field number for the "vault_capacity" field.</summary>
    public const int VaultCapacityFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VaultCapacity {
      get { return typeCase_ == TypeOneofCase.VaultCapacity ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.VaultCapacity;
      }
    }

    /// <summary>Field number for the "cauldron" field.</summary>
    public const int CauldronFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cauldron {
      get { return typeCase_ == TypeOneofCase.Cauldron ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Cauldron;
      }
    }

    /// <summary>Field number for the "escrowed_rewards" field.</summary>
    public const int EscrowedRewardsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EscrowedRewards {
      get { return typeCase_ == TypeOneofCase.EscrowedRewards ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.EscrowedRewards;
      }
    }

    /// <summary>Field number for the "professions_progress_v3" field.</summary>
    public const int ProfessionsProgressV3FieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProfessionsProgressV3 {
      get { return typeCase_ == TypeOneofCase.ProfessionsProgressV3 ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.ProfessionsProgressV3;
      }
    }

    /// <summary>Field number for the "quest_log" field.</summary>
    public const int QuestLogFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QuestLog {
      get { return typeCase_ == TypeOneofCase.QuestLog ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.QuestLog;
      }
    }

    /// <summary>Field number for the "lifetime_metrics" field.</summary>
    public const int LifetimeMetricsFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LifetimeMetrics {
      get { return typeCase_ == TypeOneofCase.LifetimeMetrics ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.LifetimeMetrics;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Profile = 1,
      VaultItem = 2,
      CollectionItem = 3,
      CollectionFamily = 4,
      Walkbox = 5,
      PlayerFlags = 6,
      Portkey = 7,
      PlayerActiveBuffList = 8,
      CollectionPage = 9,
      ProfessionsProgress = 10,
      VaultCapacity = 11,
      Cauldron = 12,
      EscrowedRewards = 13,
      ProfessionsProgressV3 = 14,
      QuestLog = 15,
      LifetimeMetrics = 16,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AtlasInventoryKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AtlasInventoryKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profile != other.Profile) return false;
      if (VaultItem != other.VaultItem) return false;
      if (CollectionItem != other.CollectionItem) return false;
      if (CollectionFamily != other.CollectionFamily) return false;
      if (Walkbox != other.Walkbox) return false;
      if (PlayerFlags != other.PlayerFlags) return false;
      if (Portkey != other.Portkey) return false;
      if (PlayerActiveBuffList != other.PlayerActiveBuffList) return false;
      if (CollectionPage != other.CollectionPage) return false;
      if (ProfessionsProgress != other.ProfessionsProgress) return false;
      if (VaultCapacity != other.VaultCapacity) return false;
      if (Cauldron != other.Cauldron) return false;
      if (EscrowedRewards != other.EscrowedRewards) return false;
      if (ProfessionsProgressV3 != other.ProfessionsProgressV3) return false;
      if (QuestLog != other.QuestLog) return false;
      if (LifetimeMetrics != other.LifetimeMetrics) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Profile) hash ^= Profile.GetHashCode();
      if (typeCase_ == TypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionItem) hash ^= CollectionItem.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionFamily) hash ^= CollectionFamily.GetHashCode();
      if (typeCase_ == TypeOneofCase.Walkbox) hash ^= Walkbox.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayerFlags) hash ^= PlayerFlags.GetHashCode();
      if (typeCase_ == TypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) hash ^= PlayerActiveBuffList.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionPage) hash ^= CollectionPage.GetHashCode();
      if (typeCase_ == TypeOneofCase.ProfessionsProgress) hash ^= ProfessionsProgress.GetHashCode();
      if (typeCase_ == TypeOneofCase.VaultCapacity) hash ^= VaultCapacity.GetHashCode();
      if (typeCase_ == TypeOneofCase.Cauldron) hash ^= Cauldron.GetHashCode();
      if (typeCase_ == TypeOneofCase.EscrowedRewards) hash ^= EscrowedRewards.GetHashCode();
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) hash ^= ProfessionsProgressV3.GetHashCode();
      if (typeCase_ == TypeOneofCase.QuestLog) hash ^= QuestLog.GetHashCode();
      if (typeCase_ == TypeOneofCase.LifetimeMetrics) hash ^= LifetimeMetrics.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Profile) {
        output.WriteRawTag(8);
        output.WriteBool(Profile);
      }
      if (typeCase_ == TypeOneofCase.VaultItem) {
        output.WriteRawTag(18);
        output.WriteString(VaultItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionItem) {
        output.WriteRawTag(26);
        output.WriteString(CollectionItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionFamily) {
        output.WriteRawTag(34);
        output.WriteString(CollectionFamily);
      }
      if (typeCase_ == TypeOneofCase.Walkbox) {
        output.WriteRawTag(40);
        output.WriteInt64(Walkbox);
      }
      if (typeCase_ == TypeOneofCase.PlayerFlags) {
        output.WriteRawTag(50);
        output.WriteString(PlayerFlags);
      }
      if (typeCase_ == TypeOneofCase.Portkey) {
        output.WriteRawTag(56);
        output.WriteInt64(Portkey);
      }
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
        output.WriteRawTag(64);
        output.WriteBool(PlayerActiveBuffList);
      }
      if (typeCase_ == TypeOneofCase.CollectionPage) {
        output.WriteRawTag(74);
        output.WriteString(CollectionPage);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgress) {
        output.WriteRawTag(80);
        output.WriteBool(ProfessionsProgress);
      }
      if (typeCase_ == TypeOneofCase.VaultCapacity) {
        output.WriteRawTag(88);
        output.WriteBool(VaultCapacity);
      }
      if (typeCase_ == TypeOneofCase.Cauldron) {
        output.WriteRawTag(96);
        output.WriteInt64(Cauldron);
      }
      if (typeCase_ == TypeOneofCase.EscrowedRewards) {
        output.WriteRawTag(104);
        output.WriteBool(EscrowedRewards);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
        output.WriteRawTag(112);
        output.WriteBool(ProfessionsProgressV3);
      }
      if (typeCase_ == TypeOneofCase.QuestLog) {
        output.WriteRawTag(120);
        output.WriteBool(QuestLog);
      }
      if (typeCase_ == TypeOneofCase.LifetimeMetrics) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LifetimeMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Profile) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.VaultItem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VaultItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionItem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionFamily) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionFamily);
      }
      if (typeCase_ == TypeOneofCase.Walkbox) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Walkbox);
      }
      if (typeCase_ == TypeOneofCase.PlayerFlags) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerFlags);
      }
      if (typeCase_ == TypeOneofCase.Portkey) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Portkey);
      }
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.CollectionPage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionPage);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgress) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.VaultCapacity) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.Cauldron) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cauldron);
      }
      if (typeCase_ == TypeOneofCase.EscrowedRewards) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.QuestLog) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.LifetimeMetrics) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AtlasInventoryKey other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Profile:
          Profile = other.Profile;
          break;
        case TypeOneofCase.VaultItem:
          VaultItem = other.VaultItem;
          break;
        case TypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem;
          break;
        case TypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily;
          break;
        case TypeOneofCase.Walkbox:
          Walkbox = other.Walkbox;
          break;
        case TypeOneofCase.PlayerFlags:
          PlayerFlags = other.PlayerFlags;
          break;
        case TypeOneofCase.Portkey:
          Portkey = other.Portkey;
          break;
        case TypeOneofCase.PlayerActiveBuffList:
          PlayerActiveBuffList = other.PlayerActiveBuffList;
          break;
        case TypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage;
          break;
        case TypeOneofCase.ProfessionsProgress:
          ProfessionsProgress = other.ProfessionsProgress;
          break;
        case TypeOneofCase.VaultCapacity:
          VaultCapacity = other.VaultCapacity;
          break;
        case TypeOneofCase.Cauldron:
          Cauldron = other.Cauldron;
          break;
        case TypeOneofCase.EscrowedRewards:
          EscrowedRewards = other.EscrowedRewards;
          break;
        case TypeOneofCase.ProfessionsProgressV3:
          ProfessionsProgressV3 = other.ProfessionsProgressV3;
          break;
        case TypeOneofCase.QuestLog:
          QuestLog = other.QuestLog;
          break;
        case TypeOneofCase.LifetimeMetrics:
          LifetimeMetrics = other.LifetimeMetrics;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Profile = input.ReadBool();
            break;
          }
          case 18: {
            VaultItem = input.ReadString();
            break;
          }
          case 26: {
            CollectionItem = input.ReadString();
            break;
          }
          case 34: {
            CollectionFamily = input.ReadString();
            break;
          }
          case 40: {
            Walkbox = input.ReadInt64();
            break;
          }
          case 50: {
            PlayerFlags = input.ReadString();
            break;
          }
          case 56: {
            Portkey = input.ReadInt64();
            break;
          }
          case 64: {
            PlayerActiveBuffList = input.ReadBool();
            break;
          }
          case 74: {
            CollectionPage = input.ReadString();
            break;
          }
          case 80: {
            ProfessionsProgress = input.ReadBool();
            break;
          }
          case 88: {
            VaultCapacity = input.ReadBool();
            break;
          }
          case 96: {
            Cauldron = input.ReadInt64();
            break;
          }
          case 104: {
            EscrowedRewards = input.ReadBool();
            break;
          }
          case 112: {
            ProfessionsProgressV3 = input.ReadBool();
            break;
          }
          case 120: {
            QuestLog = input.ReadBool();
            break;
          }
          case 128: {
            LifetimeMetrics = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
