// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Loot/LootReward.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Loot {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Loot/LootReward.proto</summary>
  public static partial class LootRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Loot/LootReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LootRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNXVVByb3Rvcy9EYXRhL0xvb3QvTG9vdFJld2FyZC5wcm90bxISV1VQcm90",
            "b3MuRGF0YS5Mb290GixXVVByb3Rvcy9EYXRhL0NoYWxsZW5nZS9DaGFsbGVu",
            "Z2VCb251cy5wcm90byL4HAoKTG9vdFJld2FyZBJJCgtpdGVtX3Jld2FyZBgB",
            "IAEoCzIyLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkLlZhdWx0SXRl",
            "bUxvb3RSZXdhcmRIABJdChhjb2xsZWN0aW9uX2ZhbWlseV9yZXdhcmQYAiAB",
            "KAsyOS5XVVByb3Rvcy5EYXRhLkxvb3QuTG9vdFJld2FyZC5Db2xsZWN0aW9u",
            "RmFtaWx5TG9vdFJld2FyZEgAElAKEWNvbGxlY3Rpb25fcmV3YXJkGAMgASgL",
            "MjMuV1VQcm90b3MuRGF0YS5Mb290Lkxvb3RSZXdhcmQuQ29sbGVjdGlvbkl0",
            "ZW1SZXdhcmRIABJGCg53YWxrYm94X3Jld2FyZBgEIAEoCzIsLldVUHJvdG9z",
            "LkRhdGEuTG9vdC5Mb290UmV3YXJkLldhbGtib3hSZXdhcmRIABJGCg5wb3J0",
            "a2V5X3Jld2FyZBgFIAEoCzIsLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3",
            "YXJkLlBvcnRrZXlSZXdhcmRIABJLChFsb290X3RhYmxlX3Jld2FyZBgGIAEo",
            "CzIuLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkLkxvb3RUYWJsZVJl",
            "d2FyZEgAElcKFXZhdWx0X2NhcGFjaXR5X3Jld2FyZBgHIAEoCzI2LldVUHJv",
            "dG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkLlZhdWx0Q2FwYWNpdHlMb290UmV3",
            "YXJkSAASUgoRZ2VuZXJpY19ydW5lc3RvbmUYCCABKAsyNS5XVVByb3Rvcy5E",
            "YXRhLkxvb3QuTG9vdFJld2FyZC5HZW5lcmljUnVuZXN0b25lUmV3YXJkSAAS",
            "RAoNcG90aW9uX3Jld2FyZBgJIAEoCzIrLldVUHJvdG9zLkRhdGEuTG9vdC5M",
            "b290UmV3YXJkLlBvdGlvblJld2FyZEgAElYKE3BvcnRrZXlfY29sbGVjdGli",
            "bGUYCiABKAsyNy5XVVByb3Rvcy5EYXRhLkxvb3QuTG9vdFJld2FyZC5Qb3J0",
            "a2V5Q29sbGVjdGlibGVSZXdhcmRIABJsCiBnZW5lcmljX2NvbGxlY3Rpb25f",
            "ZmFtaWx5X3Jld2FyZBgLIAEoCzJALldVUHJvdG9zLkRhdGEuTG9vdC5Mb290",
            "UmV3YXJkLkdlbmVyaWNDb2xsZWN0aW9uRmFtaWx5TG9vdFJld2FyZEgAEkgK",
            "D2NhdWxkcm9uX3Jld2FyZBgMIAEoCzItLldVUHJvdG9zLkRhdGEuTG9vdC5M",
            "b290UmV3YXJkLkNhdWxkcm9uUmV3YXJkSAASSAoPY3VycmVuY3lfcmV3YXJk",
            "GA0gASgLMi0uV1VQcm90b3MuRGF0YS5Mb290Lkxvb3RSZXdhcmQuQ3VycmVu",
            "Y3lSZXdhcmRIABJCCgxxdWVzdF9yZXdhcmQYDiABKAsyKi5XVVByb3Rvcy5E",
            "YXRhLkxvb3QuTG9vdFJld2FyZC5RdWVzdFJld2FyZEgAElMKFW1hcF9pbmdy",
            "ZWRpZW50X3Jld2FyZBgPIAEoCzIyLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290",
            "UmV3YXJkLk1hcEluZ3JlZGllbnRSZXdhcmRIABJECg5ib251c19tZXRhZGF0",
            "YRhlIAEoCzIsLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkLkJvbnVz",
            "TWV0YWRhdGEaMwohR2VuZXJpY0NvbGxlY3Rpb25GYW1pbHlMb290UmV3YXJk",
            "Eg4KBmFtb3VudBgBIAEoBRo2ChZHZW5lcmljUnVuZXN0b25lUmV3YXJkEgwK",
            "BHJhbmsYASABKAUSDgoGYW1vdW50GAIgASgDGjYKGFBvcnRrZXlDb2xsZWN0",
            "aWJsZVJld2FyZBIaChJjb2xsZWN0aW9uX2l0ZW1faWQYASABKAkaIwoNUG9y",
            "dGtleVJld2FyZBISCgpwb3J0a2V5X2lkGAEgASgJGq4KCg1Cb251c01ldGFk",
            "YXRhElIKBnBvdGlvbhgBIAEoCzJALldVUHJvdG9zLkRhdGEuTG9vdC5Mb290",
            "UmV3YXJkLkJvbnVzTWV0YWRhdGEuUG90aW9uQm9udXNNZXRhZGF0YUgAEloK",
            "CndyYWNrc3B1cnQYAiABKAsyRC5XVVByb3Rvcy5EYXRhLkxvb3QuTG9vdFJl",
            "d2FyZC5Cb251c01ldGFkYXRhLldyYWNrc3B1cnRCb251c01ldGFkYXRhSAAS",
            "bgoVZmlyc3RfdGltZV9jb2xsZWN0aW9uGAMgASgLMk0uV1VQcm90b3MuRGF0",
            "YS5Mb290Lkxvb3RSZXdhcmQuQm9udXNNZXRhZGF0YS5GaXJzdFRpbWVDb2xs",
            "ZWN0aW9uQm9udXNNZXRhZGF0YUgAEjwKCWNoYWxsZW5nZRgEIAEoCzInLldV",
            "UHJvdG9zLkRhdGEuQ2hhbGxlbmdlLkNoYWxsZW5nZUJvbnVzSAASWQoKc3Bl",
            "bGxfZ2FtZRgFIAEoCzJDLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJk",
            "LkJvbnVzTWV0YWRhdGEuU3BlbGxHYW1lQm9udXNNZXRhZGF0YUgAEl4KD2No",
            "YWxsZW5nZV9ib251cxgGIAEoCzJDLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290",
            "UmV3YXJkLkJvbnVzTWV0YWRhdGEuQ2hhbGxlbmdlQm9udXNNZXRhZGF0YUgA",
            "EmUKEHNoYXJkX2NvbnZlcnNpb24YByABKAsySS5XVVByb3Rvcy5EYXRhLkxv",
            "b3QuTG9vdFJld2FyZC5Cb251c01ldGFkYXRhLlNoYXJkQ29udmVyc2lvbkJv",
            "bnVzTWV0YWRhdGFIABJtChdjaGFsbGVuZ2VfY2hhbWJlcl9ib251cxgIIAEo",
            "CzJKLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkLkJvbnVzTWV0YWRh",
            "dGEuQ2hhbGxlbmdlQ2hhbWJlckJvbnVzTWV0YWRhdGFIABJrChZjaGFsbGVu",
            "Z2Vfc29jaWFsX2JvbnVzGAkgASgLMkkuV1VQcm90b3MuRGF0YS5Mb290Lkxv",
            "b3RSZXdhcmQuQm9udXNNZXRhZGF0YS5DaGFsbGVuZ2VTb2NpYWxCb251c01l",
            "dGFkYXRhSAAaIgogRmlyc3RUaW1lQ29sbGVjdGlvbkJvbnVzTWV0YWRhdGEa",
            "LgocU2hhcmRDb252ZXJzaW9uQm9udXNNZXRhZGF0YRIOCgZhbW91bnQYASAB",
            "KAUaKAoTUG90aW9uQm9udXNNZXRhZGF0YRIRCglwb3Rpb25faWQYASABKAka",
            "LQoXV3JhY2tzcHVydEJvbnVzTWV0YWRhdGESEgoKbXVsdGlwbGllchgBIAEo",
            "AhpACh1DaGFsbGVuZ2VDaGFtYmVyQm9udXNNZXRhZGF0YRIfChdjaGFtYmVy",
            "X3RlbXBsYXRlX2dtdF9pZBgBIAEoCRo4ChZDaGFsbGVuZ2VCb251c01ldGFk",
            "YXRhEh4KFmNoYWxsZW5nZV9ib251c19nbXRfaWQYASABKAkaYgocQ2hhbGxl",
            "bmdlU29jaWFsQm9udXNNZXRhZGF0YRIiChpzb2NpYWxfZnJpZW5kX2JvbnVz",
            "X2dtdF9pZBgBIAEoCRIeChZjaGFsbGVuZ2VfYm9udXNfZ210X2lkGAIgASgJ",
            "GiQKFlNwZWxsR2FtZUJvbnVzTWV0YWRhdGESCgoCaWQYASABKAlCDgoMTWV0",
            "YWRhdGFUeXBlGlUKDkNhdWxkcm9uUmV3YXJkEhMKC3RlbXBsYXRlX2lkGAEg",
            "ASgJEhMKC2NhdWxkcm9uX2lkGAIgASgDEhkKEWF2YWlsYWJpbGl0eV90aW1l",
            "GAMgASgDGj8KGkNvbGxlY3Rpb25GYW1pbHlMb290UmV3YXJkEhEKCWZhbWls",
            "eV9pZBgBIAEoCRIOCgZhbW91bnQYAiABKAUaPAoUQ29sbGVjdGlvbkl0ZW1S",
            "ZXdhcmQSDwoHaXRlbV9pZBgBIAEoCRITCgtzaGFyZF9jb3VudBgCIAEoDRqQ",
            "AQoMUG90aW9uUmV3YXJkEj4KB3Jld2FyZHMYASABKAsyLS5XVVByb3Rvcy5E",
            "YXRhLkxvb3QuTG9vdFJld2FyZC5Mb290Q29sbGVjdGlvbhIUCgx0aW1lX3Rv",
            "X2JyZXcYAiABKAMSEwoLY2F1bGRyb25faWQYAyABKAMSFQoNcmVjaXBlX2dt",
            "dF9pZBgEIAEoCRooCg9Mb290VGFibGVSZXdhcmQSFQoNbG9vdF90YWJsZV9p",
            "ZBgBIAEoCRp7Cg5Mb290Q29sbGVjdGlvbhIvCgdyZXdhcmRzGAEgAygLMh4u",
            "V1VQcm90b3MuRGF0YS5Mb290Lkxvb3RSZXdhcmQSOAoQZXNjcm93ZWRfcmV3",
            "YXJkcxgCIAMoCzIeLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkGjUK",
            "DkN1cnJlbmN5UmV3YXJkEhMKC2N1cnJlbmN5X2lkGAEgASgJEg4KBmFtb3Vu",
            "dBgCIAEoAxpIChdWYXVsdENhcGFjaXR5TG9vdFJld2FyZBIdChV2YXVsdF9j",
            "YXRlZ29yeV9nbXRfaWQYASABKAkSDgoGYW1vdW50GAIgASgDGjYKE1ZhdWx0",
            "SXRlbUxvb3RSZXdhcmQSDwoHaXRlbV9pZBgBIAEoCRIOCgZhbW91bnQYAiAB",
            "KAMaLAoNV2Fsa2JveFJld2FyZBIbChN3YWxrYm94X3RlbXBsYXRlX2lkGAEg",
            "ASgJGkAKE01hcEluZ3JlZGllbnRSZXdhcmQSGQoRaW5ncmVkaWVudF9nbXRf",
            "aWQYASABKAkSDgoGYW1vdW50GAIgASgDGiMKC1F1ZXN0UmV3YXJkEhQKDHF1",
            "ZXN0X2dtdF9pZBgBIAEoCUIMCgpSZXdhcmREYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Challenge.ChallengeBonusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward), global::WUProtos.Data.Loot.LootReward.Parser, new[]{ "ItemReward", "CollectionFamilyReward", "CollectionReward", "WalkboxReward", "PortkeyReward", "LootTableReward", "VaultCapacityReward", "GenericRunestone", "PotionReward", "PortkeyCollectible", "GenericCollectionFamilyReward", "CauldronReward", "CurrencyReward", "QuestReward", "MapIngredientReward", "BonusMetadata" }, new[]{ "RewardData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward), global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward), global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward.Parser, new[]{ "Rank", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward), global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward.Parser, new[]{ "CollectionItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward), global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward.Parser, new[]{ "PortkeyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Parser, new[]{ "Potion", "Wrackspurt", "FirstTimeCollection", "Challenge", "SpellGame", "ChallengeBonus", "ShardConversion", "ChallengeChamberBonus", "ChallengeSocialBonus" }, new[]{ "MetadataType" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata.Parser, new[]{ "PotionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata.Parser, new[]{ "Multiplier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata.Parser, new[]{ "ChamberTemplateGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata.Parser, new[]{ "ChallengeBonusGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata.Parser, new[]{ "SocialFriendBonusGmtId", "ChallengeBonusGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata), global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata.Parser, new[]{ "Id" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.CauldronReward), global::WUProtos.Data.Loot.LootReward.Types.CauldronReward.Parser, new[]{ "TemplateId", "CauldronId", "AvailabilityTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward), global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward.Parser, new[]{ "FamilyId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward), global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward.Parser, new[]{ "ItemId", "ShardCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.PotionReward), global::WUProtos.Data.Loot.LootReward.Types.PotionReward.Parser, new[]{ "Rewards", "TimeToBrew", "CauldronId", "RecipeGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.LootTableReward), global::WUProtos.Data.Loot.LootReward.Types.LootTableReward.Parser, new[]{ "LootTableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.LootCollection), global::WUProtos.Data.Loot.LootReward.Types.LootCollection.Parser, new[]{ "Rewards", "EscrowedRewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward), global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward.Parser, new[]{ "CurrencyId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward), global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward.Parser, new[]{ "VaultCategoryGmtId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward), global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward.Parser, new[]{ "ItemId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward), global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward.Parser, new[]{ "WalkboxTemplateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward), global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward.Parser, new[]{ "IngredientGmtId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward.Types.QuestReward), global::WUProtos.Data.Loot.LootReward.Types.QuestReward.Parser, new[]{ "QuestGmtId" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LootReward : pb::IMessage<LootReward> {
    private static readonly pb::MessageParser<LootReward> _parser = new pb::MessageParser<LootReward>(() => new LootReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LootReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Loot.LootRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootReward(LootReward other) : this() {
      bonusMetadata_ = other.bonusMetadata_ != null ? other.bonusMetadata_.Clone() : null;
      switch (other.RewardDataCase) {
        case RewardDataOneofCase.ItemReward:
          ItemReward = other.ItemReward.Clone();
          break;
        case RewardDataOneofCase.CollectionFamilyReward:
          CollectionFamilyReward = other.CollectionFamilyReward.Clone();
          break;
        case RewardDataOneofCase.CollectionReward:
          CollectionReward = other.CollectionReward.Clone();
          break;
        case RewardDataOneofCase.WalkboxReward:
          WalkboxReward = other.WalkboxReward.Clone();
          break;
        case RewardDataOneofCase.PortkeyReward:
          PortkeyReward = other.PortkeyReward.Clone();
          break;
        case RewardDataOneofCase.LootTableReward:
          LootTableReward = other.LootTableReward.Clone();
          break;
        case RewardDataOneofCase.VaultCapacityReward:
          VaultCapacityReward = other.VaultCapacityReward.Clone();
          break;
        case RewardDataOneofCase.GenericRunestone:
          GenericRunestone = other.GenericRunestone.Clone();
          break;
        case RewardDataOneofCase.PotionReward:
          PotionReward = other.PotionReward.Clone();
          break;
        case RewardDataOneofCase.PortkeyCollectible:
          PortkeyCollectible = other.PortkeyCollectible.Clone();
          break;
        case RewardDataOneofCase.GenericCollectionFamilyReward:
          GenericCollectionFamilyReward = other.GenericCollectionFamilyReward.Clone();
          break;
        case RewardDataOneofCase.CauldronReward:
          CauldronReward = other.CauldronReward.Clone();
          break;
        case RewardDataOneofCase.CurrencyReward:
          CurrencyReward = other.CurrencyReward.Clone();
          break;
        case RewardDataOneofCase.QuestReward:
          QuestReward = other.QuestReward.Clone();
          break;
        case RewardDataOneofCase.MapIngredientReward:
          MapIngredientReward = other.MapIngredientReward.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootReward Clone() {
      return new LootReward(this);
    }

    /// <summary>Field number for the "item_reward" field.</summary>
    public const int ItemRewardFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward ItemReward {
      get { return rewardDataCase_ == RewardDataOneofCase.ItemReward ? (global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.ItemReward;
      }
    }

    /// <summary>Field number for the "collection_family_reward" field.</summary>
    public const int CollectionFamilyRewardFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward CollectionFamilyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward ? (global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CollectionFamilyReward;
      }
    }

    /// <summary>Field number for the "collection_reward" field.</summary>
    public const int CollectionRewardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward CollectionReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CollectionReward ? (global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CollectionReward;
      }
    }

    /// <summary>Field number for the "walkbox_reward" field.</summary>
    public const int WalkboxRewardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward WalkboxReward {
      get { return rewardDataCase_ == RewardDataOneofCase.WalkboxReward ? (global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.WalkboxReward;
      }
    }

    /// <summary>Field number for the "portkey_reward" field.</summary>
    public const int PortkeyRewardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward PortkeyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.PortkeyReward ? (global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.PortkeyReward;
      }
    }

    /// <summary>Field number for the "loot_table_reward" field.</summary>
    public const int LootTableRewardFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.LootTableReward LootTableReward {
      get { return rewardDataCase_ == RewardDataOneofCase.LootTableReward ? (global::WUProtos.Data.Loot.LootReward.Types.LootTableReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.LootTableReward;
      }
    }

    /// <summary>Field number for the "vault_capacity_reward" field.</summary>
    public const int VaultCapacityRewardFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward VaultCapacityReward {
      get { return rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward ? (global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.VaultCapacityReward;
      }
    }

    /// <summary>Field number for the "generic_runestone" field.</summary>
    public const int GenericRunestoneFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward GenericRunestone {
      get { return rewardDataCase_ == RewardDataOneofCase.GenericRunestone ? (global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.GenericRunestone;
      }
    }

    /// <summary>Field number for the "potion_reward" field.</summary>
    public const int PotionRewardFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.PotionReward PotionReward {
      get { return rewardDataCase_ == RewardDataOneofCase.PotionReward ? (global::WUProtos.Data.Loot.LootReward.Types.PotionReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.PotionReward;
      }
    }

    /// <summary>Field number for the "portkey_collectible" field.</summary>
    public const int PortkeyCollectibleFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward PortkeyCollectible {
      get { return rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible ? (global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.PortkeyCollectible;
      }
    }

    /// <summary>Field number for the "generic_collection_family_reward" field.</summary>
    public const int GenericCollectionFamilyRewardFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward GenericCollectionFamilyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward ? (global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.GenericCollectionFamilyReward;
      }
    }

    /// <summary>Field number for the "cauldron_reward" field.</summary>
    public const int CauldronRewardFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.CauldronReward CauldronReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CauldronReward ? (global::WUProtos.Data.Loot.LootReward.Types.CauldronReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CauldronReward;
      }
    }

    /// <summary>Field number for the "currency_reward" field.</summary>
    public const int CurrencyRewardFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward CurrencyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CurrencyReward ? (global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CurrencyReward;
      }
    }

    /// <summary>Field number for the "quest_reward" field.</summary>
    public const int QuestRewardFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.QuestReward QuestReward {
      get { return rewardDataCase_ == RewardDataOneofCase.QuestReward ? (global::WUProtos.Data.Loot.LootReward.Types.QuestReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.QuestReward;
      }
    }

    /// <summary>Field number for the "map_ingredient_reward" field.</summary>
    public const int MapIngredientRewardFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward MapIngredientReward {
      get { return rewardDataCase_ == RewardDataOneofCase.MapIngredientReward ? (global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.MapIngredientReward;
      }
    }

    /// <summary>Field number for the "bonus_metadata" field.</summary>
    public const int BonusMetadataFieldNumber = 101;
    private global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata bonusMetadata_;
    /// <summary>
    ///int64 amount = 15; // not sure this is needed according dynspy viewer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata BonusMetadata {
      get { return bonusMetadata_; }
      set {
        bonusMetadata_ = value;
      }
    }

    private object rewardData_;
    /// <summary>Enum of possible cases for the "RewardData" oneof.</summary>
    public enum RewardDataOneofCase {
      None = 0,
      ItemReward = 1,
      CollectionFamilyReward = 2,
      CollectionReward = 3,
      WalkboxReward = 4,
      PortkeyReward = 5,
      LootTableReward = 6,
      VaultCapacityReward = 7,
      GenericRunestone = 8,
      PotionReward = 9,
      PortkeyCollectible = 10,
      GenericCollectionFamilyReward = 11,
      CauldronReward = 12,
      CurrencyReward = 13,
      QuestReward = 14,
      MapIngredientReward = 15,
    }
    private RewardDataOneofCase rewardDataCase_ = RewardDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardDataOneofCase RewardDataCase {
      get { return rewardDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRewardData() {
      rewardDataCase_ = RewardDataOneofCase.None;
      rewardData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LootReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LootReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemReward, other.ItemReward)) return false;
      if (!object.Equals(CollectionFamilyReward, other.CollectionFamilyReward)) return false;
      if (!object.Equals(CollectionReward, other.CollectionReward)) return false;
      if (!object.Equals(WalkboxReward, other.WalkboxReward)) return false;
      if (!object.Equals(PortkeyReward, other.PortkeyReward)) return false;
      if (!object.Equals(LootTableReward, other.LootTableReward)) return false;
      if (!object.Equals(VaultCapacityReward, other.VaultCapacityReward)) return false;
      if (!object.Equals(GenericRunestone, other.GenericRunestone)) return false;
      if (!object.Equals(PotionReward, other.PotionReward)) return false;
      if (!object.Equals(PortkeyCollectible, other.PortkeyCollectible)) return false;
      if (!object.Equals(GenericCollectionFamilyReward, other.GenericCollectionFamilyReward)) return false;
      if (!object.Equals(CauldronReward, other.CauldronReward)) return false;
      if (!object.Equals(CurrencyReward, other.CurrencyReward)) return false;
      if (!object.Equals(QuestReward, other.QuestReward)) return false;
      if (!object.Equals(MapIngredientReward, other.MapIngredientReward)) return false;
      if (!object.Equals(BonusMetadata, other.BonusMetadata)) return false;
      if (RewardDataCase != other.RewardDataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rewardDataCase_ == RewardDataOneofCase.ItemReward) hash ^= ItemReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) hash ^= CollectionFamilyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) hash ^= CollectionReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) hash ^= WalkboxReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) hash ^= PortkeyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) hash ^= LootTableReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) hash ^= VaultCapacityReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) hash ^= GenericRunestone.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.PotionReward) hash ^= PotionReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) hash ^= PortkeyCollectible.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) hash ^= GenericCollectionFamilyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) hash ^= CauldronReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) hash ^= CurrencyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.QuestReward) hash ^= QuestReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.MapIngredientReward) hash ^= MapIngredientReward.GetHashCode();
      if (bonusMetadata_ != null) hash ^= BonusMetadata.GetHashCode();
      hash ^= (int) rewardDataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rewardDataCase_ == RewardDataOneofCase.ItemReward) {
        output.WriteRawTag(10);
        output.WriteMessage(ItemReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) {
        output.WriteRawTag(18);
        output.WriteMessage(CollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) {
        output.WriteRawTag(26);
        output.WriteMessage(CollectionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) {
        output.WriteRawTag(34);
        output.WriteMessage(WalkboxReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) {
        output.WriteRawTag(42);
        output.WriteMessage(PortkeyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) {
        output.WriteRawTag(50);
        output.WriteMessage(LootTableReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) {
        output.WriteRawTag(58);
        output.WriteMessage(VaultCapacityReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) {
        output.WriteRawTag(66);
        output.WriteMessage(GenericRunestone);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PotionReward) {
        output.WriteRawTag(74);
        output.WriteMessage(PotionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) {
        output.WriteRawTag(82);
        output.WriteMessage(PortkeyCollectible);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) {
        output.WriteRawTag(90);
        output.WriteMessage(GenericCollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) {
        output.WriteRawTag(98);
        output.WriteMessage(CauldronReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) {
        output.WriteRawTag(106);
        output.WriteMessage(CurrencyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.QuestReward) {
        output.WriteRawTag(114);
        output.WriteMessage(QuestReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.MapIngredientReward) {
        output.WriteRawTag(122);
        output.WriteMessage(MapIngredientReward);
      }
      if (bonusMetadata_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(BonusMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rewardDataCase_ == RewardDataOneofCase.ItemReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkboxReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LootTableReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultCapacityReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericRunestone);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PotionReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeyCollectible);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericCollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CauldronReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.QuestReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuestReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.MapIngredientReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapIngredientReward);
      }
      if (bonusMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LootReward other) {
      if (other == null) {
        return;
      }
      if (other.bonusMetadata_ != null) {
        if (bonusMetadata_ == null) {
          BonusMetadata = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata();
        }
        BonusMetadata.MergeFrom(other.BonusMetadata);
      }
      switch (other.RewardDataCase) {
        case RewardDataOneofCase.ItemReward:
          if (ItemReward == null) {
            ItemReward = new global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward();
          }
          ItemReward.MergeFrom(other.ItemReward);
          break;
        case RewardDataOneofCase.CollectionFamilyReward:
          if (CollectionFamilyReward == null) {
            CollectionFamilyReward = new global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward();
          }
          CollectionFamilyReward.MergeFrom(other.CollectionFamilyReward);
          break;
        case RewardDataOneofCase.CollectionReward:
          if (CollectionReward == null) {
            CollectionReward = new global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward();
          }
          CollectionReward.MergeFrom(other.CollectionReward);
          break;
        case RewardDataOneofCase.WalkboxReward:
          if (WalkboxReward == null) {
            WalkboxReward = new global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward();
          }
          WalkboxReward.MergeFrom(other.WalkboxReward);
          break;
        case RewardDataOneofCase.PortkeyReward:
          if (PortkeyReward == null) {
            PortkeyReward = new global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward();
          }
          PortkeyReward.MergeFrom(other.PortkeyReward);
          break;
        case RewardDataOneofCase.LootTableReward:
          if (LootTableReward == null) {
            LootTableReward = new global::WUProtos.Data.Loot.LootReward.Types.LootTableReward();
          }
          LootTableReward.MergeFrom(other.LootTableReward);
          break;
        case RewardDataOneofCase.VaultCapacityReward:
          if (VaultCapacityReward == null) {
            VaultCapacityReward = new global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward();
          }
          VaultCapacityReward.MergeFrom(other.VaultCapacityReward);
          break;
        case RewardDataOneofCase.GenericRunestone:
          if (GenericRunestone == null) {
            GenericRunestone = new global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward();
          }
          GenericRunestone.MergeFrom(other.GenericRunestone);
          break;
        case RewardDataOneofCase.PotionReward:
          if (PotionReward == null) {
            PotionReward = new global::WUProtos.Data.Loot.LootReward.Types.PotionReward();
          }
          PotionReward.MergeFrom(other.PotionReward);
          break;
        case RewardDataOneofCase.PortkeyCollectible:
          if (PortkeyCollectible == null) {
            PortkeyCollectible = new global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward();
          }
          PortkeyCollectible.MergeFrom(other.PortkeyCollectible);
          break;
        case RewardDataOneofCase.GenericCollectionFamilyReward:
          if (GenericCollectionFamilyReward == null) {
            GenericCollectionFamilyReward = new global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward();
          }
          GenericCollectionFamilyReward.MergeFrom(other.GenericCollectionFamilyReward);
          break;
        case RewardDataOneofCase.CauldronReward:
          if (CauldronReward == null) {
            CauldronReward = new global::WUProtos.Data.Loot.LootReward.Types.CauldronReward();
          }
          CauldronReward.MergeFrom(other.CauldronReward);
          break;
        case RewardDataOneofCase.CurrencyReward:
          if (CurrencyReward == null) {
            CurrencyReward = new global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward();
          }
          CurrencyReward.MergeFrom(other.CurrencyReward);
          break;
        case RewardDataOneofCase.QuestReward:
          if (QuestReward == null) {
            QuestReward = new global::WUProtos.Data.Loot.LootReward.Types.QuestReward();
          }
          QuestReward.MergeFrom(other.QuestReward);
          break;
        case RewardDataOneofCase.MapIngredientReward:
          if (MapIngredientReward == null) {
            MapIngredientReward = new global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward();
          }
          MapIngredientReward.MergeFrom(other.MapIngredientReward);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.VaultItemLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.ItemReward) {
              subBuilder.MergeFrom(ItemReward);
            }
            input.ReadMessage(subBuilder);
            ItemReward = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.CollectionFamilyLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) {
              subBuilder.MergeFrom(CollectionFamilyReward);
            }
            input.ReadMessage(subBuilder);
            CollectionFamilyReward = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.CollectionItemReward();
            if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) {
              subBuilder.MergeFrom(CollectionReward);
            }
            input.ReadMessage(subBuilder);
            CollectionReward = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.WalkboxReward();
            if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) {
              subBuilder.MergeFrom(WalkboxReward);
            }
            input.ReadMessage(subBuilder);
            WalkboxReward = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.PortkeyReward();
            if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) {
              subBuilder.MergeFrom(PortkeyReward);
            }
            input.ReadMessage(subBuilder);
            PortkeyReward = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.Loot.LootReward.Types.LootTableReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.LootTableReward();
            if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) {
              subBuilder.MergeFrom(LootTableReward);
            }
            input.ReadMessage(subBuilder);
            LootTableReward = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.VaultCapacityLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) {
              subBuilder.MergeFrom(VaultCapacityReward);
            }
            input.ReadMessage(subBuilder);
            VaultCapacityReward = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.GenericRunestoneReward();
            if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) {
              subBuilder.MergeFrom(GenericRunestone);
            }
            input.ReadMessage(subBuilder);
            GenericRunestone = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.Loot.LootReward.Types.PotionReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.PotionReward();
            if (rewardDataCase_ == RewardDataOneofCase.PotionReward) {
              subBuilder.MergeFrom(PotionReward);
            }
            input.ReadMessage(subBuilder);
            PotionReward = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.PortkeyCollectibleReward();
            if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) {
              subBuilder.MergeFrom(PortkeyCollectible);
            }
            input.ReadMessage(subBuilder);
            PortkeyCollectible = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.GenericCollectionFamilyLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) {
              subBuilder.MergeFrom(GenericCollectionFamilyReward);
            }
            input.ReadMessage(subBuilder);
            GenericCollectionFamilyReward = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.Loot.LootReward.Types.CauldronReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.CauldronReward();
            if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) {
              subBuilder.MergeFrom(CauldronReward);
            }
            input.ReadMessage(subBuilder);
            CauldronReward = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.CurrencyReward();
            if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) {
              subBuilder.MergeFrom(CurrencyReward);
            }
            input.ReadMessage(subBuilder);
            CurrencyReward = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.Loot.LootReward.Types.QuestReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.QuestReward();
            if (rewardDataCase_ == RewardDataOneofCase.QuestReward) {
              subBuilder.MergeFrom(QuestReward);
            }
            input.ReadMessage(subBuilder);
            QuestReward = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.MapIngredientReward();
            if (rewardDataCase_ == RewardDataOneofCase.MapIngredientReward) {
              subBuilder.MergeFrom(MapIngredientReward);
            }
            input.ReadMessage(subBuilder);
            MapIngredientReward = subBuilder;
            break;
          }
          case 810: {
            if (bonusMetadata_ == null) {
              BonusMetadata = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata();
            }
            input.ReadMessage(BonusMetadata);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LootReward message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GenericCollectionFamilyLootReward : pb::IMessage<GenericCollectionFamilyLootReward> {
        private static readonly pb::MessageParser<GenericCollectionFamilyLootReward> _parser = new pb::MessageParser<GenericCollectionFamilyLootReward>(() => new GenericCollectionFamilyLootReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GenericCollectionFamilyLootReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GenericCollectionFamilyLootReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GenericCollectionFamilyLootReward(GenericCollectionFamilyLootReward other) : this() {
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GenericCollectionFamilyLootReward Clone() {
          return new GenericCollectionFamilyLootReward(this);
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 1;
        private int amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GenericCollectionFamilyLootReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GenericCollectionFamilyLootReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Amount != 0) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GenericCollectionFamilyLootReward other) {
          if (other == null) {
            return;
          }
          if (other.Amount != 0) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Amount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GenericRunestoneReward : pb::IMessage<GenericRunestoneReward> {
        private static readonly pb::MessageParser<GenericRunestoneReward> _parser = new pb::MessageParser<GenericRunestoneReward>(() => new GenericRunestoneReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GenericRunestoneReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GenericRunestoneReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GenericRunestoneReward(GenericRunestoneReward other) : this() {
          rank_ = other.rank_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GenericRunestoneReward Clone() {
          return new GenericRunestoneReward(this);
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 1;
        private int rank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rank {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GenericRunestoneReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GenericRunestoneReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Rank != other.Rank) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Rank != 0) hash ^= Rank.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Rank != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Rank);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Rank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GenericRunestoneReward other) {
          if (other == null) {
            return;
          }
          if (other.Rank != 0) {
            Rank = other.Rank;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Rank = input.ReadInt32();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PortkeyCollectibleReward : pb::IMessage<PortkeyCollectibleReward> {
        private static readonly pb::MessageParser<PortkeyCollectibleReward> _parser = new pb::MessageParser<PortkeyCollectibleReward>(() => new PortkeyCollectibleReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PortkeyCollectibleReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyCollectibleReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyCollectibleReward(PortkeyCollectibleReward other) : this() {
          collectionItemId_ = other.collectionItemId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyCollectibleReward Clone() {
          return new PortkeyCollectibleReward(this);
        }

        /// <summary>Field number for the "collection_item_id" field.</summary>
        public const int CollectionItemIdFieldNumber = 1;
        private string collectionItemId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CollectionItemId {
          get { return collectionItemId_; }
          set {
            collectionItemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PortkeyCollectibleReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PortkeyCollectibleReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CollectionItemId != other.CollectionItemId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CollectionItemId.Length != 0) hash ^= CollectionItemId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CollectionItemId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CollectionItemId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CollectionItemId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionItemId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PortkeyCollectibleReward other) {
          if (other == null) {
            return;
          }
          if (other.CollectionItemId.Length != 0) {
            CollectionItemId = other.CollectionItemId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CollectionItemId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PortkeyReward : pb::IMessage<PortkeyReward> {
        private static readonly pb::MessageParser<PortkeyReward> _parser = new pb::MessageParser<PortkeyReward>(() => new PortkeyReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PortkeyReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyReward(PortkeyReward other) : this() {
          portkeyId_ = other.portkeyId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PortkeyReward Clone() {
          return new PortkeyReward(this);
        }

        /// <summary>Field number for the "portkey_id" field.</summary>
        public const int PortkeyIdFieldNumber = 1;
        private string portkeyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortkeyId {
          get { return portkeyId_; }
          set {
            portkeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PortkeyReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PortkeyReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PortkeyId != other.PortkeyId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PortkeyId.Length != 0) hash ^= PortkeyId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PortkeyId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PortkeyId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PortkeyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortkeyId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PortkeyReward other) {
          if (other == null) {
            return;
          }
          if (other.PortkeyId.Length != 0) {
            PortkeyId = other.PortkeyId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PortkeyId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BonusMetadata : pb::IMessage<BonusMetadata> {
        private static readonly pb::MessageParser<BonusMetadata> _parser = new pb::MessageParser<BonusMetadata>(() => new BonusMetadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BonusMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BonusMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BonusMetadata(BonusMetadata other) : this() {
          switch (other.MetadataTypeCase) {
            case MetadataTypeOneofCase.Potion:
              Potion = other.Potion.Clone();
              break;
            case MetadataTypeOneofCase.Wrackspurt:
              Wrackspurt = other.Wrackspurt.Clone();
              break;
            case MetadataTypeOneofCase.FirstTimeCollection:
              FirstTimeCollection = other.FirstTimeCollection.Clone();
              break;
            case MetadataTypeOneofCase.Challenge:
              Challenge = other.Challenge.Clone();
              break;
            case MetadataTypeOneofCase.SpellGame:
              SpellGame = other.SpellGame.Clone();
              break;
            case MetadataTypeOneofCase.ChallengeBonus:
              ChallengeBonus = other.ChallengeBonus.Clone();
              break;
            case MetadataTypeOneofCase.ShardConversion:
              ShardConversion = other.ShardConversion.Clone();
              break;
            case MetadataTypeOneofCase.ChallengeChamberBonus:
              ChallengeChamberBonus = other.ChallengeChamberBonus.Clone();
              break;
            case MetadataTypeOneofCase.ChallengeSocialBonus:
              ChallengeSocialBonus = other.ChallengeSocialBonus.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BonusMetadata Clone() {
          return new BonusMetadata(this);
        }

        /// <summary>Field number for the "potion" field.</summary>
        public const int PotionFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata Potion {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.Potion ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.Potion;
          }
        }

        /// <summary>Field number for the "wrackspurt" field.</summary>
        public const int WrackspurtFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata Wrackspurt {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.Wrackspurt;
          }
        }

        /// <summary>Field number for the "first_time_collection" field.</summary>
        public const int FirstTimeCollectionFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata FirstTimeCollection {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.FirstTimeCollection;
          }
        }

        /// <summary>Field number for the "challenge" field.</summary>
        public const int ChallengeFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Challenge.ChallengeBonus Challenge {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.Challenge ? (global::WUProtos.Data.Challenge.ChallengeBonus) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.Challenge;
          }
        }

        /// <summary>Field number for the "spell_game" field.</summary>
        public const int SpellGameFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata SpellGame {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.SpellGame ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.SpellGame;
          }
        }

        /// <summary>Field number for the "challenge_bonus" field.</summary>
        public const int ChallengeBonusFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata ChallengeBonus {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ChallengeBonus;
          }
        }

        /// <summary>Field number for the "shard_conversion" field.</summary>
        public const int ShardConversionFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata ShardConversion {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ShardConversion;
          }
        }

        /// <summary>Field number for the "challenge_chamber_bonus" field.</summary>
        public const int ChallengeChamberBonusFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata ChallengeChamberBonus {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ChallengeChamberBonus;
          }
        }

        /// <summary>Field number for the "challenge_social_bonus" field.</summary>
        public const int ChallengeSocialBonusFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata ChallengeSocialBonus {
          get { return metadataTypeCase_ == MetadataTypeOneofCase.ChallengeSocialBonus ? (global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata) metadataType_ : null; }
          set {
            metadataType_ = value;
            metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ChallengeSocialBonus;
          }
        }

        private object metadataType_;
        /// <summary>Enum of possible cases for the "MetadataType" oneof.</summary>
        public enum MetadataTypeOneofCase {
          None = 0,
          Potion = 1,
          Wrackspurt = 2,
          FirstTimeCollection = 3,
          Challenge = 4,
          SpellGame = 5,
          ChallengeBonus = 6,
          ShardConversion = 7,
          ChallengeChamberBonus = 8,
          ChallengeSocialBonus = 9,
        }
        private MetadataTypeOneofCase metadataTypeCase_ = MetadataTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MetadataTypeOneofCase MetadataTypeCase {
          get { return metadataTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMetadataType() {
          metadataTypeCase_ = MetadataTypeOneofCase.None;
          metadataType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BonusMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BonusMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Potion, other.Potion)) return false;
          if (!object.Equals(Wrackspurt, other.Wrackspurt)) return false;
          if (!object.Equals(FirstTimeCollection, other.FirstTimeCollection)) return false;
          if (!object.Equals(Challenge, other.Challenge)) return false;
          if (!object.Equals(SpellGame, other.SpellGame)) return false;
          if (!object.Equals(ChallengeBonus, other.ChallengeBonus)) return false;
          if (!object.Equals(ShardConversion, other.ShardConversion)) return false;
          if (!object.Equals(ChallengeChamberBonus, other.ChallengeChamberBonus)) return false;
          if (!object.Equals(ChallengeSocialBonus, other.ChallengeSocialBonus)) return false;
          if (MetadataTypeCase != other.MetadataTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) hash ^= Potion.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) hash ^= Wrackspurt.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) hash ^= FirstTimeCollection.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) hash ^= Challenge.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) hash ^= SpellGame.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) hash ^= ChallengeBonus.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) hash ^= ShardConversion.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) hash ^= ChallengeChamberBonus.GetHashCode();
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeSocialBonus) hash ^= ChallengeSocialBonus.GetHashCode();
          hash ^= (int) metadataTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) {
            output.WriteRawTag(10);
            output.WriteMessage(Potion);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) {
            output.WriteRawTag(18);
            output.WriteMessage(Wrackspurt);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) {
            output.WriteRawTag(26);
            output.WriteMessage(FirstTimeCollection);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) {
            output.WriteRawTag(34);
            output.WriteMessage(Challenge);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) {
            output.WriteRawTag(42);
            output.WriteMessage(SpellGame);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) {
            output.WriteRawTag(50);
            output.WriteMessage(ChallengeBonus);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) {
            output.WriteRawTag(58);
            output.WriteMessage(ShardConversion);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) {
            output.WriteRawTag(66);
            output.WriteMessage(ChallengeChamberBonus);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeSocialBonus) {
            output.WriteRawTag(74);
            output.WriteMessage(ChallengeSocialBonus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Potion);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wrackspurt);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstTimeCollection);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpellGame);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeBonus);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShardConversion);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeChamberBonus);
          }
          if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeSocialBonus) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeSocialBonus);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BonusMetadata other) {
          if (other == null) {
            return;
          }
          switch (other.MetadataTypeCase) {
            case MetadataTypeOneofCase.Potion:
              if (Potion == null) {
                Potion = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata();
              }
              Potion.MergeFrom(other.Potion);
              break;
            case MetadataTypeOneofCase.Wrackspurt:
              if (Wrackspurt == null) {
                Wrackspurt = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata();
              }
              Wrackspurt.MergeFrom(other.Wrackspurt);
              break;
            case MetadataTypeOneofCase.FirstTimeCollection:
              if (FirstTimeCollection == null) {
                FirstTimeCollection = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata();
              }
              FirstTimeCollection.MergeFrom(other.FirstTimeCollection);
              break;
            case MetadataTypeOneofCase.Challenge:
              if (Challenge == null) {
                Challenge = new global::WUProtos.Data.Challenge.ChallengeBonus();
              }
              Challenge.MergeFrom(other.Challenge);
              break;
            case MetadataTypeOneofCase.SpellGame:
              if (SpellGame == null) {
                SpellGame = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata();
              }
              SpellGame.MergeFrom(other.SpellGame);
              break;
            case MetadataTypeOneofCase.ChallengeBonus:
              if (ChallengeBonus == null) {
                ChallengeBonus = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata();
              }
              ChallengeBonus.MergeFrom(other.ChallengeBonus);
              break;
            case MetadataTypeOneofCase.ShardConversion:
              if (ShardConversion == null) {
                ShardConversion = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata();
              }
              ShardConversion.MergeFrom(other.ShardConversion);
              break;
            case MetadataTypeOneofCase.ChallengeChamberBonus:
              if (ChallengeChamberBonus == null) {
                ChallengeChamberBonus = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata();
              }
              ChallengeChamberBonus.MergeFrom(other.ChallengeChamberBonus);
              break;
            case MetadataTypeOneofCase.ChallengeSocialBonus:
              if (ChallengeSocialBonus == null) {
                ChallengeSocialBonus = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata();
              }
              ChallengeSocialBonus.MergeFrom(other.ChallengeSocialBonus);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.PotionBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) {
                  subBuilder.MergeFrom(Potion);
                }
                input.ReadMessage(subBuilder);
                Potion = subBuilder;
                break;
              }
              case 18: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.WrackspurtBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) {
                  subBuilder.MergeFrom(Wrackspurt);
                }
                input.ReadMessage(subBuilder);
                Wrackspurt = subBuilder;
                break;
              }
              case 26: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.FirstTimeCollectionBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) {
                  subBuilder.MergeFrom(FirstTimeCollection);
                }
                input.ReadMessage(subBuilder);
                FirstTimeCollection = subBuilder;
                break;
              }
              case 34: {
                global::WUProtos.Data.Challenge.ChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus();
                if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) {
                  subBuilder.MergeFrom(Challenge);
                }
                input.ReadMessage(subBuilder);
                Challenge = subBuilder;
                break;
              }
              case 42: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.SpellGameBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) {
                  subBuilder.MergeFrom(SpellGame);
                }
                input.ReadMessage(subBuilder);
                SpellGame = subBuilder;
                break;
              }
              case 50: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) {
                  subBuilder.MergeFrom(ChallengeBonus);
                }
                input.ReadMessage(subBuilder);
                ChallengeBonus = subBuilder;
                break;
              }
              case 58: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ShardConversionBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) {
                  subBuilder.MergeFrom(ShardConversion);
                }
                input.ReadMessage(subBuilder);
                ShardConversion = subBuilder;
                break;
              }
              case 66: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeChamberBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) {
                  subBuilder.MergeFrom(ChallengeChamberBonus);
                }
                input.ReadMessage(subBuilder);
                ChallengeChamberBonus = subBuilder;
                break;
              }
              case 74: {
                global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata subBuilder = new global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Types.ChallengeSocialBonusMetadata();
                if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeSocialBonus) {
                  subBuilder.MergeFrom(ChallengeSocialBonus);
                }
                input.ReadMessage(subBuilder);
                ChallengeSocialBonus = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BonusMetadata message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class FirstTimeCollectionBonusMetadata : pb::IMessage<FirstTimeCollectionBonusMetadata> {
            private static readonly pb::MessageParser<FirstTimeCollectionBonusMetadata> _parser = new pb::MessageParser<FirstTimeCollectionBonusMetadata>(() => new FirstTimeCollectionBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FirstTimeCollectionBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FirstTimeCollectionBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FirstTimeCollectionBonusMetadata(FirstTimeCollectionBonusMetadata other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FirstTimeCollectionBonusMetadata Clone() {
              return new FirstTimeCollectionBonusMetadata(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FirstTimeCollectionBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FirstTimeCollectionBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FirstTimeCollectionBonusMetadata other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class ShardConversionBonusMetadata : pb::IMessage<ShardConversionBonusMetadata> {
            private static readonly pb::MessageParser<ShardConversionBonusMetadata> _parser = new pb::MessageParser<ShardConversionBonusMetadata>(() => new ShardConversionBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ShardConversionBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ShardConversionBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ShardConversionBonusMetadata(ShardConversionBonusMetadata other) : this() {
              amount_ = other.amount_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ShardConversionBonusMetadata Clone() {
              return new ShardConversionBonusMetadata(this);
            }

            /// <summary>Field number for the "amount" field.</summary>
            public const int AmountFieldNumber = 1;
            private int amount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Amount {
              get { return amount_; }
              set {
                amount_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ShardConversionBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ShardConversionBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Amount != other.Amount) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Amount != 0) hash ^= Amount.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Amount != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Amount);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Amount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ShardConversionBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.Amount != 0) {
                Amount = other.Amount;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Amount = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PotionBonusMetadata : pb::IMessage<PotionBonusMetadata> {
            private static readonly pb::MessageParser<PotionBonusMetadata> _parser = new pb::MessageParser<PotionBonusMetadata>(() => new PotionBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PotionBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionBonusMetadata(PotionBonusMetadata other) : this() {
              potionId_ = other.potionId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionBonusMetadata Clone() {
              return new PotionBonusMetadata(this);
            }

            /// <summary>Field number for the "potion_id" field.</summary>
            public const int PotionIdFieldNumber = 1;
            private string potionId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string PotionId {
              get { return potionId_; }
              set {
                potionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PotionBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PotionBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (PotionId != other.PotionId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (PotionId.Length != 0) hash ^= PotionId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (PotionId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(PotionId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (PotionId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PotionId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PotionBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.PotionId.Length != 0) {
                PotionId = other.PotionId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    PotionId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class WrackspurtBonusMetadata : pb::IMessage<WrackspurtBonusMetadata> {
            private static readonly pb::MessageParser<WrackspurtBonusMetadata> _parser = new pb::MessageParser<WrackspurtBonusMetadata>(() => new WrackspurtBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WrackspurtBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WrackspurtBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WrackspurtBonusMetadata(WrackspurtBonusMetadata other) : this() {
              multiplier_ = other.multiplier_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WrackspurtBonusMetadata Clone() {
              return new WrackspurtBonusMetadata(this);
            }

            /// <summary>Field number for the "multiplier" field.</summary>
            public const int MultiplierFieldNumber = 1;
            private float multiplier_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Multiplier {
              get { return multiplier_; }
              set {
                multiplier_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WrackspurtBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WrackspurtBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Multiplier, other.Multiplier)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Multiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Multiplier);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Multiplier != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(Multiplier);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Multiplier != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WrackspurtBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.Multiplier != 0F) {
                Multiplier = other.Multiplier;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    Multiplier = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ChallengeChamberBonusMetadata : pb::IMessage<ChallengeChamberBonusMetadata> {
            private static readonly pb::MessageParser<ChallengeChamberBonusMetadata> _parser = new pb::MessageParser<ChallengeChamberBonusMetadata>(() => new ChallengeChamberBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChallengeChamberBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeChamberBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeChamberBonusMetadata(ChallengeChamberBonusMetadata other) : this() {
              chamberTemplateGmtId_ = other.chamberTemplateGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeChamberBonusMetadata Clone() {
              return new ChallengeChamberBonusMetadata(this);
            }

            /// <summary>Field number for the "chamber_template_gmt_id" field.</summary>
            public const int ChamberTemplateGmtIdFieldNumber = 1;
            private string chamberTemplateGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ChamberTemplateGmtId {
              get { return chamberTemplateGmtId_; }
              set {
                chamberTemplateGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChallengeChamberBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChallengeChamberBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ChamberTemplateGmtId != other.ChamberTemplateGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ChamberTemplateGmtId.Length != 0) hash ^= ChamberTemplateGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ChamberTemplateGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ChamberTemplateGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ChamberTemplateGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ChamberTemplateGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChallengeChamberBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.ChamberTemplateGmtId.Length != 0) {
                ChamberTemplateGmtId = other.ChamberTemplateGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ChamberTemplateGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ChallengeBonusMetadata : pb::IMessage<ChallengeBonusMetadata> {
            private static readonly pb::MessageParser<ChallengeBonusMetadata> _parser = new pb::MessageParser<ChallengeBonusMetadata>(() => new ChallengeBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChallengeBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBonusMetadata(ChallengeBonusMetadata other) : this() {
              challengeBonusGmtId_ = other.challengeBonusGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBonusMetadata Clone() {
              return new ChallengeBonusMetadata(this);
            }

            /// <summary>Field number for the "challenge_bonus_gmt_id" field.</summary>
            public const int ChallengeBonusGmtIdFieldNumber = 1;
            private string challengeBonusGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ChallengeBonusGmtId {
              get { return challengeBonusGmtId_; }
              set {
                challengeBonusGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChallengeBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChallengeBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ChallengeBonusGmtId != other.ChallengeBonusGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ChallengeBonusGmtId.Length != 0) hash ^= ChallengeBonusGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ChallengeBonusGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ChallengeBonusGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ChallengeBonusGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ChallengeBonusGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChallengeBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.ChallengeBonusGmtId.Length != 0) {
                ChallengeBonusGmtId = other.ChallengeBonusGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ChallengeBonusGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ChallengeSocialBonusMetadata : pb::IMessage<ChallengeSocialBonusMetadata> {
            private static readonly pb::MessageParser<ChallengeSocialBonusMetadata> _parser = new pb::MessageParser<ChallengeSocialBonusMetadata>(() => new ChallengeSocialBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChallengeSocialBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeSocialBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeSocialBonusMetadata(ChallengeSocialBonusMetadata other) : this() {
              socialFriendBonusGmtId_ = other.socialFriendBonusGmtId_;
              challengeBonusGmtId_ = other.challengeBonusGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeSocialBonusMetadata Clone() {
              return new ChallengeSocialBonusMetadata(this);
            }

            /// <summary>Field number for the "social_friend_bonus_gmt_id" field.</summary>
            public const int SocialFriendBonusGmtIdFieldNumber = 1;
            private string socialFriendBonusGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SocialFriendBonusGmtId {
              get { return socialFriendBonusGmtId_; }
              set {
                socialFriendBonusGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "challenge_bonus_gmt_id" field.</summary>
            public const int ChallengeBonusGmtIdFieldNumber = 2;
            private string challengeBonusGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ChallengeBonusGmtId {
              get { return challengeBonusGmtId_; }
              set {
                challengeBonusGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChallengeSocialBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChallengeSocialBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SocialFriendBonusGmtId != other.SocialFriendBonusGmtId) return false;
              if (ChallengeBonusGmtId != other.ChallengeBonusGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SocialFriendBonusGmtId.Length != 0) hash ^= SocialFriendBonusGmtId.GetHashCode();
              if (ChallengeBonusGmtId.Length != 0) hash ^= ChallengeBonusGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SocialFriendBonusGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(SocialFriendBonusGmtId);
              }
              if (ChallengeBonusGmtId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(ChallengeBonusGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SocialFriendBonusGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SocialFriendBonusGmtId);
              }
              if (ChallengeBonusGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ChallengeBonusGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChallengeSocialBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.SocialFriendBonusGmtId.Length != 0) {
                SocialFriendBonusGmtId = other.SocialFriendBonusGmtId;
              }
              if (other.ChallengeBonusGmtId.Length != 0) {
                ChallengeBonusGmtId = other.ChallengeBonusGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    SocialFriendBonusGmtId = input.ReadString();
                    break;
                  }
                  case 18: {
                    ChallengeBonusGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class SpellGameBonusMetadata : pb::IMessage<SpellGameBonusMetadata> {
            private static readonly pb::MessageParser<SpellGameBonusMetadata> _parser = new pb::MessageParser<SpellGameBonusMetadata>(() => new SpellGameBonusMetadata());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SpellGameBonusMetadata> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Loot.LootReward.Types.BonusMetadata.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SpellGameBonusMetadata() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SpellGameBonusMetadata(SpellGameBonusMetadata other) : this() {
              id_ = other.id_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SpellGameBonusMetadata Clone() {
              return new SpellGameBonusMetadata(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private string id_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SpellGameBonusMetadata);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SpellGameBonusMetadata other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Id);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SpellGameBonusMetadata other) {
              if (other == null) {
                return;
              }
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Id = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class CauldronReward : pb::IMessage<CauldronReward> {
        private static readonly pb::MessageParser<CauldronReward> _parser = new pb::MessageParser<CauldronReward>(() => new CauldronReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CauldronReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CauldronReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CauldronReward(CauldronReward other) : this() {
          templateId_ = other.templateId_;
          cauldronId_ = other.cauldronId_;
          availabilityTime_ = other.availabilityTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CauldronReward Clone() {
          return new CauldronReward(this);
        }

        /// <summary>Field number for the "template_id" field.</summary>
        public const int TemplateIdFieldNumber = 1;
        private string templateId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TemplateId {
          get { return templateId_; }
          set {
            templateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cauldron_id" field.</summary>
        public const int CauldronIdFieldNumber = 2;
        private long cauldronId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CauldronId {
          get { return cauldronId_; }
          set {
            cauldronId_ = value;
          }
        }

        /// <summary>Field number for the "availability_time" field.</summary>
        public const int AvailabilityTimeFieldNumber = 3;
        private long availabilityTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AvailabilityTime {
          get { return availabilityTime_; }
          set {
            availabilityTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CauldronReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CauldronReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TemplateId != other.TemplateId) return false;
          if (CauldronId != other.CauldronId) return false;
          if (AvailabilityTime != other.AvailabilityTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TemplateId.Length != 0) hash ^= TemplateId.GetHashCode();
          if (CauldronId != 0L) hash ^= CauldronId.GetHashCode();
          if (AvailabilityTime != 0L) hash ^= AvailabilityTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TemplateId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TemplateId);
          }
          if (CauldronId != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(CauldronId);
          }
          if (AvailabilityTime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(AvailabilityTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TemplateId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
          }
          if (CauldronId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CauldronId);
          }
          if (AvailabilityTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailabilityTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CauldronReward other) {
          if (other == null) {
            return;
          }
          if (other.TemplateId.Length != 0) {
            TemplateId = other.TemplateId;
          }
          if (other.CauldronId != 0L) {
            CauldronId = other.CauldronId;
          }
          if (other.AvailabilityTime != 0L) {
            AvailabilityTime = other.AvailabilityTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TemplateId = input.ReadString();
                break;
              }
              case 16: {
                CauldronId = input.ReadInt64();
                break;
              }
              case 24: {
                AvailabilityTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectionFamilyLootReward : pb::IMessage<CollectionFamilyLootReward> {
        private static readonly pb::MessageParser<CollectionFamilyLootReward> _parser = new pb::MessageParser<CollectionFamilyLootReward>(() => new CollectionFamilyLootReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectionFamilyLootReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionFamilyLootReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionFamilyLootReward(CollectionFamilyLootReward other) : this() {
          familyId_ = other.familyId_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionFamilyLootReward Clone() {
          return new CollectionFamilyLootReward(this);
        }

        /// <summary>Field number for the "family_id" field.</summary>
        public const int FamilyIdFieldNumber = 1;
        private string familyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FamilyId {
          get { return familyId_; }
          set {
            familyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private int amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectionFamilyLootReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectionFamilyLootReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FamilyId != other.FamilyId) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FamilyId.Length != 0) hash ^= FamilyId.GetHashCode();
          if (Amount != 0) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FamilyId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FamilyId);
          }
          if (Amount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FamilyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyId);
          }
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectionFamilyLootReward other) {
          if (other == null) {
            return;
          }
          if (other.FamilyId.Length != 0) {
            FamilyId = other.FamilyId;
          }
          if (other.Amount != 0) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FamilyId = input.ReadString();
                break;
              }
              case 16: {
                Amount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectionItemReward : pb::IMessage<CollectionItemReward> {
        private static readonly pb::MessageParser<CollectionItemReward> _parser = new pb::MessageParser<CollectionItemReward>(() => new CollectionItemReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectionItemReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionItemReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionItemReward(CollectionItemReward other) : this() {
          itemId_ = other.itemId_;
          shardCount_ = other.shardCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionItemReward Clone() {
          return new CollectionItemReward(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private string itemId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ItemId {
          get { return itemId_; }
          set {
            itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "shard_count" field.</summary>
        public const int ShardCountFieldNumber = 2;
        private uint shardCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShardCount {
          get { return shardCount_; }
          set {
            shardCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectionItemReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectionItemReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (ShardCount != other.ShardCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
          if (ShardCount != 0) hash ^= ShardCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ItemId);
          }
          if (ShardCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ShardCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
          }
          if (ShardCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShardCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectionItemReward other) {
          if (other == null) {
            return;
          }
          if (other.ItemId.Length != 0) {
            ItemId = other.ItemId;
          }
          if (other.ShardCount != 0) {
            ShardCount = other.ShardCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ItemId = input.ReadString();
                break;
              }
              case 16: {
                ShardCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PotionReward : pb::IMessage<PotionReward> {
        private static readonly pb::MessageParser<PotionReward> _parser = new pb::MessageParser<PotionReward>(() => new PotionReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PotionReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PotionReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PotionReward(PotionReward other) : this() {
          rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
          timeToBrew_ = other.timeToBrew_;
          cauldronId_ = other.cauldronId_;
          recipeGmtId_ = other.recipeGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PotionReward Clone() {
          return new PotionReward(this);
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 1;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
          get { return rewards_; }
          set {
            rewards_ = value;
          }
        }

        /// <summary>Field number for the "time_to_brew" field.</summary>
        public const int TimeToBrewFieldNumber = 2;
        private long timeToBrew_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TimeToBrew {
          get { return timeToBrew_; }
          set {
            timeToBrew_ = value;
          }
        }

        /// <summary>Field number for the "cauldron_id" field.</summary>
        public const int CauldronIdFieldNumber = 3;
        private long cauldronId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CauldronId {
          get { return cauldronId_; }
          set {
            cauldronId_ = value;
          }
        }

        /// <summary>Field number for the "recipe_gmt_id" field.</summary>
        public const int RecipeGmtIdFieldNumber = 4;
        private string recipeGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RecipeGmtId {
          get { return recipeGmtId_; }
          set {
            recipeGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PotionReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PotionReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Rewards, other.Rewards)) return false;
          if (TimeToBrew != other.TimeToBrew) return false;
          if (CauldronId != other.CauldronId) return false;
          if (RecipeGmtId != other.RecipeGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (rewards_ != null) hash ^= Rewards.GetHashCode();
          if (TimeToBrew != 0L) hash ^= TimeToBrew.GetHashCode();
          if (CauldronId != 0L) hash ^= CauldronId.GetHashCode();
          if (RecipeGmtId.Length != 0) hash ^= RecipeGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (rewards_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rewards);
          }
          if (TimeToBrew != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(TimeToBrew);
          }
          if (CauldronId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(CauldronId);
          }
          if (RecipeGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(RecipeGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (rewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
          }
          if (TimeToBrew != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToBrew);
          }
          if (CauldronId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CauldronId);
          }
          if (RecipeGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipeGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PotionReward other) {
          if (other == null) {
            return;
          }
          if (other.rewards_ != null) {
            if (rewards_ == null) {
              Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Rewards.MergeFrom(other.Rewards);
          }
          if (other.TimeToBrew != 0L) {
            TimeToBrew = other.TimeToBrew;
          }
          if (other.CauldronId != 0L) {
            CauldronId = other.CauldronId;
          }
          if (other.RecipeGmtId.Length != 0) {
            RecipeGmtId = other.RecipeGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Rewards);
                break;
              }
              case 16: {
                TimeToBrew = input.ReadInt64();
                break;
              }
              case 24: {
                CauldronId = input.ReadInt64();
                break;
              }
              case 34: {
                RecipeGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LootTableReward : pb::IMessage<LootTableReward> {
        private static readonly pb::MessageParser<LootTableReward> _parser = new pb::MessageParser<LootTableReward>(() => new LootTableReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LootTableReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootTableReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootTableReward(LootTableReward other) : this() {
          lootTableId_ = other.lootTableId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootTableReward Clone() {
          return new LootTableReward(this);
        }

        /// <summary>Field number for the "loot_table_id" field.</summary>
        public const int LootTableIdFieldNumber = 1;
        private string lootTableId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LootTableId {
          get { return lootTableId_; }
          set {
            lootTableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LootTableReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LootTableReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LootTableId != other.LootTableId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LootTableId.Length != 0) hash ^= LootTableId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LootTableId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LootTableId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LootTableId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LootTableId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LootTableReward other) {
          if (other == null) {
            return;
          }
          if (other.LootTableId.Length != 0) {
            LootTableId = other.LootTableId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                LootTableId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LootCollection : pb::IMessage<LootCollection> {
        private static readonly pb::MessageParser<LootCollection> _parser = new pb::MessageParser<LootCollection>(() => new LootCollection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LootCollection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootCollection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootCollection(LootCollection other) : this() {
          rewards_ = other.rewards_.Clone();
          escrowedRewards_ = other.escrowedRewards_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootCollection Clone() {
          return new LootCollection(this);
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Loot.LootReward> _repeated_rewards_codec
            = pb::FieldCodec.ForMessage(10, global::WUProtos.Data.Loot.LootReward.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward> rewards_ = new pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward> Rewards {
          get { return rewards_; }
        }

        /// <summary>Field number for the "escrowed_rewards" field.</summary>
        public const int EscrowedRewardsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Loot.LootReward> _repeated_escrowedRewards_codec
            = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.Loot.LootReward.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward> escrowedRewards_ = new pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward> EscrowedRewards {
          get { return escrowedRewards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LootCollection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LootCollection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rewards_.Equals(other.rewards_)) return false;
          if(!escrowedRewards_.Equals(other.escrowedRewards_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rewards_.GetHashCode();
          hash ^= escrowedRewards_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rewards_.WriteTo(output, _repeated_rewards_codec);
          escrowedRewards_.WriteTo(output, _repeated_escrowedRewards_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rewards_.CalculateSize(_repeated_rewards_codec);
          size += escrowedRewards_.CalculateSize(_repeated_escrowedRewards_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LootCollection other) {
          if (other == null) {
            return;
          }
          rewards_.Add(other.rewards_);
          escrowedRewards_.Add(other.escrowedRewards_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
                break;
              }
              case 18: {
                escrowedRewards_.AddEntriesFrom(input, _repeated_escrowedRewards_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class CurrencyReward : pb::IMessage<CurrencyReward> {
        private static readonly pb::MessageParser<CurrencyReward> _parser = new pb::MessageParser<CurrencyReward>(() => new CurrencyReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CurrencyReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CurrencyReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CurrencyReward(CurrencyReward other) : this() {
          currencyId_ = other.currencyId_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CurrencyReward Clone() {
          return new CurrencyReward(this);
        }

        /// <summary>Field number for the "currency_id" field.</summary>
        public const int CurrencyIdFieldNumber = 1;
        private string currencyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrencyId {
          get { return currencyId_; }
          set {
            currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CurrencyReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CurrencyReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrencyId != other.CurrencyId) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrencyId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CurrencyId);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrencyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CurrencyReward other) {
          if (other == null) {
            return;
          }
          if (other.CurrencyId.Length != 0) {
            CurrencyId = other.CurrencyId;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CurrencyId = input.ReadString();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class VaultCapacityLootReward : pb::IMessage<VaultCapacityLootReward> {
        private static readonly pb::MessageParser<VaultCapacityLootReward> _parser = new pb::MessageParser<VaultCapacityLootReward>(() => new VaultCapacityLootReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VaultCapacityLootReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultCapacityLootReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultCapacityLootReward(VaultCapacityLootReward other) : this() {
          vaultCategoryGmtId_ = other.vaultCategoryGmtId_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultCapacityLootReward Clone() {
          return new VaultCapacityLootReward(this);
        }

        /// <summary>Field number for the "vault_category_gmt_id" field.</summary>
        public const int VaultCategoryGmtIdFieldNumber = 1;
        private string vaultCategoryGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VaultCategoryGmtId {
          get { return vaultCategoryGmtId_; }
          set {
            vaultCategoryGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VaultCapacityLootReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VaultCapacityLootReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VaultCategoryGmtId != other.VaultCategoryGmtId) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (VaultCategoryGmtId.Length != 0) hash ^= VaultCategoryGmtId.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (VaultCategoryGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(VaultCategoryGmtId);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (VaultCategoryGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VaultCategoryGmtId);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VaultCapacityLootReward other) {
          if (other == null) {
            return;
          }
          if (other.VaultCategoryGmtId.Length != 0) {
            VaultCategoryGmtId = other.VaultCategoryGmtId;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VaultCategoryGmtId = input.ReadString();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class VaultItemLootReward : pb::IMessage<VaultItemLootReward> {
        private static readonly pb::MessageParser<VaultItemLootReward> _parser = new pb::MessageParser<VaultItemLootReward>(() => new VaultItemLootReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VaultItemLootReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItemLootReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItemLootReward(VaultItemLootReward other) : this() {
          itemId_ = other.itemId_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItemLootReward Clone() {
          return new VaultItemLootReward(this);
        }

        /// <summary>Field number for the "item_id" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private string itemId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ItemId {
          get { return itemId_; }
          set {
            itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VaultItemLootReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VaultItemLootReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ItemId);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VaultItemLootReward other) {
          if (other == null) {
            return;
          }
          if (other.ItemId.Length != 0) {
            ItemId = other.ItemId;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ItemId = input.ReadString();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WalkboxReward : pb::IMessage<WalkboxReward> {
        private static readonly pb::MessageParser<WalkboxReward> _parser = new pb::MessageParser<WalkboxReward>(() => new WalkboxReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WalkboxReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkboxReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkboxReward(WalkboxReward other) : this() {
          walkboxTemplateId_ = other.walkboxTemplateId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkboxReward Clone() {
          return new WalkboxReward(this);
        }

        /// <summary>Field number for the "walkbox_template_id" field.</summary>
        public const int WalkboxTemplateIdFieldNumber = 1;
        private string walkboxTemplateId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WalkboxTemplateId {
          get { return walkboxTemplateId_; }
          set {
            walkboxTemplateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WalkboxReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WalkboxReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WalkboxTemplateId != other.WalkboxTemplateId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WalkboxTemplateId.Length != 0) hash ^= WalkboxTemplateId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (WalkboxTemplateId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(WalkboxTemplateId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WalkboxTemplateId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WalkboxTemplateId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WalkboxReward other) {
          if (other == null) {
            return;
          }
          if (other.WalkboxTemplateId.Length != 0) {
            WalkboxTemplateId = other.WalkboxTemplateId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                WalkboxTemplateId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MapIngredientReward : pb::IMessage<MapIngredientReward> {
        private static readonly pb::MessageParser<MapIngredientReward> _parser = new pb::MessageParser<MapIngredientReward>(() => new MapIngredientReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapIngredientReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapIngredientReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapIngredientReward(MapIngredientReward other) : this() {
          ingredientGmtId_ = other.ingredientGmtId_;
          amount_ = other.amount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapIngredientReward Clone() {
          return new MapIngredientReward(this);
        }

        /// <summary>Field number for the "ingredient_gmt_id" field.</summary>
        public const int IngredientGmtIdFieldNumber = 1;
        private string ingredientGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string IngredientGmtId {
          get { return ingredientGmtId_; }
          set {
            ingredientGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapIngredientReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapIngredientReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IngredientGmtId != other.IngredientGmtId) return false;
          if (Amount != other.Amount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (IngredientGmtId.Length != 0) hash ^= IngredientGmtId.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (IngredientGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(IngredientGmtId);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (IngredientGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(IngredientGmtId);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapIngredientReward other) {
          if (other == null) {
            return;
          }
          if (other.IngredientGmtId.Length != 0) {
            IngredientGmtId = other.IngredientGmtId;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                IngredientGmtId = input.ReadString();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class QuestReward : pb::IMessage<QuestReward> {
        private static readonly pb::MessageParser<QuestReward> _parser = new pb::MessageParser<QuestReward>(() => new QuestReward());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<QuestReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Loot.LootReward.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QuestReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QuestReward(QuestReward other) : this() {
          questGmtId_ = other.questGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QuestReward Clone() {
          return new QuestReward(this);
        }

        /// <summary>Field number for the "quest_gmt_id" field.</summary>
        public const int QuestGmtIdFieldNumber = 1;
        private string questGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string QuestGmtId {
          get { return questGmtId_; }
          set {
            questGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as QuestReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(QuestReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (QuestGmtId != other.QuestGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (QuestGmtId.Length != 0) hash ^= QuestGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (QuestGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(QuestGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (QuestGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(QuestReward other) {
          if (other == null) {
            return;
          }
          if (other.QuestGmtId.Length != 0) {
            QuestGmtId = other.QuestGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                QuestGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
