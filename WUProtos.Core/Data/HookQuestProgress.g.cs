// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/HookQuestProgress.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/HookQuestProgress.proto</summary>
  public static partial class HookQuestProgressReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/HookQuestProgress.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HookQuestProgressReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVXVVByb3Rvcy9EYXRhL0hvb2tRdWVzdFByb2dyZXNzLnByb3RvEg1XVVBy",
            "b3Rvcy5EYXRhIsMPChFIb29rUXVlc3RQcm9ncmVzcxJVCgxkb19lbmNvdW50",
            "ZXIYASABKAsyPS5XVVByb3Rvcy5EYXRhLkhvb2tRdWVzdFByb2dyZXNzLkRv",
            "RW5jb3VudGVySG9va1F1ZXN0UHJvZ3Jlc3NIABJTCg1sb290X291dHBvc3Rz",
            "GAIgASgLMjouV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RQcm9ncmVzcy5Mb290",
            "T3V0cG9zdHNRdWVzdFByb2dyZXNzSAASTQoKd2luX3RyYWNlcxgDIAEoCzI3",
            "LldVUHJvdG9zLkRhdGEuSG9va1F1ZXN0UHJvZ3Jlc3MuV2luVHJhY2VzUXVl",
            "c3RQcm9ncmVzc0gAEmwKGmNvbGxlY3RfcG90aW9uX2luZ3JlZGllbnRzGAQg",
            "ASgLMkYuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RQcm9ncmVzcy5Db2xsZWN0",
            "UG90aW9uSW5ncmVkaWVudHNRdWVzdFByb2dyZXNzSAASUQoMYnJld19wb3Rp",
            "b25zGAUgASgLMjkuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RQcm9ncmVzcy5C",
            "cmV3UG90aW9uc1F1ZXN0UHJvZ3Jlc3NIABJTCg13YWxrX2Rpc3RhbmNlGAYg",
            "ASgLMjouV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RQcm9ncmVzcy5XYWxrRGlz",
            "dGFuY2VRdWVzdFByb2dyZXNzSAASaAoYcGxheV9mb3J0cmVzc19jaGFsbGVu",
            "Z2VzGAcgASgLMkQuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RQcm9ncmVzcy5Q",
            "bGF5Rm9ydHJlc3NDaGFsbGVuZ2VzUXVlc3RQcm9ncmVzc0gAEm4KGGRlZmVh",
            "dF9tb2JfaW5fY2hhbGxlbmdlcxgIIAEoCzJKLldVUHJvdG9zLkRhdGEuSG9v",
            "a1F1ZXN0UHJvZ3Jlc3MuRGVmZWF0TW9iVHlwZUluV2l6YXJkaW5nQ2hhbGxl",
            "bmdlUHJvZ3Jlc3NIABJYChJ1bmxvY2tfcG9ydG1hbnRlYXUYCSABKAsyOi5X",
            "VVByb3Rvcy5EYXRhLkhvb2tRdWVzdFByb2dyZXNzLlVubG9ja1BvcnRtYW50",
            "ZWF1UHJvZ3Jlc3NIABJKCgt1c2VfcG90aW9ucxgKIAEoCzIzLldVUHJvdG9z",
            "LkRhdGEuSG9va1F1ZXN0UHJvZ3Jlc3MuVXNlUG90aW9uc1Byb2dyZXNzSAAS",
            "UAoOcGxhY2Vfc3RpY2tlcnMYCyABKAsyNi5XVVByb3Rvcy5EYXRhLkhvb2tR",
            "dWVzdFByb2dyZXNzLlBsYWNlU3RpY2tlcnNQcm9ncmVzc0gAElQKEGNvbGxl",
            "Y3Rfc3RpY2tlcnMYDCABKAsyOC5XVVByb3Rvcy5EYXRhLkhvb2tRdWVzdFBy",
            "b2dyZXNzLkNvbGxlY3RTdGlja2Vyc1Byb2dyZXNzSAASSgoLY2FzdF9zcGVs",
            "bHMYDSABKAsyMy5XVVByb3Rvcy5EYXRhLkhvb2tRdWVzdFByb2dyZXNzLkNh",
            "c3RTcGVsbHNQcm9ncmVzc0gAGjwKFVBsYWNlU3RpY2tlcnNQcm9ncmVzcxIj",
            "ChtjdXJyZW50X3N0aWNrZXJfcGxhY2VfY291bnQYASABKAMaRgojUGxheUZv",
            "cnRyZXNzQ2hhbGxlbmdlc1F1ZXN0UHJvZ3Jlc3MSHwoXY3VycmVudF9jaGFs",
            "bGVuZ2VfY291bnQYASABKAMaOQoZVW5sb2NrUG9ydG1hbnRlYXVQcm9ncmVz",
            "cxIcChRjdXJyZW50X3VubG9ja19jb3VudBgBIAEoAxovChJVc2VQb3Rpb25z",
            "UHJvZ3Jlc3MSGQoRY3VycmVudF91c2VfY291bnQYASABKAMaPwoZV2Fsa0Rp",
            "c3RhbmNlUXVlc3RQcm9ncmVzcxIiChpjdXJyZW50X21pY3JvbWV0ZXJzX3dh",
            "bGtlZBgBIAEoAxo2ChhCcmV3UG90aW9uc1F1ZXN0UHJvZ3Jlc3MSGgoSY3Vy",
            "cmVudF9icmV3X2NvdW50GAEgASgDGjEKEkNhc3RTcGVsbHNQcm9ncmVzcxIb",
            "ChNjdXJyZW50X3NwZWxsX2NvdW50GAEgASgDGlAKJUNvbGxlY3RQb3Rpb25J",
            "bmdyZWRpZW50c1F1ZXN0UHJvZ3Jlc3MSJwofY3VycmVudF9wb3Rpb25faW5n",
            "cmVkaWVudF9jb3VudBgBIAEoAxo4ChdDb2xsZWN0U3RpY2tlcnNQcm9ncmVz",
            "cxIdChVjdXJyZW50X2NvbGxlY3RfY291bnQYASABKAMaOgoZTG9vdE91dHBv",
            "c3RzUXVlc3RQcm9ncmVzcxIdChVjdXJyZW50X291dHBvc3RfY291bnQYASAB",
            "KAMaSQopRGVmZWF0TW9iVHlwZUluV2l6YXJkaW5nQ2hhbGxlbmdlUHJvZ3Jl",
            "c3MSHAoUY3VycmVudF9kZWZlYXRfY291bnQYASABKAMaOQocRG9FbmNvdW50",
            "ZXJIb29rUXVlc3RQcm9ncmVzcxIZChFjdXJyZW50X3dpbl9jb3VudBgBIAEo",
            "Axo1ChZXaW5UcmFjZXNRdWVzdFByb2dyZXNzEhsKE2N1cnJlbnRfdHJhY2Vf",
            "Y291bnQYASABKANCBgoEVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress), global::WUProtos.Data.HookQuestProgress.Parser, new[]{ "DoEncounter", "LootOutposts", "WinTraces", "CollectPotionIngredients", "BrewPotions", "WalkDistance", "PlayFortressChallenges", "DefeatMobInChallenges", "UnlockPortmanteau", "UsePotions", "PlaceStickers", "CollectStickers", "CastSpells" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress), global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress.Parser, new[]{ "CurrentStickerPlaceCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress.Parser, new[]{ "CurrentChallengeCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress), global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress.Parser, new[]{ "CurrentUnlockCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress), global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress.Parser, new[]{ "CurrentUseCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress.Parser, new[]{ "CurrentMicrometersWalked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress.Parser, new[]{ "CurrentBrewCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress), global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress.Parser, new[]{ "CurrentSpellCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress.Parser, new[]{ "CurrentPotionIngredientCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress), global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress.Parser, new[]{ "CurrentCollectCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress.Parser, new[]{ "CurrentOutpostCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress), global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress.Parser, new[]{ "CurrentDefeatCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress.Parser, new[]{ "CurrentWinCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress), global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress.Parser, new[]{ "CurrentTraceCount" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HookQuestProgress : pb::IMessage<HookQuestProgress> {
    private static readonly pb::MessageParser<HookQuestProgress> _parser = new pb::MessageParser<HookQuestProgress>(() => new HookQuestProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HookQuestProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.HookQuestProgressReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookQuestProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookQuestProgress(HookQuestProgress other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.DoEncounter:
          DoEncounter = other.DoEncounter.Clone();
          break;
        case TypeOneofCase.LootOutposts:
          LootOutposts = other.LootOutposts.Clone();
          break;
        case TypeOneofCase.WinTraces:
          WinTraces = other.WinTraces.Clone();
          break;
        case TypeOneofCase.CollectPotionIngredients:
          CollectPotionIngredients = other.CollectPotionIngredients.Clone();
          break;
        case TypeOneofCase.BrewPotions:
          BrewPotions = other.BrewPotions.Clone();
          break;
        case TypeOneofCase.WalkDistance:
          WalkDistance = other.WalkDistance.Clone();
          break;
        case TypeOneofCase.PlayFortressChallenges:
          PlayFortressChallenges = other.PlayFortressChallenges.Clone();
          break;
        case TypeOneofCase.DefeatMobInChallenges:
          DefeatMobInChallenges = other.DefeatMobInChallenges.Clone();
          break;
        case TypeOneofCase.UnlockPortmanteau:
          UnlockPortmanteau = other.UnlockPortmanteau.Clone();
          break;
        case TypeOneofCase.UsePotions:
          UsePotions = other.UsePotions.Clone();
          break;
        case TypeOneofCase.PlaceStickers:
          PlaceStickers = other.PlaceStickers.Clone();
          break;
        case TypeOneofCase.CollectStickers:
          CollectStickers = other.CollectStickers.Clone();
          break;
        case TypeOneofCase.CastSpells:
          CastSpells = other.CastSpells.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookQuestProgress Clone() {
      return new HookQuestProgress(this);
    }

    /// <summary>Field number for the "do_encounter" field.</summary>
    public const int DoEncounterFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress DoEncounter {
      get { return typeCase_ == TypeOneofCase.DoEncounter ? (global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DoEncounter;
      }
    }

    /// <summary>Field number for the "loot_outposts" field.</summary>
    public const int LootOutpostsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress LootOutposts {
      get { return typeCase_ == TypeOneofCase.LootOutposts ? (global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.LootOutposts;
      }
    }

    /// <summary>Field number for the "win_traces" field.</summary>
    public const int WinTracesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress WinTraces {
      get { return typeCase_ == TypeOneofCase.WinTraces ? (global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.WinTraces;
      }
    }

    /// <summary>Field number for the "collect_potion_ingredients" field.</summary>
    public const int CollectPotionIngredientsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress CollectPotionIngredients {
      get { return typeCase_ == TypeOneofCase.CollectPotionIngredients ? (global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectPotionIngredients;
      }
    }

    /// <summary>Field number for the "brew_potions" field.</summary>
    public const int BrewPotionsFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress BrewPotions {
      get { return typeCase_ == TypeOneofCase.BrewPotions ? (global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BrewPotions;
      }
    }

    /// <summary>Field number for the "walk_distance" field.</summary>
    public const int WalkDistanceFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress WalkDistance {
      get { return typeCase_ == TypeOneofCase.WalkDistance ? (global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.WalkDistance;
      }
    }

    /// <summary>Field number for the "play_fortress_challenges" field.</summary>
    public const int PlayFortressChallengesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress PlayFortressChallenges {
      get { return typeCase_ == TypeOneofCase.PlayFortressChallenges ? (global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlayFortressChallenges;
      }
    }

    /// <summary>Field number for the "defeat_mob_in_challenges" field.</summary>
    public const int DefeatMobInChallengesFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress DefeatMobInChallenges {
      get { return typeCase_ == TypeOneofCase.DefeatMobInChallenges ? (global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DefeatMobInChallenges;
      }
    }

    /// <summary>Field number for the "unlock_portmanteau" field.</summary>
    public const int UnlockPortmanteauFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress UnlockPortmanteau {
      get { return typeCase_ == TypeOneofCase.UnlockPortmanteau ? (global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UnlockPortmanteau;
      }
    }

    /// <summary>Field number for the "use_potions" field.</summary>
    public const int UsePotionsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress UsePotions {
      get { return typeCase_ == TypeOneofCase.UsePotions ? (global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UsePotions;
      }
    }

    /// <summary>Field number for the "place_stickers" field.</summary>
    public const int PlaceStickersFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress PlaceStickers {
      get { return typeCase_ == TypeOneofCase.PlaceStickers ? (global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlaceStickers;
      }
    }

    /// <summary>Field number for the "collect_stickers" field.</summary>
    public const int CollectStickersFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress CollectStickers {
      get { return typeCase_ == TypeOneofCase.CollectStickers ? (global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectStickers;
      }
    }

    /// <summary>Field number for the "cast_spells" field.</summary>
    public const int CastSpellsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress CastSpells {
      get { return typeCase_ == TypeOneofCase.CastSpells ? (global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CastSpells;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      DoEncounter = 1,
      LootOutposts = 2,
      WinTraces = 3,
      CollectPotionIngredients = 4,
      BrewPotions = 5,
      WalkDistance = 6,
      PlayFortressChallenges = 7,
      DefeatMobInChallenges = 8,
      UnlockPortmanteau = 9,
      UsePotions = 10,
      PlaceStickers = 11,
      CollectStickers = 12,
      CastSpells = 13,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HookQuestProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HookQuestProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DoEncounter, other.DoEncounter)) return false;
      if (!object.Equals(LootOutposts, other.LootOutposts)) return false;
      if (!object.Equals(WinTraces, other.WinTraces)) return false;
      if (!object.Equals(CollectPotionIngredients, other.CollectPotionIngredients)) return false;
      if (!object.Equals(BrewPotions, other.BrewPotions)) return false;
      if (!object.Equals(WalkDistance, other.WalkDistance)) return false;
      if (!object.Equals(PlayFortressChallenges, other.PlayFortressChallenges)) return false;
      if (!object.Equals(DefeatMobInChallenges, other.DefeatMobInChallenges)) return false;
      if (!object.Equals(UnlockPortmanteau, other.UnlockPortmanteau)) return false;
      if (!object.Equals(UsePotions, other.UsePotions)) return false;
      if (!object.Equals(PlaceStickers, other.PlaceStickers)) return false;
      if (!object.Equals(CollectStickers, other.CollectStickers)) return false;
      if (!object.Equals(CastSpells, other.CastSpells)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.DoEncounter) hash ^= DoEncounter.GetHashCode();
      if (typeCase_ == TypeOneofCase.LootOutposts) hash ^= LootOutposts.GetHashCode();
      if (typeCase_ == TypeOneofCase.WinTraces) hash ^= WinTraces.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectPotionIngredients) hash ^= CollectPotionIngredients.GetHashCode();
      if (typeCase_ == TypeOneofCase.BrewPotions) hash ^= BrewPotions.GetHashCode();
      if (typeCase_ == TypeOneofCase.WalkDistance) hash ^= WalkDistance.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayFortressChallenges) hash ^= PlayFortressChallenges.GetHashCode();
      if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) hash ^= DefeatMobInChallenges.GetHashCode();
      if (typeCase_ == TypeOneofCase.UnlockPortmanteau) hash ^= UnlockPortmanteau.GetHashCode();
      if (typeCase_ == TypeOneofCase.UsePotions) hash ^= UsePotions.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlaceStickers) hash ^= PlaceStickers.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectStickers) hash ^= CollectStickers.GetHashCode();
      if (typeCase_ == TypeOneofCase.CastSpells) hash ^= CastSpells.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.DoEncounter) {
        output.WriteRawTag(10);
        output.WriteMessage(DoEncounter);
      }
      if (typeCase_ == TypeOneofCase.LootOutposts) {
        output.WriteRawTag(18);
        output.WriteMessage(LootOutposts);
      }
      if (typeCase_ == TypeOneofCase.WinTraces) {
        output.WriteRawTag(26);
        output.WriteMessage(WinTraces);
      }
      if (typeCase_ == TypeOneofCase.CollectPotionIngredients) {
        output.WriteRawTag(34);
        output.WriteMessage(CollectPotionIngredients);
      }
      if (typeCase_ == TypeOneofCase.BrewPotions) {
        output.WriteRawTag(42);
        output.WriteMessage(BrewPotions);
      }
      if (typeCase_ == TypeOneofCase.WalkDistance) {
        output.WriteRawTag(50);
        output.WriteMessage(WalkDistance);
      }
      if (typeCase_ == TypeOneofCase.PlayFortressChallenges) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayFortressChallenges);
      }
      if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) {
        output.WriteRawTag(66);
        output.WriteMessage(DefeatMobInChallenges);
      }
      if (typeCase_ == TypeOneofCase.UnlockPortmanteau) {
        output.WriteRawTag(74);
        output.WriteMessage(UnlockPortmanteau);
      }
      if (typeCase_ == TypeOneofCase.UsePotions) {
        output.WriteRawTag(82);
        output.WriteMessage(UsePotions);
      }
      if (typeCase_ == TypeOneofCase.PlaceStickers) {
        output.WriteRawTag(90);
        output.WriteMessage(PlaceStickers);
      }
      if (typeCase_ == TypeOneofCase.CollectStickers) {
        output.WriteRawTag(98);
        output.WriteMessage(CollectStickers);
      }
      if (typeCase_ == TypeOneofCase.CastSpells) {
        output.WriteRawTag(106);
        output.WriteMessage(CastSpells);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.DoEncounter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoEncounter);
      }
      if (typeCase_ == TypeOneofCase.LootOutposts) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LootOutposts);
      }
      if (typeCase_ == TypeOneofCase.WinTraces) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WinTraces);
      }
      if (typeCase_ == TypeOneofCase.CollectPotionIngredients) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectPotionIngredients);
      }
      if (typeCase_ == TypeOneofCase.BrewPotions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrewPotions);
      }
      if (typeCase_ == TypeOneofCase.WalkDistance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkDistance);
      }
      if (typeCase_ == TypeOneofCase.PlayFortressChallenges) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayFortressChallenges);
      }
      if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefeatMobInChallenges);
      }
      if (typeCase_ == TypeOneofCase.UnlockPortmanteau) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockPortmanteau);
      }
      if (typeCase_ == TypeOneofCase.UsePotions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UsePotions);
      }
      if (typeCase_ == TypeOneofCase.PlaceStickers) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaceStickers);
      }
      if (typeCase_ == TypeOneofCase.CollectStickers) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectStickers);
      }
      if (typeCase_ == TypeOneofCase.CastSpells) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CastSpells);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HookQuestProgress other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.DoEncounter:
          if (DoEncounter == null) {
            DoEncounter = new global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress();
          }
          DoEncounter.MergeFrom(other.DoEncounter);
          break;
        case TypeOneofCase.LootOutposts:
          if (LootOutposts == null) {
            LootOutposts = new global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress();
          }
          LootOutposts.MergeFrom(other.LootOutposts);
          break;
        case TypeOneofCase.WinTraces:
          if (WinTraces == null) {
            WinTraces = new global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress();
          }
          WinTraces.MergeFrom(other.WinTraces);
          break;
        case TypeOneofCase.CollectPotionIngredients:
          if (CollectPotionIngredients == null) {
            CollectPotionIngredients = new global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress();
          }
          CollectPotionIngredients.MergeFrom(other.CollectPotionIngredients);
          break;
        case TypeOneofCase.BrewPotions:
          if (BrewPotions == null) {
            BrewPotions = new global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress();
          }
          BrewPotions.MergeFrom(other.BrewPotions);
          break;
        case TypeOneofCase.WalkDistance:
          if (WalkDistance == null) {
            WalkDistance = new global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress();
          }
          WalkDistance.MergeFrom(other.WalkDistance);
          break;
        case TypeOneofCase.PlayFortressChallenges:
          if (PlayFortressChallenges == null) {
            PlayFortressChallenges = new global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress();
          }
          PlayFortressChallenges.MergeFrom(other.PlayFortressChallenges);
          break;
        case TypeOneofCase.DefeatMobInChallenges:
          if (DefeatMobInChallenges == null) {
            DefeatMobInChallenges = new global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress();
          }
          DefeatMobInChallenges.MergeFrom(other.DefeatMobInChallenges);
          break;
        case TypeOneofCase.UnlockPortmanteau:
          if (UnlockPortmanteau == null) {
            UnlockPortmanteau = new global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress();
          }
          UnlockPortmanteau.MergeFrom(other.UnlockPortmanteau);
          break;
        case TypeOneofCase.UsePotions:
          if (UsePotions == null) {
            UsePotions = new global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress();
          }
          UsePotions.MergeFrom(other.UsePotions);
          break;
        case TypeOneofCase.PlaceStickers:
          if (PlaceStickers == null) {
            PlaceStickers = new global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress();
          }
          PlaceStickers.MergeFrom(other.PlaceStickers);
          break;
        case TypeOneofCase.CollectStickers:
          if (CollectStickers == null) {
            CollectStickers = new global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress();
          }
          CollectStickers.MergeFrom(other.CollectStickers);
          break;
        case TypeOneofCase.CastSpells:
          if (CastSpells == null) {
            CastSpells = new global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress();
          }
          CastSpells.MergeFrom(other.CastSpells);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.DoEncounterHookQuestProgress();
            if (typeCase_ == TypeOneofCase.DoEncounter) {
              subBuilder.MergeFrom(DoEncounter);
            }
            input.ReadMessage(subBuilder);
            DoEncounter = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.LootOutpostsQuestProgress();
            if (typeCase_ == TypeOneofCase.LootOutposts) {
              subBuilder.MergeFrom(LootOutposts);
            }
            input.ReadMessage(subBuilder);
            LootOutposts = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.WinTracesQuestProgress();
            if (typeCase_ == TypeOneofCase.WinTraces) {
              subBuilder.MergeFrom(WinTraces);
            }
            input.ReadMessage(subBuilder);
            WinTraces = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.CollectPotionIngredientsQuestProgress();
            if (typeCase_ == TypeOneofCase.CollectPotionIngredients) {
              subBuilder.MergeFrom(CollectPotionIngredients);
            }
            input.ReadMessage(subBuilder);
            CollectPotionIngredients = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.BrewPotionsQuestProgress();
            if (typeCase_ == TypeOneofCase.BrewPotions) {
              subBuilder.MergeFrom(BrewPotions);
            }
            input.ReadMessage(subBuilder);
            BrewPotions = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.WalkDistanceQuestProgress();
            if (typeCase_ == TypeOneofCase.WalkDistance) {
              subBuilder.MergeFrom(WalkDistance);
            }
            input.ReadMessage(subBuilder);
            WalkDistance = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.PlayFortressChallengesQuestProgress();
            if (typeCase_ == TypeOneofCase.PlayFortressChallenges) {
              subBuilder.MergeFrom(PlayFortressChallenges);
            }
            input.ReadMessage(subBuilder);
            PlayFortressChallenges = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.DefeatMobTypeInWizardingChallengeProgress();
            if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) {
              subBuilder.MergeFrom(DefeatMobInChallenges);
            }
            input.ReadMessage(subBuilder);
            DefeatMobInChallenges = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.UnlockPortmanteauProgress();
            if (typeCase_ == TypeOneofCase.UnlockPortmanteau) {
              subBuilder.MergeFrom(UnlockPortmanteau);
            }
            input.ReadMessage(subBuilder);
            UnlockPortmanteau = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.UsePotionsProgress();
            if (typeCase_ == TypeOneofCase.UsePotions) {
              subBuilder.MergeFrom(UsePotions);
            }
            input.ReadMessage(subBuilder);
            UsePotions = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.PlaceStickersProgress();
            if (typeCase_ == TypeOneofCase.PlaceStickers) {
              subBuilder.MergeFrom(PlaceStickers);
            }
            input.ReadMessage(subBuilder);
            PlaceStickers = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.CollectStickersProgress();
            if (typeCase_ == TypeOneofCase.CollectStickers) {
              subBuilder.MergeFrom(CollectStickers);
            }
            input.ReadMessage(subBuilder);
            CollectStickers = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress subBuilder = new global::WUProtos.Data.HookQuestProgress.Types.CastSpellsProgress();
            if (typeCase_ == TypeOneofCase.CastSpells) {
              subBuilder.MergeFrom(CastSpells);
            }
            input.ReadMessage(subBuilder);
            CastSpells = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HookQuestProgress message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlaceStickersProgress : pb::IMessage<PlaceStickersProgress> {
        private static readonly pb::MessageParser<PlaceStickersProgress> _parser = new pb::MessageParser<PlaceStickersProgress>(() => new PlaceStickersProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlaceStickersProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlaceStickersProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlaceStickersProgress(PlaceStickersProgress other) : this() {
          currentStickerPlaceCount_ = other.currentStickerPlaceCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlaceStickersProgress Clone() {
          return new PlaceStickersProgress(this);
        }

        /// <summary>Field number for the "current_sticker_place_count" field.</summary>
        public const int CurrentStickerPlaceCountFieldNumber = 1;
        private long currentStickerPlaceCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentStickerPlaceCount {
          get { return currentStickerPlaceCount_; }
          set {
            currentStickerPlaceCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlaceStickersProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlaceStickersProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentStickerPlaceCount != other.CurrentStickerPlaceCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentStickerPlaceCount != 0L) hash ^= CurrentStickerPlaceCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentStickerPlaceCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentStickerPlaceCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentStickerPlaceCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentStickerPlaceCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlaceStickersProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentStickerPlaceCount != 0L) {
            CurrentStickerPlaceCount = other.CurrentStickerPlaceCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentStickerPlaceCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayFortressChallengesQuestProgress : pb::IMessage<PlayFortressChallengesQuestProgress> {
        private static readonly pb::MessageParser<PlayFortressChallengesQuestProgress> _parser = new pb::MessageParser<PlayFortressChallengesQuestProgress>(() => new PlayFortressChallengesQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayFortressChallengesQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayFortressChallengesQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayFortressChallengesQuestProgress(PlayFortressChallengesQuestProgress other) : this() {
          currentChallengeCount_ = other.currentChallengeCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayFortressChallengesQuestProgress Clone() {
          return new PlayFortressChallengesQuestProgress(this);
        }

        /// <summary>Field number for the "current_challenge_count" field.</summary>
        public const int CurrentChallengeCountFieldNumber = 1;
        private long currentChallengeCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentChallengeCount {
          get { return currentChallengeCount_; }
          set {
            currentChallengeCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayFortressChallengesQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayFortressChallengesQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentChallengeCount != other.CurrentChallengeCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentChallengeCount != 0L) hash ^= CurrentChallengeCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentChallengeCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentChallengeCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentChallengeCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentChallengeCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayFortressChallengesQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentChallengeCount != 0L) {
            CurrentChallengeCount = other.CurrentChallengeCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentChallengeCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UnlockPortmanteauProgress : pb::IMessage<UnlockPortmanteauProgress> {
        private static readonly pb::MessageParser<UnlockPortmanteauProgress> _parser = new pb::MessageParser<UnlockPortmanteauProgress>(() => new UnlockPortmanteauProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnlockPortmanteauProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockPortmanteauProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockPortmanteauProgress(UnlockPortmanteauProgress other) : this() {
          currentUnlockCount_ = other.currentUnlockCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockPortmanteauProgress Clone() {
          return new UnlockPortmanteauProgress(this);
        }

        /// <summary>Field number for the "current_unlock_count" field.</summary>
        public const int CurrentUnlockCountFieldNumber = 1;
        private long currentUnlockCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentUnlockCount {
          get { return currentUnlockCount_; }
          set {
            currentUnlockCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UnlockPortmanteauProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnlockPortmanteauProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentUnlockCount != other.CurrentUnlockCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentUnlockCount != 0L) hash ^= CurrentUnlockCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentUnlockCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentUnlockCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentUnlockCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentUnlockCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnlockPortmanteauProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentUnlockCount != 0L) {
            CurrentUnlockCount = other.CurrentUnlockCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentUnlockCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UsePotionsProgress : pb::IMessage<UsePotionsProgress> {
        private static readonly pb::MessageParser<UsePotionsProgress> _parser = new pb::MessageParser<UsePotionsProgress>(() => new UsePotionsProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UsePotionsProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsePotionsProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsePotionsProgress(UsePotionsProgress other) : this() {
          currentUseCount_ = other.currentUseCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsePotionsProgress Clone() {
          return new UsePotionsProgress(this);
        }

        /// <summary>Field number for the "current_use_count" field.</summary>
        public const int CurrentUseCountFieldNumber = 1;
        private long currentUseCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentUseCount {
          get { return currentUseCount_; }
          set {
            currentUseCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UsePotionsProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UsePotionsProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentUseCount != other.CurrentUseCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentUseCount != 0L) hash ^= CurrentUseCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentUseCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentUseCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentUseCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentUseCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UsePotionsProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentUseCount != 0L) {
            CurrentUseCount = other.CurrentUseCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentUseCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WalkDistanceQuestProgress : pb::IMessage<WalkDistanceQuestProgress> {
        private static readonly pb::MessageParser<WalkDistanceQuestProgress> _parser = new pb::MessageParser<WalkDistanceQuestProgress>(() => new WalkDistanceQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WalkDistanceQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkDistanceQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkDistanceQuestProgress(WalkDistanceQuestProgress other) : this() {
          currentMicrometersWalked_ = other.currentMicrometersWalked_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkDistanceQuestProgress Clone() {
          return new WalkDistanceQuestProgress(this);
        }

        /// <summary>Field number for the "current_micrometers_walked" field.</summary>
        public const int CurrentMicrometersWalkedFieldNumber = 1;
        private long currentMicrometersWalked_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentMicrometersWalked {
          get { return currentMicrometersWalked_; }
          set {
            currentMicrometersWalked_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WalkDistanceQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WalkDistanceQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentMicrometersWalked != other.CurrentMicrometersWalked) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentMicrometersWalked != 0L) hash ^= CurrentMicrometersWalked.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentMicrometersWalked != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentMicrometersWalked);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentMicrometersWalked != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentMicrometersWalked);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WalkDistanceQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentMicrometersWalked != 0L) {
            CurrentMicrometersWalked = other.CurrentMicrometersWalked;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentMicrometersWalked = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BrewPotionsQuestProgress : pb::IMessage<BrewPotionsQuestProgress> {
        private static readonly pb::MessageParser<BrewPotionsQuestProgress> _parser = new pb::MessageParser<BrewPotionsQuestProgress>(() => new BrewPotionsQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BrewPotionsQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BrewPotionsQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BrewPotionsQuestProgress(BrewPotionsQuestProgress other) : this() {
          currentBrewCount_ = other.currentBrewCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BrewPotionsQuestProgress Clone() {
          return new BrewPotionsQuestProgress(this);
        }

        /// <summary>Field number for the "current_brew_count" field.</summary>
        public const int CurrentBrewCountFieldNumber = 1;
        private long currentBrewCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentBrewCount {
          get { return currentBrewCount_; }
          set {
            currentBrewCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BrewPotionsQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BrewPotionsQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentBrewCount != other.CurrentBrewCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentBrewCount != 0L) hash ^= CurrentBrewCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentBrewCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentBrewCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentBrewCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentBrewCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BrewPotionsQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentBrewCount != 0L) {
            CurrentBrewCount = other.CurrentBrewCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentBrewCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CastSpellsProgress : pb::IMessage<CastSpellsProgress> {
        private static readonly pb::MessageParser<CastSpellsProgress> _parser = new pb::MessageParser<CastSpellsProgress>(() => new CastSpellsProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastSpellsProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastSpellsProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastSpellsProgress(CastSpellsProgress other) : this() {
          currentSpellCount_ = other.currentSpellCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastSpellsProgress Clone() {
          return new CastSpellsProgress(this);
        }

        /// <summary>Field number for the "current_spell_count" field.</summary>
        public const int CurrentSpellCountFieldNumber = 1;
        private long currentSpellCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentSpellCount {
          get { return currentSpellCount_; }
          set {
            currentSpellCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CastSpellsProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastSpellsProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentSpellCount != other.CurrentSpellCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentSpellCount != 0L) hash ^= CurrentSpellCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentSpellCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentSpellCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentSpellCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentSpellCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastSpellsProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentSpellCount != 0L) {
            CurrentSpellCount = other.CurrentSpellCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentSpellCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectPotionIngredientsQuestProgress : pb::IMessage<CollectPotionIngredientsQuestProgress> {
        private static readonly pb::MessageParser<CollectPotionIngredientsQuestProgress> _parser = new pb::MessageParser<CollectPotionIngredientsQuestProgress>(() => new CollectPotionIngredientsQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectPotionIngredientsQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectPotionIngredientsQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectPotionIngredientsQuestProgress(CollectPotionIngredientsQuestProgress other) : this() {
          currentPotionIngredientCount_ = other.currentPotionIngredientCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectPotionIngredientsQuestProgress Clone() {
          return new CollectPotionIngredientsQuestProgress(this);
        }

        /// <summary>Field number for the "current_potion_ingredient_count" field.</summary>
        public const int CurrentPotionIngredientCountFieldNumber = 1;
        private long currentPotionIngredientCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentPotionIngredientCount {
          get { return currentPotionIngredientCount_; }
          set {
            currentPotionIngredientCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectPotionIngredientsQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectPotionIngredientsQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentPotionIngredientCount != other.CurrentPotionIngredientCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentPotionIngredientCount != 0L) hash ^= CurrentPotionIngredientCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentPotionIngredientCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentPotionIngredientCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentPotionIngredientCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentPotionIngredientCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectPotionIngredientsQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentPotionIngredientCount != 0L) {
            CurrentPotionIngredientCount = other.CurrentPotionIngredientCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentPotionIngredientCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectStickersProgress : pb::IMessage<CollectStickersProgress> {
        private static readonly pb::MessageParser<CollectStickersProgress> _parser = new pb::MessageParser<CollectStickersProgress>(() => new CollectStickersProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectStickersProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectStickersProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectStickersProgress(CollectStickersProgress other) : this() {
          currentCollectCount_ = other.currentCollectCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectStickersProgress Clone() {
          return new CollectStickersProgress(this);
        }

        /// <summary>Field number for the "current_collect_count" field.</summary>
        public const int CurrentCollectCountFieldNumber = 1;
        private long currentCollectCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentCollectCount {
          get { return currentCollectCount_; }
          set {
            currentCollectCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectStickersProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectStickersProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentCollectCount != other.CurrentCollectCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentCollectCount != 0L) hash ^= CurrentCollectCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentCollectCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentCollectCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentCollectCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentCollectCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectStickersProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentCollectCount != 0L) {
            CurrentCollectCount = other.CurrentCollectCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentCollectCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LootOutpostsQuestProgress : pb::IMessage<LootOutpostsQuestProgress> {
        private static readonly pb::MessageParser<LootOutpostsQuestProgress> _parser = new pb::MessageParser<LootOutpostsQuestProgress>(() => new LootOutpostsQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LootOutpostsQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootOutpostsQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootOutpostsQuestProgress(LootOutpostsQuestProgress other) : this() {
          currentOutpostCount_ = other.currentOutpostCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootOutpostsQuestProgress Clone() {
          return new LootOutpostsQuestProgress(this);
        }

        /// <summary>Field number for the "current_outpost_count" field.</summary>
        public const int CurrentOutpostCountFieldNumber = 1;
        private long currentOutpostCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentOutpostCount {
          get { return currentOutpostCount_; }
          set {
            currentOutpostCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LootOutpostsQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LootOutpostsQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentOutpostCount != other.CurrentOutpostCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentOutpostCount != 0L) hash ^= CurrentOutpostCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentOutpostCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentOutpostCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentOutpostCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentOutpostCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LootOutpostsQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentOutpostCount != 0L) {
            CurrentOutpostCount = other.CurrentOutpostCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentOutpostCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DefeatMobTypeInWizardingChallengeProgress : pb::IMessage<DefeatMobTypeInWizardingChallengeProgress> {
        private static readonly pb::MessageParser<DefeatMobTypeInWizardingChallengeProgress> _parser = new pb::MessageParser<DefeatMobTypeInWizardingChallengeProgress>(() => new DefeatMobTypeInWizardingChallengeProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DefeatMobTypeInWizardingChallengeProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatMobTypeInWizardingChallengeProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatMobTypeInWizardingChallengeProgress(DefeatMobTypeInWizardingChallengeProgress other) : this() {
          currentDefeatCount_ = other.currentDefeatCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatMobTypeInWizardingChallengeProgress Clone() {
          return new DefeatMobTypeInWizardingChallengeProgress(this);
        }

        /// <summary>Field number for the "current_defeat_count" field.</summary>
        public const int CurrentDefeatCountFieldNumber = 1;
        private long currentDefeatCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentDefeatCount {
          get { return currentDefeatCount_; }
          set {
            currentDefeatCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DefeatMobTypeInWizardingChallengeProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DefeatMobTypeInWizardingChallengeProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentDefeatCount != other.CurrentDefeatCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentDefeatCount != 0L) hash ^= CurrentDefeatCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentDefeatCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentDefeatCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentDefeatCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentDefeatCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DefeatMobTypeInWizardingChallengeProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentDefeatCount != 0L) {
            CurrentDefeatCount = other.CurrentDefeatCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentDefeatCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DoEncounterHookQuestProgress : pb::IMessage<DoEncounterHookQuestProgress> {
        private static readonly pb::MessageParser<DoEncounterHookQuestProgress> _parser = new pb::MessageParser<DoEncounterHookQuestProgress>(() => new DoEncounterHookQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DoEncounterHookQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoEncounterHookQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoEncounterHookQuestProgress(DoEncounterHookQuestProgress other) : this() {
          currentWinCount_ = other.currentWinCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoEncounterHookQuestProgress Clone() {
          return new DoEncounterHookQuestProgress(this);
        }

        /// <summary>Field number for the "current_win_count" field.</summary>
        public const int CurrentWinCountFieldNumber = 1;
        private long currentWinCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentWinCount {
          get { return currentWinCount_; }
          set {
            currentWinCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DoEncounterHookQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DoEncounterHookQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentWinCount != other.CurrentWinCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentWinCount != 0L) hash ^= CurrentWinCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentWinCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentWinCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentWinCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentWinCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DoEncounterHookQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentWinCount != 0L) {
            CurrentWinCount = other.CurrentWinCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentWinCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WinTracesQuestProgress : pb::IMessage<WinTracesQuestProgress> {
        private static readonly pb::MessageParser<WinTracesQuestProgress> _parser = new pb::MessageParser<WinTracesQuestProgress>(() => new WinTracesQuestProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WinTracesQuestProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestProgress.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WinTracesQuestProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WinTracesQuestProgress(WinTracesQuestProgress other) : this() {
          currentTraceCount_ = other.currentTraceCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WinTracesQuestProgress Clone() {
          return new WinTracesQuestProgress(this);
        }

        /// <summary>Field number for the "current_trace_count" field.</summary>
        public const int CurrentTraceCountFieldNumber = 1;
        private long currentTraceCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CurrentTraceCount {
          get { return currentTraceCount_; }
          set {
            currentTraceCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WinTracesQuestProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WinTracesQuestProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentTraceCount != other.CurrentTraceCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentTraceCount != 0L) hash ^= CurrentTraceCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentTraceCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CurrentTraceCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentTraceCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentTraceCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WinTracesQuestProgress other) {
          if (other == null) {
            return;
          }
          if (other.CurrentTraceCount != 0L) {
            CurrentTraceCount = other.CurrentTraceCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CurrentTraceCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
