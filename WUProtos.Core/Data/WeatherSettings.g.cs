// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/WeatherSettings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/WeatherSettings.proto</summary>
  public static partial class WeatherSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/WeatherSettings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeatherSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNXVVByb3Rvcy9EYXRhL1dlYXRoZXJTZXR0aW5ncy5wcm90bxINV1VQcm90",
            "b3MuRGF0YRojV1VQcm90b3MvRGF0YS9HYW1lcGxheVdlYXRoZXIucHJvdG8a",
            "IldVUHJvdG9zL0RhdGEvRGlzcGxheVdlYXRoZXIucHJvdG8aKFdVUHJvdG9z",
            "L0RhdGEvV2VhdGhlckFsZXJ0U2V0dGluZ3MucHJvdG8ikg4KD1dlYXRoZXJT",
            "ZXR0aW5ncxJRChFnYW1lcGxheV9zZXR0aW5ncxgBIAEoCzI2LldVUHJvdG9z",
            "LkRhdGEuV2VhdGhlclNldHRpbmdzLkdhbWVwbGF5V2VhdGhlclNldHRpbmdz",
            "Ek8KEGRpc3BsYXlfc2V0dGluZ3MYAiABKAsyNS5XVVByb3Rvcy5EYXRhLldl",
            "YXRoZXJTZXR0aW5ncy5EaXNwbGF5V2VhdGhlclNldHRpbmdzEjsKDmFsZXJ0",
            "X3NldHRpbmdzGAMgASgLMiMuV1VQcm90b3MuRGF0YS5XZWF0aGVyQWxlcnRT",
            "ZXR0aW5ncxp7ChRDb25kaXRpb25NYXBTZXR0aW5ncxJLChJnYW1lcGxheV9j",
            "b25kaXRpb24YASABKA4yLy5XVVByb3Rvcy5EYXRhLkdhbWVwbGF5V2VhdGhl",
            "ci5XZWF0aGVyQ29uZGl0aW9uEhYKDnByb3ZpZGVyX2VudW1zGAIgAygJGvkC",
            "ChREaXNwbGF5TGV2ZWxTZXR0aW5ncxIXCg9jb25kaXRpb25fZW51bXMYASAD",
            "KAkSPwoLY2xvdWRfbGV2ZWwYAiABKA4yKi5XVVByb3Rvcy5EYXRhLkRpc3Bs",
            "YXlXZWF0aGVyLkRpc3BsYXlMZXZlbBI+CgpyYWluX2xldmVsGAMgASgOMiou",
            "V1VQcm90b3MuRGF0YS5EaXNwbGF5V2VhdGhlci5EaXNwbGF5TGV2ZWwSPgoK",
            "c25vd19sZXZlbBgEIAEoDjIqLldVUHJvdG9zLkRhdGEuRGlzcGxheVdlYXRo",
            "ZXIuRGlzcGxheUxldmVsEj0KCWZvZ19sZXZlbBgFIAEoDjIqLldVUHJvdG9z",
            "LkRhdGEuRGlzcGxheVdlYXRoZXIuRGlzcGxheUxldmVsEkgKFHNwZWNpYWxf",
            "ZWZmZWN0X2xldmVsGAYgASgOMiouV1VQcm90b3MuRGF0YS5EaXNwbGF5V2Vh",
            "dGhlci5EaXNwbGF5TGV2ZWwangUKFkRpc3BsYXlXZWF0aGVyU2V0dGluZ3MS",
            "UwoWZGlzcGxheV9sZXZlbF9zZXR0aW5ncxgBIAMoCzIzLldVUHJvdG9zLkRh",
            "dGEuV2VhdGhlclNldHRpbmdzLkRpc3BsYXlMZXZlbFNldHRpbmdzEk0KE3dp",
            "bmRfbGV2ZWxfc2V0dGluZ3MYAiABKAsyMC5XVVByb3Rvcy5EYXRhLldlYXRo",
            "ZXJTZXR0aW5ncy5XaW5kTGV2ZWxTZXR0aW5ncxr5AgoURGlzcGxheUxldmVs",
            "U2V0dGluZ3MSFwoPY29uZGl0aW9uX2VudW1zGAEgAygJEj8KC2Nsb3VkX2xl",
            "dmVsGAIgASgOMiouV1VQcm90b3MuRGF0YS5EaXNwbGF5V2VhdGhlci5EaXNw",
            "bGF5TGV2ZWwSPgoKcmFpbl9sZXZlbBgDIAEoDjIqLldVUHJvdG9zLkRhdGEu",
            "RGlzcGxheVdlYXRoZXIuRGlzcGxheUxldmVsEj4KCnNub3dfbGV2ZWwYBCAB",
            "KA4yKi5XVVByb3Rvcy5EYXRhLkRpc3BsYXlXZWF0aGVyLkRpc3BsYXlMZXZl",
            "bBI9Cglmb2dfbGV2ZWwYBSABKA4yKi5XVVByb3Rvcy5EYXRhLkRpc3BsYXlX",
            "ZWF0aGVyLkRpc3BsYXlMZXZlbBJIChRzcGVjaWFsX2VmZmVjdF9sZXZlbBgG",
            "IAEoDjIqLldVUHJvdG9zLkRhdGEuRGlzcGxheVdlYXRoZXIuRGlzcGxheUxl",
            "dmVsGmQKEVdpbmRMZXZlbFNldHRpbmdzEhkKEXdpbmRfbGV2ZWwxX3NwZWVk",
            "GAEgASgFEhkKEXdpbmRfbGV2ZWwyX3NwZWVkGAIgASgFEhkKEXdpbmRfbGV2",
            "ZWwzX3NwZWVkGAMgASgFGp0CChdHYW1lcGxheVdlYXRoZXJTZXR0aW5ncxJK",
            "Cg1jb25kaXRpb25fbWFwGAEgAygLMjMuV1VQcm90b3MuRGF0YS5XZWF0aGVy",
            "U2V0dGluZ3MuQ29uZGl0aW9uTWFwU2V0dGluZ3MSGwoTbWluX3NwZWVkX2Zv",
            "cl93aW5keRgCIAEoBRIcChRjb25kaXRpb25zX2Zvcl93aW5keRgDIAMoCRp7",
            "ChRDb25kaXRpb25NYXBTZXR0aW5ncxJLChJnYW1lcGxheV9jb25kaXRpb24Y",
            "ASABKA4yLy5XVVByb3Rvcy5EYXRhLkdhbWVwbGF5V2VhdGhlci5XZWF0aGVy",
            "Q29uZGl0aW9uEhYKDnByb3ZpZGVyX2VudW1zGAIgAygJGmQKEVdpbmRMZXZl",
            "bFNldHRpbmdzEhkKEXdpbmRfbGV2ZWwxX3NwZWVkGAEgASgFEhkKEXdpbmRf",
            "bGV2ZWwyX3NwZWVkGAIgASgFEhkKEXdpbmRfbGV2ZWwzX3NwZWVkGAMgASgF",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.GameplayWeatherReflection.Descriptor, global::WUProtos.Data.DisplayWeatherReflection.Descriptor, global::WUProtos.Data.WeatherAlertSettingsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings), global::WUProtos.Data.WeatherSettings.Parser, new[]{ "GameplaySettings", "DisplaySettings", "AlertSettings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings), global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings.Parser, new[]{ "GameplayCondition", "ProviderEnums" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings), global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings.Parser, new[]{ "ConditionEnums", "CloudLevel", "RainLevel", "SnowLevel", "FogLevel", "SpecialEffectLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings), global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Parser, new[]{ "DisplayLevelSettings", "WindLevelSettings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Types.DisplayLevelSettings), global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Types.DisplayLevelSettings.Parser, new[]{ "ConditionEnums", "CloudLevel", "RainLevel", "SnowLevel", "FogLevel", "SpecialEffectLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Types.WindLevelSettings), global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Types.WindLevelSettings.Parser, new[]{ "WindLevel1Speed", "WindLevel2Speed", "WindLevel3Speed" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings), global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings.Parser, new[]{ "ConditionMap", "MinSpeedForWindy", "ConditionsForWindy" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings.Types.ConditionMapSettings), global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings.Types.ConditionMapSettings.Parser, new[]{ "GameplayCondition", "ProviderEnums" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.WeatherSettings.Types.WindLevelSettings), global::WUProtos.Data.WeatherSettings.Types.WindLevelSettings.Parser, new[]{ "WindLevel1Speed", "WindLevel2Speed", "WindLevel3Speed" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeatherSettings : pb::IMessage<WeatherSettings> {
    private static readonly pb::MessageParser<WeatherSettings> _parser = new pb::MessageParser<WeatherSettings>(() => new WeatherSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.WeatherSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherSettings(WeatherSettings other) : this() {
      gameplaySettings_ = other.gameplaySettings_ != null ? other.gameplaySettings_.Clone() : null;
      displaySettings_ = other.displaySettings_ != null ? other.displaySettings_.Clone() : null;
      alertSettings_ = other.alertSettings_ != null ? other.alertSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherSettings Clone() {
      return new WeatherSettings(this);
    }

    /// <summary>Field number for the "gameplay_settings" field.</summary>
    public const int GameplaySettingsFieldNumber = 1;
    private global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings gameplaySettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings GameplaySettings {
      get { return gameplaySettings_; }
      set {
        gameplaySettings_ = value;
      }
    }

    /// <summary>Field number for the "display_settings" field.</summary>
    public const int DisplaySettingsFieldNumber = 2;
    private global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings displaySettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings DisplaySettings {
      get { return displaySettings_; }
      set {
        displaySettings_ = value;
      }
    }

    /// <summary>Field number for the "alert_settings" field.</summary>
    public const int AlertSettingsFieldNumber = 3;
    private global::WUProtos.Data.WeatherAlertSettings alertSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.WeatherAlertSettings AlertSettings {
      get { return alertSettings_; }
      set {
        alertSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameplaySettings, other.GameplaySettings)) return false;
      if (!object.Equals(DisplaySettings, other.DisplaySettings)) return false;
      if (!object.Equals(AlertSettings, other.AlertSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameplaySettings_ != null) hash ^= GameplaySettings.GetHashCode();
      if (displaySettings_ != null) hash ^= DisplaySettings.GetHashCode();
      if (alertSettings_ != null) hash ^= AlertSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameplaySettings_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameplaySettings);
      }
      if (displaySettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DisplaySettings);
      }
      if (alertSettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AlertSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameplaySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameplaySettings);
      }
      if (displaySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplaySettings);
      }
      if (alertSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlertSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherSettings other) {
      if (other == null) {
        return;
      }
      if (other.gameplaySettings_ != null) {
        if (gameplaySettings_ == null) {
          GameplaySettings = new global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings();
        }
        GameplaySettings.MergeFrom(other.GameplaySettings);
      }
      if (other.displaySettings_ != null) {
        if (displaySettings_ == null) {
          DisplaySettings = new global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings();
        }
        DisplaySettings.MergeFrom(other.DisplaySettings);
      }
      if (other.alertSettings_ != null) {
        if (alertSettings_ == null) {
          AlertSettings = new global::WUProtos.Data.WeatherAlertSettings();
        }
        AlertSettings.MergeFrom(other.AlertSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameplaySettings_ == null) {
              GameplaySettings = new global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings();
            }
            input.ReadMessage(GameplaySettings);
            break;
          }
          case 18: {
            if (displaySettings_ == null) {
              DisplaySettings = new global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings();
            }
            input.ReadMessage(DisplaySettings);
            break;
          }
          case 26: {
            if (alertSettings_ == null) {
              AlertSettings = new global::WUProtos.Data.WeatherAlertSettings();
            }
            input.ReadMessage(AlertSettings);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WeatherSettings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ConditionMapSettings : pb::IMessage<ConditionMapSettings> {
        private static readonly pb::MessageParser<ConditionMapSettings> _parser = new pb::MessageParser<ConditionMapSettings>(() => new ConditionMapSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConditionMapSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.WeatherSettings.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionMapSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionMapSettings(ConditionMapSettings other) : this() {
          gameplayCondition_ = other.gameplayCondition_;
          providerEnums_ = other.providerEnums_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionMapSettings Clone() {
          return new ConditionMapSettings(this);
        }

        /// <summary>Field number for the "gameplay_condition" field.</summary>
        public const int GameplayConditionFieldNumber = 1;
        private global::WUProtos.Data.GameplayWeather.Types.WeatherCondition gameplayCondition_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GameplayWeather.Types.WeatherCondition GameplayCondition {
          get { return gameplayCondition_; }
          set {
            gameplayCondition_ = value;
          }
        }

        /// <summary>Field number for the "provider_enums" field.</summary>
        public const int ProviderEnumsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_providerEnums_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> providerEnums_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ProviderEnums {
          get { return providerEnums_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConditionMapSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConditionMapSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameplayCondition != other.GameplayCondition) return false;
          if(!providerEnums_.Equals(other.providerEnums_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GameplayCondition != 0) hash ^= GameplayCondition.GetHashCode();
          hash ^= providerEnums_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GameplayCondition != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) GameplayCondition);
          }
          providerEnums_.WriteTo(output, _repeated_providerEnums_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GameplayCondition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameplayCondition);
          }
          size += providerEnums_.CalculateSize(_repeated_providerEnums_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConditionMapSettings other) {
          if (other == null) {
            return;
          }
          if (other.GameplayCondition != 0) {
            GameplayCondition = other.GameplayCondition;
          }
          providerEnums_.Add(other.providerEnums_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GameplayCondition = (global::WUProtos.Data.GameplayWeather.Types.WeatherCondition) input.ReadEnum();
                break;
              }
              case 18: {
                providerEnums_.AddEntriesFrom(input, _repeated_providerEnums_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class DisplayLevelSettings : pb::IMessage<DisplayLevelSettings> {
        private static readonly pb::MessageParser<DisplayLevelSettings> _parser = new pb::MessageParser<DisplayLevelSettings>(() => new DisplayLevelSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DisplayLevelSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.WeatherSettings.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DisplayLevelSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DisplayLevelSettings(DisplayLevelSettings other) : this() {
          conditionEnums_ = other.conditionEnums_.Clone();
          cloudLevel_ = other.cloudLevel_;
          rainLevel_ = other.rainLevel_;
          snowLevel_ = other.snowLevel_;
          fogLevel_ = other.fogLevel_;
          specialEffectLevel_ = other.specialEffectLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DisplayLevelSettings Clone() {
          return new DisplayLevelSettings(this);
        }

        /// <summary>Field number for the "condition_enums" field.</summary>
        public const int ConditionEnumsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_conditionEnums_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> conditionEnums_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ConditionEnums {
          get { return conditionEnums_; }
        }

        /// <summary>Field number for the "cloud_level" field.</summary>
        public const int CloudLevelFieldNumber = 2;
        private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel cloudLevel_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel CloudLevel {
          get { return cloudLevel_; }
          set {
            cloudLevel_ = value;
          }
        }

        /// <summary>Field number for the "rain_level" field.</summary>
        public const int RainLevelFieldNumber = 3;
        private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel rainLevel_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel RainLevel {
          get { return rainLevel_; }
          set {
            rainLevel_ = value;
          }
        }

        /// <summary>Field number for the "snow_level" field.</summary>
        public const int SnowLevelFieldNumber = 4;
        private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel snowLevel_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel SnowLevel {
          get { return snowLevel_; }
          set {
            snowLevel_ = value;
          }
        }

        /// <summary>Field number for the "fog_level" field.</summary>
        public const int FogLevelFieldNumber = 5;
        private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel fogLevel_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel FogLevel {
          get { return fogLevel_; }
          set {
            fogLevel_ = value;
          }
        }

        /// <summary>Field number for the "special_effect_level" field.</summary>
        public const int SpecialEffectLevelFieldNumber = 6;
        private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel specialEffectLevel_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel SpecialEffectLevel {
          get { return specialEffectLevel_; }
          set {
            specialEffectLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DisplayLevelSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DisplayLevelSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conditionEnums_.Equals(other.conditionEnums_)) return false;
          if (CloudLevel != other.CloudLevel) return false;
          if (RainLevel != other.RainLevel) return false;
          if (SnowLevel != other.SnowLevel) return false;
          if (FogLevel != other.FogLevel) return false;
          if (SpecialEffectLevel != other.SpecialEffectLevel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conditionEnums_.GetHashCode();
          if (CloudLevel != 0) hash ^= CloudLevel.GetHashCode();
          if (RainLevel != 0) hash ^= RainLevel.GetHashCode();
          if (SnowLevel != 0) hash ^= SnowLevel.GetHashCode();
          if (FogLevel != 0) hash ^= FogLevel.GetHashCode();
          if (SpecialEffectLevel != 0) hash ^= SpecialEffectLevel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conditionEnums_.WriteTo(output, _repeated_conditionEnums_codec);
          if (CloudLevel != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) CloudLevel);
          }
          if (RainLevel != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) RainLevel);
          }
          if (SnowLevel != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) SnowLevel);
          }
          if (FogLevel != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) FogLevel);
          }
          if (SpecialEffectLevel != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) SpecialEffectLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conditionEnums_.CalculateSize(_repeated_conditionEnums_codec);
          if (CloudLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloudLevel);
          }
          if (RainLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RainLevel);
          }
          if (SnowLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SnowLevel);
          }
          if (FogLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FogLevel);
          }
          if (SpecialEffectLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpecialEffectLevel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DisplayLevelSettings other) {
          if (other == null) {
            return;
          }
          conditionEnums_.Add(other.conditionEnums_);
          if (other.CloudLevel != 0) {
            CloudLevel = other.CloudLevel;
          }
          if (other.RainLevel != 0) {
            RainLevel = other.RainLevel;
          }
          if (other.SnowLevel != 0) {
            SnowLevel = other.SnowLevel;
          }
          if (other.FogLevel != 0) {
            FogLevel = other.FogLevel;
          }
          if (other.SpecialEffectLevel != 0) {
            SpecialEffectLevel = other.SpecialEffectLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                conditionEnums_.AddEntriesFrom(input, _repeated_conditionEnums_codec);
                break;
              }
              case 16: {
                CloudLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                break;
              }
              case 24: {
                RainLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                break;
              }
              case 32: {
                SnowLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                break;
              }
              case 40: {
                FogLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                break;
              }
              case 48: {
                SpecialEffectLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DisplayWeatherSettings : pb::IMessage<DisplayWeatherSettings> {
        private static readonly pb::MessageParser<DisplayWeatherSettings> _parser = new pb::MessageParser<DisplayWeatherSettings>(() => new DisplayWeatherSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DisplayWeatherSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.WeatherSettings.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DisplayWeatherSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DisplayWeatherSettings(DisplayWeatherSettings other) : this() {
          displayLevelSettings_ = other.displayLevelSettings_.Clone();
          windLevelSettings_ = other.windLevelSettings_ != null ? other.windLevelSettings_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DisplayWeatherSettings Clone() {
          return new DisplayWeatherSettings(this);
        }

        /// <summary>Field number for the "display_level_settings" field.</summary>
        public const int DisplayLevelSettingsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings> _repeated_displayLevelSettings_codec
            = pb::FieldCodec.ForMessage(10, global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings> displayLevelSettings_ = new pbc::RepeatedField<global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.WeatherSettings.Types.DisplayLevelSettings> DisplayLevelSettings {
          get { return displayLevelSettings_; }
        }

        /// <summary>Field number for the "wind_level_settings" field.</summary>
        public const int WindLevelSettingsFieldNumber = 2;
        private global::WUProtos.Data.WeatherSettings.Types.WindLevelSettings windLevelSettings_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.WeatherSettings.Types.WindLevelSettings WindLevelSettings {
          get { return windLevelSettings_; }
          set {
            windLevelSettings_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DisplayWeatherSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DisplayWeatherSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!displayLevelSettings_.Equals(other.displayLevelSettings_)) return false;
          if (!object.Equals(WindLevelSettings, other.WindLevelSettings)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= displayLevelSettings_.GetHashCode();
          if (windLevelSettings_ != null) hash ^= WindLevelSettings.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          displayLevelSettings_.WriteTo(output, _repeated_displayLevelSettings_codec);
          if (windLevelSettings_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(WindLevelSettings);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += displayLevelSettings_.CalculateSize(_repeated_displayLevelSettings_codec);
          if (windLevelSettings_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindLevelSettings);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DisplayWeatherSettings other) {
          if (other == null) {
            return;
          }
          displayLevelSettings_.Add(other.displayLevelSettings_);
          if (other.windLevelSettings_ != null) {
            if (windLevelSettings_ == null) {
              WindLevelSettings = new global::WUProtos.Data.WeatherSettings.Types.WindLevelSettings();
            }
            WindLevelSettings.MergeFrom(other.WindLevelSettings);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                displayLevelSettings_.AddEntriesFrom(input, _repeated_displayLevelSettings_codec);
                break;
              }
              case 18: {
                if (windLevelSettings_ == null) {
                  WindLevelSettings = new global::WUProtos.Data.WeatherSettings.Types.WindLevelSettings();
                }
                input.ReadMessage(WindLevelSettings);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DisplayWeatherSettings message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class DisplayLevelSettings : pb::IMessage<DisplayLevelSettings> {
            private static readonly pb::MessageParser<DisplayLevelSettings> _parser = new pb::MessageParser<DisplayLevelSettings>(() => new DisplayLevelSettings());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DisplayLevelSettings> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DisplayLevelSettings() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DisplayLevelSettings(DisplayLevelSettings other) : this() {
              conditionEnums_ = other.conditionEnums_.Clone();
              cloudLevel_ = other.cloudLevel_;
              rainLevel_ = other.rainLevel_;
              snowLevel_ = other.snowLevel_;
              fogLevel_ = other.fogLevel_;
              specialEffectLevel_ = other.specialEffectLevel_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DisplayLevelSettings Clone() {
              return new DisplayLevelSettings(this);
            }

            /// <summary>Field number for the "condition_enums" field.</summary>
            public const int ConditionEnumsFieldNumber = 1;
            private static readonly pb::FieldCodec<string> _repeated_conditionEnums_codec
                = pb::FieldCodec.ForString(10);
            private readonly pbc::RepeatedField<string> conditionEnums_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> ConditionEnums {
              get { return conditionEnums_; }
            }

            /// <summary>Field number for the "cloud_level" field.</summary>
            public const int CloudLevelFieldNumber = 2;
            private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel cloudLevel_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel CloudLevel {
              get { return cloudLevel_; }
              set {
                cloudLevel_ = value;
              }
            }

            /// <summary>Field number for the "rain_level" field.</summary>
            public const int RainLevelFieldNumber = 3;
            private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel rainLevel_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel RainLevel {
              get { return rainLevel_; }
              set {
                rainLevel_ = value;
              }
            }

            /// <summary>Field number for the "snow_level" field.</summary>
            public const int SnowLevelFieldNumber = 4;
            private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel snowLevel_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel SnowLevel {
              get { return snowLevel_; }
              set {
                snowLevel_ = value;
              }
            }

            /// <summary>Field number for the "fog_level" field.</summary>
            public const int FogLevelFieldNumber = 5;
            private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel fogLevel_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel FogLevel {
              get { return fogLevel_; }
              set {
                fogLevel_ = value;
              }
            }

            /// <summary>Field number for the "special_effect_level" field.</summary>
            public const int SpecialEffectLevelFieldNumber = 6;
            private global::WUProtos.Data.DisplayWeather.Types.DisplayLevel specialEffectLevel_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.DisplayWeather.Types.DisplayLevel SpecialEffectLevel {
              get { return specialEffectLevel_; }
              set {
                specialEffectLevel_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DisplayLevelSettings);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DisplayLevelSettings other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!conditionEnums_.Equals(other.conditionEnums_)) return false;
              if (CloudLevel != other.CloudLevel) return false;
              if (RainLevel != other.RainLevel) return false;
              if (SnowLevel != other.SnowLevel) return false;
              if (FogLevel != other.FogLevel) return false;
              if (SpecialEffectLevel != other.SpecialEffectLevel) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= conditionEnums_.GetHashCode();
              if (CloudLevel != 0) hash ^= CloudLevel.GetHashCode();
              if (RainLevel != 0) hash ^= RainLevel.GetHashCode();
              if (SnowLevel != 0) hash ^= SnowLevel.GetHashCode();
              if (FogLevel != 0) hash ^= FogLevel.GetHashCode();
              if (SpecialEffectLevel != 0) hash ^= SpecialEffectLevel.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              conditionEnums_.WriteTo(output, _repeated_conditionEnums_codec);
              if (CloudLevel != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) CloudLevel);
              }
              if (RainLevel != 0) {
                output.WriteRawTag(24);
                output.WriteEnum((int) RainLevel);
              }
              if (SnowLevel != 0) {
                output.WriteRawTag(32);
                output.WriteEnum((int) SnowLevel);
              }
              if (FogLevel != 0) {
                output.WriteRawTag(40);
                output.WriteEnum((int) FogLevel);
              }
              if (SpecialEffectLevel != 0) {
                output.WriteRawTag(48);
                output.WriteEnum((int) SpecialEffectLevel);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += conditionEnums_.CalculateSize(_repeated_conditionEnums_codec);
              if (CloudLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloudLevel);
              }
              if (RainLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RainLevel);
              }
              if (SnowLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SnowLevel);
              }
              if (FogLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FogLevel);
              }
              if (SpecialEffectLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpecialEffectLevel);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DisplayLevelSettings other) {
              if (other == null) {
                return;
              }
              conditionEnums_.Add(other.conditionEnums_);
              if (other.CloudLevel != 0) {
                CloudLevel = other.CloudLevel;
              }
              if (other.RainLevel != 0) {
                RainLevel = other.RainLevel;
              }
              if (other.SnowLevel != 0) {
                SnowLevel = other.SnowLevel;
              }
              if (other.FogLevel != 0) {
                FogLevel = other.FogLevel;
              }
              if (other.SpecialEffectLevel != 0) {
                SpecialEffectLevel = other.SpecialEffectLevel;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    conditionEnums_.AddEntriesFrom(input, _repeated_conditionEnums_codec);
                    break;
                  }
                  case 16: {
                    CloudLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                    break;
                  }
                  case 24: {
                    RainLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                    break;
                  }
                  case 32: {
                    SnowLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                    break;
                  }
                  case 40: {
                    FogLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                    break;
                  }
                  case 48: {
                    SpecialEffectLevel = (global::WUProtos.Data.DisplayWeather.Types.DisplayLevel) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class WindLevelSettings : pb::IMessage<WindLevelSettings> {
            private static readonly pb::MessageParser<WindLevelSettings> _parser = new pb::MessageParser<WindLevelSettings>(() => new WindLevelSettings());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WindLevelSettings> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.WeatherSettings.Types.DisplayWeatherSettings.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WindLevelSettings() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WindLevelSettings(WindLevelSettings other) : this() {
              windLevel1Speed_ = other.windLevel1Speed_;
              windLevel2Speed_ = other.windLevel2Speed_;
              windLevel3Speed_ = other.windLevel3Speed_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WindLevelSettings Clone() {
              return new WindLevelSettings(this);
            }

            /// <summary>Field number for the "wind_level1_speed" field.</summary>
            public const int WindLevel1SpeedFieldNumber = 1;
            private int windLevel1Speed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int WindLevel1Speed {
              get { return windLevel1Speed_; }
              set {
                windLevel1Speed_ = value;
              }
            }

            /// <summary>Field number for the "wind_level2_speed" field.</summary>
            public const int WindLevel2SpeedFieldNumber = 2;
            private int windLevel2Speed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int WindLevel2Speed {
              get { return windLevel2Speed_; }
              set {
                windLevel2Speed_ = value;
              }
            }

            /// <summary>Field number for the "wind_level3_speed" field.</summary>
            public const int WindLevel3SpeedFieldNumber = 3;
            private int windLevel3Speed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int WindLevel3Speed {
              get { return windLevel3Speed_; }
              set {
                windLevel3Speed_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WindLevelSettings);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WindLevelSettings other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (WindLevel1Speed != other.WindLevel1Speed) return false;
              if (WindLevel2Speed != other.WindLevel2Speed) return false;
              if (WindLevel3Speed != other.WindLevel3Speed) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (WindLevel1Speed != 0) hash ^= WindLevel1Speed.GetHashCode();
              if (WindLevel2Speed != 0) hash ^= WindLevel2Speed.GetHashCode();
              if (WindLevel3Speed != 0) hash ^= WindLevel3Speed.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (WindLevel1Speed != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(WindLevel1Speed);
              }
              if (WindLevel2Speed != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(WindLevel2Speed);
              }
              if (WindLevel3Speed != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(WindLevel3Speed);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (WindLevel1Speed != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindLevel1Speed);
              }
              if (WindLevel2Speed != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindLevel2Speed);
              }
              if (WindLevel3Speed != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindLevel3Speed);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WindLevelSettings other) {
              if (other == null) {
                return;
              }
              if (other.WindLevel1Speed != 0) {
                WindLevel1Speed = other.WindLevel1Speed;
              }
              if (other.WindLevel2Speed != 0) {
                WindLevel2Speed = other.WindLevel2Speed;
              }
              if (other.WindLevel3Speed != 0) {
                WindLevel3Speed = other.WindLevel3Speed;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    WindLevel1Speed = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    WindLevel2Speed = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    WindLevel3Speed = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class GameplayWeatherSettings : pb::IMessage<GameplayWeatherSettings> {
        private static readonly pb::MessageParser<GameplayWeatherSettings> _parser = new pb::MessageParser<GameplayWeatherSettings>(() => new GameplayWeatherSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameplayWeatherSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.WeatherSettings.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameplayWeatherSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameplayWeatherSettings(GameplayWeatherSettings other) : this() {
          conditionMap_ = other.conditionMap_.Clone();
          minSpeedForWindy_ = other.minSpeedForWindy_;
          conditionsForWindy_ = other.conditionsForWindy_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameplayWeatherSettings Clone() {
          return new GameplayWeatherSettings(this);
        }

        /// <summary>Field number for the "condition_map" field.</summary>
        public const int ConditionMapFieldNumber = 1;
        private static readonly pb::FieldCodec<global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings> _repeated_conditionMap_codec
            = pb::FieldCodec.ForMessage(10, global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings> conditionMap_ = new pbc::RepeatedField<global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.WeatherSettings.Types.ConditionMapSettings> ConditionMap {
          get { return conditionMap_; }
        }

        /// <summary>Field number for the "min_speed_for_windy" field.</summary>
        public const int MinSpeedForWindyFieldNumber = 2;
        private int minSpeedForWindy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinSpeedForWindy {
          get { return minSpeedForWindy_; }
          set {
            minSpeedForWindy_ = value;
          }
        }

        /// <summary>Field number for the "conditions_for_windy" field.</summary>
        public const int ConditionsForWindyFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_conditionsForWindy_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> conditionsForWindy_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ConditionsForWindy {
          get { return conditionsForWindy_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameplayWeatherSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameplayWeatherSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conditionMap_.Equals(other.conditionMap_)) return false;
          if (MinSpeedForWindy != other.MinSpeedForWindy) return false;
          if(!conditionsForWindy_.Equals(other.conditionsForWindy_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conditionMap_.GetHashCode();
          if (MinSpeedForWindy != 0) hash ^= MinSpeedForWindy.GetHashCode();
          hash ^= conditionsForWindy_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conditionMap_.WriteTo(output, _repeated_conditionMap_codec);
          if (MinSpeedForWindy != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MinSpeedForWindy);
          }
          conditionsForWindy_.WriteTo(output, _repeated_conditionsForWindy_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conditionMap_.CalculateSize(_repeated_conditionMap_codec);
          if (MinSpeedForWindy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinSpeedForWindy);
          }
          size += conditionsForWindy_.CalculateSize(_repeated_conditionsForWindy_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameplayWeatherSettings other) {
          if (other == null) {
            return;
          }
          conditionMap_.Add(other.conditionMap_);
          if (other.MinSpeedForWindy != 0) {
            MinSpeedForWindy = other.MinSpeedForWindy;
          }
          conditionsForWindy_.Add(other.conditionsForWindy_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                conditionMap_.AddEntriesFrom(input, _repeated_conditionMap_codec);
                break;
              }
              case 16: {
                MinSpeedForWindy = input.ReadInt32();
                break;
              }
              case 26: {
                conditionsForWindy_.AddEntriesFrom(input, _repeated_conditionsForWindy_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GameplayWeatherSettings message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ConditionMapSettings : pb::IMessage<ConditionMapSettings> {
            private static readonly pb::MessageParser<ConditionMapSettings> _parser = new pb::MessageParser<ConditionMapSettings>(() => new ConditionMapSettings());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ConditionMapSettings> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.WeatherSettings.Types.GameplayWeatherSettings.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ConditionMapSettings() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ConditionMapSettings(ConditionMapSettings other) : this() {
              gameplayCondition_ = other.gameplayCondition_;
              providerEnums_ = other.providerEnums_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ConditionMapSettings Clone() {
              return new ConditionMapSettings(this);
            }

            /// <summary>Field number for the "gameplay_condition" field.</summary>
            public const int GameplayConditionFieldNumber = 1;
            private global::WUProtos.Data.GameplayWeather.Types.WeatherCondition gameplayCondition_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GameplayWeather.Types.WeatherCondition GameplayCondition {
              get { return gameplayCondition_; }
              set {
                gameplayCondition_ = value;
              }
            }

            /// <summary>Field number for the "provider_enums" field.</summary>
            public const int ProviderEnumsFieldNumber = 2;
            private static readonly pb::FieldCodec<string> _repeated_providerEnums_codec
                = pb::FieldCodec.ForString(18);
            private readonly pbc::RepeatedField<string> providerEnums_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> ProviderEnums {
              get { return providerEnums_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ConditionMapSettings);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ConditionMapSettings other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (GameplayCondition != other.GameplayCondition) return false;
              if(!providerEnums_.Equals(other.providerEnums_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (GameplayCondition != 0) hash ^= GameplayCondition.GetHashCode();
              hash ^= providerEnums_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (GameplayCondition != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) GameplayCondition);
              }
              providerEnums_.WriteTo(output, _repeated_providerEnums_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (GameplayCondition != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameplayCondition);
              }
              size += providerEnums_.CalculateSize(_repeated_providerEnums_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ConditionMapSettings other) {
              if (other == null) {
                return;
              }
              if (other.GameplayCondition != 0) {
                GameplayCondition = other.GameplayCondition;
              }
              providerEnums_.Add(other.providerEnums_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    GameplayCondition = (global::WUProtos.Data.GameplayWeather.Types.WeatherCondition) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    providerEnums_.AddEntriesFrom(input, _repeated_providerEnums_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class WindLevelSettings : pb::IMessage<WindLevelSettings> {
        private static readonly pb::MessageParser<WindLevelSettings> _parser = new pb::MessageParser<WindLevelSettings>(() => new WindLevelSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WindLevelSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.WeatherSettings.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindLevelSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindLevelSettings(WindLevelSettings other) : this() {
          windLevel1Speed_ = other.windLevel1Speed_;
          windLevel2Speed_ = other.windLevel2Speed_;
          windLevel3Speed_ = other.windLevel3Speed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindLevelSettings Clone() {
          return new WindLevelSettings(this);
        }

        /// <summary>Field number for the "wind_level1_speed" field.</summary>
        public const int WindLevel1SpeedFieldNumber = 1;
        private int windLevel1Speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WindLevel1Speed {
          get { return windLevel1Speed_; }
          set {
            windLevel1Speed_ = value;
          }
        }

        /// <summary>Field number for the "wind_level2_speed" field.</summary>
        public const int WindLevel2SpeedFieldNumber = 2;
        private int windLevel2Speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WindLevel2Speed {
          get { return windLevel2Speed_; }
          set {
            windLevel2Speed_ = value;
          }
        }

        /// <summary>Field number for the "wind_level3_speed" field.</summary>
        public const int WindLevel3SpeedFieldNumber = 3;
        private int windLevel3Speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WindLevel3Speed {
          get { return windLevel3Speed_; }
          set {
            windLevel3Speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WindLevelSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WindLevelSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WindLevel1Speed != other.WindLevel1Speed) return false;
          if (WindLevel2Speed != other.WindLevel2Speed) return false;
          if (WindLevel3Speed != other.WindLevel3Speed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WindLevel1Speed != 0) hash ^= WindLevel1Speed.GetHashCode();
          if (WindLevel2Speed != 0) hash ^= WindLevel2Speed.GetHashCode();
          if (WindLevel3Speed != 0) hash ^= WindLevel3Speed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (WindLevel1Speed != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(WindLevel1Speed);
          }
          if (WindLevel2Speed != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(WindLevel2Speed);
          }
          if (WindLevel3Speed != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(WindLevel3Speed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WindLevel1Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindLevel1Speed);
          }
          if (WindLevel2Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindLevel2Speed);
          }
          if (WindLevel3Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindLevel3Speed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WindLevelSettings other) {
          if (other == null) {
            return;
          }
          if (other.WindLevel1Speed != 0) {
            WindLevel1Speed = other.WindLevel1Speed;
          }
          if (other.WindLevel2Speed != 0) {
            WindLevel2Speed = other.WindLevel2Speed;
          }
          if (other.WindLevel3Speed != 0) {
            WindLevel3Speed = other.WindLevel3Speed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                WindLevel1Speed = input.ReadInt32();
                break;
              }
              case 16: {
                WindLevel2Speed = input.ReadInt32();
                break;
              }
              case 24: {
                WindLevel3Speed = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
