// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/GmTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/GmTemplate.proto</summary>
  public static partial class GmTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/GmTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GmTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XVVByb3Rvcy9EYXRhL0dtVGVtcGxhdGUucHJvdG8SDVdVUHJvdG9zLkRh",
            "dGEaJldVUHJvdG9zL0VudW1zL01hc3Rlck5vdGVHZXN0dXJlLnByb3RvGi9X",
            "VVByb3Rvcy9EYXRhL0NvbGxlY3Rpb24vQ29sbGVjdGlvbkZhbWlseS5wcm90",
            "bxodV1VQcm90b3MvRGF0YS9TdG9yZVBhY2sucHJvdG8aIFdVUHJvdG9zL0Rh",
            "dGEvUXVhbGl0eUxldmVsLnByb3RvGiFXVVByb3Rvcy9EYXRhL1Byb2ZpbGVD",
            "b25maWcucHJvdG8aLFdVUHJvdG9zL0RhdGEvQ2hhbGxlbmdlL0NoYWxsZW5n",
            "ZUJvbnVzLnByb3RvGiFXVVByb3Rvcy9EYXRhL0hvb2tRdWVzdFRhc2sucHJv",
            "dG8aIFdVUHJvdG9zL0RhdGEvUmVxdWlyZW1lbnRzLnByb3RvGiNXVVByb3Rv",
            "cy9EYXRhL0xvb3QvTG9vdFJld2FyZC5wcm90bxoeV1VQcm90b3MvRGF0YS9D",
            "b25kaXRpb25zLnByb3RvIpSjAQoKR21UZW1wbGF0ZRJHChFjb2xsZWN0aW9u",
            "X2ZhbWlseRgBIAEoCzIqLldVUHJvdG9zLkRhdGEuQ29sbGVjdGlvbi5Db2xs",
            "ZWN0aW9uRmFtaWx5SAASQwoPY29sbGVjdGlvbl9pdGVtGAIgASgLMiguV1VQ",
            "cm90b3MuRGF0YS5HbVRlbXBsYXRlLkNvbGxlY3Rpb25JdGVtSAASOAoJZW5j",
            "b3VudGVyGAMgASgLMiMuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkVuY291",
            "bnRlckgAEkkKEmVuY291bnRlcl9vYnN0YWNsZRgEIAEoCzIrLldVUHJvdG9z",
            "LkRhdGEuR21UZW1wbGF0ZS5FbmNvdW50ZXJPYnN0YWNsZUgAEjAKBXNwZWxs",
            "GAUgASgLMh8uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlNwZWxsSAASOQoK",
            "dmF1bHRfaXRlbRgGIAEoCzIjLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5W",
            "YXVsdEl0ZW1IABI7CgtnYW1lX2NvbmZpZxgHIAEoCzIkLldVUHJvdG9zLkRh",
            "dGEuR21UZW1wbGF0ZS5HYW1lQ29uZmlnSAASPQoMcGxheWVyX2xldmVsGAgg",
            "ASgLMiUuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlBsYXllckxldmVsSAAS",
            "LgoKc3RvcmVfcGFjaxgJIAEoCzIYLldVUHJvdG9zLkRhdGEuU3RvcmVQYWNr",
            "SAASRQoQd2Fsa2JveF90ZW1wbGF0ZRgKIAEoCzIpLldVUHJvdG9zLkRhdGEu",
            "R21UZW1wbGF0ZS5XYWxrYm94VGVtcGxhdGVIABI9CgxmZWF0dXJlX2ZsYWcY",
            "CyABKAsyJS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuRmVhdHVyZUZsYWdI",
            "ABI0Cgdwb3J0a2V5GAwgASgLMiEuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRl",
            "LlBvcnRrZXlIABIuCgRidWZmGA0gASgLMh4uV1VQcm90b3MuRGF0YS5HbVRl",
            "bXBsYXRlLkJ1ZmZIABJHChFmb3J0cmVzc190ZW1wbGF0ZRgOIAEoCzIqLldV",
            "UHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5Gb3J0cmVzc1RlbXBsYXRlSAASRQoQ",
            "Y2hhbWJlcl90ZW1wbGF0ZRgPIAEoCzIpLldVUHJvdG9zLkRhdGEuR21UZW1w",
            "bGF0ZS5DaGFtYmVyVGVtcGxhdGVIABI0Cg1xdWFsaXR5X2xldmVsGBAgASgL",
            "MhsuV1VQcm90b3MuRGF0YS5RdWFsaXR5TGV2ZWxIABJDCg9wcm90ZWdvX3Bh",
            "dHRlcm4YESABKAsyKC5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuUHJvdGVn",
            "b1BhdHRlcm5IABJDCg9jb2xsZWN0aW9uX3BhZ2UYEiABKAsyKC5XVVByb3Rv",
            "cy5EYXRhLkdtVGVtcGxhdGUuQ29sbGVjdGlvblBhZ2VIABI9Cgx0ZWFtX2Nv",
            "bnRyb2wYEyABKAsyJS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuVGVhbUNv",
            "bnRyb2xIABI9CgxzdG9yZV9jb25maWcYFCABKAsyJS5XVVByb3Rvcy5EYXRh",
            "LkdtVGVtcGxhdGUuU3RvcmVDb25maWdIABJHChFzdG9yZV9zdWJjYXRlZ29y",
            "eRgVIAEoCzIqLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5TdG9yZVN1YmNh",
            "dGVnb3J5SAASMgoGaGFwdGljGBYgASgLMiAuV1VQcm90b3MuRGF0YS5HbVRl",
            "bXBsYXRlLkhhcHRpY0gAEkEKDmVuY291bnRlcl90eXBlGBcgASgLMicuV1VQ",
            "cm90b3MuRGF0YS5HbVRlbXBsYXRlLkVuY291bnRlclR5cGVIABJOChVjaGFs",
            "bGVuZ2Vfc3Bhd25fbG9naWMYGCABKAsyLS5XVVByb3Rvcy5EYXRhLkdtVGVt",
            "cGxhdGUuQ2hhbGxlbmdlU3Bhd25Mb2dpY0gAEjoKCnByb2Zlc3Npb24YGSAB",
            "KAsyJC5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuUHJvZmVzc2lvbkgAEkEK",
            "DmJvbnVzX2NhdGVnb3J5GBogASgLMicuV1VQcm90b3MuRGF0YS5HbVRlbXBs",
            "YXRlLkJvbnVzQ2F0ZWdvcnlIABJBCg52YXVsdF9jYXRlZ29yeRgbIAEoCzIn",
            "LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5WYXVsdENhdGVnb3J5SAASNgoO",
            "cHJvZmlsZV9jb25maWcYHCABKAsyHC5XVVByb3Rvcy5EYXRhLlByb2ZpbGVD",
            "b25maWdIABJbChxjb2xsZWN0aW9uX2ZhbWlseV9yYW5rX3RhYmxlGB0gASgL",
            "MjMuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkNvbGxlY3Rpb25GYW1pbHlS",
            "YW5rVGFibGVIABJBCg5tYXBfaW5ncmVkaWVudBgeIAEoCzInLldVUHJvdG9z",
            "LkRhdGEuR21UZW1wbGF0ZS5NYXBJbmdyZWRpZW50SAASOwoLbWFwX2FiaWxp",
            "dHkYHyABKAsyJC5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuTWFwQWJpbGl0",
            "eUgAEjIKBnJlY2lwZRggIAEoCzIgLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0",
            "ZS5SZWNpcGVIABJCCg9jaGFsbGVuZ2VfYm9udXMYISABKAsyJy5XVVByb3Rv",
            "cy5EYXRhLkNoYWxsZW5nZS5DaGFsbGVuZ2VCb251c0gAEjoKCnN0b3J5Ym9h",
            "cmQYIiABKAsyJC5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuU3Rvcnlib2Fy",
            "ZEgAEjsKC21hc3Rlcl9ub3RlGCMgASgLMiQuV1VQcm90b3MuRGF0YS5HbVRl",
            "bXBsYXRlLk1hc3Rlck5vdGVIABI2CghjYXVsZHJvbhgkIAEoCzIiLldVUHJv",
            "dG9zLkRhdGEuR21UZW1wbGF0ZS5DYXVsZHJvbkgAEjQKB3JwZ3N0YXQYJSAB",
            "KAsyIS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuUnBnc3RhdEgAEkEKDnJw",
            "Z3N0YXRzX2Jsb2NrGCYgASgLMicuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRl",
            "LlJwZ3N0YXRzQmxvY2tIABJKChNzZWxmaWVfYXZhdGFyX2Fzc2V0GCcgASgL",
            "MisuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlNlbGZpZUF2YXRhckFzc2V0",
            "SAASRQoQb3V0cG9zdF90ZW1wbGF0ZRgoIAEoCzIpLldVUHJvdG9zLkRhdGEu",
            "R21UZW1wbGF0ZS5PdXRwb3N0VGVtcGxhdGVIABJdCh1kYWlseV9yZXdhcmRf",
            "bW9udGhseV9zY2hlZHVsZRgpIAEoCzI0LldVUHJvdG9zLkRhdGEuR21UZW1w",
            "bGF0ZS5EYWlseVJld2FyZE1vbnRobHlTY2hlZHVsZUgAEjAKBXF1ZXN0GCog",
            "ASgLMh8uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlF1ZXN0SAASNwoJZGVl",
            "cF9saW5rGCsgASgLMiIuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkRlZXBM",
            "aW5rSAASMAoFZXZlbnQYLCABKAsyHy5XVVByb3Rvcy5EYXRhLkdtVGVtcGxh",
            "dGUuRXZlbnRIABJLChNncmVlbmhvdXNlX3RlbXBsYXRlGC0gASgLMiwuV1VQ",
            "cm90b3MuRGF0YS5HbVRlbXBsYXRlLkdyZWVuaG91c2VUZW1wbGF0ZUgAEjQK",
            "B3ZlcnNpb24YLiABKAsyIS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuVmVy",
            "c2lvbkgAGr8GCgVRdWVzdBIKCgJpZBgBIAEoCRI3CgR0eXBlGAIgASgOMiku",
            "V1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlF1ZXN0LlF1ZXN0VHlwZRI4CgV0",
            "YXNrcxgDIAMoCzIpLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5RdWVzdC5R",
            "dWVzdFRhc2sSPgoHcmV3YXJkcxgEIAEoCzItLldVUHJvdG9zLkRhdGEuTG9v",
            "dC5Mb290UmV3YXJkLkxvb3RDb2xsZWN0aW9uEg8KB3ZlcnNpb24YBSABKAUS",
            "FgoOY2hhaW5fcG9zaXRpb24YBiABKAUSEwoLY2hhaW5fdG90YWwYByABKAUS",
            "NwoSc3RhcnRfcmVxdWlyZW1lbnRzGAggAygLMhsuV1VQcm90b3MuRGF0YS5S",
            "ZXF1aXJlbWVudHMa3wEKCVF1ZXN0VGFzaxJTCghyZXFfdGFzaxgBIAEoCzI/",
            "LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5RdWVzdC5RdWVzdFRhc2suUmVx",
            "dWlyZW1lbnRzUXVlc3RUYXNrSAASMQoJaG9va190YXNrGAIgASgLMhwuV1VQ",
            "cm90b3MuRGF0YS5Ib29rUXVlc3RUYXNrSAAaQgoVUmVxdWlyZW1lbnRzUXVl",
            "c3RUYXNrEikKBHJlcXMYASABKAsyGy5XVVByb3Rvcy5EYXRhLlJlcXVpcmVt",
            "ZW50c0IGCgRUeXBlIlsKFEVOQ09VTlRFUl9ESUZGSUNVTFRZEgkKBVVOU0VU",
            "EAASBwoDTE9XEAESCgoGTUVESVVNEAISCAoESElHSBADEgoKBlNFVkVSRRAE",
            "Eg0KCUVNRVJHRU5DWRAFIsABCglRdWVzdFR5cGUSFgoSUVVFU1RfVFlQRV9V",
            "TktOT1dOEAASHAoYUVVFU1RfVFlQRV9OT05SRVBFQVRBQkxFEAESGQoVUVVF",
            "U1RfVFlQRV9SRVBFQVRBQkxFEAISFAoQUVVFU1RfVFlQRV9EQUlMWRADEhQK",
            "EFFVRVNUX1RZUEVfRVZFTlQQBBIaChZRVUVTVF9UWVBFX0FDSElFVkVNRU5U",
            "EAUSGgoWUVVFU1RfVFlQRV9FVkVOVF9DSEFJThAGGvwOCglWYXVsdEl0ZW0S",
            "CgoCaWQYASABKAkSTgoNY3VycmVuY3lfaXRlbRgCIAEoCzI1LldVUHJvdG9z",
            "LkRhdGEuR21UZW1wbGF0ZS5WYXVsdEl0ZW0uQ3VycmVuY3lWYXVsdEl0ZW1I",
            "ABJMCgxzdGFtaW5hX2l0ZW0YAyABKAsyNC5XVVByb3Rvcy5EYXRhLkdtVGVt",
            "cGxhdGUuVmF1bHRJdGVtLlN0YW1pbmFWYXVsdEl0ZW1IABJSCg1kZXRlY3Rv",
            "cl9pdGVtGAQgASgLMjkuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlZhdWx0",
            "SXRlbS5EYXJrRGV0ZWN0b3JWYXVsdEl0ZW1IABJQCg5jb250YWluZXJfaXRl",
            "bRgFIAEoCzI2LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5WYXVsdEl0ZW0u",
            "Q29udGFpbmVyVmF1bHRJdGVtSAASUAoOcnVuZXN0b25lX2l0ZW0YBiABKAsy",
            "Ni5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuVmF1bHRJdGVtLlJ1bmVzdG9u",
            "ZVZhdWx0SXRlbUgAEkoKC3BvdGlvbl9pdGVtGAcgASgLMjMuV1VQcm90b3Mu",
            "RGF0YS5HbVRlbXBsYXRlLlZhdWx0SXRlbS5Qb3Rpb25WYXVsdEl0ZW1IABJa",
            "ChFwb3Rpb25faW5ncmVkaWVudBgIIAEoCzI9LldVUHJvdG9zLkRhdGEuR21U",
            "ZW1wbGF0ZS5WYXVsdEl0ZW0uUG90aW9uSW5ncmVkaWVudFZhdWx0SXRlbUgA",
            "EkoKC2VuZXJneV9pdGVtGAogASgLMjMuV1VQcm90b3MuRGF0YS5HbVRlbXBs",
            "YXRlLlZhdWx0SXRlbS5FbmVyZ3lWYXVsdEl0ZW1IABJSChJjYXVsZHJvbl90",
            "aW1lX2l0ZW0YCyABKAsyNC5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuVmF1",
            "bHRJdGVtLkNhdWxkcm9uVGltZUl0ZW1IABJICg1wb3RfdGltZV9pdGVtGAwg",
            "ASgLMi8uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlZhdWx0SXRlbS5Qb3RU",
            "aW1lSXRlbUgAEgsKA2NhcBgJIAEoAxIWCg5yZWxhdGl2ZV92YWx1ZRhkIAEo",
            "BRIdChV2YXVsdF9jYXRlZ29yeV9nbXRfaWQYZSABKAkaWAoSUnVuZXN0b25l",
            "VmF1bHRJdGVtEg8KB3F1YWxpdHkYASABKAUSDwoHaXNfYm9zcxgCIAEoCBIg",
            "Chhjb2xsZWN0aW9uX2ZhbWlseV9nbXRfaWQYAyABKAkaLQoQQ2F1bGRyb25U",
            "aW1lSXRlbRIZChFhdmFpbGFiaWxpdHlfdGltZRgBIAEoAxpYChlQb3Rpb25J",
            "bmdyZWRpZW50VmF1bHRJdGVtEjsKBGNvc3QYASABKAsyLS5XVVByb3Rvcy5E",
            "YXRhLkxvb3QuTG9vdFJld2FyZC5Mb290Q29sbGVjdGlvbhqyAgoPUG90aW9u",
            "VmF1bHRJdGVtEmkKE2NvbnN1bWFibGVfc2NlbmFyaW8YAyADKA4yTC5XVVBy",
            "b3Rvcy5EYXRhLkdtVGVtcGxhdGUuVmF1bHRJdGVtLlBvdGlvblZhdWx0SXRl",
            "bS5Qb3Rpb25Db25zdW1hYmxlU2NlbmFyaW8SGwoTYXBwbGllZF9idWZmX2dt",
            "dF9pZBgEIAMoCSKWAQoYUG90aW9uQ29uc3VtYWJsZVNjZW5hcmlvEh8KG1VO",
            "S05PV05fQ09OU1VNQUJMRV9TQ0VOQVJJTxAAEg0KCU9WRVJXT1JMRBABEg0K",
            "CUVOQ09VTlRFUhACEhMKD1NXSVNIX0VOQ09VTlRFUhADEhQKEENPTUJBVF9F",
            "TkNPVU5URVIQBBIQCgxXQ19FTkNPVU5URVIQBRprChJDb250YWluZXJWYXVs",
            "dEl0ZW0SPwoIY29udGVudHMYASABKAsyLS5XVVByb3Rvcy5EYXRhLkxvb3Qu",
            "TG9vdFJld2FyZC5Mb290Q29sbGVjdGlvbhIUCgxhdXRvX2NvbnN1bWUYAiAB",
            "KAgaEwoRQ3VycmVuY3lWYXVsdEl0ZW0aKQoVRGFya0RldGVjdG9yVmF1bHRJ",
            "dGVtEhAKCGR1cmF0aW9uGAEgASgDGjcKD0VuZXJneVZhdWx0SXRlbRIOCgZp",
            "bXBhY3QYASABKAISFAoMc3BlbGxfZWZmZWN0GAIgASgFGjgKEFN0YW1pbmFW",
            "YXVsdEl0ZW0SDgoGaW1wYWN0GAEgASgCEhQKDHNwZWxsX2VmZmVjdBgCIAEo",
            "BRooCgtQb3RUaW1lSXRlbRIZChFhdmFpbGFiaWxpdHlfdGltZRgBIAEoAyKD",
            "AQoPUG90aW9uU3RhdGVFbnVtEgoKBnVzYWJsZRAAEhAKDG1hcF91bnVzYWJs",
            "ZRABEhEKDXBvdGlvbl9hY3RpdmUQAhITCg9zdHJvbmdlcl9hY3RpdmUQAxIS",
            "Cg5ocGFscmVhZHlfZnVsbBAEEhYKEmZvY3VzX2FscmVhZHlfZnVsbBAFQg8K",
            "DVZhdWx0SXRlbVR5cGUakRoKCkdhbWVDb25maWcSCgoCaWQYASABKAkSFAoM",
            "cGlja3VwX3JhbmdlGAIgASgCEhcKD21hcF91cGRhdGVfcmF0ZRgDIAEoBRId",
            "ChVtYXBfZXZlbnRfdXBkYXRlX3JhdGUYBCABKAUSHgoWbWFwX3B1enpsZV91",
            "cGRhdGVfcmF0ZRgFIAEoBRIjCht0cnlfYWdhaW5fYm9udXNfcGVyX2ZhaWx1",
            "cmUYBiABKAISFQoNYXJfbW9kZV9yYW5nZRgHIAEoAhIeChZhcl9tb2RlX21h",
            "eF9lbmNvdW50ZXJzGAggASgFEiAKGGV2ZW50X2Nvb2xfZG93bl9kdXJhdGlv",
            "bhgJIAEoBRIYChBjb21iYXRfc3R1bl90aW1lGAogASgFEh0KFXByb2Zlc3Np",
            "b25zX21pbl9sZXZlbBgLIAEoBRIaChJhY2N1cmFjeV9taW5fYm9udXMYDCAB",
            "KAISGgoSYWNjdXJhY3lfbWF4X2JvbnVzGA0gASgCEiMKG2VuY291bnRlcl9t",
            "aW5fYmFzZV93aW5fcmF0ZRgOIAEoAhIjChtlbmNvdW50ZXJfbWF4X2Jhc2Vf",
            "d2luX3JhdGUYDyABKAISGAoQcGxheWVyX2xldmVsX2NhcBgQIAEoBRIaChJs",
            "ZXZlbF9ib251c193ZWlnaHQYESABKAISHQoVZ2FtZXBsYXlfYm9udXNfd2Vp",
            "Z2h0GBIgASgCEhoKEmdhbWVwbGF5X2JvbnVzX21pbhgTIAEoAhIaChJnYW1l",
            "cGxheV9ib251c19tYXgYFCABKAISKAogcHJvZmVzc2lvbnNfcnBzX25vbl9t",
            "YXRjaF9pbXBhY3QYFSABKAISJAoccHJvZmVzc2lvbnNfcnBzX21hdGNoX2lt",
            "cGFjdBgWIAEoAhIpCiFwdWJfbWVudV9yZWZyZXNoX2ludGVydmFsX3NlY29u",
            "ZHMYFyABKAMSUwoTZmxvb19uZXR3b3JrX2NvbmZpZxgYIAEoCzI2LldVUHJv",
            "dG9zLkRhdGEuR21UZW1wbGF0ZS5HYW1lQ29uZmlnLkZsb29OZXR3b3JrQ29u",
            "ZmlnElwKGHRlbXBfZmxvb19uZXR3b3JrX2NvbmZpZxgZIAEoCzI6LldVUHJv",
            "dG9zLkRhdGEuR21UZW1wbGF0ZS5HYW1lQ29uZmlnLlRlbXBGbG9vTmV0d29y",
            "a0NvbmZpZxIhChltYXBfdW5zYWZlX21vdmVfc3BlZWRfbXBzGBogASgCEioK",
            "InBvcnRrZXlfbnVtX3dyYWNrc3B1cnRzX3RvX2NvbGxlY3QYGyABKAUSJgoe",
            "cG9ydGtleV9udW1fd3JhY2tzcHVydHNfaW5fZW52GBwgASgFElQKEXBsYXll",
            "cl9zdGF0c19iYXNlGB4gAygLMjkuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRl",
            "LkdhbWVDb25maWcuUGxheWVyU3RhdHNCYXNlRW50cnkSdwojcGxheWVyX3By",
            "b2Zlc3Npb25fYWZmaW5pdHlfc3RyZW5ndGgYHyADKAsySi5XVVByb3Rvcy5E",
            "YXRhLkdtVGVtcGxhdGUuR2FtZUNvbmZpZy5QbGF5ZXJQcm9mZXNzaW9uQWZm",
            "aW5pdHlTdHJlbmd0aEVudHJ5EnUKImVuZW15X2FmZmluaXR5X3Byb2Zlc3Np",
            "b25fc3RyZW5ndGgYICADKAsySS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUu",
            "R2FtZUNvbmZpZy5FbmVteUFmZmluaXR5UHJvZmVzc2lvblN0cmVuZ3RoRW50",
            "cnkSIQoZY2F1bGRyb25zX251bV9xdWV1ZV9zbG90cxghIAEoBRIhChlzd2lz",
            "aF9nYW1lX2FjY3VyYWN5X3RpZXJzGCIgAygCEjAKKGNhdWxkcm9uc19pbnN0",
            "YW50X2ZpbmlzaF9jb3N0X3Blcl9zZWNvbmQYIyABKAISLAokY2F1bGRyb25z",
            "X2luc3RhbnRfZmluaXNoX2N1cnJlbmN5X2lkGCQgASgJEksKDHJ1bmVfcmF0",
            "aW5ncxglIAMoCzI1LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5HYW1lQ29u",
            "ZmlnLlJ1bmVSYXRpbmdzRW50cnkSHQoVdHV0b3JpYWxfZW5jb3VudGVyX2lk",
            "GCYgASgJEioKInR1dG9yaWFsX2VuY291bnRlcl9mZWF0dXJlX2ZsYWdfaWQY",
            "JyABKAkSRgoMYm9udXNfY29uZmlnGCggASgLMjAuV1VQcm90b3MuRGF0YS5H",
            "bVRlbXBsYXRlLkdhbWVDb25maWcuQm9udXNDb25maWcSHAoUbWF4X3dhbGti",
            "b3hfY2FwYWNpdHkYKSABKAUSJgoeY2hhbGxlbmdlX2NvbGxlY3Rpb25fZmFt",
            "aWx5X2lkGCogASgJEhsKE2RhaWx5X3F1ZXN0X2dtdF9pZHMYKyADKAkSHwoX",
            "Y2FwX3BsYXllcl9sZXZlbF9nbXRfaWQYLCABKAkSHwoXZ3JlZW5ob3VzZV9j",
            "b29sX2Rvd25fbXMYLSABKAMSXAoVcGxheWVyX2xldmVsX292ZXJyaWRlGC4g",
            "AygLMj0uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkdhbWVDb25maWcuUGxh",
            "eWVyTGV2ZWxPdmVycmlkZUVudHJ5EhgKEGlubl9jb29sX2Rvd25fbXMYLyAB",
            "KAMSJwofaW5uX21lbnVfc3RhbGVuZXNzX3RocmVzaG9sZF9tcxgwIAEoAxIk",
            "ChxkYWlseV9yZXdhcmRfc2NoZWR1bGVfZ210X2lkGDEgASgJEi4KJndjX2Vu",
            "Y291bnRlcl9maXJzdF9pbnRlcmFjdF90aW1lb3V0X21zGDIgASgDEigKIHdj",
            "X2VuY291bnRlcl9pbnRlcmFjdF90aW1lb3V0X21zGDMgASgDGjYKFFBsYXll",
            "clN0YXRzQmFzZUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoC",
            "OAEaRwolUGxheWVyUHJvZmVzc2lvbkFmZmluaXR5U3RyZW5ndGhFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGkYKJEVuZW15QWZmaW5p",
            "dHlQcm9mZXNzaW9uU3RyZW5ndGhFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAk6AjgBGjIKEFJ1bmVSYXRpbmdzRW50cnkSCwoDa2V5GAEgASgF",
            "Eg0KBXZhbHVlGAIgASgNOgI4ARo6ChhQbGF5ZXJMZXZlbE92ZXJyaWRlRW50",
            "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARqgAgoRRmxvb05l",
            "dHdvcmtDb25maWcSewofZWxlY3RvcmFsX3ZvdGVzX3Blcl9mbG9vX3BvaW50",
            "cxgBIAMoCzJSLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5HYW1lQ29uZmln",
            "LkZsb29OZXR3b3JrQ29uZmlnLkVsZWN0b3JhbFZvdGVzUGVyRmxvb1BvaW50",
            "cxIeChZwb2ludHNfcGVyX2RlY2F5X2N5Y2xlGAIgASgFEh0KFWRlY2F5X2N5",
            "Y2xlX2xlbmd0aF9tcxgDIAEoAxpPChtFbGVjdG9yYWxWb3Rlc1BlckZsb29Q",
            "b2ludHMSFwoPbWluX2Zsb29fcG9pbnRzGAEgASgDEhcKD2VsZWN0b3JhbF92",
            "b3RlcxgCIAEoAxpjCgtCb251c0NvbmZpZxIWCg50aWVyX3RocmVzaG9sZBgB",
            "IAEoAhI8CgVib251cxgCIAEoCzItLldVUHJvdG9zLkRhdGEuTG9vdC5Mb290",
            "UmV3YXJkLkxvb3RDb2xsZWN0aW9uGokCChVUZW1wRmxvb05ldHdvcmtDb25m",
            "aWcSHwoXcG9pbnRzX3Blcl9idXR0b25fcHJlc3MYASABKAUSIAoYYnV0dG9u",
            "X3ByZXNzX2Nvb2xkb3duX21zGAIgASgDEnEKFHN0YW1pbmFfcmVxdWlyZW1l",
            "bnRzGAMgAygLMlMuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkdhbWVDb25m",
            "aWcuVGVtcEZsb29OZXR3b3JrQ29uZmlnLlN0YW1pbmFSZXF1aXJlbWVudHNF",
            "bnRyeRo6ChhTdGFtaW5hUmVxdWlyZW1lbnRzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgDOgI4ASK+AQoVQ2hhbGxlbmdlU291bmRDb250ZXh0",
            "EhIKDlRISVJUWV9TRUNPTkRTEAASFgoSUExBWUVSX1dJTlNfQkFUVExFEAES",
            "FwoTUExBWUVSX0xPU0VTX0JBVFRMRRACEhMKD1NUQVJUX0NIQUxMRU5HRRAD",
            "EhkKFVBMQVlFUl9XSU5TX0NIQUxMRU5HRRAEEhoKFlBMQVlFUl9MT1NFU19D",
            "SEFMTEVOR0UQBRIUChBFTElURV9NT0JfU1BBV05TEAYargQKEkdyZWVuaG91",
            "c2VUZW1wbGF0ZRIKCgJpZBgBIAEoCRJpChdzb2NpYWxfZ3Jvd2luZ19zZXR0",
            "aW5ncxgCIAEoCzJILldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5HcmVlbmhv",
            "dXNlVGVtcGxhdGUuU2hhcmVkU29jaWFsR3Jvd2luZ1NldHRpbmdzGqADChtT",
            "aGFyZWRTb2NpYWxHcm93aW5nU2V0dGluZ3MSHQoVbnVtYmVyX29mX25vcm1h",
            "bF9wb3RzGAEgASgFEh0KFW51bWJlcl9vZl9yZW50YWxfcG90cxgCIAEoBRIq",
            "CiJub3JtYWxfcG90X2dyb3dpbmdfdGltZV9tdWx0aXBsaWVyGAMgASgBEioK",
            "InJlbnRhbF9wb3RfZ3Jvd2luZ190aW1lX211bHRpcGxpZXIYBCABKAESdwoQ",
            "aGVyYml2aWN1c19tZXRlchgFIAMoCzJdLldVUHJvdG9zLkRhdGEuR21UZW1w",
            "bGF0ZS5HcmVlbmhvdXNlVGVtcGxhdGUuU2hhcmVkU29jaWFsR3Jvd2luZ1Nl",
            "dHRpbmdzLkhlcmJpdmljdXNNZXRlckVudHJ5Eh4KFm1heGltdW1fZW5lcmd5",
            "X2FsbG93ZWQYBiABKAUaUgoUSGVyYml2aWN1c01ldGVyRW50cnkSEwoLc3Bl",
            "bGxfY291bnQYASABKAUSJQodYWRkaXRpb25hbF9udW1iZXJfb2Zfc3Bhd25p",
            "bmcYAiABKAUamwEKBkhhcHRpYxIXCg9pb3N3YWl0X3RpbWluZ3MYASADKAUS",
            "CgoCaWQYAiABKAkSFwoPaW9zaGFwdGljX3R5cGVzGAMgAygFEhwKFGFuZHJv",
            "aWRfd2FpdF90aW1pbmdzGAQgAygFEhoKEmFuZHJvaWRfYW1wbGl0dWRlcxgF",
            "IAMoBRIZChFhbmRyb2lkX2R1cmF0aW9ucxgGIAMoBRqHAgoFU3BlbGwSCgoC",
            "aWQYASABKAkSQQoJdGltZWxpbmVzGAIgAygLMi4uV1VQcm90b3MuRGF0YS5H",
            "bVRlbXBsYXRlLlNwZWxsLlRpbWVsaW5lc0VudHJ5EkgKDWNyaXRpY2FsX2hp",
            "dHMYAyADKAsyMS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuU3BlbGwuQ3Jp",
            "dGljYWxIaXRzRW50cnkaMAoOVGltZWxpbmVzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ARozChFDcml0aWNhbEhpdHNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjcKEEZvcnRyZXNzVGVtcGxh",
            "dGUSCgoCaWQYASABKAkSFwoPY2hhbWJlcl9nbXRfaWRzGAIgAygJGo4DCgpN",
            "YXN0ZXJOb3RlEgoKAmlkGAEgASgJEjMKCGdlc3R1cmVzGAIgAygOMiEuV1VQ",
            "cm90b3MuRW51bXMuTWFzdGVyTm90ZUdlc3R1cmUSRQoGZWZmZWN0GAMgASgL",
            "MjUuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLk1hc3Rlck5vdGUuTWFzdGVy",
            "Tm90ZUVmZmVjdBr3AQoQTWFzdGVyTm90ZUVmZmVjdBIKCgJpZBgBIAEoCRJf",
            "CgtlZmZlY3RfdHlwZRgCIAEoDjJKLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0",
            "ZS5NYXN0ZXJOb3RlLk1hc3Rlck5vdGVFZmZlY3QuTWFzdGVyTm90ZUVmZmVj",
            "dFR5cGUSDQoFcG93ZXIYAyABKAMiZwoUTWFzdGVyTm90ZUVmZmVjdFR5cGUS",
            "CQoFVU5TRVQQABIVChFCUkVXX1NQRUVEX1NUQVRJQxABEhYKEkJSRVdfU1BF",
            "RURfUEVSQ0VOVBACEhUKEUJSRVdfWUlFTERfU1RBVElDEAMaHQoPT3V0cG9z",
            "dFRlbXBsYXRlEgoKAmlkGAEgASgJGjMKB1BvcnRrZXkSCgoCaWQYASABKAkS",
            "HAoUcG9ydGtleV9lbmNvdW50ZXJfaWQYAiABKAka9AEKB1JwZ3N0YXQSCgoC",
            "aWQYASABKAkSQQoLc3RhdF9ib3VuZHMYAiABKAsyLC5XVVByb3Rvcy5EYXRh",
            "LkdtVGVtcGxhdGUuUnBnc3RhdC5SYW5nZUludDY0GiYKClJhbmdlSW50NjQS",
            "CwoDbWluGAEgASgDEgsKA21heBgCIAEoAxonCgtSYW5nZVVpbnQzMhILCgNt",
            "aW4YASABKA0SCwoDbWF4GAIgASgNIkkKD0ljb25EaXNwbGF5VHlwZRIICgRC",
            "T1RIEAASDwoLUExBWUVSX1ZJRVcQARIOCgpFTkVNWV9WSUVXEAISCwoHTkVJ",
            "VEhFUhADGhsKDVJwZ3N0YXRzQmxvY2sSCgoCaWQYASABKAkaVwoRU2VsZmll",
            "QXZhdGFyQXNzZXQSCgoCaWQYASABKAkSNgoRdW5sb2NrX2NvbmRpdGlvbnMY",
            "AiABKAsyGy5XVVByb3Rvcy5EYXRhLlJlcXVpcmVtZW50cxosCgtUZWFtQ29u",
            "dHJvbBIKCgJpZBgBIAEoCRIRCgl0ZWFtX25hbWUYAiABKAka0wEKDVZhdWx0",
            "Q2F0ZWdvcnkSCgoCaWQYASABKAkSUwoNY2FwYWNpdHlfdHlwZRgCIAEoDjI8",
            "LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5WYXVsdENhdGVnb3J5LkNhdGVn",
            "b3J5Q2FwYWNpdHlUeXBlImEKFENhdGVnb3J5Q2FwYWNpdHlUeXBlEiAKHENB",
            "R0VUT1JZX0NBUEFDSVRZX1RZUEVfVU5TRVQQABIZChVERUZBVUxUX0NBUEFD",
            "SVRZX1RZUEUQARIMCghJTkZJTklURRACGpACCgZSZWNpcGUSCgoCaWQYASAB",
            "KAkSPQoGcmVjaXBlGAIgASgLMi0uV1VQcm90b3MuRGF0YS5Mb290Lkxvb3RS",
            "ZXdhcmQuTG9vdENvbGxlY3Rpb24SPgoHcmV3YXJkcxgDIAEoCzItLldVUHJv",
            "dG9zLkRhdGEuTG9vdC5Mb290UmV3YXJkLkxvb3RDb2xsZWN0aW9uEhUKDXRp",
            "bWVfdG9fY3JhZnQYBCABKAMSGgoSbWFzdGVyX25vdGVfZ210X2lkGAUgAygJ",
            "EhAKCGRpc2FibGVkGAYgASgIEjYKEXVubG9ja19jb25kaXRpb25zGAcgAygL",
            "MhsuV1VQcm90b3MuRGF0YS5SZXF1aXJlbWVudHMaQAoHVmVyc2lvbhIKCgJp",
            "ZBgBIAEoCRIUCgxkYXRhX3ZlcnNpb24YAiABKAkSEwoLZGF0YV9icmFuY2gY",
            "AyABKAkaGwoNQm9udXNDYXRlZ29yeRIKCgJpZBgBIAEoCRq3AQoIQ2F1bGRy",
            "b24SCgoCaWQYASABKAkSPQoEdHlwZRgCIAEoDjIvLldVUHJvdG9zLkRhdGEu",
            "R21UZW1wbGF0ZS5DYXVsZHJvbi5DYXVsZHJvblR5cGUSEAoIZGlzY291bnQY",
            "AyABKAIiTgoMQ2F1bGRyb25UeXBlEhQKEENBVUxEUk9OX1VOS05PV04QABIT",
            "Cg9DQVVMRFJPTl9OT1JNQUwQARITCg9DQVVMRFJPTl9SRU5UQUwQAhqJBAoP",
            "Q2hhbWJlclRlbXBsYXRlEgoKAmlkGAEgASgJEjgKE3VubG9ja19yZXF1aXJl",
            "bWVudHMYAiABKAsyGy5XVVByb3Rvcy5EYXRhLlJlcXVpcmVtZW50cxI8Chd2",
            "aXNpYmlsaXR5X3JlcXVpcmVtZW50cxgDIAEoCzIbLldVUHJvdG9zLkRhdGEu",
            "UmVxdWlyZW1lbnRzEhsKE21pbl9ydW5lc3RvbmVfbGV2ZWwYBCABKA0SGwoT",
            "bWF4X3J1bmVzdG9uZV9sZXZlbBgFIAEoDRISCgpwbGF5ZXJfY2FwGAYgASgN",
            "EhMKC2R1cmF0aW9uX21zGAcgASgDEhgKEGtub2Nrb3V0X3RpbWVfbXMYCiAB",
            "KAMSZwoYcGxheWVyX2NvdW50X211bHRpcGxpZXJzGAsgAygLMkUuV1VQcm90",
            "b3MuRGF0YS5HbVRlbXBsYXRlLkNoYW1iZXJUZW1wbGF0ZS5QbGF5ZXJDb3Vu",
            "dE11bHRpcGxpZXJzRW50cnkSGwoTYmFzZV9jaGFtYmVyX3JhdGluZxgMIAEo",
            "DRpvChtQbGF5ZXJDb3VudE11bHRpcGxpZXJzRW50cnkSCwoDa2V5GAEgASgF",
            "Ej8KBXZhbHVlGAIgASgLMjAuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlBs",
            "YXllckNvdW50TXVsdGlwbGllcnM6AjgBGmkKCERlZXBMaW5rEgoKAmlkGAEg",
            "ASgJEhAKCGNhdGVnb3J5GAIgASgJEjEKDHJlcXVpcmVtZW50cxgDIAEoCzIb",
            "LldVUHJvdG9zLkRhdGEuUmVxdWlyZW1lbnRzEgwKBGl0ZW0YBCABKAkaIQoT",
            "Q2hhbGxlbmdlU3Bhd25Mb2dpYxIKCgJpZBgBIAEoCRqYAgoOQ29sbGVjdGlv",
            "bkl0ZW0SCgoCaWQYASABKAkSEQoJZmFtaWx5X2lkGAIgASgJEhMKC3NoYXJk",
            "X2NvdW50GAMgASgFEg4KBnJhcml0eRgEIAEoBRJHChBvbmVfdGltZV9yZXdh",
            "cmRzGAUgASgLMi0uV1VQcm90b3MuRGF0YS5Mb290Lkxvb3RSZXdhcmQuTG9v",
            "dENvbGxlY3Rpb24SDwoHcGFnZV9pZBgGIAEoCRI4ChN1bmxvY2tfcmVxdWly",
            "ZW1lbnRzGAcgASgLMhsuV1VQcm90b3MuRGF0YS5SZXF1aXJlbWVudHMSFAoM",
            "c2hhcmRfY291bnRzGAggAygFEhgKEHN0aWNrZXJfZGlzYWJsZWQYCiABKAga",
            "ggIKGUNvbGxlY3Rpb25GYW1pbHlSYW5rVGFibGUSCgoCaWQYASABKAkSWwoJ",
            "cmFua19kYXRhGAIgAygLMkguV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkNv",
            "bGxlY3Rpb25GYW1pbHlSYW5rVGFibGUuQ29sbGVjdGlvbkZhbWlseVJhbmsa",
            "fAoUQ29sbGVjdGlvbkZhbWlseVJhbmsSFAoMdG90YWxfeHBfcmVxGAEgASgD",
            "EhMKC2NoZXN0X2NvdW50GAIgASgFEhoKEnNtYWxsX2xvb3R0YWJsZV9pZBgD",
            "IAEoCRIdChVsZXZlbF91cF9sb290dGFibGVfaWQYBCABKAkawwEKDkNvbGxl",
            "Y3Rpb25QYWdlEgoKAmlkGAEgASgJEhEKCWZhbWlseV9pZBgCIAEoCRINCgVp",
            "dGVtcxgDIAMoCRJJChJjb21wbGV0aW9uX3Jld2FyZHMYBCADKAsyLS5XVVBy",
            "b3Rvcy5EYXRhLkxvb3QuTG9vdFJld2FyZC5Mb290Q29sbGVjdGlvbhI4ChN1",
            "bmxvY2tfcmVxdWlyZW1lbnRzGAUgASgLMhsuV1VQcm90b3MuRGF0YS5SZXF1",
            "aXJlbWVudHMayxIKCUVuY291bnRlchIKCgJpZBgBIAEoCRIlCh1jb2xsZWN0",
            "aW9uX2l0ZW1fcmV3YXJkX2dtdF9pZBgCIAEoCRJCCgZzdGFnZXMYAyADKAsy",
            "Mi5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuRW5jb3VudGVyLkVuY291bnRl",
            "clN0YWdlEiUKHWNvbGxlY3Rpb25faXRlbV9yZXdhcmRfc2hhcmRzGAQgASgF",
            "EiAKGGNvbGxlY3Rpb25fZmFtaWx5X2dtdF9pZBgFIAEoCRIeChZhZmZpbml0",
            "eV9wcm9mZXNzaW9uX2lkGAYgASgJGt0QCg5FbmNvdW50ZXJTdGFnZRJXCgVz",
            "d2lzaBgBIAEoCzJGLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5FbmNvdW50",
            "ZXIuRW5jb3VudGVyU3RhZ2UuRW5jb3VudGVyU3RhZ2VTd2lzaEgAElkKBmNv",
            "bWJhdBgCIAEoCzJHLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5FbmNvdW50",
            "ZXIuRW5jb3VudGVyU3RhZ2UuRW5jb3VudGVyU3RhZ2VDb21iYXRIABJbCgdw",
            "b3J0a2V5GAMgASgLMkguV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkVuY291",
            "bnRlci5FbmNvdW50ZXJTdGFnZS5FbmNvdW50ZXJTdGFnZVBvcnRrZXlIABJb",
            "CgdwaWN0dXJlGAQgASgLMkguV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkVu",
            "Y291bnRlci5FbmNvdW50ZXJTdGFnZS5FbmNvdW50ZXJTdGFnZVBpY3R1cmVI",
            "ABIUCgxzcGVsbF9nbXRfaWQYBSABKAkaLAoTRW5jb3VudGVyU3RhZ2VTd2lz",
            "aBIVCg1iYXNlX3dpbl9yYXRlGAEgASgCGt4MChRFbmNvdW50ZXJTdGFnZUNv",
            "bWJhdBJuChFzdGF0ZV9ncmFwaF9ub2RlcxgBIAMoCzJTLldVUHJvdG9zLkRh",
            "dGEuR21UZW1wbGF0ZS5FbmNvdW50ZXIuRW5jb3VudGVyU3RhZ2UuRW5jb3Vu",
            "dGVyU3RhZ2VDb21iYXQuQ29tYmF0U3RhdGUSbQoLZW5lbXlfc3RhdHMYAiAB",
            "KAsyWC5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuRW5jb3VudGVyLkVuY291",
            "bnRlclN0YWdlLkVuY291bnRlclN0YWdlQ29tYmF0LkNvbWJhdEVuZW15U3Rh",
            "dHMSEwoLZW5lbXlfcmFua3MYAyADKAkafQoLQ29tYmF0U3RhdGUSbgoOcG9z",
            "c2libGVfbW92ZXMYASADKAsyVi5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUu",
            "RW5jb3VudGVyLkVuY291bnRlclN0YWdlLkVuY291bnRlclN0YWdlQ29tYmF0",
            "LkNvbWJhdE1vdmVUeXBlGv8DCg5Db21iYXRNb3ZlVHlwZRKCAQoNcGxheWVy",
            "X2F0dGFjaxgBIAEoCzJpLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5FbmNv",
            "dW50ZXIuRW5jb3VudGVyU3RhZ2UuRW5jb3VudGVyU3RhZ2VDb21iYXQuQ29t",
            "YmF0TW92ZVR5cGUuQ29tYmF0UGxheWVyQXR0YWNrSAASggEKDXBsYXllcl9k",
            "ZWZlbmQYAiABKAsyaS5XVVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuRW5jb3Vu",
            "dGVyLkVuY291bnRlclN0YWdlLkVuY291bnRlclN0YWdlQ29tYmF0LkNvbWJh",
            "dE1vdmVUeXBlLkNvbWJhdFBsYXllckRlZmVuZEgAEo0BChNwbGF5ZXJfYXV0",
            "b19hZHZhbmNlGAMgASgLMm4uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkVu",
            "Y291bnRlci5FbmNvdW50ZXJTdGFnZS5FbmNvdW50ZXJTdGFnZUNvbWJhdC5D",
            "b21iYXRNb3ZlVHlwZS5Db21iYXRQbGF5ZXJBdXRvQWR2YW5jZUgAGhQKEkNv",
            "bWJhdFBsYXllckRlZmVuZBoZChdDb21iYXRQbGF5ZXJBdXRvQWR2YW5jZRoU",
            "ChJDb21iYXRQbGF5ZXJBdHRhY2tCDAoKQ29tYmF0TW92ZRrQBQoQQ29tYmF0",
            "RW5lbXlTdGF0cxJwCgRzdGF0GAIgAygLMmIuV1VQcm90b3MuRGF0YS5HbVRl",
            "bXBsYXRlLkVuY291bnRlci5FbmNvdW50ZXJTdGFnZS5FbmNvdW50ZXJTdGFn",
            "ZUNvbWJhdC5Db21iYXRFbmVteVN0YXRzLlN0YXRFbnRyeRJ9CgtzdGF0X2dy",
            "b3d0aBgDIAMoCzJoLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5FbmNvdW50",
            "ZXIuRW5jb3VudGVyU3RhZ2UuRW5jb3VudGVyU3RhZ2VDb21iYXQuQ29tYmF0",
            "RW5lbXlTdGF0cy5TdGF0R3Jvd3RoRW50cnkaKwoJU3RhdEVudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEamAEKD1N0YXRHcm93dGhFbnRy",
            "eRILCgNrZXkYASABKAkSdAoFdmFsdWUYAiABKAsyZS5XVVByb3Rvcy5EYXRh",
            "LkdtVGVtcGxhdGUuRW5jb3VudGVyLkVuY291bnRlclN0YWdlLkVuY291bnRl",
            "clN0YWdlQ29tYmF0LkNvbWJhdEVuZW15U3RhdHMuQ29tYmF0R3Jvd3RoOgI4",
            "ARqCAgoMQ29tYmF0R3Jvd3RoEoMBCglncm93X3R5cGUYASABKA4ycC5XVVBy",
            "b3Rvcy5EYXRhLkdtVGVtcGxhdGUuRW5jb3VudGVyLkVuY291bnRlclN0YWdl",
            "LkVuY291bnRlclN0YWdlQ29tYmF0LkNvbWJhdEVuZW15U3RhdHMuQ29tYmF0",
            "R3Jvd3RoLkdyb3d0aFR5cGUSGQoRZ3Jvd3RoX2FkanVzdG1lbnQYAiABKAIi",
            "UQoKR3Jvd3RoVHlwZRIVChFHUk9XVEhfVFlQRV9VTlNFVBAAEgoKBkxJTkVB",
            "UhABEg8KC0xPR0FSSVRITUlDEAISDwoLRVhQT05FTlRJQUwQAxoXChVFbmNv",
            "dW50ZXJTdGFnZVBvcnRrZXkaFwoVRW5jb3VudGVyU3RhZ2VQaWN0dXJlQgYK",
            "BFR5cGUaHwoRRW5jb3VudGVyT2JzdGFjbGUSCgoCaWQYASABKAkaGwoNRW5j",
            "b3VudGVyVHlwZRIKCgJpZBgBIAEoCRqrAwoaRGFpbHlSZXdhcmRNb250aGx5",
            "U2NoZWR1bGUSCgoCaWQYASABKAkSFgoObnVtYmVyX29mX2RheXMYAiABKA0S",
            "RQoOZGVmYXVsdF9yZXdhcmQYAyABKAsyLS5XVVByb3Rvcy5EYXRhLkxvb3Qu",
            "TG9vdFJld2FyZC5Mb290Q29sbGVjdGlvbhJdCg1kYWlseV9yZXdhcmRzGAQg",
            "AygLMkYuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkRhaWx5UmV3YXJkTW9u",
            "dGhseVNjaGVkdWxlLkRhaWx5UmV3YXJkc0VudHJ5GnUKEURhaWx5UmV3YXJk",
            "c0VudHJ5EgsKA2tleRgBIAEoBRJPCgV2YWx1ZRgCIAEoCzJALldVUHJvdG9z",
            "LkRhdGEuR21UZW1wbGF0ZS5EYWlseVJld2FyZE1vbnRobHlTY2hlZHVsZS5E",
            "YWlseVJld2FyZDoCOAEaTAoLRGFpbHlSZXdhcmQSPQoGcmV3YXJkGAEgASgL",
            "Mi0uV1VQcm90b3MuRGF0YS5Mb290Lkxvb3RSZXdhcmQuTG9vdENvbGxlY3Rp",
            "b24amAQKBEJ1ZmYSCgoCaWQYASABKAkSOAoIZHVyYXRpb24YAyABKAsyJi5X",
            "VVByb3Rvcy5EYXRhLkdtVGVtcGxhdGUuQnVmZkR1cmF0aW9uEk4KEWV4Y2x1",
            "c2l2aXR5X2dyb3VwGAQgASgLMjMuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRl",
            "LkJ1ZmYuQnVmZkV4Y2x1c2l2aXR5R3JvdXASOgoJYnVmZl90eXBlGAUgASgO",
            "MicuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkJ1ZmYuQnVmZlR5cGUSQAoJ",
            "bW9kaWZpZXJzGAYgAygLMi0uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkJ1",
            "ZmYuTW9kaWZpZXJzRW50cnkSTQoVY29uZGl0aW9uYWxfbW9kaWZpZXJzGAcg",
            "AygLMi4uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLkNvbmRpdGlvbmFsTW9k",
            "aWZpZXJzGjAKDk1vZGlmaWVyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoAzoCOAEaTwoUQnVmZkV4Y2x1c2l2aXR5R3JvdXASGQoRZXhjbHVz",
            "aXZpdHlfZ3JvdXAYASABKAkSHAoUZXhjbHVzaXZpdHlfcHJpb3JpdHkYAiAB",
            "KAUiKgoIQnVmZlR5cGUSCAoETk9ORRAAEggKBEJVRkYQARIKCgZERUJVRkYQ",
            "AhrWBQoMQnVmZkR1cmF0aW9uEkcKBHRpbWUYASABKAsyNy5XVVByb3Rvcy5E",
            "YXRhLkdtVGVtcGxhdGUuQnVmZkR1cmF0aW9uLlRpbWVCdWZmRHVyYXRpb25I",
            "ABJNCgdjaGFyZ2VzGAIgASgLMjouV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRl",
            "LkJ1ZmZEdXJhdGlvbi5DaGFyZ2VzQnVmZkR1cmF0aW9uSAASUwoKcHJvZmVz",
            "c2lvbhgDIAEoCzI9LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5CdWZmRHVy",
            "YXRpb24uUHJvZmVzc2lvbkJ1ZmZEdXJhdGlvbkgAElEKCXBlcm1hbmVudBgE",
            "IAEoCzI8LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5CdWZmRHVyYXRpb24u",
            "UGVybWFuZW50QnVmZkR1cmF0aW9uSAASTQoHaW5zdGFudBgFIAEoCzI6LldV",
            "UHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5CdWZmRHVyYXRpb24uSW5zdGFudEJ1",
            "ZmZEdXJhdGlvbkgAElEKCWNoYWxsZW5nZRgGIAEoCzI8LldVUHJvdG9zLkRh",
            "dGEuR21UZW1wbGF0ZS5CdWZmRHVyYXRpb24uQ2hhbGxlbmdlQnVmZkR1cmF0",
            "aW9uSAAaPwoTQ2hhcmdlc0J1ZmZEdXJhdGlvbhITCgtudW1fY2hhcmdlcxgB",
            "IAEoBRITCgtpc19vdmVycmlkZRgCIAEoCBoVChNJbnN0YW50QnVmZkR1cmF0",
            "aW9uGhcKFVBlcm1hbmVudEJ1ZmZEdXJhdGlvbho4ChBUaW1lQnVmZkR1cmF0",
            "aW9uEg8KB3RpbWVfbXMYASABKAMSEwoLaXNfb3ZlcnJpZGUYAiABKAgaFwoV",
            "Q2hhbGxlbmdlQnVmZkR1cmF0aW9uGhgKFlByb2Zlc3Npb25CdWZmRHVyYXRp",
            "b25CBgoEVHlwZRp8CgVFdmVudBIKCgJpZBgBIAEoCRI0Cg9hY3RpdmF0aW9u",
            "X3JlcXMYAiABKAsyGy5XVVByb3Rvcy5EYXRhLlJlcXVpcmVtZW50cxIxCgxy",
            "dW5uaW5nX3JlcXMYAyABKAsyGy5XVVByb3Rvcy5EYXRhLlJlcXVpcmVtZW50",
            "cxotChZQbGF5ZXJDb3VudE11bHRpcGxpZXJzEhMKC211bHRpcGxpZXJzGAEg",
            "AygCGi4KC1BsYXllckxldmVsEgoKAmlkGAEgASgJEhMKC3JlcXVpcmVkX3hw",
            "GAIgASgFGqQKCgpQcm9mZXNzaW9uEgoKAmlkGAEgASgJEjEKDHJlcXVpcmVt",
            "ZW50cxgDIAMoCzIbLldVUHJvdG9zLkRhdGEuUmVxdWlyZW1lbnRzEhIKCnNo",
            "b3dfaW5fdWkYBCABKAgSWAoTcHJvZmVzaW9uX3JhbmtzX21hcBgFIAMoCzI7",
            "LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5Qcm9mZXNzaW9uLlByb2Zlc2lv",
            "blJhbmtzTWFwRW50cnkSTQoQcHJvZmVzc2lvbl90aWVycxgGIAMoCzIzLldV",
            "UHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5Qcm9mZXNzaW9uLlByb2Zlc3Npb25U",
            "aWVyGm0KFlByb2Zlc2lvblJhbmtzTWFwRW50cnkSCwoDa2V5GAEgASgJEkIK",
            "BXZhbHVlGAIgASgLMjMuV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRlLlByb2Zl",
            "c3Npb24uUHJvZmVzc2lvblJhbms6AjgBGksKDlByb2Zlc3Npb25UaWVyEh8K",
            "F3JhbmtfcG9pbnRzX3VwcGVyX2JvdW5kGAEgASgNEhgKEGlzX21ham9yX3Vw",
            "Z3JhZGUYAiABKAga3QYKDlByb2Zlc3Npb25SYW5rEh0KFXBvdGVudGlhbF9y",
            "YW5rX3BvaW50cxgBIAEoDRIxCgxyZXF1aXJlbWVudHMYAiADKAsyGy5XVVBy",
            "b3Rvcy5EYXRhLlJlcXVpcmVtZW50cxJpChRwcm9mZXNzaW9uX25vZGVzX21h",
            "cBgDIAMoCzJLLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5Qcm9mZXNzaW9u",
            "LlByb2Zlc3Npb25SYW5rLlByb2Zlc3Npb25Ob2Rlc01hcEVudHJ5EhIKCnNo",
            "b3dfaW5fdWkYBCABKAgSCgoCaWQYBSABKAkafQoXUHJvZmVzc2lvbk5vZGVz",
            "TWFwRW50cnkSCwoDa2V5GAEgASgJElEKBXZhbHVlGAIgASgLMkIuV1VQcm90",
            "b3MuRGF0YS5HbVRlbXBsYXRlLlByb2Zlc3Npb24uUHJvZmVzc2lvblJhbmsu",
            "UHJvZmVzc2lvbk5vZGU6AjgBGu4DCg5Qcm9mZXNzaW9uTm9kZRIKCgJpZBgB",
            "IAEoCRIqCgVlZGdlcxgCIAMoCzIbLldVUHJvdG9zLkRhdGEuUmVxdWlyZW1l",
            "bnRzEmYKBmxldmVscxgDIAMoCzJWLldVUHJvdG9zLkRhdGEuR21UZW1wbGF0",
            "ZS5Qcm9mZXNzaW9uLlByb2Zlc3Npb25SYW5rLlByb2Zlc3Npb25Ob2RlLlBy",
            "b2Zlc3Npb25Ob2RlTGV2ZWwSDwoHcm93X3BvcxgEIAEoDRIPCgdjb2xfcG9z",
            "GAUgASgNGpkCChNQcm9mZXNzaW9uTm9kZUxldmVsEhMKC2J1ZmZfZ210X2lk",
            "GAEgASgJEjEKDHByZXJlcXVpc2l0ZRgCIAEoCzIbLldVUHJvdG9zLkRhdGEu",
            "UmVxdWlyZW1lbnRzEjsKBGNvc3QYAyABKAsyLS5XVVByb3Rvcy5EYXRhLkxv",
            "b3QuTG9vdFJld2FyZC5Mb290Q29sbGVjdGlvbhIVCg1tYXBfYWJpbGl0aWVz",
            "GAQgAygJEhMKC3JhbmtfcG9pbnRzGAUgASgNIlEKB1B1cnBvc2USCAoEbm9u",
            "ZRAAEggKBGJ1ZmYQARIZChVsZWFybl9uZXdfbWFwX2FiaWxpdHkQAhIXChN1",
            "cGdyYWRlX21hcF9hYmlsaXR5EAMawwQKClN0b3J5Ym9hcmQSCgoCaWQYASAB",
            "KAkSLwoKc3RhcnRfcmVxcxgCIAEoCzIbLldVUHJvdG9zLkRhdGEuUmVxdWly",
            "ZW1lbnRzEhgKEHN0ZXBfZmxhZ19nbXRfaWQYAyABKAkSHAoUY29tcGxldGVf",
            "ZmxhZ19nbXRfaWQYBCABKAkSTQoQc3Rvcnlib2FyZF9zdGVwcxgFIAMoCzIz",
            "LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0ZS5TdG9yeWJvYXJkLlN0b3J5Ym9h",
            "cmRTdGVwEkwKCnJlc2V0X21vZGUYBiABKA4yOC5XVVByb3Rvcy5EYXRhLkdt",
            "VGVtcGxhdGUuU3Rvcnlib2FyZC5TdG9yeWJvYXJkUmVzZXRNb2RlEi8KCnJl",
            "c2V0X3JlcXMYByABKAsyGy5XVVByb3Rvcy5EYXRhLlJlcXVpcmVtZW50cxpQ",
            "Cg5TdG9yeWJvYXJkU3RlcBI+CgdyZXdhcmRzGAEgASgLMi0uV1VQcm90b3Mu",
            "RGF0YS5Mb290Lkxvb3RSZXdhcmQuTG9vdENvbGxlY3Rpb24inwEKE1N0b3J5",
            "Ym9hcmRSZXNldE1vZGUSHAoYU1RPUllCT0FSRF9SRVNFVF9VTktOT1dOEAAS",
            "IAocU1RPUllCT0FSRF9SRVNFVF9OT1RfQUxMT1dFRBABEiQKIFNUT1JZQk9B",
            "UkRfUkVTRVRfV0hFTl9JTkNPTVBMRVRFEAISIgoeU1RPUllCT0FSRF9SRVNF",
            "VF9XSEVOX0NPTVBMRVRFEAMayQEKFENvbmRpdGlvbmFsTW9kaWZpZXJzEi0K",
            "CmNvbmRpdGlvbnMYASABKAsyGS5XVVByb3Rvcy5EYXRhLkNvbmRpdGlvbnMS",
            "UAoJbW9kaWZpZXJzGAIgAygLMj0uV1VQcm90b3MuRGF0YS5HbVRlbXBsYXRl",
            "LkNvbmRpdGlvbmFsTW9kaWZpZXJzLk1vZGlmaWVyc0VudHJ5GjAKDk1vZGlm",
            "aWVyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEagQEK",
            "C0ZlYXR1cmVGbGFnEgwKAmlkGAEgASgJSAASFAoKZmVhdHVyZV9pZBgCIAEo",
            "CUgAEg4KBGJ2YWwYAyABKAhIABIOCgRsdmFsGAQgASgDSAASDgoEc3ZhbBgF",
            "IAEoCUgAEg4KBGZ2YWwYBiABKAJIAEIOCgxEZWZhdWx0VmFsdWUaOwoPV2Fs",
            "a2JveFRlbXBsYXRlEgoKAmlkGAEgASgJEhwKFHJlcXVpcmVkX2Rpc3RhbmNl",
            "X2ttGAIgASgCGpUBCg1NYXBJbmdyZWRpZW50EgoKAmlkGAEgASgJEjsKBGxv",
            "b3QYAiABKAsyLS5XVVByb3Rvcy5EYXRhLkxvb3QuTG9vdFJld2FyZC5Mb290",
            "Q29sbGVjdGlvbhI7CgRjb3N0GAMgASgLMi0uV1VQcm90b3MuRGF0YS5Mb290",
            "Lkxvb3RSZXdhcmQuTG9vdENvbGxlY3Rpb24algYKCk1hcEFiaWxpdHkSCgoC",
            "aWQYASABKAkSTgoLdGFyZ2V0X3R5cGUYAiABKA4yOS5XVVByb3Rvcy5EYXRh",
            "LkdtVGVtcGxhdGUuTWFwQWJpbGl0eS5NYXBBYmlsaXR5VGFyZ2V0VHlwZRIY",
            "ChBiYXNlX2J1ZmZfZ210X2lkGAMgASgJEg4KBnJhZGl1cxgEIAEoAhITCgtj",
            "b29sZG93bl9tcxgFIAEoDRISCgpmb2N1c19jb3N0GAYgASgFElAKEm1hcF9h",
            "YmlsaXR5X2xldmVscxgHIAMoCzI0LldVUHJvdG9zLkRhdGEuR21UZW1wbGF0",
            "ZS5NYXBBYmlsaXR5Lk1hcEFiaWxpdHlMZXZlbBqvAQoPTWFwQWJpbGl0eUxl",
            "dmVsEk4KC3RhcmdldF90eXBlGAEgASgOMjkuV1VQcm90b3MuRGF0YS5HbVRl",
            "bXBsYXRlLk1hcEFiaWxpdHkuTWFwQWJpbGl0eVRhcmdldFR5cGUSDgoGcmFk",
            "aXVzGAIgASgCEhMKC2Nvb2xkb3duX21zGAMgASgNEhIKCmZvY3VzX2Nvc3QY",
            "BCABKAUSEwoLYnVmZl9nbXRfaWQYBSABKAki1AIKFE1hcEFiaWxpdHlUYXJn",
            "ZXRUeXBlEg8KC1RBUkdFVF9OT05FEAASFQoRVEFSR0VUX0NIT09TRV9PTkUQ",
            "ARIYChRUQVJHRVRfQ0hPT1NFX0ZSSUVORBACEhcKE1RBUkdFVF9DSE9PU0Vf",
            "RU5FTVkQAxIPCgtUQVJHRVRfU0VMRhAEEhAKDFRBUkdFVF9SQU5HRRAFEhsK",
            "F1RBUkdFVF9FTkVNSUVTX0lOX1JBTkdFEAYSGQoVVEFSR0VUX0VOVElSRV9G",
            "UklFTkRTEAcSFQoRVEFSR0VUX1JBTkRPTV9PTkUQCBIYChRUQVJHRVRfUkFO",
            "RE9NX0ZSSUVORBAJEhcKE1RBUkdFVF9SQU5ET01fRU5FTVkQChIZChVUQVJH",
            "RVRfRU5USVJFX0VORU1JRVMQCxIhCh1UQVJHRVRfQ0hPT1NFX0ZSSUVORF9O",
            "T1RfU0VMRhAMGh4KEFN0b3JlU3ViY2F0ZWdvcnkSCgoCaWQYASABKAkaGQoL",
            "U3RvcmVDb25maWcSCgoCaWQYASABKAkaHAoOUHJvdGVnb1BhdHRlcm4SCgoC",
            "aWQYASABKAlCDQoLTWVzc2FnZVR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Enums.MasterNoteGestureReflection.Descriptor, global::WUProtos.Data.Collection.CollectionFamilyReflection.Descriptor, global::WUProtos.Data.StorePackReflection.Descriptor, global::WUProtos.Data.QualityLevelReflection.Descriptor, global::WUProtos.Data.ProfileConfigReflection.Descriptor, global::WUProtos.Data.Challenge.ChallengeBonusReflection.Descriptor, global::WUProtos.Data.HookQuestTaskReflection.Descriptor, global::WUProtos.Data.RequirementsReflection.Descriptor, global::WUProtos.Data.Loot.LootRewardReflection.Descriptor, global::WUProtos.Data.ConditionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate), global::WUProtos.Data.GmTemplate.Parser, new[]{ "CollectionFamily", "CollectionItem", "Encounter", "EncounterObstacle", "Spell", "VaultItem", "GameConfig", "PlayerLevel", "StorePack", "WalkboxTemplate", "FeatureFlag", "Portkey", "Buff", "FortressTemplate", "ChamberTemplate", "QualityLevel", "ProtegoPattern", "CollectionPage", "TeamControl", "StoreConfig", "StoreSubcategory", "Haptic", "EncounterType", "ChallengeSpawnLogic", "Profession", "BonusCategory", "VaultCategory", "ProfileConfig", "CollectionFamilyRankTable", "MapIngredient", "MapAbility", "Recipe", "ChallengeBonus", "Storyboard", "MasterNote", "Cauldron", "Rpgstat", "RpgstatsBlock", "SelfieAvatarAsset", "OutpostTemplate", "DailyRewardMonthlySchedule", "Quest", "DeepLink", "Event", "GreenhouseTemplate", "Version" }, new[]{ "MessageType" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Quest), global::WUProtos.Data.GmTemplate.Types.Quest.Parser, new[]{ "Id", "Type", "Tasks", "Rewards", "Version", "ChainPosition", "ChainTotal", "StartRequirements" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Quest.Types.ENCOUNTER_DIFFICULTY), typeof(global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask), global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Parser, new[]{ "ReqTask", "HookTask" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask), global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask.Parser, new[]{ "Reqs" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Parser, new[]{ "Id", "CurrencyItem", "StaminaItem", "DetectorItem", "ContainerItem", "RunestoneItem", "PotionItem", "PotionIngredient", "EnergyItem", "CauldronTimeItem", "PotTimeItem", "Cap", "RelativeValue", "VaultCategoryGmtId" }, new[]{ "VaultItemType" }, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionStateEnum) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem.Parser, new[]{ "Quality", "IsBoss", "CollectionFamilyGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem.Parser, new[]{ "AvailabilityTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem.Parser, new[]{ "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Parser, new[]{ "ConsumableScenario", "AppliedBuffGmtId" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Types.PotionConsumableScenario) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem.Parser, new[]{ "Contents", "AutoConsume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem.Parser, new[]{ "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem.Parser, new[]{ "Impact", "SpellEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem.Parser, new[]{ "Impact", "SpellEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem), global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem.Parser, new[]{ "AvailabilityTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GameConfig), global::WUProtos.Data.GmTemplate.Types.GameConfig.Parser, new[]{ "Id", "PickupRange", "MapUpdateRate", "MapEventUpdateRate", "MapPuzzleUpdateRate", "TryAgainBonusPerFailure", "ArModeRange", "ArModeMaxEncounters", "EventCoolDownDuration", "CombatStunTime", "ProfessionsMinLevel", "AccuracyMinBonus", "AccuracyMaxBonus", "EncounterMinBaseWinRate", "EncounterMaxBaseWinRate", "PlayerLevelCap", "LevelBonusWeight", "GameplayBonusWeight", "GameplayBonusMin", "GameplayBonusMax", "ProfessionsRpsNonMatchImpact", "ProfessionsRpsMatchImpact", "PubMenuRefreshIntervalSeconds", "FlooNetworkConfig", "TempFlooNetworkConfig", "MapUnsafeMoveSpeedMps", "PortkeyNumWrackspurtsToCollect", "PortkeyNumWrackspurtsInEnv", "PlayerStatsBase", "PlayerProfessionAffinityStrength", "EnemyAffinityProfessionStrength", "CauldronsNumQueueSlots", "SwishGameAccuracyTiers", "CauldronsInstantFinishCostPerSecond", "CauldronsInstantFinishCurrencyId", "RuneRatings", "TutorialEncounterId", "TutorialEncounterFeatureFlagId", "BonusConfig", "MaxWalkboxCapacity", "ChallengeCollectionFamilyId", "DailyQuestGmtIds", "CapPlayerLevelGmtId", "GreenhouseCoolDownMs", "PlayerLevelOverride", "InnCoolDownMs", "InnMenuStalenessThresholdMs", "DailyRewardScheduleGmtId", "WcEncounterFirstInteractTimeoutMs", "WcEncounterInteractTimeoutMs" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.ChallengeSoundContext) }, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig), global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Parser, new[]{ "ElectoralVotesPerFlooPoints", "PointsPerDecayCycle", "DecayCycleLengthMs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints), global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints.Parser, new[]{ "MinFlooPoints", "ElectoralVotes" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.BonusConfig), global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.BonusConfig.Parser, new[]{ "TierThreshold", "Bonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.TempFlooNetworkConfig), global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.TempFlooNetworkConfig.Parser, new[]{ "PointsPerButtonPress", "ButtonPressCooldownMs", "StaminaRequirements" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate), global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Parser, new[]{ "Id", "SocialGrowingSettings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings), global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Parser, new[]{ "NumberOfNormalPots", "NumberOfRentalPots", "NormalPotGrowingTimeMultiplier", "RentalPotGrowingTimeMultiplier", "HerbivicusMeter", "MaximumEnergyAllowed" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry), global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry.Parser, new[]{ "SpellCount", "AdditionalNumberOfSpawning" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Haptic), global::WUProtos.Data.GmTemplate.Types.Haptic.Parser, new[]{ "IoswaitTimings", "Id", "IoshapticTypes", "AndroidWaitTimings", "AndroidAmplitudes", "AndroidDurations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Spell), global::WUProtos.Data.GmTemplate.Types.Spell.Parser, new[]{ "Id", "Timelines", "CriticalHits" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.FortressTemplate), global::WUProtos.Data.GmTemplate.Types.FortressTemplate.Parser, new[]{ "Id", "ChamberGmtIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.MasterNote), global::WUProtos.Data.GmTemplate.Types.MasterNote.Parser, new[]{ "Id", "Gestures", "Effect" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect), global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect.Parser, new[]{ "Id", "EffectType", "Power" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect.Types.MasterNoteEffectType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.OutpostTemplate), global::WUProtos.Data.GmTemplate.Types.OutpostTemplate.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Portkey), global::WUProtos.Data.GmTemplate.Types.Portkey.Parser, new[]{ "Id", "PortkeyEncounterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Rpgstat), global::WUProtos.Data.GmTemplate.Types.Rpgstat.Parser, new[]{ "Id", "StatBounds" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.IconDisplayType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeInt64), global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeInt64.Parser, new[]{ "Min", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeUint32), global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeUint32.Parser, new[]{ "Min", "Max" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock), global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset), global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset.Parser, new[]{ "Id", "UnlockConditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.TeamControl), global::WUProtos.Data.GmTemplate.Types.TeamControl.Parser, new[]{ "Id", "TeamName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.VaultCategory), global::WUProtos.Data.GmTemplate.Types.VaultCategory.Parser, new[]{ "Id", "CapacityType" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.VaultCategory.Types.CategoryCapacityType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Recipe), global::WUProtos.Data.GmTemplate.Types.Recipe.Parser, new[]{ "Id", "Recipe_", "Rewards", "TimeToCraft", "MasterNoteGmtId", "Disabled", "UnlockConditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Version), global::WUProtos.Data.GmTemplate.Types.Version.Parser, new[]{ "Id", "DataVersion", "DataBranch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BonusCategory), global::WUProtos.Data.GmTemplate.Types.BonusCategory.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Cauldron), global::WUProtos.Data.GmTemplate.Types.Cauldron.Parser, new[]{ "Id", "Type", "Discount" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Cauldron.Types.CauldronType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.ChamberTemplate), global::WUProtos.Data.GmTemplate.Types.ChamberTemplate.Parser, new[]{ "Id", "UnlockRequirements", "VisibilityRequirements", "MinRunestoneLevel", "MaxRunestoneLevel", "PlayerCap", "DurationMs", "KnockoutTimeMs", "PlayerCountMultipliers", "BaseChamberRating" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.DeepLink), global::WUProtos.Data.GmTemplate.Types.DeepLink.Parser, new[]{ "Id", "Category", "Requirements", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic), global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.CollectionItem), global::WUProtos.Data.GmTemplate.Types.CollectionItem.Parser, new[]{ "Id", "FamilyId", "ShardCount", "Rarity", "OneTimeRewards", "PageId", "UnlockRequirements", "ShardCounts", "StickerDisabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable), global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Parser, new[]{ "Id", "RankData" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank), global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank.Parser, new[]{ "TotalXpReq", "ChestCount", "SmallLoottableId", "LevelUpLoottableId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.CollectionPage), global::WUProtos.Data.GmTemplate.Types.CollectionPage.Parser, new[]{ "Id", "FamilyId", "Items", "CompletionRewards", "UnlockRequirements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter), global::WUProtos.Data.GmTemplate.Types.Encounter.Parser, new[]{ "Id", "CollectionItemRewardGmtId", "Stages", "CollectionItemRewardShards", "CollectionFamilyGmtId", "AffinityProfessionId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Parser, new[]{ "Swish", "Combat", "Portkey", "Picture", "SpellGmtId" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish.Parser, new[]{ "BaseWinRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Parser, new[]{ "StateGraphNodes", "EnemyStats", "EnemyRanks" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState.Parser, new[]{ "PossibleMoves" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Parser, new[]{ "PlayerAttack", "PlayerDefend", "PlayerAutoAdvance" }, new[]{ "CombatMove" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Parser, new[]{ "Stat", "StatGrowth" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth.Parser, new[]{ "GrowType", "GrowthAdjustment" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth.Types.GrowthType) }, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture), global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture.Parser, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.EncounterObstacle), global::WUProtos.Data.GmTemplate.Types.EncounterObstacle.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.EncounterType), global::WUProtos.Data.GmTemplate.Types.EncounterType.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule), global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Parser, new[]{ "Id", "NumberOfDays", "DefaultReward", "DailyRewards" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward), global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward.Parser, new[]{ "Reward" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Buff), global::WUProtos.Data.GmTemplate.Types.Buff.Parser, new[]{ "Id", "Duration", "ExclusivityGroup", "BuffType", "Modifiers", "ConditionalModifiers" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffType) }, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffExclusivityGroup), global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffExclusivityGroup.Parser, new[]{ "ExclusivityGroup", "ExclusivityPriority" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Parser, new[]{ "Time", "Charges", "Profession", "Permanent", "Instant", "Challenge" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration.Parser, new[]{ "NumCharges", "IsOverride" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration.Parser, new[]{ "TimeMs", "IsOverride" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration), global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Event), global::WUProtos.Data.GmTemplate.Types.Event.Parser, new[]{ "Id", "ActivationReqs", "RunningReqs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers), global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers.Parser, new[]{ "Multipliers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.PlayerLevel), global::WUProtos.Data.GmTemplate.Types.PlayerLevel.Parser, new[]{ "Id", "RequiredXp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Profession), global::WUProtos.Data.GmTemplate.Types.Profession.Parser, new[]{ "Id", "Requirements", "ShowInUi", "ProfesionRanksMap", "ProfessionTiers" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier), global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier.Parser, new[]{ "RankPointsUpperBound", "IsMajorUpgrade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank), global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Parser, new[]{ "PotentialRankPoints", "Requirements", "ProfessionNodesMap", "ShowInUi", "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode), global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Parser, new[]{ "Id", "Edges", "Levels", "RowPos", "ColPos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel), global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel.Parser, new[]{ "BuffGmtId", "Prerequisite", "Cost", "MapAbilities", "RankPoints" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel.Types.Purpose) }, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Storyboard), global::WUProtos.Data.GmTemplate.Types.Storyboard.Parser, new[]{ "Id", "StartReqs", "StepFlagGmtId", "CompleteFlagGmtId", "StoryboardSteps", "ResetMode", "ResetReqs" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardResetMode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep), global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep.Parser, new[]{ "Rewards" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers), global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers.Parser, new[]{ "Conditions", "Modifiers" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.FeatureFlag), global::WUProtos.Data.GmTemplate.Types.FeatureFlag.Parser, new[]{ "Id", "FeatureId", "Bval", "Lval", "Sval", "Fval" }, new[]{ "DefaultValue" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate), global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate.Parser, new[]{ "Id", "RequiredDistanceKm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.MapIngredient), global::WUProtos.Data.GmTemplate.Types.MapIngredient.Parser, new[]{ "Id", "Loot", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.MapAbility), global::WUProtos.Data.GmTemplate.Types.MapAbility.Parser, new[]{ "Id", "TargetType", "BaseBuffGmtId", "Radius", "CooldownMs", "FocusCost", "MapAbilityLevels" }, null, new[]{ typeof(global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel), global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel.Parser, new[]{ "TargetType", "Radius", "CooldownMs", "FocusCost", "BuffGmtId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.StoreSubcategory), global::WUProtos.Data.GmTemplate.Types.StoreSubcategory.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.StoreConfig), global::WUProtos.Data.GmTemplate.Types.StoreConfig.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.ProtegoPattern), global::WUProtos.Data.GmTemplate.Types.ProtegoPattern.Parser, new[]{ "Id" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GmTemplate : pb::IMessage<GmTemplate> {
    private static readonly pb::MessageParser<GmTemplate> _parser = new pb::MessageParser<GmTemplate>(() => new GmTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.GmTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmTemplate(GmTemplate other) : this() {
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily.Clone();
          break;
        case MessageTypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem.Clone();
          break;
        case MessageTypeOneofCase.Encounter:
          Encounter = other.Encounter.Clone();
          break;
        case MessageTypeOneofCase.EncounterObstacle:
          EncounterObstacle = other.EncounterObstacle.Clone();
          break;
        case MessageTypeOneofCase.Spell:
          Spell = other.Spell.Clone();
          break;
        case MessageTypeOneofCase.VaultItem:
          VaultItem = other.VaultItem.Clone();
          break;
        case MessageTypeOneofCase.GameConfig:
          GameConfig = other.GameConfig.Clone();
          break;
        case MessageTypeOneofCase.PlayerLevel:
          PlayerLevel = other.PlayerLevel.Clone();
          break;
        case MessageTypeOneofCase.StorePack:
          StorePack = other.StorePack.Clone();
          break;
        case MessageTypeOneofCase.WalkboxTemplate:
          WalkboxTemplate = other.WalkboxTemplate.Clone();
          break;
        case MessageTypeOneofCase.FeatureFlag:
          FeatureFlag = other.FeatureFlag.Clone();
          break;
        case MessageTypeOneofCase.Portkey:
          Portkey = other.Portkey.Clone();
          break;
        case MessageTypeOneofCase.Buff:
          Buff = other.Buff.Clone();
          break;
        case MessageTypeOneofCase.FortressTemplate:
          FortressTemplate = other.FortressTemplate.Clone();
          break;
        case MessageTypeOneofCase.ChamberTemplate:
          ChamberTemplate = other.ChamberTemplate.Clone();
          break;
        case MessageTypeOneofCase.QualityLevel:
          QualityLevel = other.QualityLevel.Clone();
          break;
        case MessageTypeOneofCase.ProtegoPattern:
          ProtegoPattern = other.ProtegoPattern.Clone();
          break;
        case MessageTypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage.Clone();
          break;
        case MessageTypeOneofCase.TeamControl:
          TeamControl = other.TeamControl.Clone();
          break;
        case MessageTypeOneofCase.StoreConfig:
          StoreConfig = other.StoreConfig.Clone();
          break;
        case MessageTypeOneofCase.StoreSubcategory:
          StoreSubcategory = other.StoreSubcategory.Clone();
          break;
        case MessageTypeOneofCase.Haptic:
          Haptic = other.Haptic.Clone();
          break;
        case MessageTypeOneofCase.EncounterType:
          EncounterType = other.EncounterType.Clone();
          break;
        case MessageTypeOneofCase.ChallengeSpawnLogic:
          ChallengeSpawnLogic = other.ChallengeSpawnLogic.Clone();
          break;
        case MessageTypeOneofCase.Profession:
          Profession = other.Profession.Clone();
          break;
        case MessageTypeOneofCase.BonusCategory:
          BonusCategory = other.BonusCategory.Clone();
          break;
        case MessageTypeOneofCase.VaultCategory:
          VaultCategory = other.VaultCategory.Clone();
          break;
        case MessageTypeOneofCase.ProfileConfig:
          ProfileConfig = other.ProfileConfig.Clone();
          break;
        case MessageTypeOneofCase.CollectionFamilyRankTable:
          CollectionFamilyRankTable = other.CollectionFamilyRankTable.Clone();
          break;
        case MessageTypeOneofCase.MapIngredient:
          MapIngredient = other.MapIngredient.Clone();
          break;
        case MessageTypeOneofCase.MapAbility:
          MapAbility = other.MapAbility.Clone();
          break;
        case MessageTypeOneofCase.Recipe:
          Recipe = other.Recipe.Clone();
          break;
        case MessageTypeOneofCase.ChallengeBonus:
          ChallengeBonus = other.ChallengeBonus.Clone();
          break;
        case MessageTypeOneofCase.Storyboard:
          Storyboard = other.Storyboard.Clone();
          break;
        case MessageTypeOneofCase.MasterNote:
          MasterNote = other.MasterNote.Clone();
          break;
        case MessageTypeOneofCase.Cauldron:
          Cauldron = other.Cauldron.Clone();
          break;
        case MessageTypeOneofCase.Rpgstat:
          Rpgstat = other.Rpgstat.Clone();
          break;
        case MessageTypeOneofCase.RpgstatsBlock:
          RpgstatsBlock = other.RpgstatsBlock.Clone();
          break;
        case MessageTypeOneofCase.SelfieAvatarAsset:
          SelfieAvatarAsset = other.SelfieAvatarAsset.Clone();
          break;
        case MessageTypeOneofCase.OutpostTemplate:
          OutpostTemplate = other.OutpostTemplate.Clone();
          break;
        case MessageTypeOneofCase.DailyRewardMonthlySchedule:
          DailyRewardMonthlySchedule = other.DailyRewardMonthlySchedule.Clone();
          break;
        case MessageTypeOneofCase.Quest:
          Quest = other.Quest.Clone();
          break;
        case MessageTypeOneofCase.DeepLink:
          DeepLink = other.DeepLink.Clone();
          break;
        case MessageTypeOneofCase.Event:
          Event = other.Event.Clone();
          break;
        case MessageTypeOneofCase.GreenhouseTemplate:
          GreenhouseTemplate = other.GreenhouseTemplate.Clone();
          break;
        case MessageTypeOneofCase.Version:
          Version = other.Version.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmTemplate Clone() {
      return new GmTemplate(this);
    }

    /// <summary>Field number for the "collection_family" field.</summary>
    public const int CollectionFamilyFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionFamily CollectionFamily {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionFamily ? (global::WUProtos.Data.Collection.CollectionFamily) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionFamily;
      }
    }

    /// <summary>Field number for the "collection_item" field.</summary>
    public const int CollectionItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.CollectionItem CollectionItem {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionItem ? (global::WUProtos.Data.GmTemplate.Types.CollectionItem) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionItem;
      }
    }

    /// <summary>Field number for the "encounter" field.</summary>
    public const int EncounterFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Encounter Encounter {
      get { return messageTypeCase_ == MessageTypeOneofCase.Encounter ? (global::WUProtos.Data.GmTemplate.Types.Encounter) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Encounter;
      }
    }

    /// <summary>Field number for the "encounter_obstacle" field.</summary>
    public const int EncounterObstacleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.EncounterObstacle EncounterObstacle {
      get { return messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle ? (global::WUProtos.Data.GmTemplate.Types.EncounterObstacle) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.EncounterObstacle;
      }
    }

    /// <summary>Field number for the "spell" field.</summary>
    public const int SpellFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Spell Spell {
      get { return messageTypeCase_ == MessageTypeOneofCase.Spell ? (global::WUProtos.Data.GmTemplate.Types.Spell) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Spell;
      }
    }

    /// <summary>Field number for the "vault_item" field.</summary>
    public const int VaultItemFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.VaultItem VaultItem {
      get { return messageTypeCase_ == MessageTypeOneofCase.VaultItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.VaultItem;
      }
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.GameConfig GameConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.GameConfig ? (global::WUProtos.Data.GmTemplate.Types.GameConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.GameConfig;
      }
    }

    /// <summary>Field number for the "player_level" field.</summary>
    public const int PlayerLevelFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.PlayerLevel PlayerLevel {
      get { return messageTypeCase_ == MessageTypeOneofCase.PlayerLevel ? (global::WUProtos.Data.GmTemplate.Types.PlayerLevel) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.PlayerLevel;
      }
    }

    /// <summary>Field number for the "store_pack" field.</summary>
    public const int StorePackFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.StorePack StorePack {
      get { return messageTypeCase_ == MessageTypeOneofCase.StorePack ? (global::WUProtos.Data.StorePack) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StorePack;
      }
    }

    /// <summary>Field number for the "walkbox_template" field.</summary>
    public const int WalkboxTemplateFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate WalkboxTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate ? (global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.WalkboxTemplate;
      }
    }

    /// <summary>Field number for the "feature_flag" field.</summary>
    public const int FeatureFlagFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.FeatureFlag FeatureFlag {
      get { return messageTypeCase_ == MessageTypeOneofCase.FeatureFlag ? (global::WUProtos.Data.GmTemplate.Types.FeatureFlag) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.FeatureFlag;
      }
    }

    /// <summary>Field number for the "portkey" field.</summary>
    public const int PortkeyFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Portkey Portkey {
      get { return messageTypeCase_ == MessageTypeOneofCase.Portkey ? (global::WUProtos.Data.GmTemplate.Types.Portkey) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Portkey;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Buff Buff {
      get { return messageTypeCase_ == MessageTypeOneofCase.Buff ? (global::WUProtos.Data.GmTemplate.Types.Buff) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Buff;
      }
    }

    /// <summary>Field number for the "fortress_template" field.</summary>
    public const int FortressTemplateFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.FortressTemplate FortressTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.FortressTemplate ? (global::WUProtos.Data.GmTemplate.Types.FortressTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.FortressTemplate;
      }
    }

    /// <summary>Field number for the "chamber_template" field.</summary>
    public const int ChamberTemplateFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.ChamberTemplate ChamberTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate ? (global::WUProtos.Data.GmTemplate.Types.ChamberTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChamberTemplate;
      }
    }

    /// <summary>Field number for the "quality_level" field.</summary>
    public const int QualityLevelFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.QualityLevel QualityLevel {
      get { return messageTypeCase_ == MessageTypeOneofCase.QualityLevel ? (global::WUProtos.Data.QualityLevel) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.QualityLevel;
      }
    }

    /// <summary>Field number for the "protego_pattern" field.</summary>
    public const int ProtegoPatternFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.ProtegoPattern ProtegoPattern {
      get { return messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern ? (global::WUProtos.Data.GmTemplate.Types.ProtegoPattern) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ProtegoPattern;
      }
    }

    /// <summary>Field number for the "collection_page" field.</summary>
    public const int CollectionPageFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.CollectionPage CollectionPage {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionPage ? (global::WUProtos.Data.GmTemplate.Types.CollectionPage) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionPage;
      }
    }

    /// <summary>Field number for the "team_control" field.</summary>
    public const int TeamControlFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.TeamControl TeamControl {
      get { return messageTypeCase_ == MessageTypeOneofCase.TeamControl ? (global::WUProtos.Data.GmTemplate.Types.TeamControl) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TeamControl;
      }
    }

    /// <summary>Field number for the "store_config" field.</summary>
    public const int StoreConfigFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.StoreConfig StoreConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.StoreConfig ? (global::WUProtos.Data.GmTemplate.Types.StoreConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StoreConfig;
      }
    }

    /// <summary>Field number for the "store_subcategory" field.</summary>
    public const int StoreSubcategoryFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.StoreSubcategory StoreSubcategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory ? (global::WUProtos.Data.GmTemplate.Types.StoreSubcategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StoreSubcategory;
      }
    }

    /// <summary>Field number for the "haptic" field.</summary>
    public const int HapticFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Haptic Haptic {
      get { return messageTypeCase_ == MessageTypeOneofCase.Haptic ? (global::WUProtos.Data.GmTemplate.Types.Haptic) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Haptic;
      }
    }

    /// <summary>Field number for the "encounter_type" field.</summary>
    public const int EncounterTypeFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.EncounterType EncounterType {
      get { return messageTypeCase_ == MessageTypeOneofCase.EncounterType ? (global::WUProtos.Data.GmTemplate.Types.EncounterType) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.EncounterType;
      }
    }

    /// <summary>Field number for the "challenge_spawn_logic" field.</summary>
    public const int ChallengeSpawnLogicFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic ChallengeSpawnLogic {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic ? (global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChallengeSpawnLogic;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Profession Profession {
      get { return messageTypeCase_ == MessageTypeOneofCase.Profession ? (global::WUProtos.Data.GmTemplate.Types.Profession) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Profession;
      }
    }

    /// <summary>Field number for the "bonus_category" field.</summary>
    public const int BonusCategoryFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.BonusCategory BonusCategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.BonusCategory ? (global::WUProtos.Data.GmTemplate.Types.BonusCategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.BonusCategory;
      }
    }

    /// <summary>Field number for the "vault_category" field.</summary>
    public const int VaultCategoryFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.VaultCategory VaultCategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.VaultCategory ? (global::WUProtos.Data.GmTemplate.Types.VaultCategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.VaultCategory;
      }
    }

    /// <summary>Field number for the "profile_config" field.</summary>
    public const int ProfileConfigFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ProfileConfig ProfileConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.ProfileConfig ? (global::WUProtos.Data.ProfileConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ProfileConfig;
      }
    }

    /// <summary>Field number for the "collection_family_rank_table" field.</summary>
    public const int CollectionFamilyRankTableFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable CollectionFamilyRankTable {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable ? (global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionFamilyRankTable;
      }
    }

    /// <summary>Field number for the "map_ingredient" field.</summary>
    public const int MapIngredientFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.MapIngredient MapIngredient {
      get { return messageTypeCase_ == MessageTypeOneofCase.MapIngredient ? (global::WUProtos.Data.GmTemplate.Types.MapIngredient) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MapIngredient;
      }
    }

    /// <summary>Field number for the "map_ability" field.</summary>
    public const int MapAbilityFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.MapAbility MapAbility {
      get { return messageTypeCase_ == MessageTypeOneofCase.MapAbility ? (global::WUProtos.Data.GmTemplate.Types.MapAbility) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MapAbility;
      }
    }

    /// <summary>Field number for the "recipe" field.</summary>
    public const int RecipeFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Recipe Recipe {
      get { return messageTypeCase_ == MessageTypeOneofCase.Recipe ? (global::WUProtos.Data.GmTemplate.Types.Recipe) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Recipe;
      }
    }

    /// <summary>Field number for the "challenge_bonus" field.</summary>
    public const int ChallengeBonusFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus ChallengeBonus {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus ? (global::WUProtos.Data.Challenge.ChallengeBonus) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChallengeBonus;
      }
    }

    /// <summary>Field number for the "storyboard" field.</summary>
    public const int StoryboardFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Storyboard Storyboard {
      get { return messageTypeCase_ == MessageTypeOneofCase.Storyboard ? (global::WUProtos.Data.GmTemplate.Types.Storyboard) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Storyboard;
      }
    }

    /// <summary>Field number for the "master_note" field.</summary>
    public const int MasterNoteFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.MasterNote MasterNote {
      get { return messageTypeCase_ == MessageTypeOneofCase.MasterNote ? (global::WUProtos.Data.GmTemplate.Types.MasterNote) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MasterNote;
      }
    }

    /// <summary>Field number for the "cauldron" field.</summary>
    public const int CauldronFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Cauldron Cauldron {
      get { return messageTypeCase_ == MessageTypeOneofCase.Cauldron ? (global::WUProtos.Data.GmTemplate.Types.Cauldron) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Cauldron;
      }
    }

    /// <summary>Field number for the "rpgstat" field.</summary>
    public const int RpgstatFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Rpgstat Rpgstat {
      get { return messageTypeCase_ == MessageTypeOneofCase.Rpgstat ? (global::WUProtos.Data.GmTemplate.Types.Rpgstat) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Rpgstat;
      }
    }

    /// <summary>Field number for the "rpgstats_block" field.</summary>
    public const int RpgstatsBlockFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock RpgstatsBlock {
      get { return messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock ? (global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RpgstatsBlock;
      }
    }

    /// <summary>Field number for the "selfie_avatar_asset" field.</summary>
    public const int SelfieAvatarAssetFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset SelfieAvatarAsset {
      get { return messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset ? (global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.SelfieAvatarAsset;
      }
    }

    /// <summary>Field number for the "outpost_template" field.</summary>
    public const int OutpostTemplateFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.OutpostTemplate OutpostTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate ? (global::WUProtos.Data.GmTemplate.Types.OutpostTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.OutpostTemplate;
      }
    }

    /// <summary>Field number for the "daily_reward_monthly_schedule" field.</summary>
    public const int DailyRewardMonthlyScheduleFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule DailyRewardMonthlySchedule {
      get { return messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule ? (global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DailyRewardMonthlySchedule;
      }
    }

    /// <summary>Field number for the "quest" field.</summary>
    public const int QuestFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Quest Quest {
      get { return messageTypeCase_ == MessageTypeOneofCase.Quest ? (global::WUProtos.Data.GmTemplate.Types.Quest) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Quest;
      }
    }

    /// <summary>Field number for the "deep_link" field.</summary>
    public const int DeepLinkFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.DeepLink DeepLink {
      get { return messageTypeCase_ == MessageTypeOneofCase.DeepLink ? (global::WUProtos.Data.GmTemplate.Types.DeepLink) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DeepLink;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Event Event {
      get { return messageTypeCase_ == MessageTypeOneofCase.Event ? (global::WUProtos.Data.GmTemplate.Types.Event) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Event;
      }
    }

    /// <summary>Field number for the "greenhouse_template" field.</summary>
    public const int GreenhouseTemplateFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate GreenhouseTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate ? (global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.GreenhouseTemplate;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Version Version {
      get { return messageTypeCase_ == MessageTypeOneofCase.Version ? (global::WUProtos.Data.GmTemplate.Types.Version) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Version;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      CollectionFamily = 1,
      CollectionItem = 2,
      Encounter = 3,
      EncounterObstacle = 4,
      Spell = 5,
      VaultItem = 6,
      GameConfig = 7,
      PlayerLevel = 8,
      StorePack = 9,
      WalkboxTemplate = 10,
      FeatureFlag = 11,
      Portkey = 12,
      Buff = 13,
      FortressTemplate = 14,
      ChamberTemplate = 15,
      QualityLevel = 16,
      ProtegoPattern = 17,
      CollectionPage = 18,
      TeamControl = 19,
      StoreConfig = 20,
      StoreSubcategory = 21,
      Haptic = 22,
      EncounterType = 23,
      ChallengeSpawnLogic = 24,
      Profession = 25,
      BonusCategory = 26,
      VaultCategory = 27,
      ProfileConfig = 28,
      CollectionFamilyRankTable = 29,
      MapIngredient = 30,
      MapAbility = 31,
      Recipe = 32,
      ChallengeBonus = 33,
      Storyboard = 34,
      MasterNote = 35,
      Cauldron = 36,
      Rpgstat = 37,
      RpgstatsBlock = 38,
      SelfieAvatarAsset = 39,
      OutpostTemplate = 40,
      DailyRewardMonthlySchedule = 41,
      Quest = 42,
      DeepLink = 43,
      Event = 44,
      GreenhouseTemplate = 45,
      Version = 46,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CollectionFamily, other.CollectionFamily)) return false;
      if (!object.Equals(CollectionItem, other.CollectionItem)) return false;
      if (!object.Equals(Encounter, other.Encounter)) return false;
      if (!object.Equals(EncounterObstacle, other.EncounterObstacle)) return false;
      if (!object.Equals(Spell, other.Spell)) return false;
      if (!object.Equals(VaultItem, other.VaultItem)) return false;
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      if (!object.Equals(PlayerLevel, other.PlayerLevel)) return false;
      if (!object.Equals(StorePack, other.StorePack)) return false;
      if (!object.Equals(WalkboxTemplate, other.WalkboxTemplate)) return false;
      if (!object.Equals(FeatureFlag, other.FeatureFlag)) return false;
      if (!object.Equals(Portkey, other.Portkey)) return false;
      if (!object.Equals(Buff, other.Buff)) return false;
      if (!object.Equals(FortressTemplate, other.FortressTemplate)) return false;
      if (!object.Equals(ChamberTemplate, other.ChamberTemplate)) return false;
      if (!object.Equals(QualityLevel, other.QualityLevel)) return false;
      if (!object.Equals(ProtegoPattern, other.ProtegoPattern)) return false;
      if (!object.Equals(CollectionPage, other.CollectionPage)) return false;
      if (!object.Equals(TeamControl, other.TeamControl)) return false;
      if (!object.Equals(StoreConfig, other.StoreConfig)) return false;
      if (!object.Equals(StoreSubcategory, other.StoreSubcategory)) return false;
      if (!object.Equals(Haptic, other.Haptic)) return false;
      if (!object.Equals(EncounterType, other.EncounterType)) return false;
      if (!object.Equals(ChallengeSpawnLogic, other.ChallengeSpawnLogic)) return false;
      if (!object.Equals(Profession, other.Profession)) return false;
      if (!object.Equals(BonusCategory, other.BonusCategory)) return false;
      if (!object.Equals(VaultCategory, other.VaultCategory)) return false;
      if (!object.Equals(ProfileConfig, other.ProfileConfig)) return false;
      if (!object.Equals(CollectionFamilyRankTable, other.CollectionFamilyRankTable)) return false;
      if (!object.Equals(MapIngredient, other.MapIngredient)) return false;
      if (!object.Equals(MapAbility, other.MapAbility)) return false;
      if (!object.Equals(Recipe, other.Recipe)) return false;
      if (!object.Equals(ChallengeBonus, other.ChallengeBonus)) return false;
      if (!object.Equals(Storyboard, other.Storyboard)) return false;
      if (!object.Equals(MasterNote, other.MasterNote)) return false;
      if (!object.Equals(Cauldron, other.Cauldron)) return false;
      if (!object.Equals(Rpgstat, other.Rpgstat)) return false;
      if (!object.Equals(RpgstatsBlock, other.RpgstatsBlock)) return false;
      if (!object.Equals(SelfieAvatarAsset, other.SelfieAvatarAsset)) return false;
      if (!object.Equals(OutpostTemplate, other.OutpostTemplate)) return false;
      if (!object.Equals(DailyRewardMonthlySchedule, other.DailyRewardMonthlySchedule)) return false;
      if (!object.Equals(Quest, other.Quest)) return false;
      if (!object.Equals(DeepLink, other.DeepLink)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(GreenhouseTemplate, other.GreenhouseTemplate)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) hash ^= CollectionFamily.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) hash ^= CollectionItem.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) hash ^= Encounter.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) hash ^= EncounterObstacle.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) hash ^= Spell.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) hash ^= GameConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) hash ^= PlayerLevel.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) hash ^= StorePack.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) hash ^= WalkboxTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) hash ^= FeatureFlag.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) hash ^= Buff.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) hash ^= FortressTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) hash ^= ChamberTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) hash ^= QualityLevel.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) hash ^= ProtegoPattern.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) hash ^= CollectionPage.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) hash ^= TeamControl.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) hash ^= StoreConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) hash ^= StoreSubcategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) hash ^= Haptic.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) hash ^= EncounterType.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) hash ^= ChallengeSpawnLogic.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) hash ^= Profession.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) hash ^= BonusCategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) hash ^= VaultCategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) hash ^= ProfileConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) hash ^= CollectionFamilyRankTable.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) hash ^= MapIngredient.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) hash ^= MapAbility.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) hash ^= Recipe.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) hash ^= ChallengeBonus.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) hash ^= Storyboard.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) hash ^= MasterNote.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) hash ^= Cauldron.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) hash ^= Rpgstat.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) hash ^= RpgstatsBlock.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) hash ^= SelfieAvatarAsset.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) hash ^= OutpostTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) hash ^= DailyRewardMonthlySchedule.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) hash ^= Quest.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) hash ^= DeepLink.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Event) hash ^= Event.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) hash ^= GreenhouseTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Version) hash ^= Version.GetHashCode();
      hash ^= (int) messageTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
        output.WriteRawTag(10);
        output.WriteMessage(CollectionFamily);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
        output.WriteRawTag(18);
        output.WriteMessage(CollectionItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
        output.WriteRawTag(26);
        output.WriteMessage(Encounter);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) {
        output.WriteRawTag(34);
        output.WriteMessage(EncounterObstacle);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
        output.WriteRawTag(42);
        output.WriteMessage(Spell);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
        output.WriteRawTag(50);
        output.WriteMessage(VaultItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(GameConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) {
        output.WriteRawTag(66);
        output.WriteMessage(PlayerLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
        output.WriteRawTag(74);
        output.WriteMessage(StorePack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
        output.WriteRawTag(82);
        output.WriteMessage(WalkboxTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) {
        output.WriteRawTag(90);
        output.WriteMessage(FeatureFlag);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
        output.WriteRawTag(98);
        output.WriteMessage(Portkey);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
        output.WriteRawTag(106);
        output.WriteMessage(Buff);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) {
        output.WriteRawTag(114);
        output.WriteMessage(FortressTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
        output.WriteRawTag(122);
        output.WriteMessage(ChamberTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(QualityLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ProtegoPattern);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CollectionPage);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TeamControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(StoreConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StoreSubcategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Haptic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EncounterType);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ChallengeSpawnLogic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Profession);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(BonusCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(VaultCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(ProfileConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(CollectionFamilyRankTable);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(MapIngredient);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MapAbility);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Recipe);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(ChallengeBonus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Storyboard);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(MasterNote);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Cauldron);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Rpgstat);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(RpgstatsBlock);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SelfieAvatarAsset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(OutpostTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(DailyRewardMonthlySchedule);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Quest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(DeepLink);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Event) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Event);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(GreenhouseTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Version) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamily);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Encounter);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncounterObstacle);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spell);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorePack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkboxTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureFlag);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portkey);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortressTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChamberTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(QualityLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProtegoPattern);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CollectionPage);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TeamControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoreConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoreSubcategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Haptic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncounterType);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChallengeSpawnLogic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Profession);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamilyRankTable);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapIngredient);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapAbility);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Recipe);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChallengeBonus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Storyboard);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MasterNote);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cauldron);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rpgstat);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RpgstatsBlock);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelfieAvatarAsset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutpostTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DailyRewardMonthlySchedule);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeepLink);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Event) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GreenhouseTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Version) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmTemplate other) {
      if (other == null) {
        return;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.CollectionFamily:
          if (CollectionFamily == null) {
            CollectionFamily = new global::WUProtos.Data.Collection.CollectionFamily();
          }
          CollectionFamily.MergeFrom(other.CollectionFamily);
          break;
        case MessageTypeOneofCase.CollectionItem:
          if (CollectionItem == null) {
            CollectionItem = new global::WUProtos.Data.GmTemplate.Types.CollectionItem();
          }
          CollectionItem.MergeFrom(other.CollectionItem);
          break;
        case MessageTypeOneofCase.Encounter:
          if (Encounter == null) {
            Encounter = new global::WUProtos.Data.GmTemplate.Types.Encounter();
          }
          Encounter.MergeFrom(other.Encounter);
          break;
        case MessageTypeOneofCase.EncounterObstacle:
          if (EncounterObstacle == null) {
            EncounterObstacle = new global::WUProtos.Data.GmTemplate.Types.EncounterObstacle();
          }
          EncounterObstacle.MergeFrom(other.EncounterObstacle);
          break;
        case MessageTypeOneofCase.Spell:
          if (Spell == null) {
            Spell = new global::WUProtos.Data.GmTemplate.Types.Spell();
          }
          Spell.MergeFrom(other.Spell);
          break;
        case MessageTypeOneofCase.VaultItem:
          if (VaultItem == null) {
            VaultItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem();
          }
          VaultItem.MergeFrom(other.VaultItem);
          break;
        case MessageTypeOneofCase.GameConfig:
          if (GameConfig == null) {
            GameConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig();
          }
          GameConfig.MergeFrom(other.GameConfig);
          break;
        case MessageTypeOneofCase.PlayerLevel:
          if (PlayerLevel == null) {
            PlayerLevel = new global::WUProtos.Data.GmTemplate.Types.PlayerLevel();
          }
          PlayerLevel.MergeFrom(other.PlayerLevel);
          break;
        case MessageTypeOneofCase.StorePack:
          if (StorePack == null) {
            StorePack = new global::WUProtos.Data.StorePack();
          }
          StorePack.MergeFrom(other.StorePack);
          break;
        case MessageTypeOneofCase.WalkboxTemplate:
          if (WalkboxTemplate == null) {
            WalkboxTemplate = new global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate();
          }
          WalkboxTemplate.MergeFrom(other.WalkboxTemplate);
          break;
        case MessageTypeOneofCase.FeatureFlag:
          if (FeatureFlag == null) {
            FeatureFlag = new global::WUProtos.Data.GmTemplate.Types.FeatureFlag();
          }
          FeatureFlag.MergeFrom(other.FeatureFlag);
          break;
        case MessageTypeOneofCase.Portkey:
          if (Portkey == null) {
            Portkey = new global::WUProtos.Data.GmTemplate.Types.Portkey();
          }
          Portkey.MergeFrom(other.Portkey);
          break;
        case MessageTypeOneofCase.Buff:
          if (Buff == null) {
            Buff = new global::WUProtos.Data.GmTemplate.Types.Buff();
          }
          Buff.MergeFrom(other.Buff);
          break;
        case MessageTypeOneofCase.FortressTemplate:
          if (FortressTemplate == null) {
            FortressTemplate = new global::WUProtos.Data.GmTemplate.Types.FortressTemplate();
          }
          FortressTemplate.MergeFrom(other.FortressTemplate);
          break;
        case MessageTypeOneofCase.ChamberTemplate:
          if (ChamberTemplate == null) {
            ChamberTemplate = new global::WUProtos.Data.GmTemplate.Types.ChamberTemplate();
          }
          ChamberTemplate.MergeFrom(other.ChamberTemplate);
          break;
        case MessageTypeOneofCase.QualityLevel:
          if (QualityLevel == null) {
            QualityLevel = new global::WUProtos.Data.QualityLevel();
          }
          QualityLevel.MergeFrom(other.QualityLevel);
          break;
        case MessageTypeOneofCase.ProtegoPattern:
          if (ProtegoPattern == null) {
            ProtegoPattern = new global::WUProtos.Data.GmTemplate.Types.ProtegoPattern();
          }
          ProtegoPattern.MergeFrom(other.ProtegoPattern);
          break;
        case MessageTypeOneofCase.CollectionPage:
          if (CollectionPage == null) {
            CollectionPage = new global::WUProtos.Data.GmTemplate.Types.CollectionPage();
          }
          CollectionPage.MergeFrom(other.CollectionPage);
          break;
        case MessageTypeOneofCase.TeamControl:
          if (TeamControl == null) {
            TeamControl = new global::WUProtos.Data.GmTemplate.Types.TeamControl();
          }
          TeamControl.MergeFrom(other.TeamControl);
          break;
        case MessageTypeOneofCase.StoreConfig:
          if (StoreConfig == null) {
            StoreConfig = new global::WUProtos.Data.GmTemplate.Types.StoreConfig();
          }
          StoreConfig.MergeFrom(other.StoreConfig);
          break;
        case MessageTypeOneofCase.StoreSubcategory:
          if (StoreSubcategory == null) {
            StoreSubcategory = new global::WUProtos.Data.GmTemplate.Types.StoreSubcategory();
          }
          StoreSubcategory.MergeFrom(other.StoreSubcategory);
          break;
        case MessageTypeOneofCase.Haptic:
          if (Haptic == null) {
            Haptic = new global::WUProtos.Data.GmTemplate.Types.Haptic();
          }
          Haptic.MergeFrom(other.Haptic);
          break;
        case MessageTypeOneofCase.EncounterType:
          if (EncounterType == null) {
            EncounterType = new global::WUProtos.Data.GmTemplate.Types.EncounterType();
          }
          EncounterType.MergeFrom(other.EncounterType);
          break;
        case MessageTypeOneofCase.ChallengeSpawnLogic:
          if (ChallengeSpawnLogic == null) {
            ChallengeSpawnLogic = new global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic();
          }
          ChallengeSpawnLogic.MergeFrom(other.ChallengeSpawnLogic);
          break;
        case MessageTypeOneofCase.Profession:
          if (Profession == null) {
            Profession = new global::WUProtos.Data.GmTemplate.Types.Profession();
          }
          Profession.MergeFrom(other.Profession);
          break;
        case MessageTypeOneofCase.BonusCategory:
          if (BonusCategory == null) {
            BonusCategory = new global::WUProtos.Data.GmTemplate.Types.BonusCategory();
          }
          BonusCategory.MergeFrom(other.BonusCategory);
          break;
        case MessageTypeOneofCase.VaultCategory:
          if (VaultCategory == null) {
            VaultCategory = new global::WUProtos.Data.GmTemplate.Types.VaultCategory();
          }
          VaultCategory.MergeFrom(other.VaultCategory);
          break;
        case MessageTypeOneofCase.ProfileConfig:
          if (ProfileConfig == null) {
            ProfileConfig = new global::WUProtos.Data.ProfileConfig();
          }
          ProfileConfig.MergeFrom(other.ProfileConfig);
          break;
        case MessageTypeOneofCase.CollectionFamilyRankTable:
          if (CollectionFamilyRankTable == null) {
            CollectionFamilyRankTable = new global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable();
          }
          CollectionFamilyRankTable.MergeFrom(other.CollectionFamilyRankTable);
          break;
        case MessageTypeOneofCase.MapIngredient:
          if (MapIngredient == null) {
            MapIngredient = new global::WUProtos.Data.GmTemplate.Types.MapIngredient();
          }
          MapIngredient.MergeFrom(other.MapIngredient);
          break;
        case MessageTypeOneofCase.MapAbility:
          if (MapAbility == null) {
            MapAbility = new global::WUProtos.Data.GmTemplate.Types.MapAbility();
          }
          MapAbility.MergeFrom(other.MapAbility);
          break;
        case MessageTypeOneofCase.Recipe:
          if (Recipe == null) {
            Recipe = new global::WUProtos.Data.GmTemplate.Types.Recipe();
          }
          Recipe.MergeFrom(other.Recipe);
          break;
        case MessageTypeOneofCase.ChallengeBonus:
          if (ChallengeBonus == null) {
            ChallengeBonus = new global::WUProtos.Data.Challenge.ChallengeBonus();
          }
          ChallengeBonus.MergeFrom(other.ChallengeBonus);
          break;
        case MessageTypeOneofCase.Storyboard:
          if (Storyboard == null) {
            Storyboard = new global::WUProtos.Data.GmTemplate.Types.Storyboard();
          }
          Storyboard.MergeFrom(other.Storyboard);
          break;
        case MessageTypeOneofCase.MasterNote:
          if (MasterNote == null) {
            MasterNote = new global::WUProtos.Data.GmTemplate.Types.MasterNote();
          }
          MasterNote.MergeFrom(other.MasterNote);
          break;
        case MessageTypeOneofCase.Cauldron:
          if (Cauldron == null) {
            Cauldron = new global::WUProtos.Data.GmTemplate.Types.Cauldron();
          }
          Cauldron.MergeFrom(other.Cauldron);
          break;
        case MessageTypeOneofCase.Rpgstat:
          if (Rpgstat == null) {
            Rpgstat = new global::WUProtos.Data.GmTemplate.Types.Rpgstat();
          }
          Rpgstat.MergeFrom(other.Rpgstat);
          break;
        case MessageTypeOneofCase.RpgstatsBlock:
          if (RpgstatsBlock == null) {
            RpgstatsBlock = new global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock();
          }
          RpgstatsBlock.MergeFrom(other.RpgstatsBlock);
          break;
        case MessageTypeOneofCase.SelfieAvatarAsset:
          if (SelfieAvatarAsset == null) {
            SelfieAvatarAsset = new global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset();
          }
          SelfieAvatarAsset.MergeFrom(other.SelfieAvatarAsset);
          break;
        case MessageTypeOneofCase.OutpostTemplate:
          if (OutpostTemplate == null) {
            OutpostTemplate = new global::WUProtos.Data.GmTemplate.Types.OutpostTemplate();
          }
          OutpostTemplate.MergeFrom(other.OutpostTemplate);
          break;
        case MessageTypeOneofCase.DailyRewardMonthlySchedule:
          if (DailyRewardMonthlySchedule == null) {
            DailyRewardMonthlySchedule = new global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule();
          }
          DailyRewardMonthlySchedule.MergeFrom(other.DailyRewardMonthlySchedule);
          break;
        case MessageTypeOneofCase.Quest:
          if (Quest == null) {
            Quest = new global::WUProtos.Data.GmTemplate.Types.Quest();
          }
          Quest.MergeFrom(other.Quest);
          break;
        case MessageTypeOneofCase.DeepLink:
          if (DeepLink == null) {
            DeepLink = new global::WUProtos.Data.GmTemplate.Types.DeepLink();
          }
          DeepLink.MergeFrom(other.DeepLink);
          break;
        case MessageTypeOneofCase.Event:
          if (Event == null) {
            Event = new global::WUProtos.Data.GmTemplate.Types.Event();
          }
          Event.MergeFrom(other.Event);
          break;
        case MessageTypeOneofCase.GreenhouseTemplate:
          if (GreenhouseTemplate == null) {
            GreenhouseTemplate = new global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate();
          }
          GreenhouseTemplate.MergeFrom(other.GreenhouseTemplate);
          break;
        case MessageTypeOneofCase.Version:
          if (Version == null) {
            Version = new global::WUProtos.Data.GmTemplate.Types.Version();
          }
          Version.MergeFrom(other.Version);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Collection.CollectionFamily subBuilder = new global::WUProtos.Data.Collection.CollectionFamily();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
              subBuilder.MergeFrom(CollectionFamily);
            }
            input.ReadMessage(subBuilder);
            CollectionFamily = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.GmTemplate.Types.CollectionItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.CollectionItem();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
              subBuilder.MergeFrom(CollectionItem);
            }
            input.ReadMessage(subBuilder);
            CollectionItem = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.GmTemplate.Types.Encounter subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter();
            if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
              subBuilder.MergeFrom(Encounter);
            }
            input.ReadMessage(subBuilder);
            Encounter = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.GmTemplate.Types.EncounterObstacle subBuilder = new global::WUProtos.Data.GmTemplate.Types.EncounterObstacle();
            if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) {
              subBuilder.MergeFrom(EncounterObstacle);
            }
            input.ReadMessage(subBuilder);
            EncounterObstacle = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.GmTemplate.Types.Spell subBuilder = new global::WUProtos.Data.GmTemplate.Types.Spell();
            if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
              subBuilder.MergeFrom(Spell);
            }
            input.ReadMessage(subBuilder);
            Spell = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.GmTemplate.Types.VaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem();
            if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
              subBuilder.MergeFrom(VaultItem);
            }
            input.ReadMessage(subBuilder);
            VaultItem = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.GmTemplate.Types.GameConfig subBuilder = new global::WUProtos.Data.GmTemplate.Types.GameConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
              subBuilder.MergeFrom(GameConfig);
            }
            input.ReadMessage(subBuilder);
            GameConfig = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.GmTemplate.Types.PlayerLevel subBuilder = new global::WUProtos.Data.GmTemplate.Types.PlayerLevel();
            if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) {
              subBuilder.MergeFrom(PlayerLevel);
            }
            input.ReadMessage(subBuilder);
            PlayerLevel = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.StorePack subBuilder = new global::WUProtos.Data.StorePack();
            if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
              subBuilder.MergeFrom(StorePack);
            }
            input.ReadMessage(subBuilder);
            StorePack = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate subBuilder = new global::WUProtos.Data.GmTemplate.Types.WalkboxTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
              subBuilder.MergeFrom(WalkboxTemplate);
            }
            input.ReadMessage(subBuilder);
            WalkboxTemplate = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.GmTemplate.Types.FeatureFlag subBuilder = new global::WUProtos.Data.GmTemplate.Types.FeatureFlag();
            if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) {
              subBuilder.MergeFrom(FeatureFlag);
            }
            input.ReadMessage(subBuilder);
            FeatureFlag = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.GmTemplate.Types.Portkey subBuilder = new global::WUProtos.Data.GmTemplate.Types.Portkey();
            if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
              subBuilder.MergeFrom(Portkey);
            }
            input.ReadMessage(subBuilder);
            Portkey = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.GmTemplate.Types.Buff subBuilder = new global::WUProtos.Data.GmTemplate.Types.Buff();
            if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
              subBuilder.MergeFrom(Buff);
            }
            input.ReadMessage(subBuilder);
            Buff = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.GmTemplate.Types.FortressTemplate subBuilder = new global::WUProtos.Data.GmTemplate.Types.FortressTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) {
              subBuilder.MergeFrom(FortressTemplate);
            }
            input.ReadMessage(subBuilder);
            FortressTemplate = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Data.GmTemplate.Types.ChamberTemplate subBuilder = new global::WUProtos.Data.GmTemplate.Types.ChamberTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
              subBuilder.MergeFrom(ChamberTemplate);
            }
            input.ReadMessage(subBuilder);
            ChamberTemplate = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Data.QualityLevel subBuilder = new global::WUProtos.Data.QualityLevel();
            if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) {
              subBuilder.MergeFrom(QualityLevel);
            }
            input.ReadMessage(subBuilder);
            QualityLevel = subBuilder;
            break;
          }
          case 138: {
            global::WUProtos.Data.GmTemplate.Types.ProtegoPattern subBuilder = new global::WUProtos.Data.GmTemplate.Types.ProtegoPattern();
            if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
              subBuilder.MergeFrom(ProtegoPattern);
            }
            input.ReadMessage(subBuilder);
            ProtegoPattern = subBuilder;
            break;
          }
          case 146: {
            global::WUProtos.Data.GmTemplate.Types.CollectionPage subBuilder = new global::WUProtos.Data.GmTemplate.Types.CollectionPage();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
              subBuilder.MergeFrom(CollectionPage);
            }
            input.ReadMessage(subBuilder);
            CollectionPage = subBuilder;
            break;
          }
          case 154: {
            global::WUProtos.Data.GmTemplate.Types.TeamControl subBuilder = new global::WUProtos.Data.GmTemplate.Types.TeamControl();
            if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
              subBuilder.MergeFrom(TeamControl);
            }
            input.ReadMessage(subBuilder);
            TeamControl = subBuilder;
            break;
          }
          case 162: {
            global::WUProtos.Data.GmTemplate.Types.StoreConfig subBuilder = new global::WUProtos.Data.GmTemplate.Types.StoreConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
              subBuilder.MergeFrom(StoreConfig);
            }
            input.ReadMessage(subBuilder);
            StoreConfig = subBuilder;
            break;
          }
          case 170: {
            global::WUProtos.Data.GmTemplate.Types.StoreSubcategory subBuilder = new global::WUProtos.Data.GmTemplate.Types.StoreSubcategory();
            if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
              subBuilder.MergeFrom(StoreSubcategory);
            }
            input.ReadMessage(subBuilder);
            StoreSubcategory = subBuilder;
            break;
          }
          case 178: {
            global::WUProtos.Data.GmTemplate.Types.Haptic subBuilder = new global::WUProtos.Data.GmTemplate.Types.Haptic();
            if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
              subBuilder.MergeFrom(Haptic);
            }
            input.ReadMessage(subBuilder);
            Haptic = subBuilder;
            break;
          }
          case 186: {
            global::WUProtos.Data.GmTemplate.Types.EncounterType subBuilder = new global::WUProtos.Data.GmTemplate.Types.EncounterType();
            if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
              subBuilder.MergeFrom(EncounterType);
            }
            input.ReadMessage(subBuilder);
            EncounterType = subBuilder;
            break;
          }
          case 194: {
            global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic subBuilder = new global::WUProtos.Data.GmTemplate.Types.ChallengeSpawnLogic();
            if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) {
              subBuilder.MergeFrom(ChallengeSpawnLogic);
            }
            input.ReadMessage(subBuilder);
            ChallengeSpawnLogic = subBuilder;
            break;
          }
          case 202: {
            global::WUProtos.Data.GmTemplate.Types.Profession subBuilder = new global::WUProtos.Data.GmTemplate.Types.Profession();
            if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
              subBuilder.MergeFrom(Profession);
            }
            input.ReadMessage(subBuilder);
            Profession = subBuilder;
            break;
          }
          case 210: {
            global::WUProtos.Data.GmTemplate.Types.BonusCategory subBuilder = new global::WUProtos.Data.GmTemplate.Types.BonusCategory();
            if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
              subBuilder.MergeFrom(BonusCategory);
            }
            input.ReadMessage(subBuilder);
            BonusCategory = subBuilder;
            break;
          }
          case 218: {
            global::WUProtos.Data.GmTemplate.Types.VaultCategory subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultCategory();
            if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
              subBuilder.MergeFrom(VaultCategory);
            }
            input.ReadMessage(subBuilder);
            VaultCategory = subBuilder;
            break;
          }
          case 226: {
            global::WUProtos.Data.ProfileConfig subBuilder = new global::WUProtos.Data.ProfileConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
              subBuilder.MergeFrom(ProfileConfig);
            }
            input.ReadMessage(subBuilder);
            ProfileConfig = subBuilder;
            break;
          }
          case 234: {
            global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable subBuilder = new global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) {
              subBuilder.MergeFrom(CollectionFamilyRankTable);
            }
            input.ReadMessage(subBuilder);
            CollectionFamilyRankTable = subBuilder;
            break;
          }
          case 242: {
            global::WUProtos.Data.GmTemplate.Types.MapIngredient subBuilder = new global::WUProtos.Data.GmTemplate.Types.MapIngredient();
            if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
              subBuilder.MergeFrom(MapIngredient);
            }
            input.ReadMessage(subBuilder);
            MapIngredient = subBuilder;
            break;
          }
          case 250: {
            global::WUProtos.Data.GmTemplate.Types.MapAbility subBuilder = new global::WUProtos.Data.GmTemplate.Types.MapAbility();
            if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
              subBuilder.MergeFrom(MapAbility);
            }
            input.ReadMessage(subBuilder);
            MapAbility = subBuilder;
            break;
          }
          case 258: {
            global::WUProtos.Data.GmTemplate.Types.Recipe subBuilder = new global::WUProtos.Data.GmTemplate.Types.Recipe();
            if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
              subBuilder.MergeFrom(Recipe);
            }
            input.ReadMessage(subBuilder);
            Recipe = subBuilder;
            break;
          }
          case 266: {
            global::WUProtos.Data.Challenge.ChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus();
            if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
              subBuilder.MergeFrom(ChallengeBonus);
            }
            input.ReadMessage(subBuilder);
            ChallengeBonus = subBuilder;
            break;
          }
          case 274: {
            global::WUProtos.Data.GmTemplate.Types.Storyboard subBuilder = new global::WUProtos.Data.GmTemplate.Types.Storyboard();
            if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
              subBuilder.MergeFrom(Storyboard);
            }
            input.ReadMessage(subBuilder);
            Storyboard = subBuilder;
            break;
          }
          case 282: {
            global::WUProtos.Data.GmTemplate.Types.MasterNote subBuilder = new global::WUProtos.Data.GmTemplate.Types.MasterNote();
            if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
              subBuilder.MergeFrom(MasterNote);
            }
            input.ReadMessage(subBuilder);
            MasterNote = subBuilder;
            break;
          }
          case 290: {
            global::WUProtos.Data.GmTemplate.Types.Cauldron subBuilder = new global::WUProtos.Data.GmTemplate.Types.Cauldron();
            if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) {
              subBuilder.MergeFrom(Cauldron);
            }
            input.ReadMessage(subBuilder);
            Cauldron = subBuilder;
            break;
          }
          case 298: {
            global::WUProtos.Data.GmTemplate.Types.Rpgstat subBuilder = new global::WUProtos.Data.GmTemplate.Types.Rpgstat();
            if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
              subBuilder.MergeFrom(Rpgstat);
            }
            input.ReadMessage(subBuilder);
            Rpgstat = subBuilder;
            break;
          }
          case 306: {
            global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock subBuilder = new global::WUProtos.Data.GmTemplate.Types.RpgstatsBlock();
            if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
              subBuilder.MergeFrom(RpgstatsBlock);
            }
            input.ReadMessage(subBuilder);
            RpgstatsBlock = subBuilder;
            break;
          }
          case 314: {
            global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset subBuilder = new global::WUProtos.Data.GmTemplate.Types.SelfieAvatarAsset();
            if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
              subBuilder.MergeFrom(SelfieAvatarAsset);
            }
            input.ReadMessage(subBuilder);
            SelfieAvatarAsset = subBuilder;
            break;
          }
          case 322: {
            global::WUProtos.Data.GmTemplate.Types.OutpostTemplate subBuilder = new global::WUProtos.Data.GmTemplate.Types.OutpostTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
              subBuilder.MergeFrom(OutpostTemplate);
            }
            input.ReadMessage(subBuilder);
            OutpostTemplate = subBuilder;
            break;
          }
          case 330: {
            global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule subBuilder = new global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule();
            if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
              subBuilder.MergeFrom(DailyRewardMonthlySchedule);
            }
            input.ReadMessage(subBuilder);
            DailyRewardMonthlySchedule = subBuilder;
            break;
          }
          case 338: {
            global::WUProtos.Data.GmTemplate.Types.Quest subBuilder = new global::WUProtos.Data.GmTemplate.Types.Quest();
            if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
              subBuilder.MergeFrom(Quest);
            }
            input.ReadMessage(subBuilder);
            Quest = subBuilder;
            break;
          }
          case 346: {
            global::WUProtos.Data.GmTemplate.Types.DeepLink subBuilder = new global::WUProtos.Data.GmTemplate.Types.DeepLink();
            if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) {
              subBuilder.MergeFrom(DeepLink);
            }
            input.ReadMessage(subBuilder);
            DeepLink = subBuilder;
            break;
          }
          case 354: {
            global::WUProtos.Data.GmTemplate.Types.Event subBuilder = new global::WUProtos.Data.GmTemplate.Types.Event();
            if (messageTypeCase_ == MessageTypeOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 362: {
            global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate subBuilder = new global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) {
              subBuilder.MergeFrom(GreenhouseTemplate);
            }
            input.ReadMessage(subBuilder);
            GreenhouseTemplate = subBuilder;
            break;
          }
          case 370: {
            global::WUProtos.Data.GmTemplate.Types.Version subBuilder = new global::WUProtos.Data.GmTemplate.Types.Version();
            if (messageTypeCase_ == MessageTypeOneofCase.Version) {
              subBuilder.MergeFrom(Version);
            }
            input.ReadMessage(subBuilder);
            Version = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GmTemplate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Quest : pb::IMessage<Quest> {
        private static readonly pb::MessageParser<Quest> _parser = new pb::MessageParser<Quest>(() => new Quest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Quest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest(Quest other) : this() {
          id_ = other.id_;
          type_ = other.type_;
          tasks_ = other.tasks_.Clone();
          rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
          version_ = other.version_;
          chainPosition_ = other.chainPosition_;
          chainTotal_ = other.chainTotal_;
          startRequirements_ = other.startRequirements_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest Clone() {
          return new Quest(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "tasks" field.</summary>
        public const int TasksFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask> _repeated_tasks_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask> tasks_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask> Tasks {
          get { return tasks_; }
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 4;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
          get { return rewards_; }
          set {
            rewards_ = value;
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 5;
        private int version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "chain_position" field.</summary>
        public const int ChainPositionFieldNumber = 6;
        private int chainPosition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChainPosition {
          get { return chainPosition_; }
          set {
            chainPosition_ = value;
          }
        }

        /// <summary>Field number for the "chain_total" field.</summary>
        public const int ChainTotalFieldNumber = 7;
        private int chainTotal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChainTotal {
          get { return chainTotal_; }
          set {
            chainTotal_ = value;
          }
        }

        /// <summary>Field number for the "start_requirements" field.</summary>
        public const int StartRequirementsFieldNumber = 8;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Requirements> _repeated_startRequirements_codec
            = pb::FieldCodec.ForMessage(66, global::WUProtos.Data.Requirements.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Requirements> startRequirements_ = new pbc::RepeatedField<global::WUProtos.Data.Requirements>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Requirements> StartRequirements {
          get { return startRequirements_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Quest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Quest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Type != other.Type) return false;
          if(!tasks_.Equals(other.tasks_)) return false;
          if (!object.Equals(Rewards, other.Rewards)) return false;
          if (Version != other.Version) return false;
          if (ChainPosition != other.ChainPosition) return false;
          if (ChainTotal != other.ChainTotal) return false;
          if(!startRequirements_.Equals(other.startRequirements_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          hash ^= tasks_.GetHashCode();
          if (rewards_ != null) hash ^= Rewards.GetHashCode();
          if (Version != 0) hash ^= Version.GetHashCode();
          if (ChainPosition != 0) hash ^= ChainPosition.GetHashCode();
          if (ChainTotal != 0) hash ^= ChainTotal.GetHashCode();
          hash ^= startRequirements_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          tasks_.WriteTo(output, _repeated_tasks_codec);
          if (rewards_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Rewards);
          }
          if (Version != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Version);
          }
          if (ChainPosition != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ChainPosition);
          }
          if (ChainTotal != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ChainTotal);
          }
          startRequirements_.WriteTo(output, _repeated_startRequirements_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          size += tasks_.CalculateSize(_repeated_tasks_codec);
          if (rewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
          }
          if (Version != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
          }
          if (ChainPosition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChainPosition);
          }
          if (ChainTotal != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChainTotal);
          }
          size += startRequirements_.CalculateSize(_repeated_startRequirements_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Quest other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          tasks_.Add(other.tasks_);
          if (other.rewards_ != null) {
            if (rewards_ == null) {
              Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Rewards.MergeFrom(other.Rewards);
          }
          if (other.Version != 0) {
            Version = other.Version;
          }
          if (other.ChainPosition != 0) {
            ChainPosition = other.ChainPosition;
          }
          if (other.ChainTotal != 0) {
            ChainTotal = other.ChainTotal;
          }
          startRequirements_.Add(other.startRequirements_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestType) input.ReadEnum();
                break;
              }
              case 26: {
                tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
                break;
              }
              case 34: {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Rewards);
                break;
              }
              case 40: {
                Version = input.ReadInt32();
                break;
              }
              case 48: {
                ChainPosition = input.ReadInt32();
                break;
              }
              case 56: {
                ChainTotal = input.ReadInt32();
                break;
              }
              case 66: {
                startRequirements_.AddEntriesFrom(input, _repeated_startRequirements_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Quest message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ENCOUNTER_DIFFICULTY {
            [pbr::OriginalName("UNSET")] Unset = 0,
            [pbr::OriginalName("LOW")] Low = 1,
            [pbr::OriginalName("MEDIUM")] Medium = 2,
            [pbr::OriginalName("HIGH")] High = 3,
            [pbr::OriginalName("SEVERE")] Severe = 4,
            [pbr::OriginalName("EMERGENCY")] Emergency = 5,
          }

          public enum QuestType {
            [pbr::OriginalName("QUEST_TYPE_UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("QUEST_TYPE_NONREPEATABLE")] Nonrepeatable = 1,
            [pbr::OriginalName("QUEST_TYPE_REPEATABLE")] Repeatable = 2,
            [pbr::OriginalName("QUEST_TYPE_DAILY")] Daily = 3,
            [pbr::OriginalName("QUEST_TYPE_EVENT")] Event = 4,
            [pbr::OriginalName("QUEST_TYPE_ACHIEVEMENT")] Achievement = 5,
            [pbr::OriginalName("QUEST_TYPE_EVENT_CHAIN")] EventChain = 6,
          }

          public sealed partial class QuestTask : pb::IMessage<QuestTask> {
            private static readonly pb::MessageParser<QuestTask> _parser = new pb::MessageParser<QuestTask>(() => new QuestTask());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<QuestTask> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Quest.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuestTask() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuestTask(QuestTask other) : this() {
              switch (other.TypeCase) {
                case TypeOneofCase.ReqTask:
                  ReqTask = other.ReqTask.Clone();
                  break;
                case TypeOneofCase.HookTask:
                  HookTask = other.HookTask.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuestTask Clone() {
              return new QuestTask(this);
            }

            /// <summary>Field number for the "req_task" field.</summary>
            public const int ReqTaskFieldNumber = 1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask ReqTask {
              get { return typeCase_ == TypeOneofCase.ReqTask ? (global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ReqTask;
              }
            }

            /// <summary>Field number for the "hook_task" field.</summary>
            public const int HookTaskFieldNumber = 2;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.HookQuestTask HookTask {
              get { return typeCase_ == TypeOneofCase.HookTask ? (global::WUProtos.Data.HookQuestTask) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.HookTask;
              }
            }

            private object type_;
            /// <summary>Enum of possible cases for the "Type" oneof.</summary>
            public enum TypeOneofCase {
              None = 0,
              ReqTask = 1,
              HookTask = 2,
            }
            private TypeOneofCase typeCase_ = TypeOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeOneofCase TypeCase {
              get { return typeCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              typeCase_ = TypeOneofCase.None;
              type_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as QuestTask);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(QuestTask other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(ReqTask, other.ReqTask)) return false;
              if (!object.Equals(HookTask, other.HookTask)) return false;
              if (TypeCase != other.TypeCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (typeCase_ == TypeOneofCase.ReqTask) hash ^= ReqTask.GetHashCode();
              if (typeCase_ == TypeOneofCase.HookTask) hash ^= HookTask.GetHashCode();
              hash ^= (int) typeCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (typeCase_ == TypeOneofCase.ReqTask) {
                output.WriteRawTag(10);
                output.WriteMessage(ReqTask);
              }
              if (typeCase_ == TypeOneofCase.HookTask) {
                output.WriteRawTag(18);
                output.WriteMessage(HookTask);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (typeCase_ == TypeOneofCase.ReqTask) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqTask);
              }
              if (typeCase_ == TypeOneofCase.HookTask) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(HookTask);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(QuestTask other) {
              if (other == null) {
                return;
              }
              switch (other.TypeCase) {
                case TypeOneofCase.ReqTask:
                  if (ReqTask == null) {
                    ReqTask = new global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask();
                  }
                  ReqTask.MergeFrom(other.ReqTask);
                  break;
                case TypeOneofCase.HookTask:
                  if (HookTask == null) {
                    HookTask = new global::WUProtos.Data.HookQuestTask();
                  }
                  HookTask.MergeFrom(other.HookTask);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask subBuilder = new global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Types.RequirementsQuestTask();
                    if (typeCase_ == TypeOneofCase.ReqTask) {
                      subBuilder.MergeFrom(ReqTask);
                    }
                    input.ReadMessage(subBuilder);
                    ReqTask = subBuilder;
                    break;
                  }
                  case 18: {
                    global::WUProtos.Data.HookQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask();
                    if (typeCase_ == TypeOneofCase.HookTask) {
                      subBuilder.MergeFrom(HookTask);
                    }
                    input.ReadMessage(subBuilder);
                    HookTask = subBuilder;
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the QuestTask message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class RequirementsQuestTask : pb::IMessage<RequirementsQuestTask> {
                private static readonly pb::MessageParser<RequirementsQuestTask> _parser = new pb::MessageParser<RequirementsQuestTask>(() => new RequirementsQuestTask());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<RequirementsQuestTask> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.Quest.Types.QuestTask.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RequirementsQuestTask() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RequirementsQuestTask(RequirementsQuestTask other) : this() {
                  reqs_ = other.reqs_ != null ? other.reqs_.Clone() : null;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RequirementsQuestTask Clone() {
                  return new RequirementsQuestTask(this);
                }

                /// <summary>Field number for the "reqs" field.</summary>
                public const int ReqsFieldNumber = 1;
                private global::WUProtos.Data.Requirements reqs_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::WUProtos.Data.Requirements Reqs {
                  get { return reqs_; }
                  set {
                    reqs_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as RequirementsQuestTask);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(RequirementsQuestTask other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Reqs, other.Reqs)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (reqs_ != null) hash ^= Reqs.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (reqs_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Reqs);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (reqs_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reqs);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(RequirementsQuestTask other) {
                  if (other == null) {
                    return;
                  }
                  if (other.reqs_ != null) {
                    if (reqs_ == null) {
                      Reqs = new global::WUProtos.Data.Requirements();
                    }
                    Reqs.MergeFrom(other.Reqs);
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (reqs_ == null) {
                          Reqs = new global::WUProtos.Data.Requirements();
                        }
                        input.ReadMessage(Reqs);
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class VaultItem : pb::IMessage<VaultItem> {
        private static readonly pb::MessageParser<VaultItem> _parser = new pb::MessageParser<VaultItem>(() => new VaultItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VaultItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItem(VaultItem other) : this() {
          id_ = other.id_;
          cap_ = other.cap_;
          relativeValue_ = other.relativeValue_;
          vaultCategoryGmtId_ = other.vaultCategoryGmtId_;
          switch (other.VaultItemTypeCase) {
            case VaultItemTypeOneofCase.CurrencyItem:
              CurrencyItem = other.CurrencyItem.Clone();
              break;
            case VaultItemTypeOneofCase.StaminaItem:
              StaminaItem = other.StaminaItem.Clone();
              break;
            case VaultItemTypeOneofCase.DetectorItem:
              DetectorItem = other.DetectorItem.Clone();
              break;
            case VaultItemTypeOneofCase.ContainerItem:
              ContainerItem = other.ContainerItem.Clone();
              break;
            case VaultItemTypeOneofCase.RunestoneItem:
              RunestoneItem = other.RunestoneItem.Clone();
              break;
            case VaultItemTypeOneofCase.PotionItem:
              PotionItem = other.PotionItem.Clone();
              break;
            case VaultItemTypeOneofCase.PotionIngredient:
              PotionIngredient = other.PotionIngredient.Clone();
              break;
            case VaultItemTypeOneofCase.EnergyItem:
              EnergyItem = other.EnergyItem.Clone();
              break;
            case VaultItemTypeOneofCase.CauldronTimeItem:
              CauldronTimeItem = other.CauldronTimeItem.Clone();
              break;
            case VaultItemTypeOneofCase.PotTimeItem:
              PotTimeItem = other.PotTimeItem.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItem Clone() {
          return new VaultItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "currency_item" field.</summary>
        public const int CurrencyItemFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem CurrencyItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.CurrencyItem;
          }
        }

        /// <summary>Field number for the "stamina_item" field.</summary>
        public const int StaminaItemFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem StaminaItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.StaminaItem;
          }
        }

        /// <summary>Field number for the "detector_item" field.</summary>
        public const int DetectorItemFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem DetectorItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.DetectorItem;
          }
        }

        /// <summary>Field number for the "container_item" field.</summary>
        public const int ContainerItemFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem ContainerItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.ContainerItem;
          }
        }

        /// <summary>Field number for the "runestone_item" field.</summary>
        public const int RunestoneItemFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem RunestoneItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.RunestoneItem;
          }
        }

        /// <summary>Field number for the "potion_item" field.</summary>
        public const int PotionItemFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem PotionItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.PotionItem;
          }
        }

        /// <summary>Field number for the "potion_ingredient" field.</summary>
        public const int PotionIngredientFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem PotionIngredient {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.PotionIngredient;
          }
        }

        /// <summary>Field number for the "energy_item" field.</summary>
        public const int EnergyItemFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem EnergyItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.EnergyItem;
          }
        }

        /// <summary>Field number for the "cauldron_time_item" field.</summary>
        public const int CauldronTimeItemFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem CauldronTimeItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.CauldronTimeItem;
          }
        }

        /// <summary>Field number for the "pot_time_item" field.</summary>
        public const int PotTimeItemFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem PotTimeItem {
          get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.PotTimeItem ? (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem) vaultItemType_ : null; }
          set {
            vaultItemType_ = value;
            vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.PotTimeItem;
          }
        }

        /// <summary>Field number for the "cap" field.</summary>
        public const int CapFieldNumber = 9;
        private long cap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Cap {
          get { return cap_; }
          set {
            cap_ = value;
          }
        }

        /// <summary>Field number for the "relative_value" field.</summary>
        public const int RelativeValueFieldNumber = 100;
        private int relativeValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RelativeValue {
          get { return relativeValue_; }
          set {
            relativeValue_ = value;
          }
        }

        /// <summary>Field number for the "vault_category_gmt_id" field.</summary>
        public const int VaultCategoryGmtIdFieldNumber = 101;
        private string vaultCategoryGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VaultCategoryGmtId {
          get { return vaultCategoryGmtId_; }
          set {
            vaultCategoryGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private object vaultItemType_;
        /// <summary>Enum of possible cases for the "VaultItemType" oneof.</summary>
        public enum VaultItemTypeOneofCase {
          None = 0,
          CurrencyItem = 2,
          StaminaItem = 3,
          DetectorItem = 4,
          ContainerItem = 5,
          RunestoneItem = 6,
          PotionItem = 7,
          PotionIngredient = 8,
          EnergyItem = 10,
          CauldronTimeItem = 11,
          PotTimeItem = 12,
        }
        private VaultItemTypeOneofCase vaultItemTypeCase_ = VaultItemTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultItemTypeOneofCase VaultItemTypeCase {
          get { return vaultItemTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVaultItemType() {
          vaultItemTypeCase_ = VaultItemTypeOneofCase.None;
          vaultItemType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VaultItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VaultItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(CurrencyItem, other.CurrencyItem)) return false;
          if (!object.Equals(StaminaItem, other.StaminaItem)) return false;
          if (!object.Equals(DetectorItem, other.DetectorItem)) return false;
          if (!object.Equals(ContainerItem, other.ContainerItem)) return false;
          if (!object.Equals(RunestoneItem, other.RunestoneItem)) return false;
          if (!object.Equals(PotionItem, other.PotionItem)) return false;
          if (!object.Equals(PotionIngredient, other.PotionIngredient)) return false;
          if (!object.Equals(EnergyItem, other.EnergyItem)) return false;
          if (!object.Equals(CauldronTimeItem, other.CauldronTimeItem)) return false;
          if (!object.Equals(PotTimeItem, other.PotTimeItem)) return false;
          if (Cap != other.Cap) return false;
          if (RelativeValue != other.RelativeValue) return false;
          if (VaultCategoryGmtId != other.VaultCategoryGmtId) return false;
          if (VaultItemTypeCase != other.VaultItemTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) hash ^= CurrencyItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) hash ^= StaminaItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) hash ^= DetectorItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) hash ^= ContainerItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) hash ^= RunestoneItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) hash ^= PotionItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) hash ^= PotionIngredient.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) hash ^= EnergyItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) hash ^= CauldronTimeItem.GetHashCode();
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotTimeItem) hash ^= PotTimeItem.GetHashCode();
          if (Cap != 0L) hash ^= Cap.GetHashCode();
          if (RelativeValue != 0) hash ^= RelativeValue.GetHashCode();
          if (VaultCategoryGmtId.Length != 0) hash ^= VaultCategoryGmtId.GetHashCode();
          hash ^= (int) vaultItemTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) {
            output.WriteRawTag(18);
            output.WriteMessage(CurrencyItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) {
            output.WriteRawTag(26);
            output.WriteMessage(StaminaItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) {
            output.WriteRawTag(34);
            output.WriteMessage(DetectorItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) {
            output.WriteRawTag(42);
            output.WriteMessage(ContainerItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) {
            output.WriteRawTag(50);
            output.WriteMessage(RunestoneItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) {
            output.WriteRawTag(58);
            output.WriteMessage(PotionItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) {
            output.WriteRawTag(66);
            output.WriteMessage(PotionIngredient);
          }
          if (Cap != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(Cap);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) {
            output.WriteRawTag(82);
            output.WriteMessage(EnergyItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) {
            output.WriteRawTag(90);
            output.WriteMessage(CauldronTimeItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotTimeItem) {
            output.WriteRawTag(98);
            output.WriteMessage(PotTimeItem);
          }
          if (RelativeValue != 0) {
            output.WriteRawTag(160, 6);
            output.WriteInt32(RelativeValue);
          }
          if (VaultCategoryGmtId.Length != 0) {
            output.WriteRawTag(170, 6);
            output.WriteString(VaultCategoryGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StaminaItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetectorItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContainerItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunestoneItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotionItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotionIngredient);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnergyItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CauldronTimeItem);
          }
          if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotTimeItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotTimeItem);
          }
          if (Cap != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cap);
          }
          if (RelativeValue != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeValue);
          }
          if (VaultCategoryGmtId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(VaultCategoryGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VaultItem other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Cap != 0L) {
            Cap = other.Cap;
          }
          if (other.RelativeValue != 0) {
            RelativeValue = other.RelativeValue;
          }
          if (other.VaultCategoryGmtId.Length != 0) {
            VaultCategoryGmtId = other.VaultCategoryGmtId;
          }
          switch (other.VaultItemTypeCase) {
            case VaultItemTypeOneofCase.CurrencyItem:
              if (CurrencyItem == null) {
                CurrencyItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem();
              }
              CurrencyItem.MergeFrom(other.CurrencyItem);
              break;
            case VaultItemTypeOneofCase.StaminaItem:
              if (StaminaItem == null) {
                StaminaItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem();
              }
              StaminaItem.MergeFrom(other.StaminaItem);
              break;
            case VaultItemTypeOneofCase.DetectorItem:
              if (DetectorItem == null) {
                DetectorItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem();
              }
              DetectorItem.MergeFrom(other.DetectorItem);
              break;
            case VaultItemTypeOneofCase.ContainerItem:
              if (ContainerItem == null) {
                ContainerItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem();
              }
              ContainerItem.MergeFrom(other.ContainerItem);
              break;
            case VaultItemTypeOneofCase.RunestoneItem:
              if (RunestoneItem == null) {
                RunestoneItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem();
              }
              RunestoneItem.MergeFrom(other.RunestoneItem);
              break;
            case VaultItemTypeOneofCase.PotionItem:
              if (PotionItem == null) {
                PotionItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem();
              }
              PotionItem.MergeFrom(other.PotionItem);
              break;
            case VaultItemTypeOneofCase.PotionIngredient:
              if (PotionIngredient == null) {
                PotionIngredient = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem();
              }
              PotionIngredient.MergeFrom(other.PotionIngredient);
              break;
            case VaultItemTypeOneofCase.EnergyItem:
              if (EnergyItem == null) {
                EnergyItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem();
              }
              EnergyItem.MergeFrom(other.EnergyItem);
              break;
            case VaultItemTypeOneofCase.CauldronTimeItem:
              if (CauldronTimeItem == null) {
                CauldronTimeItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem();
              }
              CauldronTimeItem.MergeFrom(other.CauldronTimeItem);
              break;
            case VaultItemTypeOneofCase.PotTimeItem:
              if (PotTimeItem == null) {
                PotTimeItem = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem();
              }
              PotTimeItem.MergeFrom(other.PotTimeItem);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CurrencyVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) {
                  subBuilder.MergeFrom(CurrencyItem);
                }
                input.ReadMessage(subBuilder);
                CurrencyItem = subBuilder;
                break;
              }
              case 26: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.StaminaVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) {
                  subBuilder.MergeFrom(StaminaItem);
                }
                input.ReadMessage(subBuilder);
                StaminaItem = subBuilder;
                break;
              }
              case 34: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.DarkDetectorVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) {
                  subBuilder.MergeFrom(DetectorItem);
                }
                input.ReadMessage(subBuilder);
                DetectorItem = subBuilder;
                break;
              }
              case 42: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.ContainerVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) {
                  subBuilder.MergeFrom(ContainerItem);
                }
                input.ReadMessage(subBuilder);
                ContainerItem = subBuilder;
                break;
              }
              case 50: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.RunestoneVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) {
                  subBuilder.MergeFrom(RunestoneItem);
                }
                input.ReadMessage(subBuilder);
                RunestoneItem = subBuilder;
                break;
              }
              case 58: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) {
                  subBuilder.MergeFrom(PotionItem);
                }
                input.ReadMessage(subBuilder);
                PotionItem = subBuilder;
                break;
              }
              case 66: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionIngredientVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) {
                  subBuilder.MergeFrom(PotionIngredient);
                }
                input.ReadMessage(subBuilder);
                PotionIngredient = subBuilder;
                break;
              }
              case 72: {
                Cap = input.ReadInt64();
                break;
              }
              case 82: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.EnergyVaultItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) {
                  subBuilder.MergeFrom(EnergyItem);
                }
                input.ReadMessage(subBuilder);
                EnergyItem = subBuilder;
                break;
              }
              case 90: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.CauldronTimeItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) {
                  subBuilder.MergeFrom(CauldronTimeItem);
                }
                input.ReadMessage(subBuilder);
                CauldronTimeItem = subBuilder;
                break;
              }
              case 98: {
                global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem subBuilder = new global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotTimeItem();
                if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotTimeItem) {
                  subBuilder.MergeFrom(PotTimeItem);
                }
                input.ReadMessage(subBuilder);
                PotTimeItem = subBuilder;
                break;
              }
              case 800: {
                RelativeValue = input.ReadInt32();
                break;
              }
              case 810: {
                VaultCategoryGmtId = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the VaultItem message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum PotionStateEnum {
            [pbr::OriginalName("usable")] Usable = 0,
            [pbr::OriginalName("map_unusable")] MapUnusable = 1,
            [pbr::OriginalName("potion_active")] PotionActive = 2,
            [pbr::OriginalName("stronger_active")] StrongerActive = 3,
            [pbr::OriginalName("hpalready_full")] HpalreadyFull = 4,
            [pbr::OriginalName("focus_already_full")] FocusAlreadyFull = 5,
          }

          public sealed partial class RunestoneVaultItem : pb::IMessage<RunestoneVaultItem> {
            private static readonly pb::MessageParser<RunestoneVaultItem> _parser = new pb::MessageParser<RunestoneVaultItem>(() => new RunestoneVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<RunestoneVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RunestoneVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RunestoneVaultItem(RunestoneVaultItem other) : this() {
              quality_ = other.quality_;
              isBoss_ = other.isBoss_;
              collectionFamilyGmtId_ = other.collectionFamilyGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RunestoneVaultItem Clone() {
              return new RunestoneVaultItem(this);
            }

            /// <summary>Field number for the "quality" field.</summary>
            public const int QualityFieldNumber = 1;
            private int quality_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Quality {
              get { return quality_; }
              set {
                quality_ = value;
              }
            }

            /// <summary>Field number for the "is_boss" field.</summary>
            public const int IsBossFieldNumber = 2;
            private bool isBoss_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsBoss {
              get { return isBoss_; }
              set {
                isBoss_ = value;
              }
            }

            /// <summary>Field number for the "collection_family_gmt_id" field.</summary>
            public const int CollectionFamilyGmtIdFieldNumber = 3;
            private string collectionFamilyGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CollectionFamilyGmtId {
              get { return collectionFamilyGmtId_; }
              set {
                collectionFamilyGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as RunestoneVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(RunestoneVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Quality != other.Quality) return false;
              if (IsBoss != other.IsBoss) return false;
              if (CollectionFamilyGmtId != other.CollectionFamilyGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Quality != 0) hash ^= Quality.GetHashCode();
              if (IsBoss != false) hash ^= IsBoss.GetHashCode();
              if (CollectionFamilyGmtId.Length != 0) hash ^= CollectionFamilyGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Quality != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Quality);
              }
              if (IsBoss != false) {
                output.WriteRawTag(16);
                output.WriteBool(IsBoss);
              }
              if (CollectionFamilyGmtId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(CollectionFamilyGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Quality != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
              }
              if (IsBoss != false) {
                size += 1 + 1;
              }
              if (CollectionFamilyGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionFamilyGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(RunestoneVaultItem other) {
              if (other == null) {
                return;
              }
              if (other.Quality != 0) {
                Quality = other.Quality;
              }
              if (other.IsBoss != false) {
                IsBoss = other.IsBoss;
              }
              if (other.CollectionFamilyGmtId.Length != 0) {
                CollectionFamilyGmtId = other.CollectionFamilyGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Quality = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    IsBoss = input.ReadBool();
                    break;
                  }
                  case 26: {
                    CollectionFamilyGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class CauldronTimeItem : pb::IMessage<CauldronTimeItem> {
            private static readonly pb::MessageParser<CauldronTimeItem> _parser = new pb::MessageParser<CauldronTimeItem>(() => new CauldronTimeItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CauldronTimeItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CauldronTimeItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CauldronTimeItem(CauldronTimeItem other) : this() {
              availabilityTime_ = other.availabilityTime_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CauldronTimeItem Clone() {
              return new CauldronTimeItem(this);
            }

            /// <summary>Field number for the "availability_time" field.</summary>
            public const int AvailabilityTimeFieldNumber = 1;
            private long availabilityTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long AvailabilityTime {
              get { return availabilityTime_; }
              set {
                availabilityTime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CauldronTimeItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CauldronTimeItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AvailabilityTime != other.AvailabilityTime) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (AvailabilityTime != 0L) hash ^= AvailabilityTime.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (AvailabilityTime != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(AvailabilityTime);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (AvailabilityTime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailabilityTime);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CauldronTimeItem other) {
              if (other == null) {
                return;
              }
              if (other.AvailabilityTime != 0L) {
                AvailabilityTime = other.AvailabilityTime;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AvailabilityTime = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PotionIngredientVaultItem : pb::IMessage<PotionIngredientVaultItem> {
            private static readonly pb::MessageParser<PotionIngredientVaultItem> _parser = new pb::MessageParser<PotionIngredientVaultItem>(() => new PotionIngredientVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PotionIngredientVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionIngredientVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionIngredientVaultItem(PotionIngredientVaultItem other) : this() {
              cost_ = other.cost_ != null ? other.cost_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionIngredientVaultItem Clone() {
              return new PotionIngredientVaultItem(this);
            }

            /// <summary>Field number for the "cost" field.</summary>
            public const int CostFieldNumber = 1;
            private global::WUProtos.Data.Loot.LootReward.Types.LootCollection cost_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Cost {
              get { return cost_; }
              set {
                cost_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PotionIngredientVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PotionIngredientVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Cost, other.Cost)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (cost_ != null) hash ^= Cost.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (cost_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Cost);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (cost_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cost);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PotionIngredientVaultItem other) {
              if (other == null) {
                return;
              }
              if (other.cost_ != null) {
                if (cost_ == null) {
                  Cost = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                Cost.MergeFrom(other.Cost);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (cost_ == null) {
                      Cost = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                    }
                    input.ReadMessage(Cost);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PotionVaultItem : pb::IMessage<PotionVaultItem> {
            private static readonly pb::MessageParser<PotionVaultItem> _parser = new pb::MessageParser<PotionVaultItem>(() => new PotionVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PotionVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionVaultItem(PotionVaultItem other) : this() {
              consumableScenario_ = other.consumableScenario_.Clone();
              appliedBuffGmtId_ = other.appliedBuffGmtId_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotionVaultItem Clone() {
              return new PotionVaultItem(this);
            }

            /// <summary>Field number for the "consumable_scenario" field.</summary>
            public const int ConsumableScenarioFieldNumber = 3;
            private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Types.PotionConsumableScenario> _repeated_consumableScenario_codec
                = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Types.PotionConsumableScenario) x);
            private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Types.PotionConsumableScenario> consumableScenario_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Types.PotionConsumableScenario>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.VaultItem.Types.PotionVaultItem.Types.PotionConsumableScenario> ConsumableScenario {
              get { return consumableScenario_; }
            }

            /// <summary>Field number for the "applied_buff_gmt_id" field.</summary>
            public const int AppliedBuffGmtIdFieldNumber = 4;
            private static readonly pb::FieldCodec<string> _repeated_appliedBuffGmtId_codec
                = pb::FieldCodec.ForString(34);
            private readonly pbc::RepeatedField<string> appliedBuffGmtId_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> AppliedBuffGmtId {
              get { return appliedBuffGmtId_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PotionVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PotionVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!consumableScenario_.Equals(other.consumableScenario_)) return false;
              if(!appliedBuffGmtId_.Equals(other.appliedBuffGmtId_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= consumableScenario_.GetHashCode();
              hash ^= appliedBuffGmtId_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              consumableScenario_.WriteTo(output, _repeated_consumableScenario_codec);
              appliedBuffGmtId_.WriteTo(output, _repeated_appliedBuffGmtId_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += consumableScenario_.CalculateSize(_repeated_consumableScenario_codec);
              size += appliedBuffGmtId_.CalculateSize(_repeated_appliedBuffGmtId_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PotionVaultItem other) {
              if (other == null) {
                return;
              }
              consumableScenario_.Add(other.consumableScenario_);
              appliedBuffGmtId_.Add(other.appliedBuffGmtId_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 26:
                  case 24: {
                    consumableScenario_.AddEntriesFrom(input, _repeated_consumableScenario_codec);
                    break;
                  }
                  case 34: {
                    appliedBuffGmtId_.AddEntriesFrom(input, _repeated_appliedBuffGmtId_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the PotionVaultItem message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum PotionConsumableScenario {
                [pbr::OriginalName("UNKNOWN_CONSUMABLE_SCENARIO")] UnknownConsumableScenario = 0,
                [pbr::OriginalName("OVERWORLD")] Overworld = 1,
                [pbr::OriginalName("ENCOUNTER")] Encounter = 2,
                [pbr::OriginalName("SWISH_ENCOUNTER")] SwishEncounter = 3,
                [pbr::OriginalName("COMBAT_ENCOUNTER")] CombatEncounter = 4,
                [pbr::OriginalName("WC_ENCOUNTER")] WcEncounter = 5,
              }

            }
            #endregion

          }

          public sealed partial class ContainerVaultItem : pb::IMessage<ContainerVaultItem> {
            private static readonly pb::MessageParser<ContainerVaultItem> _parser = new pb::MessageParser<ContainerVaultItem>(() => new ContainerVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ContainerVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ContainerVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ContainerVaultItem(ContainerVaultItem other) : this() {
              contents_ = other.contents_ != null ? other.contents_.Clone() : null;
              autoConsume_ = other.autoConsume_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ContainerVaultItem Clone() {
              return new ContainerVaultItem(this);
            }

            /// <summary>Field number for the "contents" field.</summary>
            public const int ContentsFieldNumber = 1;
            private global::WUProtos.Data.Loot.LootReward.Types.LootCollection contents_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Contents {
              get { return contents_; }
              set {
                contents_ = value;
              }
            }

            /// <summary>Field number for the "auto_consume" field.</summary>
            public const int AutoConsumeFieldNumber = 2;
            private bool autoConsume_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool AutoConsume {
              get { return autoConsume_; }
              set {
                autoConsume_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ContainerVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ContainerVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Contents, other.Contents)) return false;
              if (AutoConsume != other.AutoConsume) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (contents_ != null) hash ^= Contents.GetHashCode();
              if (AutoConsume != false) hash ^= AutoConsume.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (contents_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Contents);
              }
              if (AutoConsume != false) {
                output.WriteRawTag(16);
                output.WriteBool(AutoConsume);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (contents_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contents);
              }
              if (AutoConsume != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ContainerVaultItem other) {
              if (other == null) {
                return;
              }
              if (other.contents_ != null) {
                if (contents_ == null) {
                  Contents = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                Contents.MergeFrom(other.Contents);
              }
              if (other.AutoConsume != false) {
                AutoConsume = other.AutoConsume;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (contents_ == null) {
                      Contents = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                    }
                    input.ReadMessage(Contents);
                    break;
                  }
                  case 16: {
                    AutoConsume = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class CurrencyVaultItem : pb::IMessage<CurrencyVaultItem> {
            private static readonly pb::MessageParser<CurrencyVaultItem> _parser = new pb::MessageParser<CurrencyVaultItem>(() => new CurrencyVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CurrencyVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CurrencyVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CurrencyVaultItem(CurrencyVaultItem other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CurrencyVaultItem Clone() {
              return new CurrencyVaultItem(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CurrencyVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CurrencyVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CurrencyVaultItem other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class DarkDetectorVaultItem : pb::IMessage<DarkDetectorVaultItem> {
            private static readonly pb::MessageParser<DarkDetectorVaultItem> _parser = new pb::MessageParser<DarkDetectorVaultItem>(() => new DarkDetectorVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DarkDetectorVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DarkDetectorVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DarkDetectorVaultItem(DarkDetectorVaultItem other) : this() {
              duration_ = other.duration_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DarkDetectorVaultItem Clone() {
              return new DarkDetectorVaultItem(this);
            }

            /// <summary>Field number for the "duration" field.</summary>
            public const int DurationFieldNumber = 1;
            private long duration_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Duration {
              get { return duration_; }
              set {
                duration_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DarkDetectorVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DarkDetectorVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Duration != other.Duration) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Duration != 0L) hash ^= Duration.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Duration != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Duration);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Duration != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DarkDetectorVaultItem other) {
              if (other == null) {
                return;
              }
              if (other.Duration != 0L) {
                Duration = other.Duration;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Duration = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class EnergyVaultItem : pb::IMessage<EnergyVaultItem> {
            private static readonly pb::MessageParser<EnergyVaultItem> _parser = new pb::MessageParser<EnergyVaultItem>(() => new EnergyVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EnergyVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnergyVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnergyVaultItem(EnergyVaultItem other) : this() {
              impact_ = other.impact_;
              spellEffect_ = other.spellEffect_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnergyVaultItem Clone() {
              return new EnergyVaultItem(this);
            }

            /// <summary>Field number for the "impact" field.</summary>
            public const int ImpactFieldNumber = 1;
            private float impact_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Impact {
              get { return impact_; }
              set {
                impact_ = value;
              }
            }

            /// <summary>Field number for the "spell_effect" field.</summary>
            public const int SpellEffectFieldNumber = 2;
            private int spellEffect_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int SpellEffect {
              get { return spellEffect_; }
              set {
                spellEffect_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EnergyVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EnergyVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Impact, other.Impact)) return false;
              if (SpellEffect != other.SpellEffect) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Impact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Impact);
              if (SpellEffect != 0) hash ^= SpellEffect.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Impact != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(Impact);
              }
              if (SpellEffect != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(SpellEffect);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Impact != 0F) {
                size += 1 + 4;
              }
              if (SpellEffect != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellEffect);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EnergyVaultItem other) {
              if (other == null) {
                return;
              }
              if (other.Impact != 0F) {
                Impact = other.Impact;
              }
              if (other.SpellEffect != 0) {
                SpellEffect = other.SpellEffect;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    Impact = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    SpellEffect = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class StaminaVaultItem : pb::IMessage<StaminaVaultItem> {
            private static readonly pb::MessageParser<StaminaVaultItem> _parser = new pb::MessageParser<StaminaVaultItem>(() => new StaminaVaultItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StaminaVaultItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[8]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StaminaVaultItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StaminaVaultItem(StaminaVaultItem other) : this() {
              impact_ = other.impact_;
              spellEffect_ = other.spellEffect_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StaminaVaultItem Clone() {
              return new StaminaVaultItem(this);
            }

            /// <summary>Field number for the "impact" field.</summary>
            public const int ImpactFieldNumber = 1;
            private float impact_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Impact {
              get { return impact_; }
              set {
                impact_ = value;
              }
            }

            /// <summary>Field number for the "spell_effect" field.</summary>
            public const int SpellEffectFieldNumber = 2;
            private int spellEffect_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int SpellEffect {
              get { return spellEffect_; }
              set {
                spellEffect_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StaminaVaultItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StaminaVaultItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Impact, other.Impact)) return false;
              if (SpellEffect != other.SpellEffect) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Impact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Impact);
              if (SpellEffect != 0) hash ^= SpellEffect.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Impact != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(Impact);
              }
              if (SpellEffect != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(SpellEffect);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Impact != 0F) {
                size += 1 + 4;
              }
              if (SpellEffect != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellEffect);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StaminaVaultItem other) {
              if (other == null) {
                return;
              }
              if (other.Impact != 0F) {
                Impact = other.Impact;
              }
              if (other.SpellEffect != 0) {
                SpellEffect = other.SpellEffect;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    Impact = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    SpellEffect = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PotTimeItem : pb::IMessage<PotTimeItem> {
            private static readonly pb::MessageParser<PotTimeItem> _parser = new pb::MessageParser<PotTimeItem>(() => new PotTimeItem());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PotTimeItem> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.VaultItem.Descriptor.NestedTypes[9]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotTimeItem() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotTimeItem(PotTimeItem other) : this() {
              availabilityTime_ = other.availabilityTime_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PotTimeItem Clone() {
              return new PotTimeItem(this);
            }

            /// <summary>Field number for the "availability_time" field.</summary>
            public const int AvailabilityTimeFieldNumber = 1;
            private long availabilityTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long AvailabilityTime {
              get { return availabilityTime_; }
              set {
                availabilityTime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PotTimeItem);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PotTimeItem other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (AvailabilityTime != other.AvailabilityTime) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (AvailabilityTime != 0L) hash ^= AvailabilityTime.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (AvailabilityTime != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(AvailabilityTime);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (AvailabilityTime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailabilityTime);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PotTimeItem other) {
              if (other == null) {
                return;
              }
              if (other.AvailabilityTime != 0L) {
                AvailabilityTime = other.AvailabilityTime;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    AvailabilityTime = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class GameConfig : pb::IMessage<GameConfig> {
        private static readonly pb::MessageParser<GameConfig> _parser = new pb::MessageParser<GameConfig>(() => new GameConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameConfig(GameConfig other) : this() {
          id_ = other.id_;
          pickupRange_ = other.pickupRange_;
          mapUpdateRate_ = other.mapUpdateRate_;
          mapEventUpdateRate_ = other.mapEventUpdateRate_;
          mapPuzzleUpdateRate_ = other.mapPuzzleUpdateRate_;
          tryAgainBonusPerFailure_ = other.tryAgainBonusPerFailure_;
          arModeRange_ = other.arModeRange_;
          arModeMaxEncounters_ = other.arModeMaxEncounters_;
          eventCoolDownDuration_ = other.eventCoolDownDuration_;
          combatStunTime_ = other.combatStunTime_;
          professionsMinLevel_ = other.professionsMinLevel_;
          accuracyMinBonus_ = other.accuracyMinBonus_;
          accuracyMaxBonus_ = other.accuracyMaxBonus_;
          encounterMinBaseWinRate_ = other.encounterMinBaseWinRate_;
          encounterMaxBaseWinRate_ = other.encounterMaxBaseWinRate_;
          playerLevelCap_ = other.playerLevelCap_;
          levelBonusWeight_ = other.levelBonusWeight_;
          gameplayBonusWeight_ = other.gameplayBonusWeight_;
          gameplayBonusMin_ = other.gameplayBonusMin_;
          gameplayBonusMax_ = other.gameplayBonusMax_;
          professionsRpsNonMatchImpact_ = other.professionsRpsNonMatchImpact_;
          professionsRpsMatchImpact_ = other.professionsRpsMatchImpact_;
          pubMenuRefreshIntervalSeconds_ = other.pubMenuRefreshIntervalSeconds_;
          flooNetworkConfig_ = other.flooNetworkConfig_ != null ? other.flooNetworkConfig_.Clone() : null;
          tempFlooNetworkConfig_ = other.tempFlooNetworkConfig_ != null ? other.tempFlooNetworkConfig_.Clone() : null;
          mapUnsafeMoveSpeedMps_ = other.mapUnsafeMoveSpeedMps_;
          portkeyNumWrackspurtsToCollect_ = other.portkeyNumWrackspurtsToCollect_;
          portkeyNumWrackspurtsInEnv_ = other.portkeyNumWrackspurtsInEnv_;
          playerStatsBase_ = other.playerStatsBase_.Clone();
          playerProfessionAffinityStrength_ = other.playerProfessionAffinityStrength_.Clone();
          enemyAffinityProfessionStrength_ = other.enemyAffinityProfessionStrength_.Clone();
          cauldronsNumQueueSlots_ = other.cauldronsNumQueueSlots_;
          swishGameAccuracyTiers_ = other.swishGameAccuracyTiers_.Clone();
          cauldronsInstantFinishCostPerSecond_ = other.cauldronsInstantFinishCostPerSecond_;
          cauldronsInstantFinishCurrencyId_ = other.cauldronsInstantFinishCurrencyId_;
          runeRatings_ = other.runeRatings_.Clone();
          tutorialEncounterId_ = other.tutorialEncounterId_;
          tutorialEncounterFeatureFlagId_ = other.tutorialEncounterFeatureFlagId_;
          bonusConfig_ = other.bonusConfig_ != null ? other.bonusConfig_.Clone() : null;
          maxWalkboxCapacity_ = other.maxWalkboxCapacity_;
          challengeCollectionFamilyId_ = other.challengeCollectionFamilyId_;
          dailyQuestGmtIds_ = other.dailyQuestGmtIds_.Clone();
          capPlayerLevelGmtId_ = other.capPlayerLevelGmtId_;
          greenhouseCoolDownMs_ = other.greenhouseCoolDownMs_;
          playerLevelOverride_ = other.playerLevelOverride_.Clone();
          innCoolDownMs_ = other.innCoolDownMs_;
          innMenuStalenessThresholdMs_ = other.innMenuStalenessThresholdMs_;
          dailyRewardScheduleGmtId_ = other.dailyRewardScheduleGmtId_;
          wcEncounterFirstInteractTimeoutMs_ = other.wcEncounterFirstInteractTimeoutMs_;
          wcEncounterInteractTimeoutMs_ = other.wcEncounterInteractTimeoutMs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameConfig Clone() {
          return new GameConfig(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pickup_range" field.</summary>
        public const int PickupRangeFieldNumber = 2;
        private float pickupRange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PickupRange {
          get { return pickupRange_; }
          set {
            pickupRange_ = value;
          }
        }

        /// <summary>Field number for the "map_update_rate" field.</summary>
        public const int MapUpdateRateFieldNumber = 3;
        private int mapUpdateRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapUpdateRate {
          get { return mapUpdateRate_; }
          set {
            mapUpdateRate_ = value;
          }
        }

        /// <summary>Field number for the "map_event_update_rate" field.</summary>
        public const int MapEventUpdateRateFieldNumber = 4;
        private int mapEventUpdateRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapEventUpdateRate {
          get { return mapEventUpdateRate_; }
          set {
            mapEventUpdateRate_ = value;
          }
        }

        /// <summary>Field number for the "map_puzzle_update_rate" field.</summary>
        public const int MapPuzzleUpdateRateFieldNumber = 5;
        private int mapPuzzleUpdateRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapPuzzleUpdateRate {
          get { return mapPuzzleUpdateRate_; }
          set {
            mapPuzzleUpdateRate_ = value;
          }
        }

        /// <summary>Field number for the "try_again_bonus_per_failure" field.</summary>
        public const int TryAgainBonusPerFailureFieldNumber = 6;
        private float tryAgainBonusPerFailure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float TryAgainBonusPerFailure {
          get { return tryAgainBonusPerFailure_; }
          set {
            tryAgainBonusPerFailure_ = value;
          }
        }

        /// <summary>Field number for the "ar_mode_range" field.</summary>
        public const int ArModeRangeFieldNumber = 7;
        private float arModeRange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ArModeRange {
          get { return arModeRange_; }
          set {
            arModeRange_ = value;
          }
        }

        /// <summary>Field number for the "ar_mode_max_encounters" field.</summary>
        public const int ArModeMaxEncountersFieldNumber = 8;
        private int arModeMaxEncounters_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ArModeMaxEncounters {
          get { return arModeMaxEncounters_; }
          set {
            arModeMaxEncounters_ = value;
          }
        }

        /// <summary>Field number for the "event_cool_down_duration" field.</summary>
        public const int EventCoolDownDurationFieldNumber = 9;
        private int eventCoolDownDuration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EventCoolDownDuration {
          get { return eventCoolDownDuration_; }
          set {
            eventCoolDownDuration_ = value;
          }
        }

        /// <summary>Field number for the "combat_stun_time" field.</summary>
        public const int CombatStunTimeFieldNumber = 10;
        private int combatStunTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CombatStunTime {
          get { return combatStunTime_; }
          set {
            combatStunTime_ = value;
          }
        }

        /// <summary>Field number for the "professions_min_level" field.</summary>
        public const int ProfessionsMinLevelFieldNumber = 11;
        private int professionsMinLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ProfessionsMinLevel {
          get { return professionsMinLevel_; }
          set {
            professionsMinLevel_ = value;
          }
        }

        /// <summary>Field number for the "accuracy_min_bonus" field.</summary>
        public const int AccuracyMinBonusFieldNumber = 12;
        private float accuracyMinBonus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AccuracyMinBonus {
          get { return accuracyMinBonus_; }
          set {
            accuracyMinBonus_ = value;
          }
        }

        /// <summary>Field number for the "accuracy_max_bonus" field.</summary>
        public const int AccuracyMaxBonusFieldNumber = 13;
        private float accuracyMaxBonus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AccuracyMaxBonus {
          get { return accuracyMaxBonus_; }
          set {
            accuracyMaxBonus_ = value;
          }
        }

        /// <summary>Field number for the "encounter_min_base_win_rate" field.</summary>
        public const int EncounterMinBaseWinRateFieldNumber = 14;
        private float encounterMinBaseWinRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EncounterMinBaseWinRate {
          get { return encounterMinBaseWinRate_; }
          set {
            encounterMinBaseWinRate_ = value;
          }
        }

        /// <summary>Field number for the "encounter_max_base_win_rate" field.</summary>
        public const int EncounterMaxBaseWinRateFieldNumber = 15;
        private float encounterMaxBaseWinRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EncounterMaxBaseWinRate {
          get { return encounterMaxBaseWinRate_; }
          set {
            encounterMaxBaseWinRate_ = value;
          }
        }

        /// <summary>Field number for the "player_level_cap" field.</summary>
        public const int PlayerLevelCapFieldNumber = 16;
        private int playerLevelCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevelCap {
          get { return playerLevelCap_; }
          set {
            playerLevelCap_ = value;
          }
        }

        /// <summary>Field number for the "level_bonus_weight" field.</summary>
        public const int LevelBonusWeightFieldNumber = 17;
        private float levelBonusWeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float LevelBonusWeight {
          get { return levelBonusWeight_; }
          set {
            levelBonusWeight_ = value;
          }
        }

        /// <summary>Field number for the "gameplay_bonus_weight" field.</summary>
        public const int GameplayBonusWeightFieldNumber = 18;
        private float gameplayBonusWeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GameplayBonusWeight {
          get { return gameplayBonusWeight_; }
          set {
            gameplayBonusWeight_ = value;
          }
        }

        /// <summary>Field number for the "gameplay_bonus_min" field.</summary>
        public const int GameplayBonusMinFieldNumber = 19;
        private float gameplayBonusMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GameplayBonusMin {
          get { return gameplayBonusMin_; }
          set {
            gameplayBonusMin_ = value;
          }
        }

        /// <summary>Field number for the "gameplay_bonus_max" field.</summary>
        public const int GameplayBonusMaxFieldNumber = 20;
        private float gameplayBonusMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GameplayBonusMax {
          get { return gameplayBonusMax_; }
          set {
            gameplayBonusMax_ = value;
          }
        }

        /// <summary>Field number for the "professions_rps_non_match_impact" field.</summary>
        public const int ProfessionsRpsNonMatchImpactFieldNumber = 21;
        private float professionsRpsNonMatchImpact_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ProfessionsRpsNonMatchImpact {
          get { return professionsRpsNonMatchImpact_; }
          set {
            professionsRpsNonMatchImpact_ = value;
          }
        }

        /// <summary>Field number for the "professions_rps_match_impact" field.</summary>
        public const int ProfessionsRpsMatchImpactFieldNumber = 22;
        private float professionsRpsMatchImpact_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ProfessionsRpsMatchImpact {
          get { return professionsRpsMatchImpact_; }
          set {
            professionsRpsMatchImpact_ = value;
          }
        }

        /// <summary>Field number for the "pub_menu_refresh_interval_seconds" field.</summary>
        public const int PubMenuRefreshIntervalSecondsFieldNumber = 23;
        private long pubMenuRefreshIntervalSeconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PubMenuRefreshIntervalSeconds {
          get { return pubMenuRefreshIntervalSeconds_; }
          set {
            pubMenuRefreshIntervalSeconds_ = value;
          }
        }

        /// <summary>Field number for the "floo_network_config" field.</summary>
        public const int FlooNetworkConfigFieldNumber = 24;
        private global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig flooNetworkConfig_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig FlooNetworkConfig {
          get { return flooNetworkConfig_; }
          set {
            flooNetworkConfig_ = value;
          }
        }

        /// <summary>Field number for the "temp_floo_network_config" field.</summary>
        public const int TempFlooNetworkConfigFieldNumber = 25;
        private global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.TempFlooNetworkConfig tempFlooNetworkConfig_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.TempFlooNetworkConfig TempFlooNetworkConfig {
          get { return tempFlooNetworkConfig_; }
          set {
            tempFlooNetworkConfig_ = value;
          }
        }

        /// <summary>Field number for the "map_unsafe_move_speed_mps" field.</summary>
        public const int MapUnsafeMoveSpeedMpsFieldNumber = 26;
        private float mapUnsafeMoveSpeedMps_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float MapUnsafeMoveSpeedMps {
          get { return mapUnsafeMoveSpeedMps_; }
          set {
            mapUnsafeMoveSpeedMps_ = value;
          }
        }

        /// <summary>Field number for the "portkey_num_wrackspurts_to_collect" field.</summary>
        public const int PortkeyNumWrackspurtsToCollectFieldNumber = 27;
        private int portkeyNumWrackspurtsToCollect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PortkeyNumWrackspurtsToCollect {
          get { return portkeyNumWrackspurtsToCollect_; }
          set {
            portkeyNumWrackspurtsToCollect_ = value;
          }
        }

        /// <summary>Field number for the "portkey_num_wrackspurts_in_env" field.</summary>
        public const int PortkeyNumWrackspurtsInEnvFieldNumber = 28;
        private int portkeyNumWrackspurtsInEnv_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PortkeyNumWrackspurtsInEnv {
          get { return portkeyNumWrackspurtsInEnv_; }
          set {
            portkeyNumWrackspurtsInEnv_ = value;
          }
        }

        /// <summary>Field number for the "player_stats_base" field.</summary>
        public const int PlayerStatsBaseFieldNumber = 30;
        private static readonly pbc::MapField<string, long>.Codec _map_playerStatsBase_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 242);
        private readonly pbc::MapField<string, long> playerStatsBase_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> PlayerStatsBase {
          get { return playerStatsBase_; }
        }

        /// <summary>Field number for the "player_profession_affinity_strength" field.</summary>
        public const int PlayerProfessionAffinityStrengthFieldNumber = 31;
        private static readonly pbc::MapField<string, string>.Codec _map_playerProfessionAffinityStrength_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 250);
        private readonly pbc::MapField<string, string> playerProfessionAffinityStrength_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> PlayerProfessionAffinityStrength {
          get { return playerProfessionAffinityStrength_; }
        }

        /// <summary>Field number for the "enemy_affinity_profession_strength" field.</summary>
        public const int EnemyAffinityProfessionStrengthFieldNumber = 32;
        private static readonly pbc::MapField<string, string>.Codec _map_enemyAffinityProfessionStrength_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 258);
        private readonly pbc::MapField<string, string> enemyAffinityProfessionStrength_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> EnemyAffinityProfessionStrength {
          get { return enemyAffinityProfessionStrength_; }
        }

        /// <summary>Field number for the "cauldrons_num_queue_slots" field.</summary>
        public const int CauldronsNumQueueSlotsFieldNumber = 33;
        private int cauldronsNumQueueSlots_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CauldronsNumQueueSlots {
          get { return cauldronsNumQueueSlots_; }
          set {
            cauldronsNumQueueSlots_ = value;
          }
        }

        /// <summary>Field number for the "swish_game_accuracy_tiers" field.</summary>
        public const int SwishGameAccuracyTiersFieldNumber = 34;
        private static readonly pb::FieldCodec<float> _repeated_swishGameAccuracyTiers_codec
            = pb::FieldCodec.ForFloat(274);
        private readonly pbc::RepeatedField<float> swishGameAccuracyTiers_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> SwishGameAccuracyTiers {
          get { return swishGameAccuracyTiers_; }
        }

        /// <summary>Field number for the "cauldrons_instant_finish_cost_per_second" field.</summary>
        public const int CauldronsInstantFinishCostPerSecondFieldNumber = 35;
        private float cauldronsInstantFinishCostPerSecond_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CauldronsInstantFinishCostPerSecond {
          get { return cauldronsInstantFinishCostPerSecond_; }
          set {
            cauldronsInstantFinishCostPerSecond_ = value;
          }
        }

        /// <summary>Field number for the "cauldrons_instant_finish_currency_id" field.</summary>
        public const int CauldronsInstantFinishCurrencyIdFieldNumber = 36;
        private string cauldronsInstantFinishCurrencyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CauldronsInstantFinishCurrencyId {
          get { return cauldronsInstantFinishCurrencyId_; }
          set {
            cauldronsInstantFinishCurrencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rune_ratings" field.</summary>
        public const int RuneRatingsFieldNumber = 37;
        private static readonly pbc::MapField<int, uint>.Codec _map_runeRatings_codec
            = new pbc::MapField<int, uint>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForUInt32(16), 298);
        private readonly pbc::MapField<int, uint> runeRatings_ = new pbc::MapField<int, uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, uint> RuneRatings {
          get { return runeRatings_; }
        }

        /// <summary>Field number for the "tutorial_encounter_id" field.</summary>
        public const int TutorialEncounterIdFieldNumber = 38;
        private string tutorialEncounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TutorialEncounterId {
          get { return tutorialEncounterId_; }
          set {
            tutorialEncounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tutorial_encounter_feature_flag_id" field.</summary>
        public const int TutorialEncounterFeatureFlagIdFieldNumber = 39;
        private string tutorialEncounterFeatureFlagId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TutorialEncounterFeatureFlagId {
          get { return tutorialEncounterFeatureFlagId_; }
          set {
            tutorialEncounterFeatureFlagId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bonus_config" field.</summary>
        public const int BonusConfigFieldNumber = 40;
        private global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.BonusConfig bonusConfig_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.BonusConfig BonusConfig {
          get { return bonusConfig_; }
          set {
            bonusConfig_ = value;
          }
        }

        /// <summary>Field number for the "max_walkbox_capacity" field.</summary>
        public const int MaxWalkboxCapacityFieldNumber = 41;
        private int maxWalkboxCapacity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxWalkboxCapacity {
          get { return maxWalkboxCapacity_; }
          set {
            maxWalkboxCapacity_ = value;
          }
        }

        /// <summary>Field number for the "challenge_collection_family_id" field.</summary>
        public const int ChallengeCollectionFamilyIdFieldNumber = 42;
        private string challengeCollectionFamilyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChallengeCollectionFamilyId {
          get { return challengeCollectionFamilyId_; }
          set {
            challengeCollectionFamilyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "daily_quest_gmt_ids" field.</summary>
        public const int DailyQuestGmtIdsFieldNumber = 43;
        private static readonly pb::FieldCodec<string> _repeated_dailyQuestGmtIds_codec
            = pb::FieldCodec.ForString(346);
        private readonly pbc::RepeatedField<string> dailyQuestGmtIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> DailyQuestGmtIds {
          get { return dailyQuestGmtIds_; }
        }

        /// <summary>Field number for the "cap_player_level_gmt_id" field.</summary>
        public const int CapPlayerLevelGmtIdFieldNumber = 44;
        private string capPlayerLevelGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CapPlayerLevelGmtId {
          get { return capPlayerLevelGmtId_; }
          set {
            capPlayerLevelGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "greenhouse_cool_down_ms" field.</summary>
        public const int GreenhouseCoolDownMsFieldNumber = 45;
        private long greenhouseCoolDownMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long GreenhouseCoolDownMs {
          get { return greenhouseCoolDownMs_; }
          set {
            greenhouseCoolDownMs_ = value;
          }
        }

        /// <summary>Field number for the "player_level_override" field.</summary>
        public const int PlayerLevelOverrideFieldNumber = 46;
        private static readonly pbc::MapField<int, int>.Codec _map_playerLevelOverride_codec
            = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 370);
        private readonly pbc::MapField<int, int> playerLevelOverride_ = new pbc::MapField<int, int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, int> PlayerLevelOverride {
          get { return playerLevelOverride_; }
        }

        /// <summary>Field number for the "inn_cool_down_ms" field.</summary>
        public const int InnCoolDownMsFieldNumber = 47;
        private long innCoolDownMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InnCoolDownMs {
          get { return innCoolDownMs_; }
          set {
            innCoolDownMs_ = value;
          }
        }

        /// <summary>Field number for the "inn_menu_staleness_threshold_ms" field.</summary>
        public const int InnMenuStalenessThresholdMsFieldNumber = 48;
        private long innMenuStalenessThresholdMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InnMenuStalenessThresholdMs {
          get { return innMenuStalenessThresholdMs_; }
          set {
            innMenuStalenessThresholdMs_ = value;
          }
        }

        /// <summary>Field number for the "daily_reward_schedule_gmt_id" field.</summary>
        public const int DailyRewardScheduleGmtIdFieldNumber = 49;
        private string dailyRewardScheduleGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DailyRewardScheduleGmtId {
          get { return dailyRewardScheduleGmtId_; }
          set {
            dailyRewardScheduleGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wc_encounter_first_interact_timeout_ms" field.</summary>
        public const int WcEncounterFirstInteractTimeoutMsFieldNumber = 50;
        private long wcEncounterFirstInteractTimeoutMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WcEncounterFirstInteractTimeoutMs {
          get { return wcEncounterFirstInteractTimeoutMs_; }
          set {
            wcEncounterFirstInteractTimeoutMs_ = value;
          }
        }

        /// <summary>Field number for the "wc_encounter_interact_timeout_ms" field.</summary>
        public const int WcEncounterInteractTimeoutMsFieldNumber = 51;
        private long wcEncounterInteractTimeoutMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WcEncounterInteractTimeoutMs {
          get { return wcEncounterInteractTimeoutMs_; }
          set {
            wcEncounterInteractTimeoutMs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PickupRange, other.PickupRange)) return false;
          if (MapUpdateRate != other.MapUpdateRate) return false;
          if (MapEventUpdateRate != other.MapEventUpdateRate) return false;
          if (MapPuzzleUpdateRate != other.MapPuzzleUpdateRate) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TryAgainBonusPerFailure, other.TryAgainBonusPerFailure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArModeRange, other.ArModeRange)) return false;
          if (ArModeMaxEncounters != other.ArModeMaxEncounters) return false;
          if (EventCoolDownDuration != other.EventCoolDownDuration) return false;
          if (CombatStunTime != other.CombatStunTime) return false;
          if (ProfessionsMinLevel != other.ProfessionsMinLevel) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccuracyMinBonus, other.AccuracyMinBonus)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccuracyMaxBonus, other.AccuracyMaxBonus)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EncounterMinBaseWinRate, other.EncounterMinBaseWinRate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EncounterMaxBaseWinRate, other.EncounterMaxBaseWinRate)) return false;
          if (PlayerLevelCap != other.PlayerLevelCap) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LevelBonusWeight, other.LevelBonusWeight)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameplayBonusWeight, other.GameplayBonusWeight)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameplayBonusMin, other.GameplayBonusMin)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameplayBonusMax, other.GameplayBonusMax)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProfessionsRpsNonMatchImpact, other.ProfessionsRpsNonMatchImpact)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProfessionsRpsMatchImpact, other.ProfessionsRpsMatchImpact)) return false;
          if (PubMenuRefreshIntervalSeconds != other.PubMenuRefreshIntervalSeconds) return false;
          if (!object.Equals(FlooNetworkConfig, other.FlooNetworkConfig)) return false;
          if (!object.Equals(TempFlooNetworkConfig, other.TempFlooNetworkConfig)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapUnsafeMoveSpeedMps, other.MapUnsafeMoveSpeedMps)) return false;
          if (PortkeyNumWrackspurtsToCollect != other.PortkeyNumWrackspurtsToCollect) return false;
          if (PortkeyNumWrackspurtsInEnv != other.PortkeyNumWrackspurtsInEnv) return false;
          if (!PlayerStatsBase.Equals(other.PlayerStatsBase)) return false;
          if (!PlayerProfessionAffinityStrength.Equals(other.PlayerProfessionAffinityStrength)) return false;
          if (!EnemyAffinityProfessionStrength.Equals(other.EnemyAffinityProfessionStrength)) return false;
          if (CauldronsNumQueueSlots != other.CauldronsNumQueueSlots) return false;
          if(!swishGameAccuracyTiers_.Equals(other.swishGameAccuracyTiers_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CauldronsInstantFinishCostPerSecond, other.CauldronsInstantFinishCostPerSecond)) return false;
          if (CauldronsInstantFinishCurrencyId != other.CauldronsInstantFinishCurrencyId) return false;
          if (!RuneRatings.Equals(other.RuneRatings)) return false;
          if (TutorialEncounterId != other.TutorialEncounterId) return false;
          if (TutorialEncounterFeatureFlagId != other.TutorialEncounterFeatureFlagId) return false;
          if (!object.Equals(BonusConfig, other.BonusConfig)) return false;
          if (MaxWalkboxCapacity != other.MaxWalkboxCapacity) return false;
          if (ChallengeCollectionFamilyId != other.ChallengeCollectionFamilyId) return false;
          if(!dailyQuestGmtIds_.Equals(other.dailyQuestGmtIds_)) return false;
          if (CapPlayerLevelGmtId != other.CapPlayerLevelGmtId) return false;
          if (GreenhouseCoolDownMs != other.GreenhouseCoolDownMs) return false;
          if (!PlayerLevelOverride.Equals(other.PlayerLevelOverride)) return false;
          if (InnCoolDownMs != other.InnCoolDownMs) return false;
          if (InnMenuStalenessThresholdMs != other.InnMenuStalenessThresholdMs) return false;
          if (DailyRewardScheduleGmtId != other.DailyRewardScheduleGmtId) return false;
          if (WcEncounterFirstInteractTimeoutMs != other.WcEncounterFirstInteractTimeoutMs) return false;
          if (WcEncounterInteractTimeoutMs != other.WcEncounterInteractTimeoutMs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (PickupRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PickupRange);
          if (MapUpdateRate != 0) hash ^= MapUpdateRate.GetHashCode();
          if (MapEventUpdateRate != 0) hash ^= MapEventUpdateRate.GetHashCode();
          if (MapPuzzleUpdateRate != 0) hash ^= MapPuzzleUpdateRate.GetHashCode();
          if (TryAgainBonusPerFailure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TryAgainBonusPerFailure);
          if (ArModeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArModeRange);
          if (ArModeMaxEncounters != 0) hash ^= ArModeMaxEncounters.GetHashCode();
          if (EventCoolDownDuration != 0) hash ^= EventCoolDownDuration.GetHashCode();
          if (CombatStunTime != 0) hash ^= CombatStunTime.GetHashCode();
          if (ProfessionsMinLevel != 0) hash ^= ProfessionsMinLevel.GetHashCode();
          if (AccuracyMinBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccuracyMinBonus);
          if (AccuracyMaxBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccuracyMaxBonus);
          if (EncounterMinBaseWinRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EncounterMinBaseWinRate);
          if (EncounterMaxBaseWinRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EncounterMaxBaseWinRate);
          if (PlayerLevelCap != 0) hash ^= PlayerLevelCap.GetHashCode();
          if (LevelBonusWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LevelBonusWeight);
          if (GameplayBonusWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameplayBonusWeight);
          if (GameplayBonusMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameplayBonusMin);
          if (GameplayBonusMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameplayBonusMax);
          if (ProfessionsRpsNonMatchImpact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProfessionsRpsNonMatchImpact);
          if (ProfessionsRpsMatchImpact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProfessionsRpsMatchImpact);
          if (PubMenuRefreshIntervalSeconds != 0L) hash ^= PubMenuRefreshIntervalSeconds.GetHashCode();
          if (flooNetworkConfig_ != null) hash ^= FlooNetworkConfig.GetHashCode();
          if (tempFlooNetworkConfig_ != null) hash ^= TempFlooNetworkConfig.GetHashCode();
          if (MapUnsafeMoveSpeedMps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapUnsafeMoveSpeedMps);
          if (PortkeyNumWrackspurtsToCollect != 0) hash ^= PortkeyNumWrackspurtsToCollect.GetHashCode();
          if (PortkeyNumWrackspurtsInEnv != 0) hash ^= PortkeyNumWrackspurtsInEnv.GetHashCode();
          hash ^= PlayerStatsBase.GetHashCode();
          hash ^= PlayerProfessionAffinityStrength.GetHashCode();
          hash ^= EnemyAffinityProfessionStrength.GetHashCode();
          if (CauldronsNumQueueSlots != 0) hash ^= CauldronsNumQueueSlots.GetHashCode();
          hash ^= swishGameAccuracyTiers_.GetHashCode();
          if (CauldronsInstantFinishCostPerSecond != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CauldronsInstantFinishCostPerSecond);
          if (CauldronsInstantFinishCurrencyId.Length != 0) hash ^= CauldronsInstantFinishCurrencyId.GetHashCode();
          hash ^= RuneRatings.GetHashCode();
          if (TutorialEncounterId.Length != 0) hash ^= TutorialEncounterId.GetHashCode();
          if (TutorialEncounterFeatureFlagId.Length != 0) hash ^= TutorialEncounterFeatureFlagId.GetHashCode();
          if (bonusConfig_ != null) hash ^= BonusConfig.GetHashCode();
          if (MaxWalkboxCapacity != 0) hash ^= MaxWalkboxCapacity.GetHashCode();
          if (ChallengeCollectionFamilyId.Length != 0) hash ^= ChallengeCollectionFamilyId.GetHashCode();
          hash ^= dailyQuestGmtIds_.GetHashCode();
          if (CapPlayerLevelGmtId.Length != 0) hash ^= CapPlayerLevelGmtId.GetHashCode();
          if (GreenhouseCoolDownMs != 0L) hash ^= GreenhouseCoolDownMs.GetHashCode();
          hash ^= PlayerLevelOverride.GetHashCode();
          if (InnCoolDownMs != 0L) hash ^= InnCoolDownMs.GetHashCode();
          if (InnMenuStalenessThresholdMs != 0L) hash ^= InnMenuStalenessThresholdMs.GetHashCode();
          if (DailyRewardScheduleGmtId.Length != 0) hash ^= DailyRewardScheduleGmtId.GetHashCode();
          if (WcEncounterFirstInteractTimeoutMs != 0L) hash ^= WcEncounterFirstInteractTimeoutMs.GetHashCode();
          if (WcEncounterInteractTimeoutMs != 0L) hash ^= WcEncounterInteractTimeoutMs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (PickupRange != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(PickupRange);
          }
          if (MapUpdateRate != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(MapUpdateRate);
          }
          if (MapEventUpdateRate != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MapEventUpdateRate);
          }
          if (MapPuzzleUpdateRate != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(MapPuzzleUpdateRate);
          }
          if (TryAgainBonusPerFailure != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(TryAgainBonusPerFailure);
          }
          if (ArModeRange != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(ArModeRange);
          }
          if (ArModeMaxEncounters != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(ArModeMaxEncounters);
          }
          if (EventCoolDownDuration != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(EventCoolDownDuration);
          }
          if (CombatStunTime != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(CombatStunTime);
          }
          if (ProfessionsMinLevel != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(ProfessionsMinLevel);
          }
          if (AccuracyMinBonus != 0F) {
            output.WriteRawTag(101);
            output.WriteFloat(AccuracyMinBonus);
          }
          if (AccuracyMaxBonus != 0F) {
            output.WriteRawTag(109);
            output.WriteFloat(AccuracyMaxBonus);
          }
          if (EncounterMinBaseWinRate != 0F) {
            output.WriteRawTag(117);
            output.WriteFloat(EncounterMinBaseWinRate);
          }
          if (EncounterMaxBaseWinRate != 0F) {
            output.WriteRawTag(125);
            output.WriteFloat(EncounterMaxBaseWinRate);
          }
          if (PlayerLevelCap != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(PlayerLevelCap);
          }
          if (LevelBonusWeight != 0F) {
            output.WriteRawTag(141, 1);
            output.WriteFloat(LevelBonusWeight);
          }
          if (GameplayBonusWeight != 0F) {
            output.WriteRawTag(149, 1);
            output.WriteFloat(GameplayBonusWeight);
          }
          if (GameplayBonusMin != 0F) {
            output.WriteRawTag(157, 1);
            output.WriteFloat(GameplayBonusMin);
          }
          if (GameplayBonusMax != 0F) {
            output.WriteRawTag(165, 1);
            output.WriteFloat(GameplayBonusMax);
          }
          if (ProfessionsRpsNonMatchImpact != 0F) {
            output.WriteRawTag(173, 1);
            output.WriteFloat(ProfessionsRpsNonMatchImpact);
          }
          if (ProfessionsRpsMatchImpact != 0F) {
            output.WriteRawTag(181, 1);
            output.WriteFloat(ProfessionsRpsMatchImpact);
          }
          if (PubMenuRefreshIntervalSeconds != 0L) {
            output.WriteRawTag(184, 1);
            output.WriteInt64(PubMenuRefreshIntervalSeconds);
          }
          if (flooNetworkConfig_ != null) {
            output.WriteRawTag(194, 1);
            output.WriteMessage(FlooNetworkConfig);
          }
          if (tempFlooNetworkConfig_ != null) {
            output.WriteRawTag(202, 1);
            output.WriteMessage(TempFlooNetworkConfig);
          }
          if (MapUnsafeMoveSpeedMps != 0F) {
            output.WriteRawTag(213, 1);
            output.WriteFloat(MapUnsafeMoveSpeedMps);
          }
          if (PortkeyNumWrackspurtsToCollect != 0) {
            output.WriteRawTag(216, 1);
            output.WriteInt32(PortkeyNumWrackspurtsToCollect);
          }
          if (PortkeyNumWrackspurtsInEnv != 0) {
            output.WriteRawTag(224, 1);
            output.WriteInt32(PortkeyNumWrackspurtsInEnv);
          }
          playerStatsBase_.WriteTo(output, _map_playerStatsBase_codec);
          playerProfessionAffinityStrength_.WriteTo(output, _map_playerProfessionAffinityStrength_codec);
          enemyAffinityProfessionStrength_.WriteTo(output, _map_enemyAffinityProfessionStrength_codec);
          if (CauldronsNumQueueSlots != 0) {
            output.WriteRawTag(136, 2);
            output.WriteInt32(CauldronsNumQueueSlots);
          }
          swishGameAccuracyTiers_.WriteTo(output, _repeated_swishGameAccuracyTiers_codec);
          if (CauldronsInstantFinishCostPerSecond != 0F) {
            output.WriteRawTag(157, 2);
            output.WriteFloat(CauldronsInstantFinishCostPerSecond);
          }
          if (CauldronsInstantFinishCurrencyId.Length != 0) {
            output.WriteRawTag(162, 2);
            output.WriteString(CauldronsInstantFinishCurrencyId);
          }
          runeRatings_.WriteTo(output, _map_runeRatings_codec);
          if (TutorialEncounterId.Length != 0) {
            output.WriteRawTag(178, 2);
            output.WriteString(TutorialEncounterId);
          }
          if (TutorialEncounterFeatureFlagId.Length != 0) {
            output.WriteRawTag(186, 2);
            output.WriteString(TutorialEncounterFeatureFlagId);
          }
          if (bonusConfig_ != null) {
            output.WriteRawTag(194, 2);
            output.WriteMessage(BonusConfig);
          }
          if (MaxWalkboxCapacity != 0) {
            output.WriteRawTag(200, 2);
            output.WriteInt32(MaxWalkboxCapacity);
          }
          if (ChallengeCollectionFamilyId.Length != 0) {
            output.WriteRawTag(210, 2);
            output.WriteString(ChallengeCollectionFamilyId);
          }
          dailyQuestGmtIds_.WriteTo(output, _repeated_dailyQuestGmtIds_codec);
          if (CapPlayerLevelGmtId.Length != 0) {
            output.WriteRawTag(226, 2);
            output.WriteString(CapPlayerLevelGmtId);
          }
          if (GreenhouseCoolDownMs != 0L) {
            output.WriteRawTag(232, 2);
            output.WriteInt64(GreenhouseCoolDownMs);
          }
          playerLevelOverride_.WriteTo(output, _map_playerLevelOverride_codec);
          if (InnCoolDownMs != 0L) {
            output.WriteRawTag(248, 2);
            output.WriteInt64(InnCoolDownMs);
          }
          if (InnMenuStalenessThresholdMs != 0L) {
            output.WriteRawTag(128, 3);
            output.WriteInt64(InnMenuStalenessThresholdMs);
          }
          if (DailyRewardScheduleGmtId.Length != 0) {
            output.WriteRawTag(138, 3);
            output.WriteString(DailyRewardScheduleGmtId);
          }
          if (WcEncounterFirstInteractTimeoutMs != 0L) {
            output.WriteRawTag(144, 3);
            output.WriteInt64(WcEncounterFirstInteractTimeoutMs);
          }
          if (WcEncounterInteractTimeoutMs != 0L) {
            output.WriteRawTag(152, 3);
            output.WriteInt64(WcEncounterInteractTimeoutMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (PickupRange != 0F) {
            size += 1 + 4;
          }
          if (MapUpdateRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapUpdateRate);
          }
          if (MapEventUpdateRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapEventUpdateRate);
          }
          if (MapPuzzleUpdateRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapPuzzleUpdateRate);
          }
          if (TryAgainBonusPerFailure != 0F) {
            size += 1 + 4;
          }
          if (ArModeRange != 0F) {
            size += 1 + 4;
          }
          if (ArModeMaxEncounters != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArModeMaxEncounters);
          }
          if (EventCoolDownDuration != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventCoolDownDuration);
          }
          if (CombatStunTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombatStunTime);
          }
          if (ProfessionsMinLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProfessionsMinLevel);
          }
          if (AccuracyMinBonus != 0F) {
            size += 1 + 4;
          }
          if (AccuracyMaxBonus != 0F) {
            size += 1 + 4;
          }
          if (EncounterMinBaseWinRate != 0F) {
            size += 1 + 4;
          }
          if (EncounterMaxBaseWinRate != 0F) {
            size += 1 + 4;
          }
          if (PlayerLevelCap != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevelCap);
          }
          if (LevelBonusWeight != 0F) {
            size += 2 + 4;
          }
          if (GameplayBonusWeight != 0F) {
            size += 2 + 4;
          }
          if (GameplayBonusMin != 0F) {
            size += 2 + 4;
          }
          if (GameplayBonusMax != 0F) {
            size += 2 + 4;
          }
          if (ProfessionsRpsNonMatchImpact != 0F) {
            size += 2 + 4;
          }
          if (ProfessionsRpsMatchImpact != 0F) {
            size += 2 + 4;
          }
          if (PubMenuRefreshIntervalSeconds != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(PubMenuRefreshIntervalSeconds);
          }
          if (flooNetworkConfig_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(FlooNetworkConfig);
          }
          if (tempFlooNetworkConfig_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(TempFlooNetworkConfig);
          }
          if (MapUnsafeMoveSpeedMps != 0F) {
            size += 2 + 4;
          }
          if (PortkeyNumWrackspurtsToCollect != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PortkeyNumWrackspurtsToCollect);
          }
          if (PortkeyNumWrackspurtsInEnv != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PortkeyNumWrackspurtsInEnv);
          }
          size += playerStatsBase_.CalculateSize(_map_playerStatsBase_codec);
          size += playerProfessionAffinityStrength_.CalculateSize(_map_playerProfessionAffinityStrength_codec);
          size += enemyAffinityProfessionStrength_.CalculateSize(_map_enemyAffinityProfessionStrength_codec);
          if (CauldronsNumQueueSlots != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(CauldronsNumQueueSlots);
          }
          size += swishGameAccuracyTiers_.CalculateSize(_repeated_swishGameAccuracyTiers_codec);
          if (CauldronsInstantFinishCostPerSecond != 0F) {
            size += 2 + 4;
          }
          if (CauldronsInstantFinishCurrencyId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(CauldronsInstantFinishCurrencyId);
          }
          size += runeRatings_.CalculateSize(_map_runeRatings_codec);
          if (TutorialEncounterId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(TutorialEncounterId);
          }
          if (TutorialEncounterFeatureFlagId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(TutorialEncounterFeatureFlagId);
          }
          if (bonusConfig_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusConfig);
          }
          if (MaxWalkboxCapacity != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxWalkboxCapacity);
          }
          if (ChallengeCollectionFamilyId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ChallengeCollectionFamilyId);
          }
          size += dailyQuestGmtIds_.CalculateSize(_repeated_dailyQuestGmtIds_codec);
          if (CapPlayerLevelGmtId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(CapPlayerLevelGmtId);
          }
          if (GreenhouseCoolDownMs != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(GreenhouseCoolDownMs);
          }
          size += playerLevelOverride_.CalculateSize(_map_playerLevelOverride_codec);
          if (InnCoolDownMs != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(InnCoolDownMs);
          }
          if (InnMenuStalenessThresholdMs != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(InnMenuStalenessThresholdMs);
          }
          if (DailyRewardScheduleGmtId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DailyRewardScheduleGmtId);
          }
          if (WcEncounterFirstInteractTimeoutMs != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(WcEncounterFirstInteractTimeoutMs);
          }
          if (WcEncounterInteractTimeoutMs != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(WcEncounterInteractTimeoutMs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameConfig other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.PickupRange != 0F) {
            PickupRange = other.PickupRange;
          }
          if (other.MapUpdateRate != 0) {
            MapUpdateRate = other.MapUpdateRate;
          }
          if (other.MapEventUpdateRate != 0) {
            MapEventUpdateRate = other.MapEventUpdateRate;
          }
          if (other.MapPuzzleUpdateRate != 0) {
            MapPuzzleUpdateRate = other.MapPuzzleUpdateRate;
          }
          if (other.TryAgainBonusPerFailure != 0F) {
            TryAgainBonusPerFailure = other.TryAgainBonusPerFailure;
          }
          if (other.ArModeRange != 0F) {
            ArModeRange = other.ArModeRange;
          }
          if (other.ArModeMaxEncounters != 0) {
            ArModeMaxEncounters = other.ArModeMaxEncounters;
          }
          if (other.EventCoolDownDuration != 0) {
            EventCoolDownDuration = other.EventCoolDownDuration;
          }
          if (other.CombatStunTime != 0) {
            CombatStunTime = other.CombatStunTime;
          }
          if (other.ProfessionsMinLevel != 0) {
            ProfessionsMinLevel = other.ProfessionsMinLevel;
          }
          if (other.AccuracyMinBonus != 0F) {
            AccuracyMinBonus = other.AccuracyMinBonus;
          }
          if (other.AccuracyMaxBonus != 0F) {
            AccuracyMaxBonus = other.AccuracyMaxBonus;
          }
          if (other.EncounterMinBaseWinRate != 0F) {
            EncounterMinBaseWinRate = other.EncounterMinBaseWinRate;
          }
          if (other.EncounterMaxBaseWinRate != 0F) {
            EncounterMaxBaseWinRate = other.EncounterMaxBaseWinRate;
          }
          if (other.PlayerLevelCap != 0) {
            PlayerLevelCap = other.PlayerLevelCap;
          }
          if (other.LevelBonusWeight != 0F) {
            LevelBonusWeight = other.LevelBonusWeight;
          }
          if (other.GameplayBonusWeight != 0F) {
            GameplayBonusWeight = other.GameplayBonusWeight;
          }
          if (other.GameplayBonusMin != 0F) {
            GameplayBonusMin = other.GameplayBonusMin;
          }
          if (other.GameplayBonusMax != 0F) {
            GameplayBonusMax = other.GameplayBonusMax;
          }
          if (other.ProfessionsRpsNonMatchImpact != 0F) {
            ProfessionsRpsNonMatchImpact = other.ProfessionsRpsNonMatchImpact;
          }
          if (other.ProfessionsRpsMatchImpact != 0F) {
            ProfessionsRpsMatchImpact = other.ProfessionsRpsMatchImpact;
          }
          if (other.PubMenuRefreshIntervalSeconds != 0L) {
            PubMenuRefreshIntervalSeconds = other.PubMenuRefreshIntervalSeconds;
          }
          if (other.flooNetworkConfig_ != null) {
            if (flooNetworkConfig_ == null) {
              FlooNetworkConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig();
            }
            FlooNetworkConfig.MergeFrom(other.FlooNetworkConfig);
          }
          if (other.tempFlooNetworkConfig_ != null) {
            if (tempFlooNetworkConfig_ == null) {
              TempFlooNetworkConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.TempFlooNetworkConfig();
            }
            TempFlooNetworkConfig.MergeFrom(other.TempFlooNetworkConfig);
          }
          if (other.MapUnsafeMoveSpeedMps != 0F) {
            MapUnsafeMoveSpeedMps = other.MapUnsafeMoveSpeedMps;
          }
          if (other.PortkeyNumWrackspurtsToCollect != 0) {
            PortkeyNumWrackspurtsToCollect = other.PortkeyNumWrackspurtsToCollect;
          }
          if (other.PortkeyNumWrackspurtsInEnv != 0) {
            PortkeyNumWrackspurtsInEnv = other.PortkeyNumWrackspurtsInEnv;
          }
          playerStatsBase_.Add(other.playerStatsBase_);
          playerProfessionAffinityStrength_.Add(other.playerProfessionAffinityStrength_);
          enemyAffinityProfessionStrength_.Add(other.enemyAffinityProfessionStrength_);
          if (other.CauldronsNumQueueSlots != 0) {
            CauldronsNumQueueSlots = other.CauldronsNumQueueSlots;
          }
          swishGameAccuracyTiers_.Add(other.swishGameAccuracyTiers_);
          if (other.CauldronsInstantFinishCostPerSecond != 0F) {
            CauldronsInstantFinishCostPerSecond = other.CauldronsInstantFinishCostPerSecond;
          }
          if (other.CauldronsInstantFinishCurrencyId.Length != 0) {
            CauldronsInstantFinishCurrencyId = other.CauldronsInstantFinishCurrencyId;
          }
          runeRatings_.Add(other.runeRatings_);
          if (other.TutorialEncounterId.Length != 0) {
            TutorialEncounterId = other.TutorialEncounterId;
          }
          if (other.TutorialEncounterFeatureFlagId.Length != 0) {
            TutorialEncounterFeatureFlagId = other.TutorialEncounterFeatureFlagId;
          }
          if (other.bonusConfig_ != null) {
            if (bonusConfig_ == null) {
              BonusConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.BonusConfig();
            }
            BonusConfig.MergeFrom(other.BonusConfig);
          }
          if (other.MaxWalkboxCapacity != 0) {
            MaxWalkboxCapacity = other.MaxWalkboxCapacity;
          }
          if (other.ChallengeCollectionFamilyId.Length != 0) {
            ChallengeCollectionFamilyId = other.ChallengeCollectionFamilyId;
          }
          dailyQuestGmtIds_.Add(other.dailyQuestGmtIds_);
          if (other.CapPlayerLevelGmtId.Length != 0) {
            CapPlayerLevelGmtId = other.CapPlayerLevelGmtId;
          }
          if (other.GreenhouseCoolDownMs != 0L) {
            GreenhouseCoolDownMs = other.GreenhouseCoolDownMs;
          }
          playerLevelOverride_.Add(other.playerLevelOverride_);
          if (other.InnCoolDownMs != 0L) {
            InnCoolDownMs = other.InnCoolDownMs;
          }
          if (other.InnMenuStalenessThresholdMs != 0L) {
            InnMenuStalenessThresholdMs = other.InnMenuStalenessThresholdMs;
          }
          if (other.DailyRewardScheduleGmtId.Length != 0) {
            DailyRewardScheduleGmtId = other.DailyRewardScheduleGmtId;
          }
          if (other.WcEncounterFirstInteractTimeoutMs != 0L) {
            WcEncounterFirstInteractTimeoutMs = other.WcEncounterFirstInteractTimeoutMs;
          }
          if (other.WcEncounterInteractTimeoutMs != 0L) {
            WcEncounterInteractTimeoutMs = other.WcEncounterInteractTimeoutMs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 21: {
                PickupRange = input.ReadFloat();
                break;
              }
              case 24: {
                MapUpdateRate = input.ReadInt32();
                break;
              }
              case 32: {
                MapEventUpdateRate = input.ReadInt32();
                break;
              }
              case 40: {
                MapPuzzleUpdateRate = input.ReadInt32();
                break;
              }
              case 53: {
                TryAgainBonusPerFailure = input.ReadFloat();
                break;
              }
              case 61: {
                ArModeRange = input.ReadFloat();
                break;
              }
              case 64: {
                ArModeMaxEncounters = input.ReadInt32();
                break;
              }
              case 72: {
                EventCoolDownDuration = input.ReadInt32();
                break;
              }
              case 80: {
                CombatStunTime = input.ReadInt32();
                break;
              }
              case 88: {
                ProfessionsMinLevel = input.ReadInt32();
                break;
              }
              case 101: {
                AccuracyMinBonus = input.ReadFloat();
                break;
              }
              case 109: {
                AccuracyMaxBonus = input.ReadFloat();
                break;
              }
              case 117: {
                EncounterMinBaseWinRate = input.ReadFloat();
                break;
              }
              case 125: {
                EncounterMaxBaseWinRate = input.ReadFloat();
                break;
              }
              case 128: {
                PlayerLevelCap = input.ReadInt32();
                break;
              }
              case 141: {
                LevelBonusWeight = input.ReadFloat();
                break;
              }
              case 149: {
                GameplayBonusWeight = input.ReadFloat();
                break;
              }
              case 157: {
                GameplayBonusMin = input.ReadFloat();
                break;
              }
              case 165: {
                GameplayBonusMax = input.ReadFloat();
                break;
              }
              case 173: {
                ProfessionsRpsNonMatchImpact = input.ReadFloat();
                break;
              }
              case 181: {
                ProfessionsRpsMatchImpact = input.ReadFloat();
                break;
              }
              case 184: {
                PubMenuRefreshIntervalSeconds = input.ReadInt64();
                break;
              }
              case 194: {
                if (flooNetworkConfig_ == null) {
                  FlooNetworkConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig();
                }
                input.ReadMessage(FlooNetworkConfig);
                break;
              }
              case 202: {
                if (tempFlooNetworkConfig_ == null) {
                  TempFlooNetworkConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.TempFlooNetworkConfig();
                }
                input.ReadMessage(TempFlooNetworkConfig);
                break;
              }
              case 213: {
                MapUnsafeMoveSpeedMps = input.ReadFloat();
                break;
              }
              case 216: {
                PortkeyNumWrackspurtsToCollect = input.ReadInt32();
                break;
              }
              case 224: {
                PortkeyNumWrackspurtsInEnv = input.ReadInt32();
                break;
              }
              case 242: {
                playerStatsBase_.AddEntriesFrom(input, _map_playerStatsBase_codec);
                break;
              }
              case 250: {
                playerProfessionAffinityStrength_.AddEntriesFrom(input, _map_playerProfessionAffinityStrength_codec);
                break;
              }
              case 258: {
                enemyAffinityProfessionStrength_.AddEntriesFrom(input, _map_enemyAffinityProfessionStrength_codec);
                break;
              }
              case 264: {
                CauldronsNumQueueSlots = input.ReadInt32();
                break;
              }
              case 274:
              case 277: {
                swishGameAccuracyTiers_.AddEntriesFrom(input, _repeated_swishGameAccuracyTiers_codec);
                break;
              }
              case 285: {
                CauldronsInstantFinishCostPerSecond = input.ReadFloat();
                break;
              }
              case 290: {
                CauldronsInstantFinishCurrencyId = input.ReadString();
                break;
              }
              case 298: {
                runeRatings_.AddEntriesFrom(input, _map_runeRatings_codec);
                break;
              }
              case 306: {
                TutorialEncounterId = input.ReadString();
                break;
              }
              case 314: {
                TutorialEncounterFeatureFlagId = input.ReadString();
                break;
              }
              case 322: {
                if (bonusConfig_ == null) {
                  BonusConfig = new global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.BonusConfig();
                }
                input.ReadMessage(BonusConfig);
                break;
              }
              case 328: {
                MaxWalkboxCapacity = input.ReadInt32();
                break;
              }
              case 338: {
                ChallengeCollectionFamilyId = input.ReadString();
                break;
              }
              case 346: {
                dailyQuestGmtIds_.AddEntriesFrom(input, _repeated_dailyQuestGmtIds_codec);
                break;
              }
              case 354: {
                CapPlayerLevelGmtId = input.ReadString();
                break;
              }
              case 360: {
                GreenhouseCoolDownMs = input.ReadInt64();
                break;
              }
              case 370: {
                playerLevelOverride_.AddEntriesFrom(input, _map_playerLevelOverride_codec);
                break;
              }
              case 376: {
                InnCoolDownMs = input.ReadInt64();
                break;
              }
              case 384: {
                InnMenuStalenessThresholdMs = input.ReadInt64();
                break;
              }
              case 394: {
                DailyRewardScheduleGmtId = input.ReadString();
                break;
              }
              case 400: {
                WcEncounterFirstInteractTimeoutMs = input.ReadInt64();
                break;
              }
              case 408: {
                WcEncounterInteractTimeoutMs = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GameConfig message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ChallengeSoundContext {
            [pbr::OriginalName("THIRTY_SECONDS")] ThirtySeconds = 0,
            [pbr::OriginalName("PLAYER_WINS_BATTLE")] PlayerWinsBattle = 1,
            [pbr::OriginalName("PLAYER_LOSES_BATTLE")] PlayerLosesBattle = 2,
            [pbr::OriginalName("START_CHALLENGE")] StartChallenge = 3,
            [pbr::OriginalName("PLAYER_WINS_CHALLENGE")] PlayerWinsChallenge = 4,
            [pbr::OriginalName("PLAYER_LOSES_CHALLENGE")] PlayerLosesChallenge = 5,
            [pbr::OriginalName("ELITE_MOB_SPAWNS")] EliteMobSpawns = 6,
          }

          public sealed partial class FlooNetworkConfig : pb::IMessage<FlooNetworkConfig> {
            private static readonly pb::MessageParser<FlooNetworkConfig> _parser = new pb::MessageParser<FlooNetworkConfig>(() => new FlooNetworkConfig());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FlooNetworkConfig> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.GameConfig.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FlooNetworkConfig() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FlooNetworkConfig(FlooNetworkConfig other) : this() {
              electoralVotesPerFlooPoints_ = other.electoralVotesPerFlooPoints_.Clone();
              pointsPerDecayCycle_ = other.pointsPerDecayCycle_;
              decayCycleLengthMs_ = other.decayCycleLengthMs_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FlooNetworkConfig Clone() {
              return new FlooNetworkConfig(this);
            }

            /// <summary>Field number for the "electoral_votes_per_floo_points" field.</summary>
            public const int ElectoralVotesPerFlooPointsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints> _repeated_electoralVotesPerFlooPoints_codec
                = pb::FieldCodec.ForMessage(10, global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints.Parser);
            private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints> electoralVotesPerFlooPoints_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Types.ElectoralVotesPerFlooPoints> ElectoralVotesPerFlooPoints {
              get { return electoralVotesPerFlooPoints_; }
            }

            /// <summary>Field number for the "points_per_decay_cycle" field.</summary>
            public const int PointsPerDecayCycleFieldNumber = 2;
            private int pointsPerDecayCycle_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int PointsPerDecayCycle {
              get { return pointsPerDecayCycle_; }
              set {
                pointsPerDecayCycle_ = value;
              }
            }

            /// <summary>Field number for the "decay_cycle_length_ms" field.</summary>
            public const int DecayCycleLengthMsFieldNumber = 3;
            private long decayCycleLengthMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long DecayCycleLengthMs {
              get { return decayCycleLengthMs_; }
              set {
                decayCycleLengthMs_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FlooNetworkConfig);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FlooNetworkConfig other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!electoralVotesPerFlooPoints_.Equals(other.electoralVotesPerFlooPoints_)) return false;
              if (PointsPerDecayCycle != other.PointsPerDecayCycle) return false;
              if (DecayCycleLengthMs != other.DecayCycleLengthMs) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= electoralVotesPerFlooPoints_.GetHashCode();
              if (PointsPerDecayCycle != 0) hash ^= PointsPerDecayCycle.GetHashCode();
              if (DecayCycleLengthMs != 0L) hash ^= DecayCycleLengthMs.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              electoralVotesPerFlooPoints_.WriteTo(output, _repeated_electoralVotesPerFlooPoints_codec);
              if (PointsPerDecayCycle != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(PointsPerDecayCycle);
              }
              if (DecayCycleLengthMs != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(DecayCycleLengthMs);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += electoralVotesPerFlooPoints_.CalculateSize(_repeated_electoralVotesPerFlooPoints_codec);
              if (PointsPerDecayCycle != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointsPerDecayCycle);
              }
              if (DecayCycleLengthMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(DecayCycleLengthMs);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FlooNetworkConfig other) {
              if (other == null) {
                return;
              }
              electoralVotesPerFlooPoints_.Add(other.electoralVotesPerFlooPoints_);
              if (other.PointsPerDecayCycle != 0) {
                PointsPerDecayCycle = other.PointsPerDecayCycle;
              }
              if (other.DecayCycleLengthMs != 0L) {
                DecayCycleLengthMs = other.DecayCycleLengthMs;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    electoralVotesPerFlooPoints_.AddEntriesFrom(input, _repeated_electoralVotesPerFlooPoints_codec);
                    break;
                  }
                  case 16: {
                    PointsPerDecayCycle = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    DecayCycleLengthMs = input.ReadInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the FlooNetworkConfig message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class ElectoralVotesPerFlooPoints : pb::IMessage<ElectoralVotesPerFlooPoints> {
                private static readonly pb::MessageParser<ElectoralVotesPerFlooPoints> _parser = new pb::MessageParser<ElectoralVotesPerFlooPoints>(() => new ElectoralVotesPerFlooPoints());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ElectoralVotesPerFlooPoints> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.GameConfig.Types.FlooNetworkConfig.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ElectoralVotesPerFlooPoints() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ElectoralVotesPerFlooPoints(ElectoralVotesPerFlooPoints other) : this() {
                  minFlooPoints_ = other.minFlooPoints_;
                  electoralVotes_ = other.electoralVotes_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ElectoralVotesPerFlooPoints Clone() {
                  return new ElectoralVotesPerFlooPoints(this);
                }

                /// <summary>Field number for the "min_floo_points" field.</summary>
                public const int MinFlooPointsFieldNumber = 1;
                private long minFlooPoints_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long MinFlooPoints {
                  get { return minFlooPoints_; }
                  set {
                    minFlooPoints_ = value;
                  }
                }

                /// <summary>Field number for the "electoral_votes" field.</summary>
                public const int ElectoralVotesFieldNumber = 2;
                private long electoralVotes_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long ElectoralVotes {
                  get { return electoralVotes_; }
                  set {
                    electoralVotes_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as ElectoralVotesPerFlooPoints);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ElectoralVotesPerFlooPoints other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (MinFlooPoints != other.MinFlooPoints) return false;
                  if (ElectoralVotes != other.ElectoralVotes) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (MinFlooPoints != 0L) hash ^= MinFlooPoints.GetHashCode();
                  if (ElectoralVotes != 0L) hash ^= ElectoralVotes.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (MinFlooPoints != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(MinFlooPoints);
                  }
                  if (ElectoralVotes != 0L) {
                    output.WriteRawTag(16);
                    output.WriteInt64(ElectoralVotes);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (MinFlooPoints != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinFlooPoints);
                  }
                  if (ElectoralVotes != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElectoralVotes);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ElectoralVotesPerFlooPoints other) {
                  if (other == null) {
                    return;
                  }
                  if (other.MinFlooPoints != 0L) {
                    MinFlooPoints = other.MinFlooPoints;
                  }
                  if (other.ElectoralVotes != 0L) {
                    ElectoralVotes = other.ElectoralVotes;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        MinFlooPoints = input.ReadInt64();
                        break;
                      }
                      case 16: {
                        ElectoralVotes = input.ReadInt64();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          public sealed partial class BonusConfig : pb::IMessage<BonusConfig> {
            private static readonly pb::MessageParser<BonusConfig> _parser = new pb::MessageParser<BonusConfig>(() => new BonusConfig());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BonusConfig> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.GameConfig.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BonusConfig() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BonusConfig(BonusConfig other) : this() {
              tierThreshold_ = other.tierThreshold_;
              bonus_ = other.bonus_ != null ? other.bonus_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BonusConfig Clone() {
              return new BonusConfig(this);
            }

            /// <summary>Field number for the "tier_threshold" field.</summary>
            public const int TierThresholdFieldNumber = 1;
            private float tierThreshold_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float TierThreshold {
              get { return tierThreshold_; }
              set {
                tierThreshold_ = value;
              }
            }

            /// <summary>Field number for the "bonus" field.</summary>
            public const int BonusFieldNumber = 2;
            private global::WUProtos.Data.Loot.LootReward.Types.LootCollection bonus_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Bonus {
              get { return bonus_; }
              set {
                bonus_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BonusConfig);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BonusConfig other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TierThreshold, other.TierThreshold)) return false;
              if (!object.Equals(Bonus, other.Bonus)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TierThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TierThreshold);
              if (bonus_ != null) hash ^= Bonus.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TierThreshold != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(TierThreshold);
              }
              if (bonus_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Bonus);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TierThreshold != 0F) {
                size += 1 + 4;
              }
              if (bonus_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bonus);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BonusConfig other) {
              if (other == null) {
                return;
              }
              if (other.TierThreshold != 0F) {
                TierThreshold = other.TierThreshold;
              }
              if (other.bonus_ != null) {
                if (bonus_ == null) {
                  Bonus = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                Bonus.MergeFrom(other.Bonus);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    TierThreshold = input.ReadFloat();
                    break;
                  }
                  case 18: {
                    if (bonus_ == null) {
                      Bonus = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                    }
                    input.ReadMessage(Bonus);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class TempFlooNetworkConfig : pb::IMessage<TempFlooNetworkConfig> {
            private static readonly pb::MessageParser<TempFlooNetworkConfig> _parser = new pb::MessageParser<TempFlooNetworkConfig>(() => new TempFlooNetworkConfig());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TempFlooNetworkConfig> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.GameConfig.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TempFlooNetworkConfig() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TempFlooNetworkConfig(TempFlooNetworkConfig other) : this() {
              pointsPerButtonPress_ = other.pointsPerButtonPress_;
              buttonPressCooldownMs_ = other.buttonPressCooldownMs_;
              staminaRequirements_ = other.staminaRequirements_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TempFlooNetworkConfig Clone() {
              return new TempFlooNetworkConfig(this);
            }

            /// <summary>Field number for the "points_per_button_press" field.</summary>
            public const int PointsPerButtonPressFieldNumber = 1;
            private int pointsPerButtonPress_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int PointsPerButtonPress {
              get { return pointsPerButtonPress_; }
              set {
                pointsPerButtonPress_ = value;
              }
            }

            /// <summary>Field number for the "button_press_cooldown_ms" field.</summary>
            public const int ButtonPressCooldownMsFieldNumber = 2;
            private long buttonPressCooldownMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long ButtonPressCooldownMs {
              get { return buttonPressCooldownMs_; }
              set {
                buttonPressCooldownMs_ = value;
              }
            }

            /// <summary>Field number for the "stamina_requirements" field.</summary>
            public const int StaminaRequirementsFieldNumber = 3;
            private static readonly pbc::MapField<string, long>.Codec _map_staminaRequirements_codec
                = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 26);
            private readonly pbc::MapField<string, long> staminaRequirements_ = new pbc::MapField<string, long>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::MapField<string, long> StaminaRequirements {
              get { return staminaRequirements_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TempFlooNetworkConfig);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TempFlooNetworkConfig other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (PointsPerButtonPress != other.PointsPerButtonPress) return false;
              if (ButtonPressCooldownMs != other.ButtonPressCooldownMs) return false;
              if (!StaminaRequirements.Equals(other.StaminaRequirements)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (PointsPerButtonPress != 0) hash ^= PointsPerButtonPress.GetHashCode();
              if (ButtonPressCooldownMs != 0L) hash ^= ButtonPressCooldownMs.GetHashCode();
              hash ^= StaminaRequirements.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (PointsPerButtonPress != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(PointsPerButtonPress);
              }
              if (ButtonPressCooldownMs != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(ButtonPressCooldownMs);
              }
              staminaRequirements_.WriteTo(output, _map_staminaRequirements_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (PointsPerButtonPress != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointsPerButtonPress);
              }
              if (ButtonPressCooldownMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ButtonPressCooldownMs);
              }
              size += staminaRequirements_.CalculateSize(_map_staminaRequirements_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TempFlooNetworkConfig other) {
              if (other == null) {
                return;
              }
              if (other.PointsPerButtonPress != 0) {
                PointsPerButtonPress = other.PointsPerButtonPress;
              }
              if (other.ButtonPressCooldownMs != 0L) {
                ButtonPressCooldownMs = other.ButtonPressCooldownMs;
              }
              staminaRequirements_.Add(other.staminaRequirements_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    PointsPerButtonPress = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    ButtonPressCooldownMs = input.ReadInt64();
                    break;
                  }
                  case 26: {
                    staminaRequirements_.AddEntriesFrom(input, _map_staminaRequirements_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class GreenhouseTemplate : pb::IMessage<GreenhouseTemplate> {
        private static readonly pb::MessageParser<GreenhouseTemplate> _parser = new pb::MessageParser<GreenhouseTemplate>(() => new GreenhouseTemplate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GreenhouseTemplate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreenhouseTemplate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreenhouseTemplate(GreenhouseTemplate other) : this() {
          id_ = other.id_;
          socialGrowingSettings_ = other.socialGrowingSettings_ != null ? other.socialGrowingSettings_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GreenhouseTemplate Clone() {
          return new GreenhouseTemplate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "social_growing_settings" field.</summary>
        public const int SocialGrowingSettingsFieldNumber = 2;
        private global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings socialGrowingSettings_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings SocialGrowingSettings {
          get { return socialGrowingSettings_; }
          set {
            socialGrowingSettings_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GreenhouseTemplate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GreenhouseTemplate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(SocialGrowingSettings, other.SocialGrowingSettings)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (socialGrowingSettings_ != null) hash ^= SocialGrowingSettings.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (socialGrowingSettings_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SocialGrowingSettings);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (socialGrowingSettings_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocialGrowingSettings);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GreenhouseTemplate other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.socialGrowingSettings_ != null) {
            if (socialGrowingSettings_ == null) {
              SocialGrowingSettings = new global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings();
            }
            SocialGrowingSettings.MergeFrom(other.SocialGrowingSettings);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (socialGrowingSettings_ == null) {
                  SocialGrowingSettings = new global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings();
                }
                input.ReadMessage(SocialGrowingSettings);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GreenhouseTemplate message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class SharedSocialGrowingSettings : pb::IMessage<SharedSocialGrowingSettings> {
            private static readonly pb::MessageParser<SharedSocialGrowingSettings> _parser = new pb::MessageParser<SharedSocialGrowingSettings>(() => new SharedSocialGrowingSettings());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SharedSocialGrowingSettings> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SharedSocialGrowingSettings() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SharedSocialGrowingSettings(SharedSocialGrowingSettings other) : this() {
              numberOfNormalPots_ = other.numberOfNormalPots_;
              numberOfRentalPots_ = other.numberOfRentalPots_;
              normalPotGrowingTimeMultiplier_ = other.normalPotGrowingTimeMultiplier_;
              rentalPotGrowingTimeMultiplier_ = other.rentalPotGrowingTimeMultiplier_;
              herbivicusMeter_ = other.herbivicusMeter_.Clone();
              maximumEnergyAllowed_ = other.maximumEnergyAllowed_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SharedSocialGrowingSettings Clone() {
              return new SharedSocialGrowingSettings(this);
            }

            /// <summary>Field number for the "number_of_normal_pots" field.</summary>
            public const int NumberOfNormalPotsFieldNumber = 1;
            private int numberOfNormalPots_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int NumberOfNormalPots {
              get { return numberOfNormalPots_; }
              set {
                numberOfNormalPots_ = value;
              }
            }

            /// <summary>Field number for the "number_of_rental_pots" field.</summary>
            public const int NumberOfRentalPotsFieldNumber = 2;
            private int numberOfRentalPots_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int NumberOfRentalPots {
              get { return numberOfRentalPots_; }
              set {
                numberOfRentalPots_ = value;
              }
            }

            /// <summary>Field number for the "normal_pot_growing_time_multiplier" field.</summary>
            public const int NormalPotGrowingTimeMultiplierFieldNumber = 3;
            private double normalPotGrowingTimeMultiplier_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double NormalPotGrowingTimeMultiplier {
              get { return normalPotGrowingTimeMultiplier_; }
              set {
                normalPotGrowingTimeMultiplier_ = value;
              }
            }

            /// <summary>Field number for the "rental_pot_growing_time_multiplier" field.</summary>
            public const int RentalPotGrowingTimeMultiplierFieldNumber = 4;
            private double rentalPotGrowingTimeMultiplier_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double RentalPotGrowingTimeMultiplier {
              get { return rentalPotGrowingTimeMultiplier_; }
              set {
                rentalPotGrowingTimeMultiplier_ = value;
              }
            }

            /// <summary>Field number for the "herbivicus_meter" field.</summary>
            public const int HerbivicusMeterFieldNumber = 5;
            private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry> _repeated_herbivicusMeter_codec
                = pb::FieldCodec.ForMessage(42, global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry.Parser);
            private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry> herbivicusMeter_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Types.HerbivicusMeterEntry> HerbivicusMeter {
              get { return herbivicusMeter_; }
            }

            /// <summary>Field number for the "maximum_energy_allowed" field.</summary>
            public const int MaximumEnergyAllowedFieldNumber = 6;
            private int maximumEnergyAllowed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int MaximumEnergyAllowed {
              get { return maximumEnergyAllowed_; }
              set {
                maximumEnergyAllowed_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SharedSocialGrowingSettings);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SharedSocialGrowingSettings other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (NumberOfNormalPots != other.NumberOfNormalPots) return false;
              if (NumberOfRentalPots != other.NumberOfRentalPots) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NormalPotGrowingTimeMultiplier, other.NormalPotGrowingTimeMultiplier)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RentalPotGrowingTimeMultiplier, other.RentalPotGrowingTimeMultiplier)) return false;
              if(!herbivicusMeter_.Equals(other.herbivicusMeter_)) return false;
              if (MaximumEnergyAllowed != other.MaximumEnergyAllowed) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (NumberOfNormalPots != 0) hash ^= NumberOfNormalPots.GetHashCode();
              if (NumberOfRentalPots != 0) hash ^= NumberOfRentalPots.GetHashCode();
              if (NormalPotGrowingTimeMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NormalPotGrowingTimeMultiplier);
              if (RentalPotGrowingTimeMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RentalPotGrowingTimeMultiplier);
              hash ^= herbivicusMeter_.GetHashCode();
              if (MaximumEnergyAllowed != 0) hash ^= MaximumEnergyAllowed.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NumberOfNormalPots != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(NumberOfNormalPots);
              }
              if (NumberOfRentalPots != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(NumberOfRentalPots);
              }
              if (NormalPotGrowingTimeMultiplier != 0D) {
                output.WriteRawTag(25);
                output.WriteDouble(NormalPotGrowingTimeMultiplier);
              }
              if (RentalPotGrowingTimeMultiplier != 0D) {
                output.WriteRawTag(33);
                output.WriteDouble(RentalPotGrowingTimeMultiplier);
              }
              herbivicusMeter_.WriteTo(output, _repeated_herbivicusMeter_codec);
              if (MaximumEnergyAllowed != 0) {
                output.WriteRawTag(48);
                output.WriteInt32(MaximumEnergyAllowed);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NumberOfNormalPots != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfNormalPots);
              }
              if (NumberOfRentalPots != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfRentalPots);
              }
              if (NormalPotGrowingTimeMultiplier != 0D) {
                size += 1 + 8;
              }
              if (RentalPotGrowingTimeMultiplier != 0D) {
                size += 1 + 8;
              }
              size += herbivicusMeter_.CalculateSize(_repeated_herbivicusMeter_codec);
              if (MaximumEnergyAllowed != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumEnergyAllowed);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SharedSocialGrowingSettings other) {
              if (other == null) {
                return;
              }
              if (other.NumberOfNormalPots != 0) {
                NumberOfNormalPots = other.NumberOfNormalPots;
              }
              if (other.NumberOfRentalPots != 0) {
                NumberOfRentalPots = other.NumberOfRentalPots;
              }
              if (other.NormalPotGrowingTimeMultiplier != 0D) {
                NormalPotGrowingTimeMultiplier = other.NormalPotGrowingTimeMultiplier;
              }
              if (other.RentalPotGrowingTimeMultiplier != 0D) {
                RentalPotGrowingTimeMultiplier = other.RentalPotGrowingTimeMultiplier;
              }
              herbivicusMeter_.Add(other.herbivicusMeter_);
              if (other.MaximumEnergyAllowed != 0) {
                MaximumEnergyAllowed = other.MaximumEnergyAllowed;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    NumberOfNormalPots = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    NumberOfRentalPots = input.ReadInt32();
                    break;
                  }
                  case 25: {
                    NormalPotGrowingTimeMultiplier = input.ReadDouble();
                    break;
                  }
                  case 33: {
                    RentalPotGrowingTimeMultiplier = input.ReadDouble();
                    break;
                  }
                  case 42: {
                    herbivicusMeter_.AddEntriesFrom(input, _repeated_herbivicusMeter_codec);
                    break;
                  }
                  case 48: {
                    MaximumEnergyAllowed = input.ReadInt32();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the SharedSocialGrowingSettings message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class HerbivicusMeterEntry : pb::IMessage<HerbivicusMeterEntry> {
                private static readonly pb::MessageParser<HerbivicusMeterEntry> _parser = new pb::MessageParser<HerbivicusMeterEntry>(() => new HerbivicusMeterEntry());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<HerbivicusMeterEntry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.GreenhouseTemplate.Types.SharedSocialGrowingSettings.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HerbivicusMeterEntry() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HerbivicusMeterEntry(HerbivicusMeterEntry other) : this() {
                  spellCount_ = other.spellCount_;
                  additionalNumberOfSpawning_ = other.additionalNumberOfSpawning_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public HerbivicusMeterEntry Clone() {
                  return new HerbivicusMeterEntry(this);
                }

                /// <summary>Field number for the "spell_count" field.</summary>
                public const int SpellCountFieldNumber = 1;
                private int spellCount_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int SpellCount {
                  get { return spellCount_; }
                  set {
                    spellCount_ = value;
                  }
                }

                /// <summary>Field number for the "additional_number_of_spawning" field.</summary>
                public const int AdditionalNumberOfSpawningFieldNumber = 2;
                private int additionalNumberOfSpawning_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int AdditionalNumberOfSpawning {
                  get { return additionalNumberOfSpawning_; }
                  set {
                    additionalNumberOfSpawning_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as HerbivicusMeterEntry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(HerbivicusMeterEntry other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (SpellCount != other.SpellCount) return false;
                  if (AdditionalNumberOfSpawning != other.AdditionalNumberOfSpawning) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (SpellCount != 0) hash ^= SpellCount.GetHashCode();
                  if (AdditionalNumberOfSpawning != 0) hash ^= AdditionalNumberOfSpawning.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (SpellCount != 0) {
                    output.WriteRawTag(8);
                    output.WriteInt32(SpellCount);
                  }
                  if (AdditionalNumberOfSpawning != 0) {
                    output.WriteRawTag(16);
                    output.WriteInt32(AdditionalNumberOfSpawning);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (SpellCount != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellCount);
                  }
                  if (AdditionalNumberOfSpawning != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdditionalNumberOfSpawning);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(HerbivicusMeterEntry other) {
                  if (other == null) {
                    return;
                  }
                  if (other.SpellCount != 0) {
                    SpellCount = other.SpellCount;
                  }
                  if (other.AdditionalNumberOfSpawning != 0) {
                    AdditionalNumberOfSpawning = other.AdditionalNumberOfSpawning;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        SpellCount = input.ReadInt32();
                        break;
                      }
                      case 16: {
                        AdditionalNumberOfSpawning = input.ReadInt32();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class Haptic : pb::IMessage<Haptic> {
        private static readonly pb::MessageParser<Haptic> _parser = new pb::MessageParser<Haptic>(() => new Haptic());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Haptic> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Haptic() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Haptic(Haptic other) : this() {
          ioswaitTimings_ = other.ioswaitTimings_.Clone();
          id_ = other.id_;
          ioshapticTypes_ = other.ioshapticTypes_.Clone();
          androidWaitTimings_ = other.androidWaitTimings_.Clone();
          androidAmplitudes_ = other.androidAmplitudes_.Clone();
          androidDurations_ = other.androidDurations_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Haptic Clone() {
          return new Haptic(this);
        }

        /// <summary>Field number for the "ioswait_timings" field.</summary>
        public const int IoswaitTimingsFieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_ioswaitTimings_codec
            = pb::FieldCodec.ForInt32(10);
        private readonly pbc::RepeatedField<int> ioswaitTimings_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> IoswaitTimings {
          get { return ioswaitTimings_; }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ioshaptic_types" field.</summary>
        public const int IoshapticTypesFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_ioshapticTypes_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> ioshapticTypes_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> IoshapticTypes {
          get { return ioshapticTypes_; }
        }

        /// <summary>Field number for the "android_wait_timings" field.</summary>
        public const int AndroidWaitTimingsFieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_androidWaitTimings_codec
            = pb::FieldCodec.ForInt32(34);
        private readonly pbc::RepeatedField<int> androidWaitTimings_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AndroidWaitTimings {
          get { return androidWaitTimings_; }
        }

        /// <summary>Field number for the "android_amplitudes" field.</summary>
        public const int AndroidAmplitudesFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_androidAmplitudes_codec
            = pb::FieldCodec.ForInt32(42);
        private readonly pbc::RepeatedField<int> androidAmplitudes_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AndroidAmplitudes {
          get { return androidAmplitudes_; }
        }

        /// <summary>Field number for the "android_durations" field.</summary>
        public const int AndroidDurationsFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_androidDurations_codec
            = pb::FieldCodec.ForInt32(50);
        private readonly pbc::RepeatedField<int> androidDurations_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> AndroidDurations {
          get { return androidDurations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Haptic);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Haptic other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!ioswaitTimings_.Equals(other.ioswaitTimings_)) return false;
          if (Id != other.Id) return false;
          if(!ioshapticTypes_.Equals(other.ioshapticTypes_)) return false;
          if(!androidWaitTimings_.Equals(other.androidWaitTimings_)) return false;
          if(!androidAmplitudes_.Equals(other.androidAmplitudes_)) return false;
          if(!androidDurations_.Equals(other.androidDurations_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= ioswaitTimings_.GetHashCode();
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= ioshapticTypes_.GetHashCode();
          hash ^= androidWaitTimings_.GetHashCode();
          hash ^= androidAmplitudes_.GetHashCode();
          hash ^= androidDurations_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          ioswaitTimings_.WriteTo(output, _repeated_ioswaitTimings_codec);
          if (Id.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Id);
          }
          ioshapticTypes_.WriteTo(output, _repeated_ioshapticTypes_codec);
          androidWaitTimings_.WriteTo(output, _repeated_androidWaitTimings_codec);
          androidAmplitudes_.WriteTo(output, _repeated_androidAmplitudes_codec);
          androidDurations_.WriteTo(output, _repeated_androidDurations_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += ioswaitTimings_.CalculateSize(_repeated_ioswaitTimings_codec);
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += ioshapticTypes_.CalculateSize(_repeated_ioshapticTypes_codec);
          size += androidWaitTimings_.CalculateSize(_repeated_androidWaitTimings_codec);
          size += androidAmplitudes_.CalculateSize(_repeated_androidAmplitudes_codec);
          size += androidDurations_.CalculateSize(_repeated_androidDurations_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Haptic other) {
          if (other == null) {
            return;
          }
          ioswaitTimings_.Add(other.ioswaitTimings_);
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          ioshapticTypes_.Add(other.ioshapticTypes_);
          androidWaitTimings_.Add(other.androidWaitTimings_);
          androidAmplitudes_.Add(other.androidAmplitudes_);
          androidDurations_.Add(other.androidDurations_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                ioswaitTimings_.AddEntriesFrom(input, _repeated_ioswaitTimings_codec);
                break;
              }
              case 18: {
                Id = input.ReadString();
                break;
              }
              case 26:
              case 24: {
                ioshapticTypes_.AddEntriesFrom(input, _repeated_ioshapticTypes_codec);
                break;
              }
              case 34:
              case 32: {
                androidWaitTimings_.AddEntriesFrom(input, _repeated_androidWaitTimings_codec);
                break;
              }
              case 42:
              case 40: {
                androidAmplitudes_.AddEntriesFrom(input, _repeated_androidAmplitudes_codec);
                break;
              }
              case 50:
              case 48: {
                androidDurations_.AddEntriesFrom(input, _repeated_androidDurations_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Spell : pb::IMessage<Spell> {
        private static readonly pb::MessageParser<Spell> _parser = new pb::MessageParser<Spell>(() => new Spell());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Spell> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spell() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spell(Spell other) : this() {
          id_ = other.id_;
          timelines_ = other.timelines_.Clone();
          criticalHits_ = other.criticalHits_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spell Clone() {
          return new Spell(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        ///repeated string charge_up_effect = 1;
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timelines" field.</summary>
        public const int TimelinesFieldNumber = 2;
        private static readonly pbc::MapField<string, string>.Codec _map_timelines_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
        private readonly pbc::MapField<string, string> timelines_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Timelines {
          get { return timelines_; }
        }

        /// <summary>Field number for the "critical_hits" field.</summary>
        public const int CriticalHitsFieldNumber = 3;
        private static readonly pbc::MapField<string, string>.Codec _map_criticalHits_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
        private readonly pbc::MapField<string, string> criticalHits_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> CriticalHits {
          get { return criticalHits_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Spell);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Spell other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!Timelines.Equals(other.Timelines)) return false;
          if (!CriticalHits.Equals(other.CriticalHits)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= Timelines.GetHashCode();
          hash ^= CriticalHits.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          timelines_.WriteTo(output, _map_timelines_codec);
          criticalHits_.WriteTo(output, _map_criticalHits_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += timelines_.CalculateSize(_map_timelines_codec);
          size += criticalHits_.CalculateSize(_map_criticalHits_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Spell other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          timelines_.Add(other.timelines_);
          criticalHits_.Add(other.criticalHits_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                timelines_.AddEntriesFrom(input, _map_timelines_codec);
                break;
              }
              case 26: {
                criticalHits_.AddEntriesFrom(input, _map_criticalHits_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class FortressTemplate : pb::IMessage<FortressTemplate> {
        private static readonly pb::MessageParser<FortressTemplate> _parser = new pb::MessageParser<FortressTemplate>(() => new FortressTemplate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FortressTemplate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FortressTemplate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FortressTemplate(FortressTemplate other) : this() {
          id_ = other.id_;
          chamberGmtIds_ = other.chamberGmtIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FortressTemplate Clone() {
          return new FortressTemplate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "chamber_gmt_ids" field.</summary>
        public const int ChamberGmtIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_chamberGmtIds_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> chamberGmtIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ChamberGmtIds {
          get { return chamberGmtIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FortressTemplate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FortressTemplate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!chamberGmtIds_.Equals(other.chamberGmtIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= chamberGmtIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          chamberGmtIds_.WriteTo(output, _repeated_chamberGmtIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += chamberGmtIds_.CalculateSize(_repeated_chamberGmtIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FortressTemplate other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          chamberGmtIds_.Add(other.chamberGmtIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                chamberGmtIds_.AddEntriesFrom(input, _repeated_chamberGmtIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class MasterNote : pb::IMessage<MasterNote> {
        private static readonly pb::MessageParser<MasterNote> _parser = new pb::MessageParser<MasterNote>(() => new MasterNote());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MasterNote> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MasterNote() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MasterNote(MasterNote other) : this() {
          id_ = other.id_;
          gestures_ = other.gestures_.Clone();
          effect_ = other.effect_ != null ? other.effect_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MasterNote Clone() {
          return new MasterNote(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "gestures" field.</summary>
        public const int GesturesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Enums.MasterNoteGesture> _repeated_gestures_codec
            = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::WUProtos.Enums.MasterNoteGesture) x);
        private readonly pbc::RepeatedField<global::WUProtos.Enums.MasterNoteGesture> gestures_ = new pbc::RepeatedField<global::WUProtos.Enums.MasterNoteGesture>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Enums.MasterNoteGesture> Gestures {
          get { return gestures_; }
        }

        /// <summary>Field number for the "effect" field.</summary>
        public const int EffectFieldNumber = 3;
        private global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect effect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect Effect {
          get { return effect_; }
          set {
            effect_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MasterNote);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MasterNote other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!gestures_.Equals(other.gestures_)) return false;
          if (!object.Equals(Effect, other.Effect)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= gestures_.GetHashCode();
          if (effect_ != null) hash ^= Effect.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          gestures_.WriteTo(output, _repeated_gestures_codec);
          if (effect_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Effect);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += gestures_.CalculateSize(_repeated_gestures_codec);
          if (effect_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MasterNote other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          gestures_.Add(other.gestures_);
          if (other.effect_ != null) {
            if (effect_ == null) {
              Effect = new global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect();
            }
            Effect.MergeFrom(other.Effect);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                gestures_.AddEntriesFrom(input, _repeated_gestures_codec);
                break;
              }
              case 26: {
                if (effect_ == null) {
                  Effect = new global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect();
                }
                input.ReadMessage(Effect);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MasterNote message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class MasterNoteEffect : pb::IMessage<MasterNoteEffect> {
            private static readonly pb::MessageParser<MasterNoteEffect> _parser = new pb::MessageParser<MasterNoteEffect>(() => new MasterNoteEffect());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MasterNoteEffect> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.MasterNote.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MasterNoteEffect() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MasterNoteEffect(MasterNoteEffect other) : this() {
              id_ = other.id_;
              effectType_ = other.effectType_;
              power_ = other.power_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MasterNoteEffect Clone() {
              return new MasterNoteEffect(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private string id_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "effect_type" field.</summary>
            public const int EffectTypeFieldNumber = 2;
            private global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect.Types.MasterNoteEffectType effectType_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect.Types.MasterNoteEffectType EffectType {
              get { return effectType_; }
              set {
                effectType_ = value;
              }
            }

            /// <summary>Field number for the "power" field.</summary>
            public const int PowerFieldNumber = 3;
            private long power_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Power {
              get { return power_; }
              set {
                power_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MasterNoteEffect);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MasterNoteEffect other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (EffectType != other.EffectType) return false;
              if (Power != other.Power) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (EffectType != 0) hash ^= EffectType.GetHashCode();
              if (Power != 0L) hash ^= Power.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Id);
              }
              if (EffectType != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) EffectType);
              }
              if (Power != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Power);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (EffectType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectType);
              }
              if (Power != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Power);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MasterNoteEffect other) {
              if (other == null) {
                return;
              }
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              if (other.EffectType != 0) {
                EffectType = other.EffectType;
              }
              if (other.Power != 0L) {
                Power = other.Power;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Id = input.ReadString();
                    break;
                  }
                  case 16: {
                    EffectType = (global::WUProtos.Data.GmTemplate.Types.MasterNote.Types.MasterNoteEffect.Types.MasterNoteEffectType) input.ReadEnum();
                    break;
                  }
                  case 24: {
                    Power = input.ReadInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the MasterNoteEffect message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum MasterNoteEffectType {
                [pbr::OriginalName("UNSET")] Unset = 0,
                [pbr::OriginalName("BREW_SPEED_STATIC")] BrewSpeedStatic = 1,
                [pbr::OriginalName("BREW_SPEED_PERCENT")] BrewSpeedPercent = 2,
                [pbr::OriginalName("BREW_YIELD_STATIC")] BrewYieldStatic = 3,
              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class OutpostTemplate : pb::IMessage<OutpostTemplate> {
        private static readonly pb::MessageParser<OutpostTemplate> _parser = new pb::MessageParser<OutpostTemplate>(() => new OutpostTemplate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OutpostTemplate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutpostTemplate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutpostTemplate(OutpostTemplate other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutpostTemplate Clone() {
          return new OutpostTemplate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OutpostTemplate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OutpostTemplate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OutpostTemplate other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Portkey : pb::IMessage<Portkey> {
        private static readonly pb::MessageParser<Portkey> _parser = new pb::MessageParser<Portkey>(() => new Portkey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Portkey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Portkey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Portkey(Portkey other) : this() {
          id_ = other.id_;
          portkeyEncounterId_ = other.portkeyEncounterId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Portkey Clone() {
          return new Portkey(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portkey_encounter_id" field.</summary>
        public const int PortkeyEncounterIdFieldNumber = 2;
        private string portkeyEncounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortkeyEncounterId {
          get { return portkeyEncounterId_; }
          set {
            portkeyEncounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Portkey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Portkey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (PortkeyEncounterId != other.PortkeyEncounterId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (PortkeyEncounterId.Length != 0) hash ^= PortkeyEncounterId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (PortkeyEncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PortkeyEncounterId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (PortkeyEncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortkeyEncounterId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Portkey other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.PortkeyEncounterId.Length != 0) {
            PortkeyEncounterId = other.PortkeyEncounterId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                PortkeyEncounterId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Rpgstat : pb::IMessage<Rpgstat> {
        private static readonly pb::MessageParser<Rpgstat> _parser = new pb::MessageParser<Rpgstat>(() => new Rpgstat());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rpgstat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rpgstat() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rpgstat(Rpgstat other) : this() {
          id_ = other.id_;
          statBounds_ = other.statBounds_ != null ? other.statBounds_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rpgstat Clone() {
          return new Rpgstat(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stat_bounds" field.</summary>
        public const int StatBoundsFieldNumber = 2;
        private global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeInt64 statBounds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeInt64 StatBounds {
          get { return statBounds_; }
          set {
            statBounds_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rpgstat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rpgstat other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(StatBounds, other.StatBounds)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (statBounds_ != null) hash ^= StatBounds.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (statBounds_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(StatBounds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (statBounds_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatBounds);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rpgstat other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.statBounds_ != null) {
            if (statBounds_ == null) {
              StatBounds = new global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeInt64();
            }
            StatBounds.MergeFrom(other.StatBounds);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (statBounds_ == null) {
                  StatBounds = new global::WUProtos.Data.GmTemplate.Types.Rpgstat.Types.RangeInt64();
                }
                input.ReadMessage(StatBounds);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Rpgstat message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum IconDisplayType {
            [pbr::OriginalName("BOTH")] Both = 0,
            [pbr::OriginalName("PLAYER_VIEW")] PlayerView = 1,
            [pbr::OriginalName("ENEMY_VIEW")] EnemyView = 2,
            [pbr::OriginalName("NEITHER")] Neither = 3,
          }

          public sealed partial class RangeInt64 : pb::IMessage<RangeInt64> {
            private static readonly pb::MessageParser<RangeInt64> _parser = new pb::MessageParser<RangeInt64>(() => new RangeInt64());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<RangeInt64> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Rpgstat.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RangeInt64() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RangeInt64(RangeInt64 other) : this() {
              min_ = other.min_;
              max_ = other.max_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RangeInt64 Clone() {
              return new RangeInt64(this);
            }

            /// <summary>Field number for the "min" field.</summary>
            public const int MinFieldNumber = 1;
            private long min_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Min {
              get { return min_; }
              set {
                min_ = value;
              }
            }

            /// <summary>Field number for the "max" field.</summary>
            public const int MaxFieldNumber = 2;
            private long max_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Max {
              get { return max_; }
              set {
                max_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as RangeInt64);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(RangeInt64 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Min != other.Min) return false;
              if (Max != other.Max) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Min != 0L) hash ^= Min.GetHashCode();
              if (Max != 0L) hash ^= Max.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Min != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Min);
              }
              if (Max != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Max);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Min != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Min);
              }
              if (Max != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(RangeInt64 other) {
              if (other == null) {
                return;
              }
              if (other.Min != 0L) {
                Min = other.Min;
              }
              if (other.Max != 0L) {
                Max = other.Max;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Min = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    Max = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class RangeUint32 : pb::IMessage<RangeUint32> {
            private static readonly pb::MessageParser<RangeUint32> _parser = new pb::MessageParser<RangeUint32>(() => new RangeUint32());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<RangeUint32> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Rpgstat.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RangeUint32() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RangeUint32(RangeUint32 other) : this() {
              min_ = other.min_;
              max_ = other.max_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public RangeUint32 Clone() {
              return new RangeUint32(this);
            }

            /// <summary>Field number for the "min" field.</summary>
            public const int MinFieldNumber = 1;
            private uint min_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Min {
              get { return min_; }
              set {
                min_ = value;
              }
            }

            /// <summary>Field number for the "max" field.</summary>
            public const int MaxFieldNumber = 2;
            private uint max_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Max {
              get { return max_; }
              set {
                max_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as RangeUint32);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(RangeUint32 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Min != other.Min) return false;
              if (Max != other.Max) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Min != 0) hash ^= Min.GetHashCode();
              if (Max != 0) hash ^= Max.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Min != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Min);
              }
              if (Max != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Max);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Min != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
              }
              if (Max != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(RangeUint32 other) {
              if (other == null) {
                return;
              }
              if (other.Min != 0) {
                Min = other.Min;
              }
              if (other.Max != 0) {
                Max = other.Max;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Min = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Max = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class RpgstatsBlock : pb::IMessage<RpgstatsBlock> {
        private static readonly pb::MessageParser<RpgstatsBlock> _parser = new pb::MessageParser<RpgstatsBlock>(() => new RpgstatsBlock());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RpgstatsBlock> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RpgstatsBlock() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RpgstatsBlock(RpgstatsBlock other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RpgstatsBlock Clone() {
          return new RpgstatsBlock(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RpgstatsBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RpgstatsBlock other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RpgstatsBlock other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SelfieAvatarAsset : pb::IMessage<SelfieAvatarAsset> {
        private static readonly pb::MessageParser<SelfieAvatarAsset> _parser = new pb::MessageParser<SelfieAvatarAsset>(() => new SelfieAvatarAsset());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SelfieAvatarAsset> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelfieAvatarAsset() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelfieAvatarAsset(SelfieAvatarAsset other) : this() {
          id_ = other.id_;
          unlockConditions_ = other.unlockConditions_ != null ? other.unlockConditions_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SelfieAvatarAsset Clone() {
          return new SelfieAvatarAsset(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unlock_conditions" field.</summary>
        public const int UnlockConditionsFieldNumber = 2;
        private global::WUProtos.Data.Requirements unlockConditions_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements UnlockConditions {
          get { return unlockConditions_; }
          set {
            unlockConditions_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SelfieAvatarAsset);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SelfieAvatarAsset other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(UnlockConditions, other.UnlockConditions)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (unlockConditions_ != null) hash ^= UnlockConditions.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (unlockConditions_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(UnlockConditions);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (unlockConditions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockConditions);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SelfieAvatarAsset other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.unlockConditions_ != null) {
            if (unlockConditions_ == null) {
              UnlockConditions = new global::WUProtos.Data.Requirements();
            }
            UnlockConditions.MergeFrom(other.UnlockConditions);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (unlockConditions_ == null) {
                  UnlockConditions = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(UnlockConditions);
                break;
              }
            }
          }
        }

      }

      public sealed partial class TeamControl : pb::IMessage<TeamControl> {
        private static readonly pb::MessageParser<TeamControl> _parser = new pb::MessageParser<TeamControl>(() => new TeamControl());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeamControl> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamControl() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamControl(TeamControl other) : this() {
          id_ = other.id_;
          teamName_ = other.teamName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TeamControl Clone() {
          return new TeamControl(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "team_name" field.</summary>
        public const int TeamNameFieldNumber = 2;
        private string teamName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TeamName {
          get { return teamName_; }
          set {
            teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TeamControl);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TeamControl other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TeamName != other.TeamName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (TeamName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TeamName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (TeamName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TeamControl other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.TeamName.Length != 0) {
            TeamName = other.TeamName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                TeamName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class VaultCategory : pb::IMessage<VaultCategory> {
        private static readonly pb::MessageParser<VaultCategory> _parser = new pb::MessageParser<VaultCategory>(() => new VaultCategory());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VaultCategory> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultCategory() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultCategory(VaultCategory other) : this() {
          id_ = other.id_;
          capacityType_ = other.capacityType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VaultCategory Clone() {
          return new VaultCategory(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "capacity_type" field.</summary>
        public const int CapacityTypeFieldNumber = 2;
        private global::WUProtos.Data.GmTemplate.Types.VaultCategory.Types.CategoryCapacityType capacityType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.VaultCategory.Types.CategoryCapacityType CapacityType {
          get { return capacityType_; }
          set {
            capacityType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VaultCategory);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VaultCategory other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (CapacityType != other.CapacityType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (CapacityType != 0) hash ^= CapacityType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (CapacityType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) CapacityType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (CapacityType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CapacityType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VaultCategory other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.CapacityType != 0) {
            CapacityType = other.CapacityType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                CapacityType = (global::WUProtos.Data.GmTemplate.Types.VaultCategory.Types.CategoryCapacityType) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the VaultCategory message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CategoryCapacityType {
            [pbr::OriginalName("CAGETORY_CAPACITY_TYPE_UNSET")] CagetoryCapacityTypeUnset = 0,
            [pbr::OriginalName("DEFAULT_CAPACITY_TYPE")] DefaultCapacityType = 1,
            [pbr::OriginalName("INFINITE")] Infinite = 2,
          }

        }
        #endregion

      }

      public sealed partial class Recipe : pb::IMessage<Recipe> {
        private static readonly pb::MessageParser<Recipe> _parser = new pb::MessageParser<Recipe>(() => new Recipe());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Recipe> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Recipe() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Recipe(Recipe other) : this() {
          id_ = other.id_;
          recipe_ = other.recipe_ != null ? other.recipe_.Clone() : null;
          rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
          timeToCraft_ = other.timeToCraft_;
          masterNoteGmtId_ = other.masterNoteGmtId_.Clone();
          disabled_ = other.disabled_;
          unlockConditions_ = other.unlockConditions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Recipe Clone() {
          return new Recipe(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "recipe" field.</summary>
        public const int Recipe_FieldNumber = 2;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection recipe_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Recipe_ {
          get { return recipe_; }
          set {
            recipe_ = value;
          }
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 3;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
          get { return rewards_; }
          set {
            rewards_ = value;
          }
        }

        /// <summary>Field number for the "time_to_craft" field.</summary>
        public const int TimeToCraftFieldNumber = 4;
        private long timeToCraft_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TimeToCraft {
          get { return timeToCraft_; }
          set {
            timeToCraft_ = value;
          }
        }

        /// <summary>Field number for the "master_note_gmt_id" field.</summary>
        public const int MasterNoteGmtIdFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_masterNoteGmtId_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> masterNoteGmtId_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> MasterNoteGmtId {
          get { return masterNoteGmtId_; }
        }

        /// <summary>Field number for the "disabled" field.</summary>
        public const int DisabledFieldNumber = 6;
        private bool disabled_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Disabled {
          get { return disabled_; }
          set {
            disabled_ = value;
          }
        }

        /// <summary>Field number for the "unlock_conditions" field.</summary>
        public const int UnlockConditionsFieldNumber = 7;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Requirements> _repeated_unlockConditions_codec
            = pb::FieldCodec.ForMessage(58, global::WUProtos.Data.Requirements.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Requirements> unlockConditions_ = new pbc::RepeatedField<global::WUProtos.Data.Requirements>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Requirements> UnlockConditions {
          get { return unlockConditions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Recipe);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Recipe other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(Recipe_, other.Recipe_)) return false;
          if (!object.Equals(Rewards, other.Rewards)) return false;
          if (TimeToCraft != other.TimeToCraft) return false;
          if(!masterNoteGmtId_.Equals(other.masterNoteGmtId_)) return false;
          if (Disabled != other.Disabled) return false;
          if(!unlockConditions_.Equals(other.unlockConditions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (recipe_ != null) hash ^= Recipe_.GetHashCode();
          if (rewards_ != null) hash ^= Rewards.GetHashCode();
          if (TimeToCraft != 0L) hash ^= TimeToCraft.GetHashCode();
          hash ^= masterNoteGmtId_.GetHashCode();
          if (Disabled != false) hash ^= Disabled.GetHashCode();
          hash ^= unlockConditions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (recipe_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Recipe_);
          }
          if (rewards_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Rewards);
          }
          if (TimeToCraft != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(TimeToCraft);
          }
          masterNoteGmtId_.WriteTo(output, _repeated_masterNoteGmtId_codec);
          if (Disabled != false) {
            output.WriteRawTag(48);
            output.WriteBool(Disabled);
          }
          unlockConditions_.WriteTo(output, _repeated_unlockConditions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (recipe_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recipe_);
          }
          if (rewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
          }
          if (TimeToCraft != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToCraft);
          }
          size += masterNoteGmtId_.CalculateSize(_repeated_masterNoteGmtId_codec);
          if (Disabled != false) {
            size += 1 + 1;
          }
          size += unlockConditions_.CalculateSize(_repeated_unlockConditions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Recipe other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.recipe_ != null) {
            if (recipe_ == null) {
              Recipe_ = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Recipe_.MergeFrom(other.Recipe_);
          }
          if (other.rewards_ != null) {
            if (rewards_ == null) {
              Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Rewards.MergeFrom(other.Rewards);
          }
          if (other.TimeToCraft != 0L) {
            TimeToCraft = other.TimeToCraft;
          }
          masterNoteGmtId_.Add(other.masterNoteGmtId_);
          if (other.Disabled != false) {
            Disabled = other.Disabled;
          }
          unlockConditions_.Add(other.unlockConditions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (recipe_ == null) {
                  Recipe_ = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Recipe_);
                break;
              }
              case 26: {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Rewards);
                break;
              }
              case 32: {
                TimeToCraft = input.ReadInt64();
                break;
              }
              case 42: {
                masterNoteGmtId_.AddEntriesFrom(input, _repeated_masterNoteGmtId_codec);
                break;
              }
              case 48: {
                Disabled = input.ReadBool();
                break;
              }
              case 58: {
                unlockConditions_.AddEntriesFrom(input, _repeated_unlockConditions_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          id_ = other.id_;
          dataVersion_ = other.dataVersion_;
          dataBranch_ = other.dataBranch_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data_version" field.</summary>
        public const int DataVersionFieldNumber = 2;
        private string dataVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataVersion {
          get { return dataVersion_; }
          set {
            dataVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data_branch" field.</summary>
        public const int DataBranchFieldNumber = 3;
        private string dataBranch_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataBranch {
          get { return dataBranch_; }
          set {
            dataBranch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (DataVersion != other.DataVersion) return false;
          if (DataBranch != other.DataBranch) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (DataVersion.Length != 0) hash ^= DataVersion.GetHashCode();
          if (DataBranch.Length != 0) hash ^= DataBranch.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (DataVersion.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DataVersion);
          }
          if (DataBranch.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DataBranch);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (DataVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DataVersion);
          }
          if (DataBranch.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DataBranch);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.DataVersion.Length != 0) {
            DataVersion = other.DataVersion;
          }
          if (other.DataBranch.Length != 0) {
            DataBranch = other.DataBranch;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                DataVersion = input.ReadString();
                break;
              }
              case 26: {
                DataBranch = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BonusCategory : pb::IMessage<BonusCategory> {
        private static readonly pb::MessageParser<BonusCategory> _parser = new pb::MessageParser<BonusCategory>(() => new BonusCategory());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BonusCategory> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BonusCategory() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BonusCategory(BonusCategory other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BonusCategory Clone() {
          return new BonusCategory(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BonusCategory);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BonusCategory other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BonusCategory other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Cauldron : pb::IMessage<Cauldron> {
        private static readonly pb::MessageParser<Cauldron> _parser = new pb::MessageParser<Cauldron>(() => new Cauldron());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cauldron> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cauldron() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cauldron(Cauldron other) : this() {
          id_ = other.id_;
          type_ = other.type_;
          discount_ = other.discount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cauldron Clone() {
          return new Cauldron(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::WUProtos.Data.GmTemplate.Types.Cauldron.Types.CauldronType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.Cauldron.Types.CauldronType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "discount" field.</summary>
        public const int DiscountFieldNumber = 3;
        private float discount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Discount {
          get { return discount_; }
          set {
            discount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cauldron);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cauldron other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Type != other.Type) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Discount, other.Discount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Discount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Discount);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (Discount != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Discount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Discount != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cauldron other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Discount != 0F) {
            Discount = other.Discount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::WUProtos.Data.GmTemplate.Types.Cauldron.Types.CauldronType) input.ReadEnum();
                break;
              }
              case 29: {
                Discount = input.ReadFloat();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Cauldron message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CauldronType {
            [pbr::OriginalName("CAULDRON_UNKNOWN")] CauldronUnknown = 0,
            [pbr::OriginalName("CAULDRON_NORMAL")] CauldronNormal = 1,
            [pbr::OriginalName("CAULDRON_RENTAL")] CauldronRental = 2,
          }

        }
        #endregion

      }

      public sealed partial class ChamberTemplate : pb::IMessage<ChamberTemplate> {
        private static readonly pb::MessageParser<ChamberTemplate> _parser = new pb::MessageParser<ChamberTemplate>(() => new ChamberTemplate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChamberTemplate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberTemplate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberTemplate(ChamberTemplate other) : this() {
          id_ = other.id_;
          unlockRequirements_ = other.unlockRequirements_ != null ? other.unlockRequirements_.Clone() : null;
          visibilityRequirements_ = other.visibilityRequirements_ != null ? other.visibilityRequirements_.Clone() : null;
          minRunestoneLevel_ = other.minRunestoneLevel_;
          maxRunestoneLevel_ = other.maxRunestoneLevel_;
          playerCap_ = other.playerCap_;
          durationMs_ = other.durationMs_;
          knockoutTimeMs_ = other.knockoutTimeMs_;
          playerCountMultipliers_ = other.playerCountMultipliers_.Clone();
          baseChamberRating_ = other.baseChamberRating_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChamberTemplate Clone() {
          return new ChamberTemplate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unlock_requirements" field.</summary>
        public const int UnlockRequirementsFieldNumber = 2;
        private global::WUProtos.Data.Requirements unlockRequirements_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements UnlockRequirements {
          get { return unlockRequirements_; }
          set {
            unlockRequirements_ = value;
          }
        }

        /// <summary>Field number for the "visibility_requirements" field.</summary>
        public const int VisibilityRequirementsFieldNumber = 3;
        private global::WUProtos.Data.Requirements visibilityRequirements_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements VisibilityRequirements {
          get { return visibilityRequirements_; }
          set {
            visibilityRequirements_ = value;
          }
        }

        /// <summary>Field number for the "min_runestone_level" field.</summary>
        public const int MinRunestoneLevelFieldNumber = 4;
        private uint minRunestoneLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinRunestoneLevel {
          get { return minRunestoneLevel_; }
          set {
            minRunestoneLevel_ = value;
          }
        }

        /// <summary>Field number for the "max_runestone_level" field.</summary>
        public const int MaxRunestoneLevelFieldNumber = 5;
        private uint maxRunestoneLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxRunestoneLevel {
          get { return maxRunestoneLevel_; }
          set {
            maxRunestoneLevel_ = value;
          }
        }

        /// <summary>Field number for the "player_cap" field.</summary>
        public const int PlayerCapFieldNumber = 6;
        private uint playerCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerCap {
          get { return playerCap_; }
          set {
            playerCap_ = value;
          }
        }

        /// <summary>Field number for the "duration_ms" field.</summary>
        public const int DurationMsFieldNumber = 7;
        private long durationMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DurationMs {
          get { return durationMs_; }
          set {
            durationMs_ = value;
          }
        }

        /// <summary>Field number for the "knockout_time_ms" field.</summary>
        public const int KnockoutTimeMsFieldNumber = 10;
        private long knockoutTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long KnockoutTimeMs {
          get { return knockoutTimeMs_; }
          set {
            knockoutTimeMs_ = value;
          }
        }

        /// <summary>Field number for the "player_count_multipliers" field.</summary>
        public const int PlayerCountMultipliersFieldNumber = 11;
        private static readonly pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers>.Codec _map_playerCountMultipliers_codec
            = new pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers.Parser), 90);
        private readonly pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers> playerCountMultipliers_ = new pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.PlayerCountMultipliers> PlayerCountMultipliers {
          get { return playerCountMultipliers_; }
        }

        /// <summary>Field number for the "base_chamber_rating" field.</summary>
        public const int BaseChamberRatingFieldNumber = 12;
        private uint baseChamberRating_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseChamberRating {
          get { return baseChamberRating_; }
          set {
            baseChamberRating_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChamberTemplate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChamberTemplate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(UnlockRequirements, other.UnlockRequirements)) return false;
          if (!object.Equals(VisibilityRequirements, other.VisibilityRequirements)) return false;
          if (MinRunestoneLevel != other.MinRunestoneLevel) return false;
          if (MaxRunestoneLevel != other.MaxRunestoneLevel) return false;
          if (PlayerCap != other.PlayerCap) return false;
          if (DurationMs != other.DurationMs) return false;
          if (KnockoutTimeMs != other.KnockoutTimeMs) return false;
          if (!PlayerCountMultipliers.Equals(other.PlayerCountMultipliers)) return false;
          if (BaseChamberRating != other.BaseChamberRating) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (unlockRequirements_ != null) hash ^= UnlockRequirements.GetHashCode();
          if (visibilityRequirements_ != null) hash ^= VisibilityRequirements.GetHashCode();
          if (MinRunestoneLevel != 0) hash ^= MinRunestoneLevel.GetHashCode();
          if (MaxRunestoneLevel != 0) hash ^= MaxRunestoneLevel.GetHashCode();
          if (PlayerCap != 0) hash ^= PlayerCap.GetHashCode();
          if (DurationMs != 0L) hash ^= DurationMs.GetHashCode();
          if (KnockoutTimeMs != 0L) hash ^= KnockoutTimeMs.GetHashCode();
          hash ^= PlayerCountMultipliers.GetHashCode();
          if (BaseChamberRating != 0) hash ^= BaseChamberRating.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (unlockRequirements_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(UnlockRequirements);
          }
          if (visibilityRequirements_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(VisibilityRequirements);
          }
          if (MinRunestoneLevel != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MinRunestoneLevel);
          }
          if (MaxRunestoneLevel != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(MaxRunestoneLevel);
          }
          if (PlayerCap != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(PlayerCap);
          }
          if (DurationMs != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(DurationMs);
          }
          if (KnockoutTimeMs != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(KnockoutTimeMs);
          }
          playerCountMultipliers_.WriteTo(output, _map_playerCountMultipliers_codec);
          if (BaseChamberRating != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(BaseChamberRating);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (unlockRequirements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockRequirements);
          }
          if (visibilityRequirements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisibilityRequirements);
          }
          if (MinRunestoneLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinRunestoneLevel);
          }
          if (MaxRunestoneLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRunestoneLevel);
          }
          if (PlayerCap != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCap);
          }
          if (DurationMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DurationMs);
          }
          if (KnockoutTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(KnockoutTimeMs);
          }
          size += playerCountMultipliers_.CalculateSize(_map_playerCountMultipliers_codec);
          if (BaseChamberRating != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseChamberRating);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChamberTemplate other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.unlockRequirements_ != null) {
            if (unlockRequirements_ == null) {
              UnlockRequirements = new global::WUProtos.Data.Requirements();
            }
            UnlockRequirements.MergeFrom(other.UnlockRequirements);
          }
          if (other.visibilityRequirements_ != null) {
            if (visibilityRequirements_ == null) {
              VisibilityRequirements = new global::WUProtos.Data.Requirements();
            }
            VisibilityRequirements.MergeFrom(other.VisibilityRequirements);
          }
          if (other.MinRunestoneLevel != 0) {
            MinRunestoneLevel = other.MinRunestoneLevel;
          }
          if (other.MaxRunestoneLevel != 0) {
            MaxRunestoneLevel = other.MaxRunestoneLevel;
          }
          if (other.PlayerCap != 0) {
            PlayerCap = other.PlayerCap;
          }
          if (other.DurationMs != 0L) {
            DurationMs = other.DurationMs;
          }
          if (other.KnockoutTimeMs != 0L) {
            KnockoutTimeMs = other.KnockoutTimeMs;
          }
          playerCountMultipliers_.Add(other.playerCountMultipliers_);
          if (other.BaseChamberRating != 0) {
            BaseChamberRating = other.BaseChamberRating;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (unlockRequirements_ == null) {
                  UnlockRequirements = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(UnlockRequirements);
                break;
              }
              case 26: {
                if (visibilityRequirements_ == null) {
                  VisibilityRequirements = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(VisibilityRequirements);
                break;
              }
              case 32: {
                MinRunestoneLevel = input.ReadUInt32();
                break;
              }
              case 40: {
                MaxRunestoneLevel = input.ReadUInt32();
                break;
              }
              case 48: {
                PlayerCap = input.ReadUInt32();
                break;
              }
              case 56: {
                DurationMs = input.ReadInt64();
                break;
              }
              case 80: {
                KnockoutTimeMs = input.ReadInt64();
                break;
              }
              case 90: {
                playerCountMultipliers_.AddEntriesFrom(input, _map_playerCountMultipliers_codec);
                break;
              }
              case 96: {
                BaseChamberRating = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DeepLink : pb::IMessage<DeepLink> {
        private static readonly pb::MessageParser<DeepLink> _parser = new pb::MessageParser<DeepLink>(() => new DeepLink());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeepLink> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeepLink() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeepLink(DeepLink other) : this() {
          id_ = other.id_;
          category_ = other.category_;
          requirements_ = other.requirements_ != null ? other.requirements_.Clone() : null;
          item_ = other.item_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeepLink Clone() {
          return new DeepLink(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 2;
        private string category_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Category {
          get { return category_; }
          set {
            category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "requirements" field.</summary>
        public const int RequirementsFieldNumber = 3;
        private global::WUProtos.Data.Requirements requirements_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements Requirements {
          get { return requirements_; }
          set {
            requirements_ = value;
          }
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 4;
        private string item_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Item {
          get { return item_; }
          set {
            item_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeepLink);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeepLink other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Category != other.Category) return false;
          if (!object.Equals(Requirements, other.Requirements)) return false;
          if (Item != other.Item) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Category.Length != 0) hash ^= Category.GetHashCode();
          if (requirements_ != null) hash ^= Requirements.GetHashCode();
          if (Item.Length != 0) hash ^= Item.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Category.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Category);
          }
          if (requirements_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Requirements);
          }
          if (Item.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Item);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Category.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
          }
          if (requirements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requirements);
          }
          if (Item.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Item);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeepLink other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Category.Length != 0) {
            Category = other.Category;
          }
          if (other.requirements_ != null) {
            if (requirements_ == null) {
              Requirements = new global::WUProtos.Data.Requirements();
            }
            Requirements.MergeFrom(other.Requirements);
          }
          if (other.Item.Length != 0) {
            Item = other.Item;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Category = input.ReadString();
                break;
              }
              case 26: {
                if (requirements_ == null) {
                  Requirements = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(Requirements);
                break;
              }
              case 34: {
                Item = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ChallengeSpawnLogic : pb::IMessage<ChallengeSpawnLogic> {
        private static readonly pb::MessageParser<ChallengeSpawnLogic> _parser = new pb::MessageParser<ChallengeSpawnLogic>(() => new ChallengeSpawnLogic());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChallengeSpawnLogic> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChallengeSpawnLogic() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChallengeSpawnLogic(ChallengeSpawnLogic other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChallengeSpawnLogic Clone() {
          return new ChallengeSpawnLogic(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChallengeSpawnLogic);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChallengeSpawnLogic other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChallengeSpawnLogic other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectionItem : pb::IMessage<CollectionItem> {
        private static readonly pb::MessageParser<CollectionItem> _parser = new pb::MessageParser<CollectionItem>(() => new CollectionItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectionItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionItem(CollectionItem other) : this() {
          id_ = other.id_;
          familyId_ = other.familyId_;
          shardCount_ = other.shardCount_;
          rarity_ = other.rarity_;
          oneTimeRewards_ = other.oneTimeRewards_ != null ? other.oneTimeRewards_.Clone() : null;
          pageId_ = other.pageId_;
          unlockRequirements_ = other.unlockRequirements_ != null ? other.unlockRequirements_.Clone() : null;
          shardCounts_ = other.shardCounts_.Clone();
          stickerDisabled_ = other.stickerDisabled_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionItem Clone() {
          return new CollectionItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "family_id" field.</summary>
        public const int FamilyIdFieldNumber = 2;
        private string familyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FamilyId {
          get { return familyId_; }
          set {
            familyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "shard_count" field.</summary>
        public const int ShardCountFieldNumber = 3;
        private int shardCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ShardCount {
          get { return shardCount_; }
          set {
            shardCount_ = value;
          }
        }

        /// <summary>Field number for the "rarity" field.</summary>
        public const int RarityFieldNumber = 4;
        private int rarity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rarity {
          get { return rarity_; }
          set {
            rarity_ = value;
          }
        }

        /// <summary>Field number for the "one_time_rewards" field.</summary>
        public const int OneTimeRewardsFieldNumber = 5;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection oneTimeRewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection OneTimeRewards {
          get { return oneTimeRewards_; }
          set {
            oneTimeRewards_ = value;
          }
        }

        /// <summary>Field number for the "page_id" field.</summary>
        public const int PageIdFieldNumber = 6;
        private string pageId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PageId {
          get { return pageId_; }
          set {
            pageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unlock_requirements" field.</summary>
        public const int UnlockRequirementsFieldNumber = 7;
        private global::WUProtos.Data.Requirements unlockRequirements_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements UnlockRequirements {
          get { return unlockRequirements_; }
          set {
            unlockRequirements_ = value;
          }
        }

        /// <summary>Field number for the "shard_counts" field.</summary>
        public const int ShardCountsFieldNumber = 8;
        private static readonly pb::FieldCodec<int> _repeated_shardCounts_codec
            = pb::FieldCodec.ForInt32(66);
        private readonly pbc::RepeatedField<int> shardCounts_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> ShardCounts {
          get { return shardCounts_; }
        }

        /// <summary>Field number for the "sticker_disabled" field.</summary>
        public const int StickerDisabledFieldNumber = 10;
        private bool stickerDisabled_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool StickerDisabled {
          get { return stickerDisabled_; }
          set {
            stickerDisabled_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectionItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectionItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (FamilyId != other.FamilyId) return false;
          if (ShardCount != other.ShardCount) return false;
          if (Rarity != other.Rarity) return false;
          if (!object.Equals(OneTimeRewards, other.OneTimeRewards)) return false;
          if (PageId != other.PageId) return false;
          if (!object.Equals(UnlockRequirements, other.UnlockRequirements)) return false;
          if(!shardCounts_.Equals(other.shardCounts_)) return false;
          if (StickerDisabled != other.StickerDisabled) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (FamilyId.Length != 0) hash ^= FamilyId.GetHashCode();
          if (ShardCount != 0) hash ^= ShardCount.GetHashCode();
          if (Rarity != 0) hash ^= Rarity.GetHashCode();
          if (oneTimeRewards_ != null) hash ^= OneTimeRewards.GetHashCode();
          if (PageId.Length != 0) hash ^= PageId.GetHashCode();
          if (unlockRequirements_ != null) hash ^= UnlockRequirements.GetHashCode();
          hash ^= shardCounts_.GetHashCode();
          if (StickerDisabled != false) hash ^= StickerDisabled.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (FamilyId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FamilyId);
          }
          if (ShardCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ShardCount);
          }
          if (Rarity != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Rarity);
          }
          if (oneTimeRewards_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(OneTimeRewards);
          }
          if (PageId.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(PageId);
          }
          if (unlockRequirements_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(UnlockRequirements);
          }
          shardCounts_.WriteTo(output, _repeated_shardCounts_codec);
          if (StickerDisabled != false) {
            output.WriteRawTag(80);
            output.WriteBool(StickerDisabled);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (FamilyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyId);
          }
          if (ShardCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShardCount);
          }
          if (Rarity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rarity);
          }
          if (oneTimeRewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneTimeRewards);
          }
          if (PageId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PageId);
          }
          if (unlockRequirements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockRequirements);
          }
          size += shardCounts_.CalculateSize(_repeated_shardCounts_codec);
          if (StickerDisabled != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectionItem other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.FamilyId.Length != 0) {
            FamilyId = other.FamilyId;
          }
          if (other.ShardCount != 0) {
            ShardCount = other.ShardCount;
          }
          if (other.Rarity != 0) {
            Rarity = other.Rarity;
          }
          if (other.oneTimeRewards_ != null) {
            if (oneTimeRewards_ == null) {
              OneTimeRewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            OneTimeRewards.MergeFrom(other.OneTimeRewards);
          }
          if (other.PageId.Length != 0) {
            PageId = other.PageId;
          }
          if (other.unlockRequirements_ != null) {
            if (unlockRequirements_ == null) {
              UnlockRequirements = new global::WUProtos.Data.Requirements();
            }
            UnlockRequirements.MergeFrom(other.UnlockRequirements);
          }
          shardCounts_.Add(other.shardCounts_);
          if (other.StickerDisabled != false) {
            StickerDisabled = other.StickerDisabled;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                FamilyId = input.ReadString();
                break;
              }
              case 24: {
                ShardCount = input.ReadInt32();
                break;
              }
              case 32: {
                Rarity = input.ReadInt32();
                break;
              }
              case 42: {
                if (oneTimeRewards_ == null) {
                  OneTimeRewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(OneTimeRewards);
                break;
              }
              case 50: {
                PageId = input.ReadString();
                break;
              }
              case 58: {
                if (unlockRequirements_ == null) {
                  UnlockRequirements = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(UnlockRequirements);
                break;
              }
              case 66:
              case 64: {
                shardCounts_.AddEntriesFrom(input, _repeated_shardCounts_codec);
                break;
              }
              case 80: {
                StickerDisabled = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectionFamilyRankTable : pb::IMessage<CollectionFamilyRankTable> {
        private static readonly pb::MessageParser<CollectionFamilyRankTable> _parser = new pb::MessageParser<CollectionFamilyRankTable>(() => new CollectionFamilyRankTable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectionFamilyRankTable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionFamilyRankTable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionFamilyRankTable(CollectionFamilyRankTable other) : this() {
          id_ = other.id_;
          rankData_ = other.rankData_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionFamilyRankTable Clone() {
          return new CollectionFamilyRankTable(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rank_data" field.</summary>
        public const int RankDataFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank> _repeated_rankData_codec
            = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank> rankData_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Types.CollectionFamilyRank> RankData {
          get { return rankData_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectionFamilyRankTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectionFamilyRankTable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!rankData_.Equals(other.rankData_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= rankData_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          rankData_.WriteTo(output, _repeated_rankData_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += rankData_.CalculateSize(_repeated_rankData_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectionFamilyRankTable other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          rankData_.Add(other.rankData_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                rankData_.AddEntriesFrom(input, _repeated_rankData_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CollectionFamilyRankTable message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class CollectionFamilyRank : pb::IMessage<CollectionFamilyRank> {
            private static readonly pb::MessageParser<CollectionFamilyRank> _parser = new pb::MessageParser<CollectionFamilyRank>(() => new CollectionFamilyRank());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CollectionFamilyRank> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.CollectionFamilyRankTable.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CollectionFamilyRank() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CollectionFamilyRank(CollectionFamilyRank other) : this() {
              totalXpReq_ = other.totalXpReq_;
              chestCount_ = other.chestCount_;
              smallLoottableId_ = other.smallLoottableId_;
              levelUpLoottableId_ = other.levelUpLoottableId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CollectionFamilyRank Clone() {
              return new CollectionFamilyRank(this);
            }

            /// <summary>Field number for the "total_xp_req" field.</summary>
            public const int TotalXpReqFieldNumber = 1;
            private long totalXpReq_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long TotalXpReq {
              get { return totalXpReq_; }
              set {
                totalXpReq_ = value;
              }
            }

            /// <summary>Field number for the "chest_count" field.</summary>
            public const int ChestCountFieldNumber = 2;
            private int chestCount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int ChestCount {
              get { return chestCount_; }
              set {
                chestCount_ = value;
              }
            }

            /// <summary>Field number for the "small_loottable_id" field.</summary>
            public const int SmallLoottableIdFieldNumber = 3;
            private string smallLoottableId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SmallLoottableId {
              get { return smallLoottableId_; }
              set {
                smallLoottableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "level_up_loottable_id" field.</summary>
            public const int LevelUpLoottableIdFieldNumber = 4;
            private string levelUpLoottableId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string LevelUpLoottableId {
              get { return levelUpLoottableId_; }
              set {
                levelUpLoottableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CollectionFamilyRank);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CollectionFamilyRank other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TotalXpReq != other.TotalXpReq) return false;
              if (ChestCount != other.ChestCount) return false;
              if (SmallLoottableId != other.SmallLoottableId) return false;
              if (LevelUpLoottableId != other.LevelUpLoottableId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TotalXpReq != 0L) hash ^= TotalXpReq.GetHashCode();
              if (ChestCount != 0) hash ^= ChestCount.GetHashCode();
              if (SmallLoottableId.Length != 0) hash ^= SmallLoottableId.GetHashCode();
              if (LevelUpLoottableId.Length != 0) hash ^= LevelUpLoottableId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TotalXpReq != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(TotalXpReq);
              }
              if (ChestCount != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(ChestCount);
              }
              if (SmallLoottableId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(SmallLoottableId);
              }
              if (LevelUpLoottableId.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(LevelUpLoottableId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TotalXpReq != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalXpReq);
              }
              if (ChestCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChestCount);
              }
              if (SmallLoottableId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SmallLoottableId);
              }
              if (LevelUpLoottableId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelUpLoottableId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CollectionFamilyRank other) {
              if (other == null) {
                return;
              }
              if (other.TotalXpReq != 0L) {
                TotalXpReq = other.TotalXpReq;
              }
              if (other.ChestCount != 0) {
                ChestCount = other.ChestCount;
              }
              if (other.SmallLoottableId.Length != 0) {
                SmallLoottableId = other.SmallLoottableId;
              }
              if (other.LevelUpLoottableId.Length != 0) {
                LevelUpLoottableId = other.LevelUpLoottableId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TotalXpReq = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    ChestCount = input.ReadInt32();
                    break;
                  }
                  case 26: {
                    SmallLoottableId = input.ReadString();
                    break;
                  }
                  case 34: {
                    LevelUpLoottableId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class CollectionPage : pb::IMessage<CollectionPage> {
        private static readonly pb::MessageParser<CollectionPage> _parser = new pb::MessageParser<CollectionPage>(() => new CollectionPage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectionPage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionPage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionPage(CollectionPage other) : this() {
          id_ = other.id_;
          familyId_ = other.familyId_;
          items_ = other.items_.Clone();
          completionRewards_ = other.completionRewards_.Clone();
          unlockRequirements_ = other.unlockRequirements_ != null ? other.unlockRequirements_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectionPage Clone() {
          return new CollectionPage(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "family_id" field.</summary>
        public const int FamilyIdFieldNumber = 2;
        private string familyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FamilyId {
          get { return familyId_; }
          set {
            familyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_items_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> items_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Items {
          get { return items_; }
        }

        /// <summary>Field number for the "completion_rewards" field.</summary>
        public const int CompletionRewardsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Loot.LootReward.Types.LootCollection> _repeated_completionRewards_codec
            = pb::FieldCodec.ForMessage(34, global::WUProtos.Data.Loot.LootReward.Types.LootCollection.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward.Types.LootCollection> completionRewards_ = new pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward.Types.LootCollection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Loot.LootReward.Types.LootCollection> CompletionRewards {
          get { return completionRewards_; }
        }

        /// <summary>Field number for the "unlock_requirements" field.</summary>
        public const int UnlockRequirementsFieldNumber = 5;
        private global::WUProtos.Data.Requirements unlockRequirements_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements UnlockRequirements {
          get { return unlockRequirements_; }
          set {
            unlockRequirements_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectionPage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectionPage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (FamilyId != other.FamilyId) return false;
          if(!items_.Equals(other.items_)) return false;
          if(!completionRewards_.Equals(other.completionRewards_)) return false;
          if (!object.Equals(UnlockRequirements, other.UnlockRequirements)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (FamilyId.Length != 0) hash ^= FamilyId.GetHashCode();
          hash ^= items_.GetHashCode();
          hash ^= completionRewards_.GetHashCode();
          if (unlockRequirements_ != null) hash ^= UnlockRequirements.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (FamilyId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FamilyId);
          }
          items_.WriteTo(output, _repeated_items_codec);
          completionRewards_.WriteTo(output, _repeated_completionRewards_codec);
          if (unlockRequirements_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(UnlockRequirements);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (FamilyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyId);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          size += completionRewards_.CalculateSize(_repeated_completionRewards_codec);
          if (unlockRequirements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockRequirements);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectionPage other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.FamilyId.Length != 0) {
            FamilyId = other.FamilyId;
          }
          items_.Add(other.items_);
          completionRewards_.Add(other.completionRewards_);
          if (other.unlockRequirements_ != null) {
            if (unlockRequirements_ == null) {
              UnlockRequirements = new global::WUProtos.Data.Requirements();
            }
            UnlockRequirements.MergeFrom(other.UnlockRequirements);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                FamilyId = input.ReadString();
                break;
              }
              case 26: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 34: {
                completionRewards_.AddEntriesFrom(input, _repeated_completionRewards_codec);
                break;
              }
              case 42: {
                if (unlockRequirements_ == null) {
                  UnlockRequirements = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(UnlockRequirements);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Encounter : pb::IMessage<Encounter> {
        private static readonly pb::MessageParser<Encounter> _parser = new pb::MessageParser<Encounter>(() => new Encounter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Encounter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Encounter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Encounter(Encounter other) : this() {
          id_ = other.id_;
          collectionItemRewardGmtId_ = other.collectionItemRewardGmtId_;
          stages_ = other.stages_.Clone();
          collectionItemRewardShards_ = other.collectionItemRewardShards_;
          collectionFamilyGmtId_ = other.collectionFamilyGmtId_;
          affinityProfessionId_ = other.affinityProfessionId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Encounter Clone() {
          return new Encounter(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection_item_reward_gmt_id" field.</summary>
        public const int CollectionItemRewardGmtIdFieldNumber = 2;
        private string collectionItemRewardGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CollectionItemRewardGmtId {
          get { return collectionItemRewardGmtId_; }
          set {
            collectionItemRewardGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stages" field.</summary>
        public const int StagesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage> _repeated_stages_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage> stages_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage> Stages {
          get { return stages_; }
        }

        /// <summary>Field number for the "collection_item_reward_shards" field.</summary>
        public const int CollectionItemRewardShardsFieldNumber = 4;
        private int collectionItemRewardShards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CollectionItemRewardShards {
          get { return collectionItemRewardShards_; }
          set {
            collectionItemRewardShards_ = value;
          }
        }

        /// <summary>Field number for the "collection_family_gmt_id" field.</summary>
        public const int CollectionFamilyGmtIdFieldNumber = 5;
        private string collectionFamilyGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CollectionFamilyGmtId {
          get { return collectionFamilyGmtId_; }
          set {
            collectionFamilyGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "affinity_profession_id" field.</summary>
        public const int AffinityProfessionIdFieldNumber = 6;
        private string affinityProfessionId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AffinityProfessionId {
          get { return affinityProfessionId_; }
          set {
            affinityProfessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Encounter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Encounter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (CollectionItemRewardGmtId != other.CollectionItemRewardGmtId) return false;
          if(!stages_.Equals(other.stages_)) return false;
          if (CollectionItemRewardShards != other.CollectionItemRewardShards) return false;
          if (CollectionFamilyGmtId != other.CollectionFamilyGmtId) return false;
          if (AffinityProfessionId != other.AffinityProfessionId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (CollectionItemRewardGmtId.Length != 0) hash ^= CollectionItemRewardGmtId.GetHashCode();
          hash ^= stages_.GetHashCode();
          if (CollectionItemRewardShards != 0) hash ^= CollectionItemRewardShards.GetHashCode();
          if (CollectionFamilyGmtId.Length != 0) hash ^= CollectionFamilyGmtId.GetHashCode();
          if (AffinityProfessionId.Length != 0) hash ^= AffinityProfessionId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (CollectionItemRewardGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CollectionItemRewardGmtId);
          }
          stages_.WriteTo(output, _repeated_stages_codec);
          if (CollectionItemRewardShards != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(CollectionItemRewardShards);
          }
          if (CollectionFamilyGmtId.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(CollectionFamilyGmtId);
          }
          if (AffinityProfessionId.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(AffinityProfessionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (CollectionItemRewardGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionItemRewardGmtId);
          }
          size += stages_.CalculateSize(_repeated_stages_codec);
          if (CollectionItemRewardShards != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectionItemRewardShards);
          }
          if (CollectionFamilyGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionFamilyGmtId);
          }
          if (AffinityProfessionId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AffinityProfessionId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Encounter other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.CollectionItemRewardGmtId.Length != 0) {
            CollectionItemRewardGmtId = other.CollectionItemRewardGmtId;
          }
          stages_.Add(other.stages_);
          if (other.CollectionItemRewardShards != 0) {
            CollectionItemRewardShards = other.CollectionItemRewardShards;
          }
          if (other.CollectionFamilyGmtId.Length != 0) {
            CollectionFamilyGmtId = other.CollectionFamilyGmtId;
          }
          if (other.AffinityProfessionId.Length != 0) {
            AffinityProfessionId = other.AffinityProfessionId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                CollectionItemRewardGmtId = input.ReadString();
                break;
              }
              case 26: {
                stages_.AddEntriesFrom(input, _repeated_stages_codec);
                break;
              }
              case 32: {
                CollectionItemRewardShards = input.ReadInt32();
                break;
              }
              case 42: {
                CollectionFamilyGmtId = input.ReadString();
                break;
              }
              case 50: {
                AffinityProfessionId = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Encounter message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class EncounterStage : pb::IMessage<EncounterStage> {
            private static readonly pb::MessageParser<EncounterStage> _parser = new pb::MessageParser<EncounterStage>(() => new EncounterStage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EncounterStage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EncounterStage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EncounterStage(EncounterStage other) : this() {
              spellGmtId_ = other.spellGmtId_;
              switch (other.TypeCase) {
                case TypeOneofCase.Swish:
                  Swish = other.Swish.Clone();
                  break;
                case TypeOneofCase.Combat:
                  Combat = other.Combat.Clone();
                  break;
                case TypeOneofCase.Portkey:
                  Portkey = other.Portkey.Clone();
                  break;
                case TypeOneofCase.Picture:
                  Picture = other.Picture.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EncounterStage Clone() {
              return new EncounterStage(this);
            }

            /// <summary>Field number for the "swish" field.</summary>
            public const int SwishFieldNumber = 1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish Swish {
              get { return typeCase_ == TypeOneofCase.Swish ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Swish;
              }
            }

            /// <summary>Field number for the "combat" field.</summary>
            public const int CombatFieldNumber = 2;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat Combat {
              get { return typeCase_ == TypeOneofCase.Combat ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Combat;
              }
            }

            /// <summary>Field number for the "portkey" field.</summary>
            public const int PortkeyFieldNumber = 3;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey Portkey {
              get { return typeCase_ == TypeOneofCase.Portkey ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Portkey;
              }
            }

            /// <summary>Field number for the "picture" field.</summary>
            public const int PictureFieldNumber = 4;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture Picture {
              get { return typeCase_ == TypeOneofCase.Picture ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture) type_ : null; }
              set {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Picture;
              }
            }

            /// <summary>Field number for the "spell_gmt_id" field.</summary>
            public const int SpellGmtIdFieldNumber = 5;
            private string spellGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SpellGmtId {
              get { return spellGmtId_; }
              set {
                spellGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            private object type_;
            /// <summary>Enum of possible cases for the "Type" oneof.</summary>
            public enum TypeOneofCase {
              None = 0,
              Swish = 1,
              Combat = 2,
              Portkey = 3,
              Picture = 4,
            }
            private TypeOneofCase typeCase_ = TypeOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TypeOneofCase TypeCase {
              get { return typeCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              typeCase_ = TypeOneofCase.None;
              type_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EncounterStage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EncounterStage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Swish, other.Swish)) return false;
              if (!object.Equals(Combat, other.Combat)) return false;
              if (!object.Equals(Portkey, other.Portkey)) return false;
              if (!object.Equals(Picture, other.Picture)) return false;
              if (SpellGmtId != other.SpellGmtId) return false;
              if (TypeCase != other.TypeCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (typeCase_ == TypeOneofCase.Swish) hash ^= Swish.GetHashCode();
              if (typeCase_ == TypeOneofCase.Combat) hash ^= Combat.GetHashCode();
              if (typeCase_ == TypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
              if (typeCase_ == TypeOneofCase.Picture) hash ^= Picture.GetHashCode();
              if (SpellGmtId.Length != 0) hash ^= SpellGmtId.GetHashCode();
              hash ^= (int) typeCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (typeCase_ == TypeOneofCase.Swish) {
                output.WriteRawTag(10);
                output.WriteMessage(Swish);
              }
              if (typeCase_ == TypeOneofCase.Combat) {
                output.WriteRawTag(18);
                output.WriteMessage(Combat);
              }
              if (typeCase_ == TypeOneofCase.Portkey) {
                output.WriteRawTag(26);
                output.WriteMessage(Portkey);
              }
              if (typeCase_ == TypeOneofCase.Picture) {
                output.WriteRawTag(34);
                output.WriteMessage(Picture);
              }
              if (SpellGmtId.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(SpellGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (typeCase_ == TypeOneofCase.Swish) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Swish);
              }
              if (typeCase_ == TypeOneofCase.Combat) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Combat);
              }
              if (typeCase_ == TypeOneofCase.Portkey) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portkey);
              }
              if (typeCase_ == TypeOneofCase.Picture) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Picture);
              }
              if (SpellGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SpellGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EncounterStage other) {
              if (other == null) {
                return;
              }
              if (other.SpellGmtId.Length != 0) {
                SpellGmtId = other.SpellGmtId;
              }
              switch (other.TypeCase) {
                case TypeOneofCase.Swish:
                  if (Swish == null) {
                    Swish = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish();
                  }
                  Swish.MergeFrom(other.Swish);
                  break;
                case TypeOneofCase.Combat:
                  if (Combat == null) {
                    Combat = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat();
                  }
                  Combat.MergeFrom(other.Combat);
                  break;
                case TypeOneofCase.Portkey:
                  if (Portkey == null) {
                    Portkey = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey();
                  }
                  Portkey.MergeFrom(other.Portkey);
                  break;
                case TypeOneofCase.Picture:
                  if (Picture == null) {
                    Picture = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture();
                  }
                  Picture.MergeFrom(other.Picture);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageSwish();
                    if (typeCase_ == TypeOneofCase.Swish) {
                      subBuilder.MergeFrom(Swish);
                    }
                    input.ReadMessage(subBuilder);
                    Swish = subBuilder;
                    break;
                  }
                  case 18: {
                    global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat();
                    if (typeCase_ == TypeOneofCase.Combat) {
                      subBuilder.MergeFrom(Combat);
                    }
                    input.ReadMessage(subBuilder);
                    Combat = subBuilder;
                    break;
                  }
                  case 26: {
                    global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePortkey();
                    if (typeCase_ == TypeOneofCase.Portkey) {
                      subBuilder.MergeFrom(Portkey);
                    }
                    input.ReadMessage(subBuilder);
                    Portkey = subBuilder;
                    break;
                  }
                  case 34: {
                    global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStagePicture();
                    if (typeCase_ == TypeOneofCase.Picture) {
                      subBuilder.MergeFrom(Picture);
                    }
                    input.ReadMessage(subBuilder);
                    Picture = subBuilder;
                    break;
                  }
                  case 42: {
                    SpellGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the EncounterStage message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class EncounterStageSwish : pb::IMessage<EncounterStageSwish> {
                private static readonly pb::MessageParser<EncounterStageSwish> _parser = new pb::MessageParser<EncounterStageSwish>(() => new EncounterStageSwish());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<EncounterStageSwish> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStageSwish() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStageSwish(EncounterStageSwish other) : this() {
                  baseWinRate_ = other.baseWinRate_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStageSwish Clone() {
                  return new EncounterStageSwish(this);
                }

                /// <summary>Field number for the "base_win_rate" field.</summary>
                public const int BaseWinRateFieldNumber = 1;
                private float baseWinRate_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float BaseWinRate {
                  get { return baseWinRate_; }
                  set {
                    baseWinRate_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as EncounterStageSwish);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(EncounterStageSwish other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseWinRate, other.BaseWinRate)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (BaseWinRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseWinRate);
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (BaseWinRate != 0F) {
                    output.WriteRawTag(13);
                    output.WriteFloat(BaseWinRate);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (BaseWinRate != 0F) {
                    size += 1 + 4;
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(EncounterStageSwish other) {
                  if (other == null) {
                    return;
                  }
                  if (other.BaseWinRate != 0F) {
                    BaseWinRate = other.BaseWinRate;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 13: {
                        BaseWinRate = input.ReadFloat();
                        break;
                      }
                    }
                  }
                }

              }

              public sealed partial class EncounterStageCombat : pb::IMessage<EncounterStageCombat> {
                private static readonly pb::MessageParser<EncounterStageCombat> _parser = new pb::MessageParser<EncounterStageCombat>(() => new EncounterStageCombat());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<EncounterStageCombat> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStageCombat() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStageCombat(EncounterStageCombat other) : this() {
                  stateGraphNodes_ = other.stateGraphNodes_.Clone();
                  enemyStats_ = other.enemyStats_ != null ? other.enemyStats_.Clone() : null;
                  enemyRanks_ = other.enemyRanks_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStageCombat Clone() {
                  return new EncounterStageCombat(this);
                }

                /// <summary>Field number for the "state_graph_nodes" field.</summary>
                public const int StateGraphNodesFieldNumber = 1;
                private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState> _repeated_stateGraphNodes_codec
                    = pb::FieldCodec.ForMessage(10, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState.Parser);
                private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState> stateGraphNodes_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatState> StateGraphNodes {
                  get { return stateGraphNodes_; }
                }

                /// <summary>Field number for the "enemy_stats" field.</summary>
                public const int EnemyStatsFieldNumber = 2;
                private global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats enemyStats_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats EnemyStats {
                  get { return enemyStats_; }
                  set {
                    enemyStats_ = value;
                  }
                }

                /// <summary>Field number for the "enemy_ranks" field.</summary>
                public const int EnemyRanksFieldNumber = 3;
                private static readonly pb::FieldCodec<string> _repeated_enemyRanks_codec
                    = pb::FieldCodec.ForString(26);
                private readonly pbc::RepeatedField<string> enemyRanks_ = new pbc::RepeatedField<string>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> EnemyRanks {
                  get { return enemyRanks_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as EncounterStageCombat);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(EncounterStageCombat other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if(!stateGraphNodes_.Equals(other.stateGraphNodes_)) return false;
                  if (!object.Equals(EnemyStats, other.EnemyStats)) return false;
                  if(!enemyRanks_.Equals(other.enemyRanks_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= stateGraphNodes_.GetHashCode();
                  if (enemyStats_ != null) hash ^= EnemyStats.GetHashCode();
                  hash ^= enemyRanks_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  stateGraphNodes_.WriteTo(output, _repeated_stateGraphNodes_codec);
                  if (enemyStats_ != null) {
                    output.WriteRawTag(18);
                    output.WriteMessage(EnemyStats);
                  }
                  enemyRanks_.WriteTo(output, _repeated_enemyRanks_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += stateGraphNodes_.CalculateSize(_repeated_stateGraphNodes_codec);
                  if (enemyStats_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnemyStats);
                  }
                  size += enemyRanks_.CalculateSize(_repeated_enemyRanks_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(EncounterStageCombat other) {
                  if (other == null) {
                    return;
                  }
                  stateGraphNodes_.Add(other.stateGraphNodes_);
                  if (other.enemyStats_ != null) {
                    if (enemyStats_ == null) {
                      EnemyStats = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats();
                    }
                    EnemyStats.MergeFrom(other.EnemyStats);
                  }
                  enemyRanks_.Add(other.enemyRanks_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        stateGraphNodes_.AddEntriesFrom(input, _repeated_stateGraphNodes_codec);
                        break;
                      }
                      case 18: {
                        if (enemyStats_ == null) {
                          EnemyStats = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats();
                        }
                        input.ReadMessage(EnemyStats);
                        break;
                      }
                      case 26: {
                        enemyRanks_.AddEntriesFrom(input, _repeated_enemyRanks_codec);
                        break;
                      }
                    }
                  }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the EncounterStageCombat message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  public sealed partial class CombatState : pb::IMessage<CombatState> {
                    private static readonly pb::MessageParser<CombatState> _parser = new pb::MessageParser<CombatState>(() => new CombatState());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<CombatState> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatState() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatState(CombatState other) : this() {
                      possibleMoves_ = other.possibleMoves_.Clone();
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatState Clone() {
                      return new CombatState(this);
                    }

                    /// <summary>Field number for the "possible_moves" field.</summary>
                    public const int PossibleMovesFieldNumber = 1;
                    private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType> _repeated_possibleMoves_codec
                        = pb::FieldCodec.ForMessage(10, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Parser);
                    private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType> possibleMoves_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType>();
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType> PossibleMoves {
                      get { return possibleMoves_; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as CombatState);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(CombatState other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if(!possibleMoves_.Equals(other.possibleMoves_)) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      hash ^= possibleMoves_.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      possibleMoves_.WriteTo(output, _repeated_possibleMoves_codec);
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      size += possibleMoves_.CalculateSize(_repeated_possibleMoves_codec);
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(CombatState other) {
                      if (other == null) {
                        return;
                      }
                      possibleMoves_.Add(other.possibleMoves_);
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 10: {
                            possibleMoves_.AddEntriesFrom(input, _repeated_possibleMoves_codec);
                            break;
                          }
                        }
                      }
                    }

                  }

                  public sealed partial class CombatMoveType : pb::IMessage<CombatMoveType> {
                    private static readonly pb::MessageParser<CombatMoveType> _parser = new pb::MessageParser<CombatMoveType>(() => new CombatMoveType());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<CombatMoveType> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Descriptor.NestedTypes[1]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatMoveType() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatMoveType(CombatMoveType other) : this() {
                      switch (other.CombatMoveCase) {
                        case CombatMoveOneofCase.PlayerAttack:
                          PlayerAttack = other.PlayerAttack.Clone();
                          break;
                        case CombatMoveOneofCase.PlayerDefend:
                          PlayerDefend = other.PlayerDefend.Clone();
                          break;
                        case CombatMoveOneofCase.PlayerAutoAdvance:
                          PlayerAutoAdvance = other.PlayerAutoAdvance.Clone();
                          break;
                      }

                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatMoveType Clone() {
                      return new CombatMoveType(this);
                    }

                    /// <summary>Field number for the "player_attack" field.</summary>
                    public const int PlayerAttackFieldNumber = 1;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack PlayerAttack {
                      get { return combatMoveCase_ == CombatMoveOneofCase.PlayerAttack ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack) combatMove_ : null; }
                      set {
                        combatMove_ = value;
                        combatMoveCase_ = value == null ? CombatMoveOneofCase.None : CombatMoveOneofCase.PlayerAttack;
                      }
                    }

                    /// <summary>Field number for the "player_defend" field.</summary>
                    public const int PlayerDefendFieldNumber = 2;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend PlayerDefend {
                      get { return combatMoveCase_ == CombatMoveOneofCase.PlayerDefend ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend) combatMove_ : null; }
                      set {
                        combatMove_ = value;
                        combatMoveCase_ = value == null ? CombatMoveOneofCase.None : CombatMoveOneofCase.PlayerDefend;
                      }
                    }

                    /// <summary>Field number for the "player_auto_advance" field.</summary>
                    public const int PlayerAutoAdvanceFieldNumber = 3;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance PlayerAutoAdvance {
                      get { return combatMoveCase_ == CombatMoveOneofCase.PlayerAutoAdvance ? (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance) combatMove_ : null; }
                      set {
                        combatMove_ = value;
                        combatMoveCase_ = value == null ? CombatMoveOneofCase.None : CombatMoveOneofCase.PlayerAutoAdvance;
                      }
                    }

                    private object combatMove_;
                    /// <summary>Enum of possible cases for the "CombatMove" oneof.</summary>
                    public enum CombatMoveOneofCase {
                      None = 0,
                      PlayerAttack = 1,
                      PlayerDefend = 2,
                      PlayerAutoAdvance = 3,
                    }
                    private CombatMoveOneofCase combatMoveCase_ = CombatMoveOneofCase.None;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatMoveOneofCase CombatMoveCase {
                      get { return combatMoveCase_; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void ClearCombatMove() {
                      combatMoveCase_ = CombatMoveOneofCase.None;
                      combatMove_ = null;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as CombatMoveType);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(CombatMoveType other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if (!object.Equals(PlayerAttack, other.PlayerAttack)) return false;
                      if (!object.Equals(PlayerDefend, other.PlayerDefend)) return false;
                      if (!object.Equals(PlayerAutoAdvance, other.PlayerAutoAdvance)) return false;
                      if (CombatMoveCase != other.CombatMoveCase) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerAttack) hash ^= PlayerAttack.GetHashCode();
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerDefend) hash ^= PlayerDefend.GetHashCode();
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerAutoAdvance) hash ^= PlayerAutoAdvance.GetHashCode();
                      hash ^= (int) combatMoveCase_;
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerAttack) {
                        output.WriteRawTag(10);
                        output.WriteMessage(PlayerAttack);
                      }
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerDefend) {
                        output.WriteRawTag(18);
                        output.WriteMessage(PlayerDefend);
                      }
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerAutoAdvance) {
                        output.WriteRawTag(26);
                        output.WriteMessage(PlayerAutoAdvance);
                      }
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerAttack) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAttack);
                      }
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerDefend) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerDefend);
                      }
                      if (combatMoveCase_ == CombatMoveOneofCase.PlayerAutoAdvance) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAutoAdvance);
                      }
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(CombatMoveType other) {
                      if (other == null) {
                        return;
                      }
                      switch (other.CombatMoveCase) {
                        case CombatMoveOneofCase.PlayerAttack:
                          if (PlayerAttack == null) {
                            PlayerAttack = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack();
                          }
                          PlayerAttack.MergeFrom(other.PlayerAttack);
                          break;
                        case CombatMoveOneofCase.PlayerDefend:
                          if (PlayerDefend == null) {
                            PlayerDefend = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend();
                          }
                          PlayerDefend.MergeFrom(other.PlayerDefend);
                          break;
                        case CombatMoveOneofCase.PlayerAutoAdvance:
                          if (PlayerAutoAdvance == null) {
                            PlayerAutoAdvance = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance();
                          }
                          PlayerAutoAdvance.MergeFrom(other.PlayerAutoAdvance);
                          break;
                      }

                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 10: {
                            global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAttack();
                            if (combatMoveCase_ == CombatMoveOneofCase.PlayerAttack) {
                              subBuilder.MergeFrom(PlayerAttack);
                            }
                            input.ReadMessage(subBuilder);
                            PlayerAttack = subBuilder;
                            break;
                          }
                          case 18: {
                            global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerDefend();
                            if (combatMoveCase_ == CombatMoveOneofCase.PlayerDefend) {
                              subBuilder.MergeFrom(PlayerDefend);
                            }
                            input.ReadMessage(subBuilder);
                            PlayerDefend = subBuilder;
                            break;
                          }
                          case 26: {
                            global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance subBuilder = new global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Types.CombatPlayerAutoAdvance();
                            if (combatMoveCase_ == CombatMoveOneofCase.PlayerAutoAdvance) {
                              subBuilder.MergeFrom(PlayerAutoAdvance);
                            }
                            input.ReadMessage(subBuilder);
                            PlayerAutoAdvance = subBuilder;
                            break;
                          }
                        }
                      }
                    }

                    #region Nested types
                    /// <summary>Container for nested types declared in the CombatMoveType message type.</summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static partial class Types {
                      public sealed partial class CombatPlayerDefend : pb::IMessage<CombatPlayerDefend> {
                        private static readonly pb::MessageParser<CombatPlayerDefend> _parser = new pb::MessageParser<CombatPlayerDefend>(() => new CombatPlayerDefend());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatPlayerDefend> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor {
                          get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor {
                          get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerDefend() {
                          OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerDefend(CombatPlayerDefend other) : this() {
                          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerDefend Clone() {
                          return new CombatPlayerDefend(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other) {
                          return Equals(other as CombatPlayerDefend);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatPlayerDefend other) {
                          if (ReferenceEquals(other, null)) {
                            return false;
                          }
                          if (ReferenceEquals(other, this)) {
                            return true;
                          }
                          return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode() {
                          int hash = 1;
                          if (_unknownFields != null) {
                            hash ^= _unknownFields.GetHashCode();
                          }
                          return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString() {
                          return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output) {
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(output);
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize() {
                          int size = 0;
                          if (_unknownFields != null) {
                            size += _unknownFields.CalculateSize();
                          }
                          return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatPlayerDefend other) {
                          if (other == null) {
                            return;
                          }
                          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input) {
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            }
                          }
                        }

                      }

                      public sealed partial class CombatPlayerAutoAdvance : pb::IMessage<CombatPlayerAutoAdvance> {
                        private static readonly pb::MessageParser<CombatPlayerAutoAdvance> _parser = new pb::MessageParser<CombatPlayerAutoAdvance>(() => new CombatPlayerAutoAdvance());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatPlayerAutoAdvance> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor {
                          get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Descriptor.NestedTypes[1]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor {
                          get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerAutoAdvance() {
                          OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerAutoAdvance(CombatPlayerAutoAdvance other) : this() {
                          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerAutoAdvance Clone() {
                          return new CombatPlayerAutoAdvance(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other) {
                          return Equals(other as CombatPlayerAutoAdvance);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatPlayerAutoAdvance other) {
                          if (ReferenceEquals(other, null)) {
                            return false;
                          }
                          if (ReferenceEquals(other, this)) {
                            return true;
                          }
                          return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode() {
                          int hash = 1;
                          if (_unknownFields != null) {
                            hash ^= _unknownFields.GetHashCode();
                          }
                          return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString() {
                          return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output) {
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(output);
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize() {
                          int size = 0;
                          if (_unknownFields != null) {
                            size += _unknownFields.CalculateSize();
                          }
                          return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatPlayerAutoAdvance other) {
                          if (other == null) {
                            return;
                          }
                          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input) {
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            }
                          }
                        }

                      }

                      public sealed partial class CombatPlayerAttack : pb::IMessage<CombatPlayerAttack> {
                        private static readonly pb::MessageParser<CombatPlayerAttack> _parser = new pb::MessageParser<CombatPlayerAttack>(() => new CombatPlayerAttack());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatPlayerAttack> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor {
                          get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatMoveType.Descriptor.NestedTypes[2]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor {
                          get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerAttack() {
                          OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerAttack(CombatPlayerAttack other) : this() {
                          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatPlayerAttack Clone() {
                          return new CombatPlayerAttack(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other) {
                          return Equals(other as CombatPlayerAttack);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatPlayerAttack other) {
                          if (ReferenceEquals(other, null)) {
                            return false;
                          }
                          if (ReferenceEquals(other, this)) {
                            return true;
                          }
                          return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode() {
                          int hash = 1;
                          if (_unknownFields != null) {
                            hash ^= _unknownFields.GetHashCode();
                          }
                          return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString() {
                          return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output) {
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(output);
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize() {
                          int size = 0;
                          if (_unknownFields != null) {
                            size += _unknownFields.CalculateSize();
                          }
                          return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatPlayerAttack other) {
                          if (other == null) {
                            return;
                          }
                          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input) {
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            }
                          }
                        }

                      }

                    }
                    #endregion

                  }

                  public sealed partial class CombatEnemyStats : pb::IMessage<CombatEnemyStats> {
                    private static readonly pb::MessageParser<CombatEnemyStats> _parser = new pb::MessageParser<CombatEnemyStats>(() => new CombatEnemyStats());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<CombatEnemyStats> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Descriptor.NestedTypes[2]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatEnemyStats() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatEnemyStats(CombatEnemyStats other) : this() {
                      stat_ = other.stat_.Clone();
                      statGrowth_ = other.statGrowth_.Clone();
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public CombatEnemyStats Clone() {
                      return new CombatEnemyStats(this);
                    }

                    /// <summary>Field number for the "stat" field.</summary>
                    public const int StatFieldNumber = 2;
                    private static readonly pbc::MapField<string, long>.Codec _map_stat_codec
                        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 18);
                    private readonly pbc::MapField<string, long> stat_ = new pbc::MapField<string, long>();
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::MapField<string, long> Stat {
                      get { return stat_; }
                    }

                    /// <summary>Field number for the "stat_growth" field.</summary>
                    public const int StatGrowthFieldNumber = 3;
                    private static readonly pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth>.Codec _map_statGrowth_codec
                        = new pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth.Parser), 26);
                    private readonly pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth> statGrowth_ = new pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth>();
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth> StatGrowth {
                      get { return statGrowth_; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as CombatEnemyStats);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(CombatEnemyStats other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if (!Stat.Equals(other.Stat)) return false;
                      if (!StatGrowth.Equals(other.StatGrowth)) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      hash ^= Stat.GetHashCode();
                      hash ^= StatGrowth.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      stat_.WriteTo(output, _map_stat_codec);
                      statGrowth_.WriteTo(output, _map_statGrowth_codec);
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      size += stat_.CalculateSize(_map_stat_codec);
                      size += statGrowth_.CalculateSize(_map_statGrowth_codec);
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(CombatEnemyStats other) {
                      if (other == null) {
                        return;
                      }
                      stat_.Add(other.stat_);
                      statGrowth_.Add(other.statGrowth_);
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 18: {
                            stat_.AddEntriesFrom(input, _map_stat_codec);
                            break;
                          }
                          case 26: {
                            statGrowth_.AddEntriesFrom(input, _map_statGrowth_codec);
                            break;
                          }
                        }
                      }
                    }

                    #region Nested types
                    /// <summary>Container for nested types declared in the CombatEnemyStats message type.</summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static partial class Types {
                      public sealed partial class CombatGrowth : pb::IMessage<CombatGrowth> {
                        private static readonly pb::MessageParser<CombatGrowth> _parser = new pb::MessageParser<CombatGrowth>(() => new CombatGrowth());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatGrowth> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor {
                          get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Descriptor.NestedTypes[2]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor {
                          get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatGrowth() {
                          OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatGrowth(CombatGrowth other) : this() {
                          growType_ = other.growType_;
                          growthAdjustment_ = other.growthAdjustment_;
                          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatGrowth Clone() {
                          return new CombatGrowth(this);
                        }

                        /// <summary>Field number for the "grow_type" field.</summary>
                        public const int GrowTypeFieldNumber = 1;
                        private global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth.Types.GrowthType growType_ = 0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth.Types.GrowthType GrowType {
                          get { return growType_; }
                          set {
                            growType_ = value;
                          }
                        }

                        /// <summary>Field number for the "growth_adjustment" field.</summary>
                        public const int GrowthAdjustmentFieldNumber = 2;
                        private float growthAdjustment_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float GrowthAdjustment {
                          get { return growthAdjustment_; }
                          set {
                            growthAdjustment_ = value;
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other) {
                          return Equals(other as CombatGrowth);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatGrowth other) {
                          if (ReferenceEquals(other, null)) {
                            return false;
                          }
                          if (ReferenceEquals(other, this)) {
                            return true;
                          }
                          if (GrowType != other.GrowType) return false;
                          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GrowthAdjustment, other.GrowthAdjustment)) return false;
                          return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode() {
                          int hash = 1;
                          if (GrowType != 0) hash ^= GrowType.GetHashCode();
                          if (GrowthAdjustment != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GrowthAdjustment);
                          if (_unknownFields != null) {
                            hash ^= _unknownFields.GetHashCode();
                          }
                          return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString() {
                          return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output) {
                          if (GrowType != 0) {
                            output.WriteRawTag(8);
                            output.WriteEnum((int) GrowType);
                          }
                          if (GrowthAdjustment != 0F) {
                            output.WriteRawTag(21);
                            output.WriteFloat(GrowthAdjustment);
                          }
                          if (_unknownFields != null) {
                            _unknownFields.WriteTo(output);
                          }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize() {
                          int size = 0;
                          if (GrowType != 0) {
                            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GrowType);
                          }
                          if (GrowthAdjustment != 0F) {
                            size += 1 + 4;
                          }
                          if (_unknownFields != null) {
                            size += _unknownFields.CalculateSize();
                          }
                          return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatGrowth other) {
                          if (other == null) {
                            return;
                          }
                          if (other.GrowType != 0) {
                            GrowType = other.GrowType;
                          }
                          if (other.GrowthAdjustment != 0F) {
                            GrowthAdjustment = other.GrowthAdjustment;
                          }
                          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input) {
                          uint tag;
                          while ((tag = input.ReadTag()) != 0) {
                            switch(tag) {
                              default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                              case 8: {
                                GrowType = (global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Types.EncounterStageCombat.Types.CombatEnemyStats.Types.CombatGrowth.Types.GrowthType) input.ReadEnum();
                                break;
                              }
                              case 21: {
                                GrowthAdjustment = input.ReadFloat();
                                break;
                              }
                            }
                          }
                        }

                        #region Nested types
                        /// <summary>Container for nested types declared in the CombatGrowth message type.</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static partial class Types {
                          public enum GrowthType {
                            [pbr::OriginalName("GROWTH_TYPE_UNSET")] Unset = 0,
                            [pbr::OriginalName("LINEAR")] Linear = 1,
                            [pbr::OriginalName("LOGARITHMIC")] Logarithmic = 2,
                            [pbr::OriginalName("EXPONENTIAL")] Exponential = 3,
                          }

                        }
                        #endregion

                      }

                    }
                    #endregion

                  }

                }
                #endregion

              }

              public sealed partial class EncounterStagePortkey : pb::IMessage<EncounterStagePortkey> {
                private static readonly pb::MessageParser<EncounterStagePortkey> _parser = new pb::MessageParser<EncounterStagePortkey>(() => new EncounterStagePortkey());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<EncounterStagePortkey> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStagePortkey() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStagePortkey(EncounterStagePortkey other) : this() {
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStagePortkey Clone() {
                  return new EncounterStagePortkey(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as EncounterStagePortkey);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(EncounterStagePortkey other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(EncounterStagePortkey other) {
                  if (other == null) {
                    return;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    }
                  }
                }

              }

              public sealed partial class EncounterStagePicture : pb::IMessage<EncounterStagePicture> {
                private static readonly pb::MessageParser<EncounterStagePicture> _parser = new pb::MessageParser<EncounterStagePicture>(() => new EncounterStagePicture());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<EncounterStagePicture> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.Encounter.Types.EncounterStage.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStagePicture() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStagePicture(EncounterStagePicture other) : this() {
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public EncounterStagePicture Clone() {
                  return new EncounterStagePicture(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as EncounterStagePicture);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(EncounterStagePicture other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(EncounterStagePicture other) {
                  if (other == null) {
                    return;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class EncounterObstacle : pb::IMessage<EncounterObstacle> {
        private static readonly pb::MessageParser<EncounterObstacle> _parser = new pb::MessageParser<EncounterObstacle>(() => new EncounterObstacle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EncounterObstacle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncounterObstacle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncounterObstacle(EncounterObstacle other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncounterObstacle Clone() {
          return new EncounterObstacle(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EncounterObstacle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EncounterObstacle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EncounterObstacle other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class EncounterType : pb::IMessage<EncounterType> {
        private static readonly pb::MessageParser<EncounterType> _parser = new pb::MessageParser<EncounterType>(() => new EncounterType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EncounterType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncounterType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncounterType(EncounterType other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncounterType Clone() {
          return new EncounterType(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EncounterType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EncounterType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EncounterType other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DailyRewardMonthlySchedule : pb::IMessage<DailyRewardMonthlySchedule> {
        private static readonly pb::MessageParser<DailyRewardMonthlySchedule> _parser = new pb::MessageParser<DailyRewardMonthlySchedule>(() => new DailyRewardMonthlySchedule());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DailyRewardMonthlySchedule> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DailyRewardMonthlySchedule() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DailyRewardMonthlySchedule(DailyRewardMonthlySchedule other) : this() {
          id_ = other.id_;
          numberOfDays_ = other.numberOfDays_;
          defaultReward_ = other.defaultReward_ != null ? other.defaultReward_.Clone() : null;
          dailyRewards_ = other.dailyRewards_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DailyRewardMonthlySchedule Clone() {
          return new DailyRewardMonthlySchedule(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number_of_days" field.</summary>
        public const int NumberOfDaysFieldNumber = 2;
        private uint numberOfDays_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumberOfDays {
          get { return numberOfDays_; }
          set {
            numberOfDays_ = value;
          }
        }

        /// <summary>Field number for the "default_reward" field.</summary>
        public const int DefaultRewardFieldNumber = 3;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection defaultReward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection DefaultReward {
          get { return defaultReward_; }
          set {
            defaultReward_ = value;
          }
        }

        /// <summary>Field number for the "daily_rewards" field.</summary>
        public const int DailyRewardsFieldNumber = 4;
        private static readonly pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward>.Codec _map_dailyRewards_codec
            = new pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward.Parser), 34);
        private readonly pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward> dailyRewards_ = new pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Types.DailyReward> DailyRewards {
          get { return dailyRewards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DailyRewardMonthlySchedule);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DailyRewardMonthlySchedule other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (NumberOfDays != other.NumberOfDays) return false;
          if (!object.Equals(DefaultReward, other.DefaultReward)) return false;
          if (!DailyRewards.Equals(other.DailyRewards)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (NumberOfDays != 0) hash ^= NumberOfDays.GetHashCode();
          if (defaultReward_ != null) hash ^= DefaultReward.GetHashCode();
          hash ^= DailyRewards.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (NumberOfDays != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumberOfDays);
          }
          if (defaultReward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(DefaultReward);
          }
          dailyRewards_.WriteTo(output, _map_dailyRewards_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (NumberOfDays != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfDays);
          }
          if (defaultReward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultReward);
          }
          size += dailyRewards_.CalculateSize(_map_dailyRewards_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DailyRewardMonthlySchedule other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.NumberOfDays != 0) {
            NumberOfDays = other.NumberOfDays;
          }
          if (other.defaultReward_ != null) {
            if (defaultReward_ == null) {
              DefaultReward = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            DefaultReward.MergeFrom(other.DefaultReward);
          }
          dailyRewards_.Add(other.dailyRewards_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                NumberOfDays = input.ReadUInt32();
                break;
              }
              case 26: {
                if (defaultReward_ == null) {
                  DefaultReward = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(DefaultReward);
                break;
              }
              case 34: {
                dailyRewards_.AddEntriesFrom(input, _map_dailyRewards_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DailyRewardMonthlySchedule message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class DailyReward : pb::IMessage<DailyReward> {
            private static readonly pb::MessageParser<DailyReward> _parser = new pb::MessageParser<DailyReward>(() => new DailyReward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DailyReward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.DailyRewardMonthlySchedule.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DailyReward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DailyReward(DailyReward other) : this() {
              reward_ = other.reward_ != null ? other.reward_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DailyReward Clone() {
              return new DailyReward(this);
            }

            /// <summary>Field number for the "reward" field.</summary>
            public const int RewardFieldNumber = 1;
            private global::WUProtos.Data.Loot.LootReward.Types.LootCollection reward_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Reward {
              get { return reward_; }
              set {
                reward_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DailyReward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DailyReward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Reward, other.Reward)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (reward_ != null) hash ^= Reward.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (reward_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Reward);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (reward_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DailyReward other) {
              if (other == null) {
                return;
              }
              if (other.reward_ != null) {
                if (reward_ == null) {
                  Reward = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                Reward.MergeFrom(other.Reward);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (reward_ == null) {
                      Reward = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                    }
                    input.ReadMessage(Reward);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Buff : pb::IMessage<Buff> {
        private static readonly pb::MessageParser<Buff> _parser = new pb::MessageParser<Buff>(() => new Buff());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Buff> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buff() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buff(Buff other) : this() {
          id_ = other.id_;
          duration_ = other.duration_ != null ? other.duration_.Clone() : null;
          exclusivityGroup_ = other.exclusivityGroup_ != null ? other.exclusivityGroup_.Clone() : null;
          buffType_ = other.buffType_;
          modifiers_ = other.modifiers_.Clone();
          conditionalModifiers_ = other.conditionalModifiers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buff Clone() {
          return new Buff(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 3;
        private global::WUProtos.Data.GmTemplate.Types.BuffDuration duration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration Duration {
          get { return duration_; }
          set {
            duration_ = value;
          }
        }

        /// <summary>Field number for the "exclusivity_group" field.</summary>
        public const int ExclusivityGroupFieldNumber = 4;
        private global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffExclusivityGroup exclusivityGroup_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffExclusivityGroup ExclusivityGroup {
          get { return exclusivityGroup_; }
          set {
            exclusivityGroup_ = value;
          }
        }

        /// <summary>Field number for the "buff_type" field.</summary>
        public const int BuffTypeFieldNumber = 5;
        private global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffType buffType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffType BuffType {
          get { return buffType_; }
          set {
            buffType_ = value;
          }
        }

        /// <summary>Field number for the "modifiers" field.</summary>
        public const int ModifiersFieldNumber = 6;
        private static readonly pbc::MapField<string, long>.Codec _map_modifiers_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 50);
        private readonly pbc::MapField<string, long> modifiers_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> Modifiers {
          get { return modifiers_; }
        }

        /// <summary>Field number for the "conditional_modifiers" field.</summary>
        public const int ConditionalModifiersFieldNumber = 7;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers> _repeated_conditionalModifiers_codec
            = pb::FieldCodec.ForMessage(58, global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers> conditionalModifiers_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.ConditionalModifiers> ConditionalModifiers {
          get { return conditionalModifiers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Buff);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Buff other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(Duration, other.Duration)) return false;
          if (!object.Equals(ExclusivityGroup, other.ExclusivityGroup)) return false;
          if (BuffType != other.BuffType) return false;
          if (!Modifiers.Equals(other.Modifiers)) return false;
          if(!conditionalModifiers_.Equals(other.conditionalModifiers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (duration_ != null) hash ^= Duration.GetHashCode();
          if (exclusivityGroup_ != null) hash ^= ExclusivityGroup.GetHashCode();
          if (BuffType != 0) hash ^= BuffType.GetHashCode();
          hash ^= Modifiers.GetHashCode();
          hash ^= conditionalModifiers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (duration_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Duration);
          }
          if (exclusivityGroup_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(ExclusivityGroup);
          }
          if (BuffType != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) BuffType);
          }
          modifiers_.WriteTo(output, _map_modifiers_codec);
          conditionalModifiers_.WriteTo(output, _repeated_conditionalModifiers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (duration_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
          }
          if (exclusivityGroup_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExclusivityGroup);
          }
          if (BuffType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuffType);
          }
          size += modifiers_.CalculateSize(_map_modifiers_codec);
          size += conditionalModifiers_.CalculateSize(_repeated_conditionalModifiers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Buff other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.duration_ != null) {
            if (duration_ == null) {
              Duration = new global::WUProtos.Data.GmTemplate.Types.BuffDuration();
            }
            Duration.MergeFrom(other.Duration);
          }
          if (other.exclusivityGroup_ != null) {
            if (exclusivityGroup_ == null) {
              ExclusivityGroup = new global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffExclusivityGroup();
            }
            ExclusivityGroup.MergeFrom(other.ExclusivityGroup);
          }
          if (other.BuffType != 0) {
            BuffType = other.BuffType;
          }
          modifiers_.Add(other.modifiers_);
          conditionalModifiers_.Add(other.conditionalModifiers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 26: {
                if (duration_ == null) {
                  Duration = new global::WUProtos.Data.GmTemplate.Types.BuffDuration();
                }
                input.ReadMessage(Duration);
                break;
              }
              case 34: {
                if (exclusivityGroup_ == null) {
                  ExclusivityGroup = new global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffExclusivityGroup();
                }
                input.ReadMessage(ExclusivityGroup);
                break;
              }
              case 40: {
                BuffType = (global::WUProtos.Data.GmTemplate.Types.Buff.Types.BuffType) input.ReadEnum();
                break;
              }
              case 50: {
                modifiers_.AddEntriesFrom(input, _map_modifiers_codec);
                break;
              }
              case 58: {
                conditionalModifiers_.AddEntriesFrom(input, _repeated_conditionalModifiers_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Buff message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum BuffType {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("BUFF")] Buff = 1,
            [pbr::OriginalName("DEBUFF")] Debuff = 2,
          }

          public sealed partial class BuffExclusivityGroup : pb::IMessage<BuffExclusivityGroup> {
            private static readonly pb::MessageParser<BuffExclusivityGroup> _parser = new pb::MessageParser<BuffExclusivityGroup>(() => new BuffExclusivityGroup());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BuffExclusivityGroup> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Buff.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BuffExclusivityGroup() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BuffExclusivityGroup(BuffExclusivityGroup other) : this() {
              exclusivityGroup_ = other.exclusivityGroup_;
              exclusivityPriority_ = other.exclusivityPriority_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BuffExclusivityGroup Clone() {
              return new BuffExclusivityGroup(this);
            }

            /// <summary>Field number for the "exclusivity_group" field.</summary>
            public const int ExclusivityGroupFieldNumber = 1;
            private string exclusivityGroup_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ExclusivityGroup {
              get { return exclusivityGroup_; }
              set {
                exclusivityGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "exclusivity_priority" field.</summary>
            public const int ExclusivityPriorityFieldNumber = 2;
            private int exclusivityPriority_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int ExclusivityPriority {
              get { return exclusivityPriority_; }
              set {
                exclusivityPriority_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BuffExclusivityGroup);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BuffExclusivityGroup other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ExclusivityGroup != other.ExclusivityGroup) return false;
              if (ExclusivityPriority != other.ExclusivityPriority) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ExclusivityGroup.Length != 0) hash ^= ExclusivityGroup.GetHashCode();
              if (ExclusivityPriority != 0) hash ^= ExclusivityPriority.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ExclusivityGroup.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ExclusivityGroup);
              }
              if (ExclusivityPriority != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(ExclusivityPriority);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ExclusivityGroup.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ExclusivityGroup);
              }
              if (ExclusivityPriority != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExclusivityPriority);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BuffExclusivityGroup other) {
              if (other == null) {
                return;
              }
              if (other.ExclusivityGroup.Length != 0) {
                ExclusivityGroup = other.ExclusivityGroup;
              }
              if (other.ExclusivityPriority != 0) {
                ExclusivityPriority = other.ExclusivityPriority;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ExclusivityGroup = input.ReadString();
                    break;
                  }
                  case 16: {
                    ExclusivityPriority = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class BuffDuration : pb::IMessage<BuffDuration> {
        private static readonly pb::MessageParser<BuffDuration> _parser = new pb::MessageParser<BuffDuration>(() => new BuffDuration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BuffDuration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffDuration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffDuration(BuffDuration other) : this() {
          switch (other.TypeCase) {
            case TypeOneofCase.Time:
              Time = other.Time.Clone();
              break;
            case TypeOneofCase.Charges:
              Charges = other.Charges.Clone();
              break;
            case TypeOneofCase.Profession:
              Profession = other.Profession.Clone();
              break;
            case TypeOneofCase.Permanent:
              Permanent = other.Permanent.Clone();
              break;
            case TypeOneofCase.Instant:
              Instant = other.Instant.Clone();
              break;
            case TypeOneofCase.Challenge:
              Challenge = other.Challenge.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BuffDuration Clone() {
          return new BuffDuration(this);
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration Time {
          get { return typeCase_ == TypeOneofCase.Time ? (global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Time;
          }
        }

        /// <summary>Field number for the "charges" field.</summary>
        public const int ChargesFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration Charges {
          get { return typeCase_ == TypeOneofCase.Charges ? (global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Charges;
          }
        }

        /// <summary>Field number for the "profession" field.</summary>
        public const int ProfessionFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration Profession {
          get { return typeCase_ == TypeOneofCase.Profession ? (global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Profession;
          }
        }

        /// <summary>Field number for the "permanent" field.</summary>
        public const int PermanentFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration Permanent {
          get { return typeCase_ == TypeOneofCase.Permanent ? (global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Permanent;
          }
        }

        /// <summary>Field number for the "instant" field.</summary>
        public const int InstantFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration Instant {
          get { return typeCase_ == TypeOneofCase.Instant ? (global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Instant;
          }
        }

        /// <summary>Field number for the "challenge" field.</summary>
        public const int ChallengeFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration Challenge {
          get { return typeCase_ == TypeOneofCase.Challenge ? (global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Challenge;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "Type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          Time = 1,
          Charges = 2,
          Profession = 3,
          Permanent = 4,
          Instant = 5,
          Challenge = 6,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BuffDuration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BuffDuration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Time, other.Time)) return false;
          if (!object.Equals(Charges, other.Charges)) return false;
          if (!object.Equals(Profession, other.Profession)) return false;
          if (!object.Equals(Permanent, other.Permanent)) return false;
          if (!object.Equals(Instant, other.Instant)) return false;
          if (!object.Equals(Challenge, other.Challenge)) return false;
          if (TypeCase != other.TypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (typeCase_ == TypeOneofCase.Time) hash ^= Time.GetHashCode();
          if (typeCase_ == TypeOneofCase.Charges) hash ^= Charges.GetHashCode();
          if (typeCase_ == TypeOneofCase.Profession) hash ^= Profession.GetHashCode();
          if (typeCase_ == TypeOneofCase.Permanent) hash ^= Permanent.GetHashCode();
          if (typeCase_ == TypeOneofCase.Instant) hash ^= Instant.GetHashCode();
          if (typeCase_ == TypeOneofCase.Challenge) hash ^= Challenge.GetHashCode();
          hash ^= (int) typeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (typeCase_ == TypeOneofCase.Time) {
            output.WriteRawTag(10);
            output.WriteMessage(Time);
          }
          if (typeCase_ == TypeOneofCase.Charges) {
            output.WriteRawTag(18);
            output.WriteMessage(Charges);
          }
          if (typeCase_ == TypeOneofCase.Profession) {
            output.WriteRawTag(26);
            output.WriteMessage(Profession);
          }
          if (typeCase_ == TypeOneofCase.Permanent) {
            output.WriteRawTag(34);
            output.WriteMessage(Permanent);
          }
          if (typeCase_ == TypeOneofCase.Instant) {
            output.WriteRawTag(42);
            output.WriteMessage(Instant);
          }
          if (typeCase_ == TypeOneofCase.Challenge) {
            output.WriteRawTag(50);
            output.WriteMessage(Challenge);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (typeCase_ == TypeOneofCase.Time) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
          }
          if (typeCase_ == TypeOneofCase.Charges) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Charges);
          }
          if (typeCase_ == TypeOneofCase.Profession) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profession);
          }
          if (typeCase_ == TypeOneofCase.Permanent) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Permanent);
          }
          if (typeCase_ == TypeOneofCase.Instant) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instant);
          }
          if (typeCase_ == TypeOneofCase.Challenge) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BuffDuration other) {
          if (other == null) {
            return;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.Time:
              if (Time == null) {
                Time = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration();
              }
              Time.MergeFrom(other.Time);
              break;
            case TypeOneofCase.Charges:
              if (Charges == null) {
                Charges = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration();
              }
              Charges.MergeFrom(other.Charges);
              break;
            case TypeOneofCase.Profession:
              if (Profession == null) {
                Profession = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration();
              }
              Profession.MergeFrom(other.Profession);
              break;
            case TypeOneofCase.Permanent:
              if (Permanent == null) {
                Permanent = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration();
              }
              Permanent.MergeFrom(other.Permanent);
              break;
            case TypeOneofCase.Instant:
              if (Instant == null) {
                Instant = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration();
              }
              Instant.MergeFrom(other.Instant);
              break;
            case TypeOneofCase.Challenge:
              if (Challenge == null) {
                Challenge = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration();
              }
              Challenge.MergeFrom(other.Challenge);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration subBuilder = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.TimeBuffDuration();
                if (typeCase_ == TypeOneofCase.Time) {
                  subBuilder.MergeFrom(Time);
                }
                input.ReadMessage(subBuilder);
                Time = subBuilder;
                break;
              }
              case 18: {
                global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration subBuilder = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChargesBuffDuration();
                if (typeCase_ == TypeOneofCase.Charges) {
                  subBuilder.MergeFrom(Charges);
                }
                input.ReadMessage(subBuilder);
                Charges = subBuilder;
                break;
              }
              case 26: {
                global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration subBuilder = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ProfessionBuffDuration();
                if (typeCase_ == TypeOneofCase.Profession) {
                  subBuilder.MergeFrom(Profession);
                }
                input.ReadMessage(subBuilder);
                Profession = subBuilder;
                break;
              }
              case 34: {
                global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration subBuilder = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.PermanentBuffDuration();
                if (typeCase_ == TypeOneofCase.Permanent) {
                  subBuilder.MergeFrom(Permanent);
                }
                input.ReadMessage(subBuilder);
                Permanent = subBuilder;
                break;
              }
              case 42: {
                global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration subBuilder = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.InstantBuffDuration();
                if (typeCase_ == TypeOneofCase.Instant) {
                  subBuilder.MergeFrom(Instant);
                }
                input.ReadMessage(subBuilder);
                Instant = subBuilder;
                break;
              }
              case 50: {
                global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration subBuilder = new global::WUProtos.Data.GmTemplate.Types.BuffDuration.Types.ChallengeBuffDuration();
                if (typeCase_ == TypeOneofCase.Challenge) {
                  subBuilder.MergeFrom(Challenge);
                }
                input.ReadMessage(subBuilder);
                Challenge = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BuffDuration message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ChargesBuffDuration : pb::IMessage<ChargesBuffDuration> {
            private static readonly pb::MessageParser<ChargesBuffDuration> _parser = new pb::MessageParser<ChargesBuffDuration>(() => new ChargesBuffDuration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChargesBuffDuration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.BuffDuration.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChargesBuffDuration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChargesBuffDuration(ChargesBuffDuration other) : this() {
              numCharges_ = other.numCharges_;
              isOverride_ = other.isOverride_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChargesBuffDuration Clone() {
              return new ChargesBuffDuration(this);
            }

            /// <summary>Field number for the "num_charges" field.</summary>
            public const int NumChargesFieldNumber = 1;
            private int numCharges_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int NumCharges {
              get { return numCharges_; }
              set {
                numCharges_ = value;
              }
            }

            /// <summary>Field number for the "is_override" field.</summary>
            public const int IsOverrideFieldNumber = 2;
            private bool isOverride_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsOverride {
              get { return isOverride_; }
              set {
                isOverride_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChargesBuffDuration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChargesBuffDuration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (NumCharges != other.NumCharges) return false;
              if (IsOverride != other.IsOverride) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (NumCharges != 0) hash ^= NumCharges.GetHashCode();
              if (IsOverride != false) hash ^= IsOverride.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NumCharges != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(NumCharges);
              }
              if (IsOverride != false) {
                output.WriteRawTag(16);
                output.WriteBool(IsOverride);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NumCharges != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumCharges);
              }
              if (IsOverride != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChargesBuffDuration other) {
              if (other == null) {
                return;
              }
              if (other.NumCharges != 0) {
                NumCharges = other.NumCharges;
              }
              if (other.IsOverride != false) {
                IsOverride = other.IsOverride;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    NumCharges = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    IsOverride = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class InstantBuffDuration : pb::IMessage<InstantBuffDuration> {
            private static readonly pb::MessageParser<InstantBuffDuration> _parser = new pb::MessageParser<InstantBuffDuration>(() => new InstantBuffDuration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InstantBuffDuration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.BuffDuration.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InstantBuffDuration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InstantBuffDuration(InstantBuffDuration other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InstantBuffDuration Clone() {
              return new InstantBuffDuration(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InstantBuffDuration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InstantBuffDuration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InstantBuffDuration other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class PermanentBuffDuration : pb::IMessage<PermanentBuffDuration> {
            private static readonly pb::MessageParser<PermanentBuffDuration> _parser = new pb::MessageParser<PermanentBuffDuration>(() => new PermanentBuffDuration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PermanentBuffDuration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.BuffDuration.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PermanentBuffDuration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PermanentBuffDuration(PermanentBuffDuration other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PermanentBuffDuration Clone() {
              return new PermanentBuffDuration(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PermanentBuffDuration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PermanentBuffDuration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PermanentBuffDuration other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class TimeBuffDuration : pb::IMessage<TimeBuffDuration> {
            private static readonly pb::MessageParser<TimeBuffDuration> _parser = new pb::MessageParser<TimeBuffDuration>(() => new TimeBuffDuration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TimeBuffDuration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.BuffDuration.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TimeBuffDuration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TimeBuffDuration(TimeBuffDuration other) : this() {
              timeMs_ = other.timeMs_;
              isOverride_ = other.isOverride_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TimeBuffDuration Clone() {
              return new TimeBuffDuration(this);
            }

            /// <summary>Field number for the "time_ms" field.</summary>
            public const int TimeMsFieldNumber = 1;
            private long timeMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long TimeMs {
              get { return timeMs_; }
              set {
                timeMs_ = value;
              }
            }

            /// <summary>Field number for the "is_override" field.</summary>
            public const int IsOverrideFieldNumber = 2;
            private bool isOverride_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsOverride {
              get { return isOverride_; }
              set {
                isOverride_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TimeBuffDuration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TimeBuffDuration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TimeMs != other.TimeMs) return false;
              if (IsOverride != other.IsOverride) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TimeMs != 0L) hash ^= TimeMs.GetHashCode();
              if (IsOverride != false) hash ^= IsOverride.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TimeMs != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(TimeMs);
              }
              if (IsOverride != false) {
                output.WriteRawTag(16);
                output.WriteBool(IsOverride);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TimeMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMs);
              }
              if (IsOverride != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TimeBuffDuration other) {
              if (other == null) {
                return;
              }
              if (other.TimeMs != 0L) {
                TimeMs = other.TimeMs;
              }
              if (other.IsOverride != false) {
                IsOverride = other.IsOverride;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TimeMs = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    IsOverride = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ChallengeBuffDuration : pb::IMessage<ChallengeBuffDuration> {
            private static readonly pb::MessageParser<ChallengeBuffDuration> _parser = new pb::MessageParser<ChallengeBuffDuration>(() => new ChallengeBuffDuration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChallengeBuffDuration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.BuffDuration.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBuffDuration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBuffDuration(ChallengeBuffDuration other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBuffDuration Clone() {
              return new ChallengeBuffDuration(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChallengeBuffDuration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChallengeBuffDuration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChallengeBuffDuration other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class ProfessionBuffDuration : pb::IMessage<ProfessionBuffDuration> {
            private static readonly pb::MessageParser<ProfessionBuffDuration> _parser = new pb::MessageParser<ProfessionBuffDuration>(() => new ProfessionBuffDuration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ProfessionBuffDuration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.BuffDuration.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionBuffDuration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionBuffDuration(ProfessionBuffDuration other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionBuffDuration Clone() {
              return new ProfessionBuffDuration(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ProfessionBuffDuration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ProfessionBuffDuration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ProfessionBuffDuration other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Event : pb::IMessage<Event> {
        private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Event> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event(Event other) : this() {
          id_ = other.id_;
          activationReqs_ = other.activationReqs_ != null ? other.activationReqs_.Clone() : null;
          runningReqs_ = other.runningReqs_ != null ? other.runningReqs_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event Clone() {
          return new Event(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "activation_reqs" field.</summary>
        public const int ActivationReqsFieldNumber = 2;
        private global::WUProtos.Data.Requirements activationReqs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements ActivationReqs {
          get { return activationReqs_; }
          set {
            activationReqs_ = value;
          }
        }

        /// <summary>Field number for the "running_reqs" field.</summary>
        public const int RunningReqsFieldNumber = 3;
        private global::WUProtos.Data.Requirements runningReqs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements RunningReqs {
          get { return runningReqs_; }
          set {
            runningReqs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Event);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Event other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(ActivationReqs, other.ActivationReqs)) return false;
          if (!object.Equals(RunningReqs, other.RunningReqs)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (activationReqs_ != null) hash ^= ActivationReqs.GetHashCode();
          if (runningReqs_ != null) hash ^= RunningReqs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (activationReqs_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ActivationReqs);
          }
          if (runningReqs_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RunningReqs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (activationReqs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivationReqs);
          }
          if (runningReqs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunningReqs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Event other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.activationReqs_ != null) {
            if (activationReqs_ == null) {
              ActivationReqs = new global::WUProtos.Data.Requirements();
            }
            ActivationReqs.MergeFrom(other.ActivationReqs);
          }
          if (other.runningReqs_ != null) {
            if (runningReqs_ == null) {
              RunningReqs = new global::WUProtos.Data.Requirements();
            }
            RunningReqs.MergeFrom(other.RunningReqs);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (activationReqs_ == null) {
                  ActivationReqs = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(ActivationReqs);
                break;
              }
              case 26: {
                if (runningReqs_ == null) {
                  RunningReqs = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(RunningReqs);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerCountMultipliers : pb::IMessage<PlayerCountMultipliers> {
        private static readonly pb::MessageParser<PlayerCountMultipliers> _parser = new pb::MessageParser<PlayerCountMultipliers>(() => new PlayerCountMultipliers());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerCountMultipliers> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCountMultipliers() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCountMultipliers(PlayerCountMultipliers other) : this() {
          multipliers_ = other.multipliers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCountMultipliers Clone() {
          return new PlayerCountMultipliers(this);
        }

        /// <summary>Field number for the "multipliers" field.</summary>
        public const int MultipliersFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_multipliers_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> multipliers_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Multipliers {
          get { return multipliers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerCountMultipliers);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerCountMultipliers other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!multipliers_.Equals(other.multipliers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= multipliers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          multipliers_.WriteTo(output, _repeated_multipliers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += multipliers_.CalculateSize(_repeated_multipliers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerCountMultipliers other) {
          if (other == null) {
            return;
          }
          multipliers_.Add(other.multipliers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                multipliers_.AddEntriesFrom(input, _repeated_multipliers_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerLevel : pb::IMessage<PlayerLevel> {
        private static readonly pb::MessageParser<PlayerLevel> _parser = new pb::MessageParser<PlayerLevel>(() => new PlayerLevel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerLevel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerLevel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerLevel(PlayerLevel other) : this() {
          id_ = other.id_;
          requiredXp_ = other.requiredXp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerLevel Clone() {
          return new PlayerLevel(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "required_xp" field.</summary>
        public const int RequiredXpFieldNumber = 2;
        private int requiredXp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RequiredXp {
          get { return requiredXp_; }
          set {
            requiredXp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerLevel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerLevel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (RequiredXp != other.RequiredXp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (RequiredXp != 0) hash ^= RequiredXp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (RequiredXp != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(RequiredXp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (RequiredXp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredXp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerLevel other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.RequiredXp != 0) {
            RequiredXp = other.RequiredXp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                RequiredXp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Profession : pb::IMessage<Profession> {
        private static readonly pb::MessageParser<Profession> _parser = new pb::MessageParser<Profession>(() => new Profession());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Profession> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Profession() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Profession(Profession other) : this() {
          id_ = other.id_;
          requirements_ = other.requirements_.Clone();
          showInUi_ = other.showInUi_;
          profesionRanksMap_ = other.profesionRanksMap_.Clone();
          professionTiers_ = other.professionTiers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Profession Clone() {
          return new Profession(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "requirements" field.</summary>
        public const int RequirementsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.Requirements> _repeated_requirements_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.Requirements.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.Requirements> requirements_ = new pbc::RepeatedField<global::WUProtos.Data.Requirements>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.Requirements> Requirements {
          get { return requirements_; }
        }

        /// <summary>Field number for the "show_in_ui" field.</summary>
        public const int ShowInUiFieldNumber = 4;
        private bool showInUi_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ShowInUi {
          get { return showInUi_; }
          set {
            showInUi_ = value;
          }
        }

        /// <summary>Field number for the "profesion_ranks_map" field.</summary>
        public const int ProfesionRanksMapFieldNumber = 5;
        private static readonly pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank>.Codec _map_profesionRanksMap_codec
            = new pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Parser), 42);
        private readonly pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank> profesionRanksMap_ = new pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank> ProfesionRanksMap {
          get { return profesionRanksMap_; }
        }

        /// <summary>Field number for the "profession_tiers" field.</summary>
        public const int ProfessionTiersFieldNumber = 6;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier> _repeated_professionTiers_codec
            = pb::FieldCodec.ForMessage(50, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier> professionTiers_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionTier> ProfessionTiers {
          get { return professionTiers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Profession);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Profession other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!requirements_.Equals(other.requirements_)) return false;
          if (ShowInUi != other.ShowInUi) return false;
          if (!ProfesionRanksMap.Equals(other.ProfesionRanksMap)) return false;
          if(!professionTiers_.Equals(other.professionTiers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= requirements_.GetHashCode();
          if (ShowInUi != false) hash ^= ShowInUi.GetHashCode();
          hash ^= ProfesionRanksMap.GetHashCode();
          hash ^= professionTiers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          requirements_.WriteTo(output, _repeated_requirements_codec);
          if (ShowInUi != false) {
            output.WriteRawTag(32);
            output.WriteBool(ShowInUi);
          }
          profesionRanksMap_.WriteTo(output, _map_profesionRanksMap_codec);
          professionTiers_.WriteTo(output, _repeated_professionTiers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += requirements_.CalculateSize(_repeated_requirements_codec);
          if (ShowInUi != false) {
            size += 1 + 1;
          }
          size += profesionRanksMap_.CalculateSize(_map_profesionRanksMap_codec);
          size += professionTiers_.CalculateSize(_repeated_professionTiers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Profession other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          requirements_.Add(other.requirements_);
          if (other.ShowInUi != false) {
            ShowInUi = other.ShowInUi;
          }
          profesionRanksMap_.Add(other.profesionRanksMap_);
          professionTiers_.Add(other.professionTiers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 26: {
                requirements_.AddEntriesFrom(input, _repeated_requirements_codec);
                break;
              }
              case 32: {
                ShowInUi = input.ReadBool();
                break;
              }
              case 42: {
                profesionRanksMap_.AddEntriesFrom(input, _map_profesionRanksMap_codec);
                break;
              }
              case 50: {
                professionTiers_.AddEntriesFrom(input, _repeated_professionTiers_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Profession message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ProfessionTier : pb::IMessage<ProfessionTier> {
            private static readonly pb::MessageParser<ProfessionTier> _parser = new pb::MessageParser<ProfessionTier>(() => new ProfessionTier());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ProfessionTier> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Profession.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionTier() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionTier(ProfessionTier other) : this() {
              rankPointsUpperBound_ = other.rankPointsUpperBound_;
              isMajorUpgrade_ = other.isMajorUpgrade_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionTier Clone() {
              return new ProfessionTier(this);
            }

            /// <summary>Field number for the "rank_points_upper_bound" field.</summary>
            public const int RankPointsUpperBoundFieldNumber = 1;
            private uint rankPointsUpperBound_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint RankPointsUpperBound {
              get { return rankPointsUpperBound_; }
              set {
                rankPointsUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "is_major_upgrade" field.</summary>
            public const int IsMajorUpgradeFieldNumber = 2;
            private bool isMajorUpgrade_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsMajorUpgrade {
              get { return isMajorUpgrade_; }
              set {
                isMajorUpgrade_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ProfessionTier);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ProfessionTier other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (RankPointsUpperBound != other.RankPointsUpperBound) return false;
              if (IsMajorUpgrade != other.IsMajorUpgrade) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (RankPointsUpperBound != 0) hash ^= RankPointsUpperBound.GetHashCode();
              if (IsMajorUpgrade != false) hash ^= IsMajorUpgrade.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (RankPointsUpperBound != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(RankPointsUpperBound);
              }
              if (IsMajorUpgrade != false) {
                output.WriteRawTag(16);
                output.WriteBool(IsMajorUpgrade);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (RankPointsUpperBound != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankPointsUpperBound);
              }
              if (IsMajorUpgrade != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ProfessionTier other) {
              if (other == null) {
                return;
              }
              if (other.RankPointsUpperBound != 0) {
                RankPointsUpperBound = other.RankPointsUpperBound;
              }
              if (other.IsMajorUpgrade != false) {
                IsMajorUpgrade = other.IsMajorUpgrade;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    RankPointsUpperBound = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    IsMajorUpgrade = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ProfessionRank : pb::IMessage<ProfessionRank> {
            private static readonly pb::MessageParser<ProfessionRank> _parser = new pb::MessageParser<ProfessionRank>(() => new ProfessionRank());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ProfessionRank> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Profession.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionRank() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionRank(ProfessionRank other) : this() {
              potentialRankPoints_ = other.potentialRankPoints_;
              requirements_ = other.requirements_.Clone();
              professionNodesMap_ = other.professionNodesMap_.Clone();
              showInUi_ = other.showInUi_;
              id_ = other.id_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionRank Clone() {
              return new ProfessionRank(this);
            }

            /// <summary>Field number for the "potential_rank_points" field.</summary>
            public const int PotentialRankPointsFieldNumber = 1;
            private uint potentialRankPoints_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint PotentialRankPoints {
              get { return potentialRankPoints_; }
              set {
                potentialRankPoints_ = value;
              }
            }

            /// <summary>Field number for the "requirements" field.</summary>
            public const int RequirementsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::WUProtos.Data.Requirements> _repeated_requirements_codec
                = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.Requirements.Parser);
            private readonly pbc::RepeatedField<global::WUProtos.Data.Requirements> requirements_ = new pbc::RepeatedField<global::WUProtos.Data.Requirements>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::WUProtos.Data.Requirements> Requirements {
              get { return requirements_; }
            }

            /// <summary>Field number for the "profession_nodes_map" field.</summary>
            public const int ProfessionNodesMapFieldNumber = 3;
            private static readonly pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode>.Codec _map_professionNodesMap_codec
                = new pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Parser), 26);
            private readonly pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode> professionNodesMap_ = new pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::MapField<string, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode> ProfessionNodesMap {
              get { return professionNodesMap_; }
            }

            /// <summary>Field number for the "show_in_ui" field.</summary>
            public const int ShowInUiFieldNumber = 4;
            private bool showInUi_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool ShowInUi {
              get { return showInUi_; }
              set {
                showInUi_ = value;
              }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 5;
            private string id_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ProfessionRank);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ProfessionRank other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (PotentialRankPoints != other.PotentialRankPoints) return false;
              if(!requirements_.Equals(other.requirements_)) return false;
              if (!ProfessionNodesMap.Equals(other.ProfessionNodesMap)) return false;
              if (ShowInUi != other.ShowInUi) return false;
              if (Id != other.Id) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (PotentialRankPoints != 0) hash ^= PotentialRankPoints.GetHashCode();
              hash ^= requirements_.GetHashCode();
              hash ^= ProfessionNodesMap.GetHashCode();
              if (ShowInUi != false) hash ^= ShowInUi.GetHashCode();
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (PotentialRankPoints != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PotentialRankPoints);
              }
              requirements_.WriteTo(output, _repeated_requirements_codec);
              professionNodesMap_.WriteTo(output, _map_professionNodesMap_codec);
              if (ShowInUi != false) {
                output.WriteRawTag(32);
                output.WriteBool(ShowInUi);
              }
              if (Id.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(Id);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (PotentialRankPoints != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PotentialRankPoints);
              }
              size += requirements_.CalculateSize(_repeated_requirements_codec);
              size += professionNodesMap_.CalculateSize(_map_professionNodesMap_codec);
              if (ShowInUi != false) {
                size += 1 + 1;
              }
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ProfessionRank other) {
              if (other == null) {
                return;
              }
              if (other.PotentialRankPoints != 0) {
                PotentialRankPoints = other.PotentialRankPoints;
              }
              requirements_.Add(other.requirements_);
              professionNodesMap_.Add(other.professionNodesMap_);
              if (other.ShowInUi != false) {
                ShowInUi = other.ShowInUi;
              }
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    PotentialRankPoints = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    requirements_.AddEntriesFrom(input, _repeated_requirements_codec);
                    break;
                  }
                  case 26: {
                    professionNodesMap_.AddEntriesFrom(input, _map_professionNodesMap_codec);
                    break;
                  }
                  case 32: {
                    ShowInUi = input.ReadBool();
                    break;
                  }
                  case 42: {
                    Id = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the ProfessionRank message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class ProfessionNode : pb::IMessage<ProfessionNode> {
                private static readonly pb::MessageParser<ProfessionNode> _parser = new pb::MessageParser<ProfessionNode>(() => new ProfessionNode());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ProfessionNode> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ProfessionNode() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ProfessionNode(ProfessionNode other) : this() {
                  id_ = other.id_;
                  edges_ = other.edges_.Clone();
                  levels_ = other.levels_.Clone();
                  rowPos_ = other.rowPos_;
                  colPos_ = other.colPos_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ProfessionNode Clone() {
                  return new ProfessionNode(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id {
                  get { return id_; }
                  set {
                    id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "edges" field.</summary>
                public const int EdgesFieldNumber = 2;
                private static readonly pb::FieldCodec<global::WUProtos.Data.Requirements> _repeated_edges_codec
                    = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.Requirements.Parser);
                private readonly pbc::RepeatedField<global::WUProtos.Data.Requirements> edges_ = new pbc::RepeatedField<global::WUProtos.Data.Requirements>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::WUProtos.Data.Requirements> Edges {
                  get { return edges_; }
                }

                /// <summary>Field number for the "levels" field.</summary>
                public const int LevelsFieldNumber = 3;
                private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel> _repeated_levels_codec
                    = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel.Parser);
                private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel> levels_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Types.ProfessionNodeLevel> Levels {
                  get { return levels_; }
                }

                /// <summary>Field number for the "row_pos" field.</summary>
                public const int RowPosFieldNumber = 4;
                private uint rowPos_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint RowPos {
                  get { return rowPos_; }
                  set {
                    rowPos_ = value;
                  }
                }

                /// <summary>Field number for the "col_pos" field.</summary>
                public const int ColPosFieldNumber = 5;
                private uint colPos_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint ColPos {
                  get { return colPos_; }
                  set {
                    colPos_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as ProfessionNode);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ProfessionNode other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Id != other.Id) return false;
                  if(!edges_.Equals(other.edges_)) return false;
                  if(!levels_.Equals(other.levels_)) return false;
                  if (RowPos != other.RowPos) return false;
                  if (ColPos != other.ColPos) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Id.Length != 0) hash ^= Id.GetHashCode();
                  hash ^= edges_.GetHashCode();
                  hash ^= levels_.GetHashCode();
                  if (RowPos != 0) hash ^= RowPos.GetHashCode();
                  if (ColPos != 0) hash ^= ColPos.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Id.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Id);
                  }
                  edges_.WriteTo(output, _repeated_edges_codec);
                  levels_.WriteTo(output, _repeated_levels_codec);
                  if (RowPos != 0) {
                    output.WriteRawTag(32);
                    output.WriteUInt32(RowPos);
                  }
                  if (ColPos != 0) {
                    output.WriteRawTag(40);
                    output.WriteUInt32(ColPos);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Id.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                  }
                  size += edges_.CalculateSize(_repeated_edges_codec);
                  size += levels_.CalculateSize(_repeated_levels_codec);
                  if (RowPos != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowPos);
                  }
                  if (ColPos != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColPos);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ProfessionNode other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Id.Length != 0) {
                    Id = other.Id;
                  }
                  edges_.Add(other.edges_);
                  levels_.Add(other.levels_);
                  if (other.RowPos != 0) {
                    RowPos = other.RowPos;
                  }
                  if (other.ColPos != 0) {
                    ColPos = other.ColPos;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Id = input.ReadString();
                        break;
                      }
                      case 18: {
                        edges_.AddEntriesFrom(input, _repeated_edges_codec);
                        break;
                      }
                      case 26: {
                        levels_.AddEntriesFrom(input, _repeated_levels_codec);
                        break;
                      }
                      case 32: {
                        RowPos = input.ReadUInt32();
                        break;
                      }
                      case 40: {
                        ColPos = input.ReadUInt32();
                        break;
                      }
                    }
                  }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the ProfessionNode message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  public sealed partial class ProfessionNodeLevel : pb::IMessage<ProfessionNodeLevel> {
                    private static readonly pb::MessageParser<ProfessionNodeLevel> _parser = new pb::MessageParser<ProfessionNodeLevel>(() => new ProfessionNodeLevel());
                    private pb::UnknownFieldSet _unknownFields;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pb::MessageParser<ProfessionNodeLevel> Parser { get { return _parser; } }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static pbr::MessageDescriptor Descriptor {
                      get { return global::WUProtos.Data.GmTemplate.Types.Profession.Types.ProfessionRank.Types.ProfessionNode.Descriptor.NestedTypes[0]; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    pbr::MessageDescriptor pb::IMessage.Descriptor {
                      get { return Descriptor; }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ProfessionNodeLevel() {
                      OnConstruction();
                    }

                    partial void OnConstruction();

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ProfessionNodeLevel(ProfessionNodeLevel other) : this() {
                      buffGmtId_ = other.buffGmtId_;
                      prerequisite_ = other.prerequisite_ != null ? other.prerequisite_.Clone() : null;
                      cost_ = other.cost_ != null ? other.cost_.Clone() : null;
                      mapAbilities_ = other.mapAbilities_.Clone();
                      rankPoints_ = other.rankPoints_;
                      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public ProfessionNodeLevel Clone() {
                      return new ProfessionNodeLevel(this);
                    }

                    /// <summary>Field number for the "buff_gmt_id" field.</summary>
                    public const int BuffGmtIdFieldNumber = 1;
                    private string buffGmtId_ = "";
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public string BuffGmtId {
                      get { return buffGmtId_; }
                      set {
                        buffGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                      }
                    }

                    /// <summary>Field number for the "prerequisite" field.</summary>
                    public const int PrerequisiteFieldNumber = 2;
                    private global::WUProtos.Data.Requirements prerequisite_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::WUProtos.Data.Requirements Prerequisite {
                      get { return prerequisite_; }
                      set {
                        prerequisite_ = value;
                      }
                    }

                    /// <summary>Field number for the "cost" field.</summary>
                    public const int CostFieldNumber = 3;
                    private global::WUProtos.Data.Loot.LootReward.Types.LootCollection cost_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Cost {
                      get { return cost_; }
                      set {
                        cost_ = value;
                      }
                    }

                    /// <summary>Field number for the "map_abilities" field.</summary>
                    public const int MapAbilitiesFieldNumber = 4;
                    private static readonly pb::FieldCodec<string> _repeated_mapAbilities_codec
                        = pb::FieldCodec.ForString(34);
                    private readonly pbc::RepeatedField<string> mapAbilities_ = new pbc::RepeatedField<string>();
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public pbc::RepeatedField<string> MapAbilities {
                      get { return mapAbilities_; }
                    }

                    /// <summary>Field number for the "rank_points" field.</summary>
                    public const int RankPointsFieldNumber = 5;
                    private uint rankPoints_;
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public uint RankPoints {
                      get { return rankPoints_; }
                      set {
                        rankPoints_ = value;
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override bool Equals(object other) {
                      return Equals(other as ProfessionNodeLevel);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public bool Equals(ProfessionNodeLevel other) {
                      if (ReferenceEquals(other, null)) {
                        return false;
                      }
                      if (ReferenceEquals(other, this)) {
                        return true;
                      }
                      if (BuffGmtId != other.BuffGmtId) return false;
                      if (!object.Equals(Prerequisite, other.Prerequisite)) return false;
                      if (!object.Equals(Cost, other.Cost)) return false;
                      if(!mapAbilities_.Equals(other.mapAbilities_)) return false;
                      if (RankPoints != other.RankPoints) return false;
                      return Equals(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override int GetHashCode() {
                      int hash = 1;
                      if (BuffGmtId.Length != 0) hash ^= BuffGmtId.GetHashCode();
                      if (prerequisite_ != null) hash ^= Prerequisite.GetHashCode();
                      if (cost_ != null) hash ^= Cost.GetHashCode();
                      hash ^= mapAbilities_.GetHashCode();
                      if (RankPoints != 0) hash ^= RankPoints.GetHashCode();
                      if (_unknownFields != null) {
                        hash ^= _unknownFields.GetHashCode();
                      }
                      return hash;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public override string ToString() {
                      return pb::JsonFormatter.ToDiagnosticString(this);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void WriteTo(pb::CodedOutputStream output) {
                      if (BuffGmtId.Length != 0) {
                        output.WriteRawTag(10);
                        output.WriteString(BuffGmtId);
                      }
                      if (prerequisite_ != null) {
                        output.WriteRawTag(18);
                        output.WriteMessage(Prerequisite);
                      }
                      if (cost_ != null) {
                        output.WriteRawTag(26);
                        output.WriteMessage(Cost);
                      }
                      mapAbilities_.WriteTo(output, _repeated_mapAbilities_codec);
                      if (RankPoints != 0) {
                        output.WriteRawTag(40);
                        output.WriteUInt32(RankPoints);
                      }
                      if (_unknownFields != null) {
                        _unknownFields.WriteTo(output);
                      }
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public int CalculateSize() {
                      int size = 0;
                      if (BuffGmtId.Length != 0) {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuffGmtId);
                      }
                      if (prerequisite_ != null) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prerequisite);
                      }
                      if (cost_ != null) {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cost);
                      }
                      size += mapAbilities_.CalculateSize(_repeated_mapAbilities_codec);
                      if (RankPoints != 0) {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankPoints);
                      }
                      if (_unknownFields != null) {
                        size += _unknownFields.CalculateSize();
                      }
                      return size;
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(ProfessionNodeLevel other) {
                      if (other == null) {
                        return;
                      }
                      if (other.BuffGmtId.Length != 0) {
                        BuffGmtId = other.BuffGmtId;
                      }
                      if (other.prerequisite_ != null) {
                        if (prerequisite_ == null) {
                          Prerequisite = new global::WUProtos.Data.Requirements();
                        }
                        Prerequisite.MergeFrom(other.Prerequisite);
                      }
                      if (other.cost_ != null) {
                        if (cost_ == null) {
                          Cost = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                        }
                        Cost.MergeFrom(other.Cost);
                      }
                      mapAbilities_.Add(other.mapAbilities_);
                      if (other.RankPoints != 0) {
                        RankPoints = other.RankPoints;
                      }
                      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                    }

                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public void MergeFrom(pb::CodedInputStream input) {
                      uint tag;
                      while ((tag = input.ReadTag()) != 0) {
                        switch(tag) {
                          default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                            break;
                          case 10: {
                            BuffGmtId = input.ReadString();
                            break;
                          }
                          case 18: {
                            if (prerequisite_ == null) {
                              Prerequisite = new global::WUProtos.Data.Requirements();
                            }
                            input.ReadMessage(Prerequisite);
                            break;
                          }
                          case 26: {
                            if (cost_ == null) {
                              Cost = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                            }
                            input.ReadMessage(Cost);
                            break;
                          }
                          case 34: {
                            mapAbilities_.AddEntriesFrom(input, _repeated_mapAbilities_codec);
                            break;
                          }
                          case 40: {
                            RankPoints = input.ReadUInt32();
                            break;
                          }
                        }
                      }
                    }

                    #region Nested types
                    /// <summary>Container for nested types declared in the ProfessionNodeLevel message type.</summary>
                    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                    public static partial class Types {
                      public enum Purpose {
                        [pbr::OriginalName("none")] None = 0,
                        [pbr::OriginalName("buff")] Buff = 1,
                        [pbr::OriginalName("learn_new_map_ability")] LearnNewMapAbility = 2,
                        [pbr::OriginalName("upgrade_map_ability")] UpgradeMapAbility = 3,
                      }

                    }
                    #endregion

                  }

                }
                #endregion

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class Storyboard : pb::IMessage<Storyboard> {
        private static readonly pb::MessageParser<Storyboard> _parser = new pb::MessageParser<Storyboard>(() => new Storyboard());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Storyboard> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Storyboard() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Storyboard(Storyboard other) : this() {
          id_ = other.id_;
          startReqs_ = other.startReqs_ != null ? other.startReqs_.Clone() : null;
          stepFlagGmtId_ = other.stepFlagGmtId_;
          completeFlagGmtId_ = other.completeFlagGmtId_;
          storyboardSteps_ = other.storyboardSteps_.Clone();
          resetMode_ = other.resetMode_;
          resetReqs_ = other.resetReqs_ != null ? other.resetReqs_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Storyboard Clone() {
          return new Storyboard(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "start_reqs" field.</summary>
        public const int StartReqsFieldNumber = 2;
        private global::WUProtos.Data.Requirements startReqs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements StartReqs {
          get { return startReqs_; }
          set {
            startReqs_ = value;
          }
        }

        /// <summary>Field number for the "step_flag_gmt_id" field.</summary>
        public const int StepFlagGmtIdFieldNumber = 3;
        private string stepFlagGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StepFlagGmtId {
          get { return stepFlagGmtId_; }
          set {
            stepFlagGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "complete_flag_gmt_id" field.</summary>
        public const int CompleteFlagGmtIdFieldNumber = 4;
        private string completeFlagGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CompleteFlagGmtId {
          get { return completeFlagGmtId_; }
          set {
            completeFlagGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "storyboard_steps" field.</summary>
        public const int StoryboardStepsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep> _repeated_storyboardSteps_codec
            = pb::FieldCodec.ForMessage(42, global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep> storyboardSteps_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardStep> StoryboardSteps {
          get { return storyboardSteps_; }
        }

        /// <summary>Field number for the "reset_mode" field.</summary>
        public const int ResetModeFieldNumber = 6;
        private global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardResetMode resetMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardResetMode ResetMode {
          get { return resetMode_; }
          set {
            resetMode_ = value;
          }
        }

        /// <summary>Field number for the "reset_reqs" field.</summary>
        public const int ResetReqsFieldNumber = 7;
        private global::WUProtos.Data.Requirements resetReqs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Requirements ResetReqs {
          get { return resetReqs_; }
          set {
            resetReqs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Storyboard);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Storyboard other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(StartReqs, other.StartReqs)) return false;
          if (StepFlagGmtId != other.StepFlagGmtId) return false;
          if (CompleteFlagGmtId != other.CompleteFlagGmtId) return false;
          if(!storyboardSteps_.Equals(other.storyboardSteps_)) return false;
          if (ResetMode != other.ResetMode) return false;
          if (!object.Equals(ResetReqs, other.ResetReqs)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (startReqs_ != null) hash ^= StartReqs.GetHashCode();
          if (StepFlagGmtId.Length != 0) hash ^= StepFlagGmtId.GetHashCode();
          if (CompleteFlagGmtId.Length != 0) hash ^= CompleteFlagGmtId.GetHashCode();
          hash ^= storyboardSteps_.GetHashCode();
          if (ResetMode != 0) hash ^= ResetMode.GetHashCode();
          if (resetReqs_ != null) hash ^= ResetReqs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (startReqs_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(StartReqs);
          }
          if (StepFlagGmtId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(StepFlagGmtId);
          }
          if (CompleteFlagGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(CompleteFlagGmtId);
          }
          storyboardSteps_.WriteTo(output, _repeated_storyboardSteps_codec);
          if (ResetMode != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) ResetMode);
          }
          if (resetReqs_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(ResetReqs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (startReqs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartReqs);
          }
          if (StepFlagGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StepFlagGmtId);
          }
          if (CompleteFlagGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteFlagGmtId);
          }
          size += storyboardSteps_.CalculateSize(_repeated_storyboardSteps_codec);
          if (ResetMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResetMode);
          }
          if (resetReqs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResetReqs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Storyboard other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.startReqs_ != null) {
            if (startReqs_ == null) {
              StartReqs = new global::WUProtos.Data.Requirements();
            }
            StartReqs.MergeFrom(other.StartReqs);
          }
          if (other.StepFlagGmtId.Length != 0) {
            StepFlagGmtId = other.StepFlagGmtId;
          }
          if (other.CompleteFlagGmtId.Length != 0) {
            CompleteFlagGmtId = other.CompleteFlagGmtId;
          }
          storyboardSteps_.Add(other.storyboardSteps_);
          if (other.ResetMode != 0) {
            ResetMode = other.ResetMode;
          }
          if (other.resetReqs_ != null) {
            if (resetReqs_ == null) {
              ResetReqs = new global::WUProtos.Data.Requirements();
            }
            ResetReqs.MergeFrom(other.ResetReqs);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (startReqs_ == null) {
                  StartReqs = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(StartReqs);
                break;
              }
              case 26: {
                StepFlagGmtId = input.ReadString();
                break;
              }
              case 34: {
                CompleteFlagGmtId = input.ReadString();
                break;
              }
              case 42: {
                storyboardSteps_.AddEntriesFrom(input, _repeated_storyboardSteps_codec);
                break;
              }
              case 48: {
                ResetMode = (global::WUProtos.Data.GmTemplate.Types.Storyboard.Types.StoryboardResetMode) input.ReadEnum();
                break;
              }
              case 58: {
                if (resetReqs_ == null) {
                  ResetReqs = new global::WUProtos.Data.Requirements();
                }
                input.ReadMessage(ResetReqs);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Storyboard message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum StoryboardResetMode {
            [pbr::OriginalName("STORYBOARD_RESET_UNKNOWN")] StoryboardResetUnknown = 0,
            [pbr::OriginalName("STORYBOARD_RESET_NOT_ALLOWED")] StoryboardResetNotAllowed = 1,
            [pbr::OriginalName("STORYBOARD_RESET_WHEN_INCOMPLETE")] StoryboardResetWhenIncomplete = 2,
            [pbr::OriginalName("STORYBOARD_RESET_WHEN_COMPLETE")] StoryboardResetWhenComplete = 3,
          }

          public sealed partial class StoryboardStep : pb::IMessage<StoryboardStep> {
            private static readonly pb::MessageParser<StoryboardStep> _parser = new pb::MessageParser<StoryboardStep>(() => new StoryboardStep());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StoryboardStep> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.Storyboard.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StoryboardStep() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StoryboardStep(StoryboardStep other) : this() {
              rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StoryboardStep Clone() {
              return new StoryboardStep(this);
            }

            /// <summary>Field number for the "rewards" field.</summary>
            public const int RewardsFieldNumber = 1;
            private global::WUProtos.Data.Loot.LootReward.Types.LootCollection rewards_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Rewards {
              get { return rewards_; }
              set {
                rewards_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StoryboardStep);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StoryboardStep other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Rewards, other.Rewards)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (rewards_ != null) hash ^= Rewards.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (rewards_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Rewards);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (rewards_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StoryboardStep other) {
              if (other == null) {
                return;
              }
              if (other.rewards_ != null) {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                Rewards.MergeFrom(other.Rewards);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (rewards_ == null) {
                      Rewards = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                    }
                    input.ReadMessage(Rewards);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class ConditionalModifiers : pb::IMessage<ConditionalModifiers> {
        private static readonly pb::MessageParser<ConditionalModifiers> _parser = new pb::MessageParser<ConditionalModifiers>(() => new ConditionalModifiers());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConditionalModifiers> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionalModifiers() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionalModifiers(ConditionalModifiers other) : this() {
          conditions_ = other.conditions_ != null ? other.conditions_.Clone() : null;
          modifiers_ = other.modifiers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConditionalModifiers Clone() {
          return new ConditionalModifiers(this);
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int ConditionsFieldNumber = 1;
        private global::WUProtos.Data.Conditions conditions_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Conditions Conditions {
          get { return conditions_; }
          set {
            conditions_ = value;
          }
        }

        /// <summary>Field number for the "modifiers" field.</summary>
        public const int ModifiersFieldNumber = 2;
        private static readonly pbc::MapField<string, long>.Codec _map_modifiers_codec
            = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 18);
        private readonly pbc::MapField<string, long> modifiers_ = new pbc::MapField<string, long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, long> Modifiers {
          get { return modifiers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConditionalModifiers);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConditionalModifiers other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Conditions, other.Conditions)) return false;
          if (!Modifiers.Equals(other.Modifiers)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (conditions_ != null) hash ^= Conditions.GetHashCode();
          hash ^= Modifiers.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (conditions_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Conditions);
          }
          modifiers_.WriteTo(output, _map_modifiers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (conditions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conditions);
          }
          size += modifiers_.CalculateSize(_map_modifiers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConditionalModifiers other) {
          if (other == null) {
            return;
          }
          if (other.conditions_ != null) {
            if (conditions_ == null) {
              Conditions = new global::WUProtos.Data.Conditions();
            }
            Conditions.MergeFrom(other.Conditions);
          }
          modifiers_.Add(other.modifiers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (conditions_ == null) {
                  Conditions = new global::WUProtos.Data.Conditions();
                }
                input.ReadMessage(Conditions);
                break;
              }
              case 18: {
                modifiers_.AddEntriesFrom(input, _map_modifiers_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class FeatureFlag : pb::IMessage<FeatureFlag> {
        private static readonly pb::MessageParser<FeatureFlag> _parser = new pb::MessageParser<FeatureFlag>(() => new FeatureFlag());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureFlag> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureFlag() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureFlag(FeatureFlag other) : this() {
          switch (other.DefaultValueCase) {
            case DefaultValueOneofCase.Id:
              Id = other.Id;
              break;
            case DefaultValueOneofCase.FeatureId:
              FeatureId = other.FeatureId;
              break;
            case DefaultValueOneofCase.Bval:
              Bval = other.Bval;
              break;
            case DefaultValueOneofCase.Lval:
              Lval = other.Lval;
              break;
            case DefaultValueOneofCase.Sval:
              Sval = other.Sval;
              break;
            case DefaultValueOneofCase.Fval:
              Fval = other.Fval;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureFlag Clone() {
          return new FeatureFlag(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return defaultValueCase_ == DefaultValueOneofCase.Id ? (string) defaultValue_ : ""; }
          set {
            defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            defaultValueCase_ = DefaultValueOneofCase.Id;
          }
        }

        /// <summary>Field number for the "feature_id" field.</summary>
        public const int FeatureIdFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FeatureId {
          get { return defaultValueCase_ == DefaultValueOneofCase.FeatureId ? (string) defaultValue_ : ""; }
          set {
            defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            defaultValueCase_ = DefaultValueOneofCase.FeatureId;
          }
        }

        /// <summary>Field number for the "bval" field.</summary>
        public const int BvalFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Bval {
          get { return defaultValueCase_ == DefaultValueOneofCase.Bval ? (bool) defaultValue_ : false; }
          set {
            defaultValue_ = value;
            defaultValueCase_ = DefaultValueOneofCase.Bval;
          }
        }

        /// <summary>Field number for the "lval" field.</summary>
        public const int LvalFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Lval {
          get { return defaultValueCase_ == DefaultValueOneofCase.Lval ? (long) defaultValue_ : 0L; }
          set {
            defaultValue_ = value;
            defaultValueCase_ = DefaultValueOneofCase.Lval;
          }
        }

        /// <summary>Field number for the "sval" field.</summary>
        public const int SvalFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sval {
          get { return defaultValueCase_ == DefaultValueOneofCase.Sval ? (string) defaultValue_ : ""; }
          set {
            defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            defaultValueCase_ = DefaultValueOneofCase.Sval;
          }
        }

        /// <summary>Field number for the "fval" field.</summary>
        public const int FvalFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Fval {
          get { return defaultValueCase_ == DefaultValueOneofCase.Fval ? (float) defaultValue_ : 0F; }
          set {
            defaultValue_ = value;
            defaultValueCase_ = DefaultValueOneofCase.Fval;
          }
        }

        private object defaultValue_;
        /// <summary>Enum of possible cases for the "DefaultValue" oneof.</summary>
        public enum DefaultValueOneofCase {
          None = 0,
          Id = 1,
          FeatureId = 2,
          Bval = 3,
          Lval = 4,
          Sval = 5,
          Fval = 6,
        }
        private DefaultValueOneofCase defaultValueCase_ = DefaultValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefaultValueOneofCase DefaultValueCase {
          get { return defaultValueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDefaultValue() {
          defaultValueCase_ = DefaultValueOneofCase.None;
          defaultValue_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FeatureFlag);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureFlag other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (FeatureId != other.FeatureId) return false;
          if (Bval != other.Bval) return false;
          if (Lval != other.Lval) return false;
          if (Sval != other.Sval) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fval, other.Fval)) return false;
          if (DefaultValueCase != other.DefaultValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (defaultValueCase_ == DefaultValueOneofCase.Id) hash ^= Id.GetHashCode();
          if (defaultValueCase_ == DefaultValueOneofCase.FeatureId) hash ^= FeatureId.GetHashCode();
          if (defaultValueCase_ == DefaultValueOneofCase.Bval) hash ^= Bval.GetHashCode();
          if (defaultValueCase_ == DefaultValueOneofCase.Lval) hash ^= Lval.GetHashCode();
          if (defaultValueCase_ == DefaultValueOneofCase.Sval) hash ^= Sval.GetHashCode();
          if (defaultValueCase_ == DefaultValueOneofCase.Fval) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fval);
          hash ^= (int) defaultValueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (defaultValueCase_ == DefaultValueOneofCase.Id) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.FeatureId) {
            output.WriteRawTag(18);
            output.WriteString(FeatureId);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Bval) {
            output.WriteRawTag(24);
            output.WriteBool(Bval);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Lval) {
            output.WriteRawTag(32);
            output.WriteInt64(Lval);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Sval) {
            output.WriteRawTag(42);
            output.WriteString(Sval);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Fval) {
            output.WriteRawTag(53);
            output.WriteFloat(Fval);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (defaultValueCase_ == DefaultValueOneofCase.Id) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.FeatureId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureId);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Bval) {
            size += 1 + 1;
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Lval) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lval);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Sval) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sval);
          }
          if (defaultValueCase_ == DefaultValueOneofCase.Fval) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureFlag other) {
          if (other == null) {
            return;
          }
          switch (other.DefaultValueCase) {
            case DefaultValueOneofCase.Id:
              Id = other.Id;
              break;
            case DefaultValueOneofCase.FeatureId:
              FeatureId = other.FeatureId;
              break;
            case DefaultValueOneofCase.Bval:
              Bval = other.Bval;
              break;
            case DefaultValueOneofCase.Lval:
              Lval = other.Lval;
              break;
            case DefaultValueOneofCase.Sval:
              Sval = other.Sval;
              break;
            case DefaultValueOneofCase.Fval:
              Fval = other.Fval;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                FeatureId = input.ReadString();
                break;
              }
              case 24: {
                Bval = input.ReadBool();
                break;
              }
              case 32: {
                Lval = input.ReadInt64();
                break;
              }
              case 42: {
                Sval = input.ReadString();
                break;
              }
              case 53: {
                Fval = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WalkboxTemplate : pb::IMessage<WalkboxTemplate> {
        private static readonly pb::MessageParser<WalkboxTemplate> _parser = new pb::MessageParser<WalkboxTemplate>(() => new WalkboxTemplate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WalkboxTemplate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkboxTemplate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkboxTemplate(WalkboxTemplate other) : this() {
          id_ = other.id_;
          requiredDistanceKm_ = other.requiredDistanceKm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkboxTemplate Clone() {
          return new WalkboxTemplate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "required_distance_km" field.</summary>
        public const int RequiredDistanceKmFieldNumber = 2;
        private float requiredDistanceKm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RequiredDistanceKm {
          get { return requiredDistanceKm_; }
          set {
            requiredDistanceKm_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WalkboxTemplate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WalkboxTemplate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RequiredDistanceKm, other.RequiredDistanceKm)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (RequiredDistanceKm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RequiredDistanceKm);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (RequiredDistanceKm != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(RequiredDistanceKm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (RequiredDistanceKm != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WalkboxTemplate other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.RequiredDistanceKm != 0F) {
            RequiredDistanceKm = other.RequiredDistanceKm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 21: {
                RequiredDistanceKm = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MapIngredient : pb::IMessage<MapIngredient> {
        private static readonly pb::MessageParser<MapIngredient> _parser = new pb::MessageParser<MapIngredient>(() => new MapIngredient());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapIngredient> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapIngredient() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapIngredient(MapIngredient other) : this() {
          id_ = other.id_;
          loot_ = other.loot_ != null ? other.loot_.Clone() : null;
          cost_ = other.cost_ != null ? other.cost_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapIngredient Clone() {
          return new MapIngredient(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "loot" field.</summary>
        public const int LootFieldNumber = 2;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection loot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Loot {
          get { return loot_; }
          set {
            loot_ = value;
          }
        }

        /// <summary>Field number for the "cost" field.</summary>
        public const int CostFieldNumber = 3;
        private global::WUProtos.Data.Loot.LootReward.Types.LootCollection cost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootReward.Types.LootCollection Cost {
          get { return cost_; }
          set {
            cost_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapIngredient);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapIngredient other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(Loot, other.Loot)) return false;
          if (!object.Equals(Cost, other.Cost)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (loot_ != null) hash ^= Loot.GetHashCode();
          if (cost_ != null) hash ^= Cost.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (loot_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Loot);
          }
          if (cost_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Cost);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (loot_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loot);
          }
          if (cost_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cost);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapIngredient other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.loot_ != null) {
            if (loot_ == null) {
              Loot = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Loot.MergeFrom(other.Loot);
          }
          if (other.cost_ != null) {
            if (cost_ == null) {
              Cost = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
            }
            Cost.MergeFrom(other.Cost);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                if (loot_ == null) {
                  Loot = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Loot);
                break;
              }
              case 26: {
                if (cost_ == null) {
                  Cost = new global::WUProtos.Data.Loot.LootReward.Types.LootCollection();
                }
                input.ReadMessage(Cost);
                break;
              }
            }
          }
        }

      }

      public sealed partial class MapAbility : pb::IMessage<MapAbility> {
        private static readonly pb::MessageParser<MapAbility> _parser = new pb::MessageParser<MapAbility>(() => new MapAbility());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapAbility> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapAbility() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapAbility(MapAbility other) : this() {
          id_ = other.id_;
          targetType_ = other.targetType_;
          baseBuffGmtId_ = other.baseBuffGmtId_;
          radius_ = other.radius_;
          cooldownMs_ = other.cooldownMs_;
          focusCost_ = other.focusCost_;
          mapAbilityLevels_ = other.mapAbilityLevels_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapAbility Clone() {
          return new MapAbility(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "target_type" field.</summary>
        public const int TargetTypeFieldNumber = 2;
        private global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType targetType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType TargetType {
          get { return targetType_; }
          set {
            targetType_ = value;
          }
        }

        /// <summary>Field number for the "base_buff_gmt_id" field.</summary>
        public const int BaseBuffGmtIdFieldNumber = 3;
        private string baseBuffGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BaseBuffGmtId {
          get { return baseBuffGmtId_; }
          set {
            baseBuffGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 4;
        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "cooldown_ms" field.</summary>
        public const int CooldownMsFieldNumber = 5;
        private uint cooldownMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CooldownMs {
          get { return cooldownMs_; }
          set {
            cooldownMs_ = value;
          }
        }

        /// <summary>Field number for the "focus_cost" field.</summary>
        public const int FocusCostFieldNumber = 6;
        private int focusCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FocusCost {
          get { return focusCost_; }
          set {
            focusCost_ = value;
          }
        }

        /// <summary>Field number for the "map_ability_levels" field.</summary>
        public const int MapAbilityLevelsFieldNumber = 7;
        private static readonly pb::FieldCodec<global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel> _repeated_mapAbilityLevels_codec
            = pb::FieldCodec.ForMessage(58, global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel> mapAbilityLevels_ = new pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityLevel> MapAbilityLevels {
          get { return mapAbilityLevels_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapAbility);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapAbility other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TargetType != other.TargetType) return false;
          if (BaseBuffGmtId != other.BaseBuffGmtId) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
          if (CooldownMs != other.CooldownMs) return false;
          if (FocusCost != other.FocusCost) return false;
          if(!mapAbilityLevels_.Equals(other.mapAbilityLevels_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (TargetType != 0) hash ^= TargetType.GetHashCode();
          if (BaseBuffGmtId.Length != 0) hash ^= BaseBuffGmtId.GetHashCode();
          if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
          if (CooldownMs != 0) hash ^= CooldownMs.GetHashCode();
          if (FocusCost != 0) hash ^= FocusCost.GetHashCode();
          hash ^= mapAbilityLevels_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (TargetType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) TargetType);
          }
          if (BaseBuffGmtId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(BaseBuffGmtId);
          }
          if (Radius != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Radius);
          }
          if (CooldownMs != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(CooldownMs);
          }
          if (FocusCost != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(FocusCost);
          }
          mapAbilityLevels_.WriteTo(output, _repeated_mapAbilityLevels_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (TargetType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
          }
          if (BaseBuffGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseBuffGmtId);
          }
          if (Radius != 0F) {
            size += 1 + 4;
          }
          if (CooldownMs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CooldownMs);
          }
          if (FocusCost != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FocusCost);
          }
          size += mapAbilityLevels_.CalculateSize(_repeated_mapAbilityLevels_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapAbility other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.TargetType != 0) {
            TargetType = other.TargetType;
          }
          if (other.BaseBuffGmtId.Length != 0) {
            BaseBuffGmtId = other.BaseBuffGmtId;
          }
          if (other.Radius != 0F) {
            Radius = other.Radius;
          }
          if (other.CooldownMs != 0) {
            CooldownMs = other.CooldownMs;
          }
          if (other.FocusCost != 0) {
            FocusCost = other.FocusCost;
          }
          mapAbilityLevels_.Add(other.mapAbilityLevels_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                TargetType = (global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType) input.ReadEnum();
                break;
              }
              case 26: {
                BaseBuffGmtId = input.ReadString();
                break;
              }
              case 37: {
                Radius = input.ReadFloat();
                break;
              }
              case 40: {
                CooldownMs = input.ReadUInt32();
                break;
              }
              case 48: {
                FocusCost = input.ReadInt32();
                break;
              }
              case 58: {
                mapAbilityLevels_.AddEntriesFrom(input, _repeated_mapAbilityLevels_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MapAbility message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum MapAbilityTargetType {
            [pbr::OriginalName("TARGET_NONE")] TargetNone = 0,
            [pbr::OriginalName("TARGET_CHOOSE_ONE")] TargetChooseOne = 1,
            [pbr::OriginalName("TARGET_CHOOSE_FRIEND")] TargetChooseFriend = 2,
            [pbr::OriginalName("TARGET_CHOOSE_ENEMY")] TargetChooseEnemy = 3,
            [pbr::OriginalName("TARGET_SELF")] TargetSelf = 4,
            [pbr::OriginalName("TARGET_RANGE")] TargetRange = 5,
            [pbr::OriginalName("TARGET_ENEMIES_IN_RANGE")] TargetEnemiesInRange = 6,
            [pbr::OriginalName("TARGET_ENTIRE_FRIENDS")] TargetEntireFriends = 7,
            [pbr::OriginalName("TARGET_RANDOM_ONE")] TargetRandomOne = 8,
            [pbr::OriginalName("TARGET_RANDOM_FRIEND")] TargetRandomFriend = 9,
            [pbr::OriginalName("TARGET_RANDOM_ENEMY")] TargetRandomEnemy = 10,
            [pbr::OriginalName("TARGET_ENTIRE_ENEMIES")] TargetEntireEnemies = 11,
            [pbr::OriginalName("TARGET_CHOOSE_FRIEND_NOT_SELF")] TargetChooseFriendNotSelf = 12,
          }

          public sealed partial class MapAbilityLevel : pb::IMessage<MapAbilityLevel> {
            private static readonly pb::MessageParser<MapAbilityLevel> _parser = new pb::MessageParser<MapAbilityLevel>(() => new MapAbilityLevel());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MapAbilityLevel> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.GmTemplate.Types.MapAbility.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbilityLevel() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbilityLevel(MapAbilityLevel other) : this() {
              targetType_ = other.targetType_;
              radius_ = other.radius_;
              cooldownMs_ = other.cooldownMs_;
              focusCost_ = other.focusCost_;
              buffGmtId_ = other.buffGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbilityLevel Clone() {
              return new MapAbilityLevel(this);
            }

            /// <summary>Field number for the "target_type" field.</summary>
            public const int TargetTypeFieldNumber = 1;
            private global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType targetType_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType TargetType {
              get { return targetType_; }
              set {
                targetType_ = value;
              }
            }

            /// <summary>Field number for the "radius" field.</summary>
            public const int RadiusFieldNumber = 2;
            private float radius_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Radius {
              get { return radius_; }
              set {
                radius_ = value;
              }
            }

            /// <summary>Field number for the "cooldown_ms" field.</summary>
            public const int CooldownMsFieldNumber = 3;
            private uint cooldownMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint CooldownMs {
              get { return cooldownMs_; }
              set {
                cooldownMs_ = value;
              }
            }

            /// <summary>Field number for the "focus_cost" field.</summary>
            public const int FocusCostFieldNumber = 4;
            private int focusCost_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int FocusCost {
              get { return focusCost_; }
              set {
                focusCost_ = value;
              }
            }

            /// <summary>Field number for the "buff_gmt_id" field.</summary>
            public const int BuffGmtIdFieldNumber = 5;
            private string buffGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string BuffGmtId {
              get { return buffGmtId_; }
              set {
                buffGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MapAbilityLevel);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MapAbilityLevel other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TargetType != other.TargetType) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
              if (CooldownMs != other.CooldownMs) return false;
              if (FocusCost != other.FocusCost) return false;
              if (BuffGmtId != other.BuffGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TargetType != 0) hash ^= TargetType.GetHashCode();
              if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
              if (CooldownMs != 0) hash ^= CooldownMs.GetHashCode();
              if (FocusCost != 0) hash ^= FocusCost.GetHashCode();
              if (BuffGmtId.Length != 0) hash ^= BuffGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TargetType != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) TargetType);
              }
              if (Radius != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Radius);
              }
              if (CooldownMs != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(CooldownMs);
              }
              if (FocusCost != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(FocusCost);
              }
              if (BuffGmtId.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(BuffGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TargetType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
              }
              if (Radius != 0F) {
                size += 1 + 4;
              }
              if (CooldownMs != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CooldownMs);
              }
              if (FocusCost != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(FocusCost);
              }
              if (BuffGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BuffGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MapAbilityLevel other) {
              if (other == null) {
                return;
              }
              if (other.TargetType != 0) {
                TargetType = other.TargetType;
              }
              if (other.Radius != 0F) {
                Radius = other.Radius;
              }
              if (other.CooldownMs != 0) {
                CooldownMs = other.CooldownMs;
              }
              if (other.FocusCost != 0) {
                FocusCost = other.FocusCost;
              }
              if (other.BuffGmtId.Length != 0) {
                BuffGmtId = other.BuffGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    TargetType = (global::WUProtos.Data.GmTemplate.Types.MapAbility.Types.MapAbilityTargetType) input.ReadEnum();
                    break;
                  }
                  case 21: {
                    Radius = input.ReadFloat();
                    break;
                  }
                  case 24: {
                    CooldownMs = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    FocusCost = input.ReadInt32();
                    break;
                  }
                  case 42: {
                    BuffGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class StoreSubcategory : pb::IMessage<StoreSubcategory> {
        private static readonly pb::MessageParser<StoreSubcategory> _parser = new pb::MessageParser<StoreSubcategory>(() => new StoreSubcategory());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StoreSubcategory> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StoreSubcategory() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StoreSubcategory(StoreSubcategory other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StoreSubcategory Clone() {
          return new StoreSubcategory(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StoreSubcategory);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StoreSubcategory other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StoreSubcategory other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class StoreConfig : pb::IMessage<StoreConfig> {
        private static readonly pb::MessageParser<StoreConfig> _parser = new pb::MessageParser<StoreConfig>(() => new StoreConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StoreConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StoreConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StoreConfig(StoreConfig other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StoreConfig Clone() {
          return new StoreConfig(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StoreConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StoreConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StoreConfig other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ProtegoPattern : pb::IMessage<ProtegoPattern> {
        private static readonly pb::MessageParser<ProtegoPattern> _parser = new pb::MessageParser<ProtegoPattern>(() => new ProtegoPattern());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ProtegoPattern> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[43]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtegoPattern() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtegoPattern(ProtegoPattern other) : this() {
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtegoPattern Clone() {
          return new ProtegoPattern(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ProtegoPattern);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProtegoPattern other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProtegoPattern other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
