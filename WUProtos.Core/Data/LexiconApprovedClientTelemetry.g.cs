// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/LexiconApprovedClientTelemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/LexiconApprovedClientTelemetry.proto</summary>
  public static partial class LexiconApprovedClientTelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/LexiconApprovedClientTelemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LexiconApprovedClientTelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJXVVByb3Rvcy9EYXRhL0xleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRy",
            "eS5wcm90bxINV1VQcm90b3MuRGF0YRoaV1VQcm90b3MvRGF0YS9BUk1vZGUu",
            "cHJvdG8aJ1dVUHJvdG9zL0VudW1zL0NvbWJhdFBoYXNlT3V0Y29tZS5wcm90",
            "bxofV1VQcm90b3MvRGF0YS9QT0lJbnRlcmFjdC5wcm90bxoqV1VQcm90b3Mv",
            "RW51bXMvQ2F0ZWdvcnlTaGFyZUxvY2F0aW9uLnByb3RvGiFXVVByb3Rvcy9F",
            "bnVtcy9Eb3dubG9hZFR5cGUucHJvdG8aJVdVUHJvdG9zL0VudW1zL0FjdGl2",
            "ZUVuZ2FnZW1lbnQucHJvdG8ixnYKHkxleGljb25BcHByb3ZlZENsaWVudFRl",
            "bGVtZXRyeRJXCgdzdGFydHVwGAEgASgLMkQuV1VQcm90b3MuRGF0YS5MZXhp",
            "Y29uQXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5U3Rh",
            "cnR1cEgAEnIKFnN3aXNoX3NwZWxsX2dhbWVfc3RhcnQYAiABKAsyUC5XVVBy",
            "b3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGll",
            "bnRUZWxlbWV0cnlTd2lzaFNwZWxsR2FtZVN0YXJ0SAASbgoUc3dpc2hfc3Bl",
            "bGxfZ2FtZV9lbmQYAyABKAsyTi5XVVByb3Rvcy5EYXRhLkxleGljb25BcHBy",
            "b3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlTd2lzaFNwZWxs",
            "R2FtZUVuZEgAElwKCmFzc2V0X2xvYWQYBCABKAsyRi5XVVByb3Rvcy5EYXRh",
            "LkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0",
            "cnlBc3NldExvYWRIABJmCg9idW5kbGVfZG93bmxvYWQYBSABKAsySy5XVVBy",
            "b3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGll",
            "bnRUZWxlbWV0cnlCdW5kbGVEb3dubG9hZEgAElsKCXN0b3B3YXRjaBgGIAEo",
            "CzJGLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1l",
            "dHJ5LkNsaWVudFRlbGVtZXRyeVN0b3B3YXRjaEgAElwKCnNtb2tlX3Rlc3QY",
            "ByABKAsyRi5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRl",
            "bGVtZXRyeS5DbGllbnRUZWxlbWV0cnlTbW9rZVRlc3RIABKAAQodZW52aXJv",
            "bm1lbnRhbF90YWdzX3VpX2VudGVyZWQYCCABKAsyVy5XVVByb3Rvcy5EYXRh",
            "LkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0",
            "cnlFbnZpcm9ubWVudGFsVGFnc1VJRW50ZXJlZEgAEpkBCidlbnZpcm9ubWVu",
            "dGFsX3RhZ3Nfd2VhdGhlcl9hY2tub3dsZWRnZWQYCSABKAsyZi5XVVByb3Rv",
            "cy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRU",
            "ZWxlbWV0cnlFbnZpcm9ubWVudGFsVGFnU2V2ZXJlV2VhdGhlckFja25vd2xl",
            "ZGdlZEgAEmYKD2F2YXRhcl9pbnRlcmFjdBgKIAEoCzJLLldVUHJvdG9zLkRh",
            "dGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVt",
            "ZXRyeUF2YXRhckludGVyYWN0SAASYAoMcmV3YXJkc19mbG93GAsgASgLMkgu",
            "V1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0cnku",
            "Q2xpZW50VGVsZW1ldHJ5UmV3YXJkc0Zsb3dIABJ7Chpwb3J0a2V5c193cmFj",
            "a3NwdXJ0X3RhcHBlZBgMIAEoCzJVLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFw",
            "cHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVBvcnRrZXlz",
            "V3JhY2tzcHVydFRhcHBlZEgAEoEBCh5wb3J0a2V5c19vdXRfb2ZfYm91bmRz",
            "X3JlYWNoZWQYDSABKAsyVy5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3Zl",
            "ZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlQb3J0a2V5c091dE9m",
            "Qm91bmRzUmVhY2hlZEgAEnoKGnBvcnRrZXlzX2FkdmFuY2VkX2FyX2NoZWNr",
            "GA4gASgLMlQuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRU",
            "ZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5UG9ydGtleXNBZHZhbmNlZEFSQ2hl",
            "Y2tIABJvChRwcm9mZXNzaW9uX21haW5fbWVudRgPIAEoCzJPLldVUHJvdG9z",
            "LkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRl",
            "bGVtZXRyeVByb2Zlc3Npb25NYWluTWVudUgAEncKGHByb2Zlc3Npb25fbm9k",
            "ZV9zZWxlY3RlZBgQIAEoCzJTLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJv",
            "dmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVByb2Zlc3Npb25O",
            "b2RlU2VsZWN0ZWRIABJgCgxidXR0b25fcHJlc3MYESABKAsySC5XVVByb3Rv",
            "cy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRU",
            "ZWxlbWV0cnlCdXR0b25QcmVzc0gAEm4KCnNlbGVjdF9tb2IYEiABKAsyWC5X",
            "VVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5D",
            "bGllbnRUZWxlbWV0cnlXaXphcmRpbmdDaGFsbGVuZ2VTZWxlY3RNb2JIABJs",
            "Cgltb3JlX2luZm8YEyABKAsyVy5XVVByb3Rvcy5EYXRhLkxleGljb25BcHBy",
            "b3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlXaXphcmRpbmdD",
            "aGFsbGVuZ2VNb3JlSW5mb0gAEmoKEWxhbmRtYXJrX2ludGVyYWN0GBQgASgL",
            "Mk0uV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0",
            "cnkuQ2xpZW50VGVsZW1ldHJ5TGFuZG1hcmtJbnRlcmFjdEgAEngKD2xvY2tf",
            "b25fYXR0ZW1wdBgVIAEoCzJdLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJv",
            "dmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeUNvbWJhdEdhbWVP",
            "ZmZlbnNpdmVMb2NrT25BdHRlbXB0SAASfwoXb2ZmZW5zaXZlX3RyYWNlX2F0",
            "dGVtcHQYFiABKAsyXC5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENs",
            "aWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlDb21iYXRHYW1lT2ZmZW5z",
            "aXZlVHJhY2VBdHRlbXB0SAASeQoUcHJvdGVnb19jYXN0X2F0dGVtcHQYFyAB",
            "KAsyWS5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVt",
            "ZXRyeS5DbGllbnRUZWxlbWV0cnlDb21iYXRHYW1lUHJvdGVnb0Nhc3RBdHRl",
            "bXB0SAASfAoTb3V0X29mX2VuZXJneV9zaG93bhgYIAEoCzJdLldVUHJvdG9z",
            "LkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRl",
            "bGVtZXRyeUNvbWJhdEdhbWVPdXRPZkVuZXJneURpYWxvZ1Nob3duSAASggEK",
            "Fm91dF9vZl9lbmVyZ3lfcHVyY2hhc2UYGSABKAsyYC5XVVByb3Rvcy5EYXRh",
            "LkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0",
            "cnlDb21iYXRHYW1lT3V0T2ZFbmVyZ3lQdXJjaGFzZUJ1dHRvbkgAEnMKFGNv",
            "bWJhdF9wb3Rpb25fYnV0dG9uGBogASgLMlMuV1VQcm90b3MuRGF0YS5MZXhp",
            "Y29uQXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5Q29t",
            "YmF0R2FtZVBvdGlvbkJ1dHRvbkgAEl0KCmltcHJlc3Npb24YGyABKAsyRy5X",
            "VVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5D",
            "bGllbnRUZWxlbWV0cnlJbXByZXNzaW9uSAASeAoYZGVzY3JpcHRpb25fY2xp",
            "Y2t0aHJvdWdoGBwgASgLMlQuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92",
            "ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5RGVzY3JpcHRpb25D",
            "bGlja3Rocm91Z2hIABJ0ChZoeXBlcmxpbmtfY2xpY2t0aHJvdWdoGB0gASgL",
            "MlIuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0",
            "cnkuQ2xpZW50VGVsZW1ldHJ5SHlwZXJsaW5rQ2xpY2t0aHJvdWdoSAASagoR",
            "c3VyZmFjZV9kZXRlY3Rpb24YHiABKAsyTS5XVVByb3Rvcy5EYXRhLkxleGlj",
            "b25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlTdXJm",
            "YWNlRGV0ZWN0aW9uSAASZgoPZW5jb3VudGVyX3N0YXJ0GB8gASgLMksuV1VQ",
            "cm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xp",
            "ZW50VGVsZW1ldHJ5RW5jb3VudGVyU3RhcnRIABJxChRwZXJtaXNzaW9uX3Jl",
            "cXVlc3RlZBggIAEoCzJRLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVk",
            "Q2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVBlcm1pc3Npb25zUmVx",
            "dWVzdGVkSAASdgoXcGVybWlzc2lvbl9jaGVja19mYWlsZWQYISABKAsyUy5X",
            "VVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5D",
            "bGllbnRUZWxlbWV0cnlQZXJtaXNzaW9uc0NoZWNrRmFpbGVkSAASbAoSZGVl",
            "cGxpbmtfdHJpZ2dlcmVkGCIgASgLMk4uV1VQcm90b3MuRGF0YS5MZXhpY29u",
            "QXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5RGVlcGxp",
            "bmtUcmlnZ2VyZWRIABJeCgtsb2dpbl9zdGFydBgjIAEoCzJHLldVUHJvdG9z",
            "LkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRl",
            "bGVtZXRyeUxvZ2luU3RhcnRIABJkCg5sb2dpbl9jb21wbGV0ZRgkIAEoCzJK",
            "LldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5",
            "LkNsaWVudFRlbGVtZXRyeUxvZ2luQ29tcGxldGVIABJ8Chtwb3Rpb25zX21h",
            "c3Rlcl9ub3RlX2F0dGVtcHQYJSABKAsyVS5XVVByb3Rvcy5EYXRhLkxleGlj",
            "b25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlQb3Rp",
            "b25zTWFzdGVyTm90ZUF0dGVtcHRIABJ1Chdwcm9maWxlX3BvcnRyYWl0X2Fj",
            "dGlvbhgmIAEoCzJSLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xp",
            "ZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVByb2ZpbGVQb3J0cmFpdEFj",
            "dGlvbkgAEncKGHByb2ZpbGVfYnV0dG9uX3JhbmRvbWl6ZRgnIAEoCzJTLldV",
            "UHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNs",
            "aWVudFRlbGVtZXRyeVByb2ZpbGVCdXR0b25SYW5kb21pemVIABJtChNwcm9m",
            "aWxlX2J1dHRvbl9sZW5zGCggASgLMk4uV1VQcm90b3MuRGF0YS5MZXhpY29u",
            "QXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5UHJvZmls",
            "ZUJ1dHRvbkxlbnNIABJwChRwcm9maWxlX2J1dHRvbl9hc3NldBgpIAEoCzJQ",
            "LldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5",
            "LkNsaWVudFRlbGVtZXRyeVByb2ZpbGVCdXR0b25Bc3NzZXRIABJsChJwcm9m",
            "aWxlX3NjcmVlbmdyYWIYKiABKAsyTi5XVVByb3Rvcy5EYXRhLkxleGljb25B",
            "cHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlQcm9maWxl",
            "U2NyZWVuR3JhYkgAEmgKEG91dHBvc3RfaW50ZXJhY3QYKyABKAsyTC5XVVBy",
            "b3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGll",
            "bnRUZWxlbWV0cnlPdXRwb3N0SW50ZXJhY3RIABJuChNncmVlbmhvdXNlX2lu",
            "dGVyYWN0GCwgASgLMk8uV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRD",
            "bGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5R3JlZW5ob3VzZUludGVy",
            "YWN0SAASbAoWZmFtaWx5X2RldGFpbHNfY2xpY2tlZBgtIAEoCzJKLldVUHJv",
            "dG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVu",
            "dFRlbGVtZXRyeUZhbWlseURldGFpbHNIABJuChdzdGlja2VyX2RldGFpbHNf",
            "Y2xpY2tlZBguIAEoCzJLLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVk",
            "Q2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVN0aWNrZXJEZXRhaWxz",
            "SAASagoVcmVnaXN0cnlfaW5mb19jbGlja2VkGC8gASgLMkkuV1VQcm90b3Mu",
            "RGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVs",
            "ZW1ldHJ5UmVnaXN0cnlJbmZvSAASWAoIcmF0ZV9hcHAYMCABKAsyRC5XVVBy",
            "b3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGll",
            "bnRUZWxlbWV0cnlSYXRlQXBwSAASYAoOZXhjZXB0aW9uX2luZm8YMSABKAsy",
            "Ri5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRy",
            "eS5DbGllbnRUZWxlbWV0cnlFeGNlcHRpb25IABJtCg9hcl9tb2RlX3RvZ2ds",
            "ZWQYMiABKAsyUi5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVu",
            "dFRlbGVtZXRyeS5DbGllbnRUZWxlbWV0cnlTZXR0aW5nc0FSTW9kZVRvZ2ds",
            "ZWRIABJ3ChRiYXR0ZXJ5X21vZGVfdG9nZ2xlZBgzIAEoCzJXLldVUHJvdG9z",
            "LkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRl",
            "bGVtZXRyeVNldHRpbmdzQmF0dGVyeU1vZGVUb2dnbGVkSAASaAoMYXV0aF91",
            "cGRhdGVkGDQgASgLMlAuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRD",
            "bGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5U2V0dGluZ3NBdXRoVXBk",
            "YXRlZEgAEmcKEHN0b3JlX3BvcHVwX29wZW4YNSABKAsySy5XVVByb3Rvcy5E",
            "YXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxl",
            "bWV0cnlTdG9yZVBvcHVwT3BlbkgAEmMKDnN0b3JlX3RhYl9vcGVuGDYgASgL",
            "MkkuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0",
            "cnkuQ2xpZW50VGVsZW1ldHJ5U3RvcmVUYWJPcGVuSAASbAoQdmF1bHRfcG9w",
            "dXBfb3Blbhg3IAEoCzJQLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVk",
            "Q2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVZhdWx0SXRlbUltcHJl",
            "c3Npb25IABJpCg52YXVsdF90YWJfb3Blbhg4IAEoCzJPLldVUHJvdG9zLkRh",
            "dGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVt",
            "ZXRyeVZhdWx0VGFiSW1wcmVzc2lvbkgAElYKC3NlcnZlcl9kYXRhGOkHIAEo",
            "CzJALldVUHJvdG9zLkRhdGEuTGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1l",
            "dHJ5LlBsYXRmb3JtU2VydmVyRGF0YRrDAQoiQ2xpZW50VGVsZW1ldHJ5U3dp",
            "c2hTcGVsbEdhbWVTdGFydBIUCgxlbmNvdW50ZXJfaWQYASABKAkSFgoOYXR0",
            "ZW1wdF9udW1iZXIYAiABKAUSFAoMcGxheWVyX2xldmVsGAMgASgFEhoKEmVu",
            "Y291bnRlcl9wcm90b19pZBgEIAEoCRIVCg1zcGVsbF9wYXR0ZXJuGAUgASgJ",
            "EiYKB2FyX21vZGUYBiABKA4yFS5XVVByb3Rvcy5EYXRhLkFSTW9kZRqRAgoq",
            "Q2xpZW50VGVsZW1ldHJ5V2l6YXJkaW5nQ2hhbGxlbmdlU2VsZWN0TW9iEhEK",
            "CW1vYl9sZXZlbBgBIAEoBRIUCgxtb2JfYWZmaW5pdHkYAiABKAkSEgoKbW9i",
            "X2dtdF9pZBgDIAEoCRIeChZwbGF5ZXJfcHJvZmVzc2lvbl9yYW5rGAQgASgF",
            "EiAKGHBsYXllcl9wcm9mZXNzaW9uX2dtdF9pZBgFIAEoCRJAChZpc19tb2Jf",
            "YWxyZWFkeV9lbmdhZ2VkGAYgASgOMiAuV1VQcm90b3MuRW51bXMuQWN0aXZl",
            "RW5nYWdlbWVudBIiChpwbGF5ZXJfZW5nYWdlbWVudF93aXRoX21vYhgHIAEo",
            "CRrYAQopQ2xpZW50VGVsZW1ldHJ5V2l6YXJkaW5nQ2hhbGxlbmdlTW9yZUlu",
            "Zm8SEQoJbW9iX2xldmVsGAEgASgFEhQKDG1vYl9hZmZpbml0eRgCIAEoCRIe",
            "ChZwbGF5ZXJfcHJvZmVzc2lvbl9yYW5rGAMgASgFEiAKGHBsYXllcl9wcm9m",
            "ZXNzaW9uX2dtdF9pZBgEIAEoCRJAChZpc19tb2JfYWxyZWFkeV9lbmdhZ2Vk",
            "GAUgASgOMiAuV1VQcm90b3MuRW51bXMuQWN0aXZlRW5nYWdlbWVudBqKBAoW",
            "Q2xpZW50VGVsZW1ldHJ5U3RhcnR1cBIWCg5jbGllbnRfdmVyc2lvbhgCIAEo",
            "CRITCgtkZXZpY2VfdHlwZRgDIAEoCRISCgpmaXJzdF90aW1lGAQgASgIEh4K",
            "FmxvYWRfdG9fdG9zX2xvZ2luX3RpbWUYBSABKAESGAoQbG9hZF90b19tYXBf",
            "dGltZRgGIAEoARIRCglkZXZpY2Vfb3MYByABKAkSHgoWZ3JhcGhpY3NfZGV2",
            "aWNlX3ZlbmRvchgIIAEoCRIcChRncmFwaGljc19kZXZpY2VfbmFtZRgJIAEo",
            "CRIcChRncmFwaGljc19kZXZpY2VfdHlwZRgKIAEoCRIdChVncmFwaGljc19z",
            "aGFkZXJfbGV2ZWwYCyABKAESggEKFHN1YnN5c3RlbV9sb2FkX3RpbWVzGAwg",
            "AygLMmQuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxl",
            "bWV0cnkuQ2xpZW50VGVsZW1ldHJ5U3RhcnR1cC5DbGllbnRUZWxlbWV0cnlT",
            "dWJzeXN0ZW1TdGFydHVwEhcKD3BsYXllcl9uaWNrbmFtZRgNIAEoCRpJCh9D",
            "bGllbnRUZWxlbWV0cnlTdWJzeXN0ZW1TdGFydHVwEhMKC3N5c3RlbV9uYW1l",
            "GAEgASgJEhEKCWxvYWRfdGltZRgCIAEoAhpOCiRDbGllbnRUZWxlbWV0cnlT",
            "ZXR0aW5nc0FSTW9kZVRvZ2dsZWQSJgoHYXJfbW9kZRgBIAEoDjIVLldVUHJv",
            "dG9zLkRhdGEuQVJNb2RlGmYKIENsaWVudFRlbGVtZXRyeVByb2ZpbGVTY3Jl",
            "ZW5HcmFiEkIKE3NjcmVlbmdyYWJfbG9jYXRpb24YASABKA4yJS5XVVByb3Rv",
            "cy5FbnVtcy5DYXRlZ29yeVNoYXJlTG9jYXRpb24anwkKJENsaWVudFRlbGVt",
            "ZXRyeVByb2ZpbGVQb3J0cmFpdEFjdGlvbhJ5CgxiYXNlbGluZV9zcmMYASAB",
            "KA4yYy5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVt",
            "ZXRyeS5DbGllbnRUZWxlbWV0cnlQcm9maWxlUG9ydHJhaXRBY3Rpb24uUHJv",
            "ZmlsZVRhYlNvdXJjZRJ4Cg9wb3J0cmFpdF9mb3JtYXQYAiABKA4yXy5XVVBy",
            "b3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGll",
            "bnRUZWxlbWV0cnlQcm9maWxlUG9ydHJhaXRBY3Rpb24uUG9ydHJhaXRUeXBl",
            "EnoKD3BvcnRyYWl0X2FjdGlvbhgDIAEoDjJhLldVUHJvdG9zLkRhdGEuTGV4",
            "aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVBy",
            "b2ZpbGVQb3J0cmFpdEFjdGlvbi5Qb3J0cmFpdEFjdGlvbhIZChFwb3J0cmFp",
            "dF9sZW5zX3RvcBgEIAEoCRIZChFwb3J0cmFpdF9sZW5zX21pZBgFIAEoCRIc",
            "ChRwb3J0cmFpdF9sZW5zX2JvdHRvbRgGIAEoCRIWCg5wb3J0cmFpdF9mcmFt",
            "ZRgHIAEoCRIXCg9wb3J0cmFpdF9maWx0ZXIYCCABKAkSHAoUcG9ydHJhaXRf",
            "c3RpY2tlcl9pZHMYCSADKAkSHgoWcG9ydHJhaXRfc3RpY2tlcl9jb3VudBgK",
            "IAEoBRI7CgxzaGFyZV9zb3VyY2UYCyABKA4yJS5XVVByb3Rvcy5FbnVtcy5D",
            "YXRlZ29yeVNoYXJlTG9jYXRpb24SMAoKc2hhcmVfdHlwZRgMIAEoDjIcLldV",
            "UHJvdG9zLkVudW1zLkRvd25sb2FkVHlwZRIVCg1zaGFyZV9uZXR3b3JrGA0g",
            "ASgJEj4KD2Rvd25sb2FkX3NvdXJjZRgOIAEoDjIlLldVUHJvdG9zLkVudW1z",
            "LkNhdGVnb3J5U2hhcmVMb2NhdGlvbhIzCg1kb3dubG9hZF90eXBlGA8gASgO",
            "MhwuV1VQcm90b3MuRW51bXMuRG93bmxvYWRUeXBlIn4KDlBvcnRyYWl0QWN0",
            "aW9uEhkKFVBPUlRSQVRFX0FDVElPTl9VTlNFVBAAEhgKFFBPUlRSQUlUX0FD",
            "VElPTl9TQVZFEAESHAoYUE9SVFJBSVRfQUNUSU9OX0RPV05MT0FEEAISGQoV",
            "UE9SVFJBSVRfQUNUSU9OX1NIQVJFEAMiTwoMUG9ydHJhaXRUeXBlEhcKE1BP",
            "UlRSQUlUX1RZUEVfVU5TRVQQABISCg5QT1JUUkFJVF9QSE9UTxABEhIKDlBP",
            "UlRSQUlUX1ZJREVPEAIidwoQUHJvZmlsZVRhYlNvdXJjZRIcChhQUk9GSUxF",
            "X1RBQl9TT1VSQ0VfVU5TRVQQABILCgdUQUJfTkVXEAESEgoOVEFCX0xBU1Rf",
            "UEhPVE8QAhITCg9UQUJfU1RPQ0tfUEhPVE8QAxIPCgtUQUJfR0FMTEVSWRAE",
            "GlMKIUNsaWVudFRlbGVtZXRyeVByb2Zlc3Npb25Qcm9ncmVzcxIZChFwcm9m",
            "ZXNzaW9uX2dtdF9pZBgBIAEoCRITCgtyYW5rX3BvaW50cxgCIAEoDRreAQol",
            "Q2xpZW50VGVsZW1ldHJ5UHJvZmVzc2lvbk5vZGVTZWxlY3RlZBIUCgxwbGF5",
            "ZXJfbGV2ZWwYASABKAUSIAoYYWN0aXZlX3Byb2Zlc3Npb25fZ210X2lkGAIg",
            "ASgJEmwKE3Byb2Zlc3Npb25fcHJvZ3Jlc3MYAyADKAsyTy5XVVByb3Rvcy5E",
            "YXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRyeS5DbGllbnRUZWxl",
            "bWV0cnlQcm9mZXNzaW9uUHJvZ3Jlc3MSDwoHbm9kZV9pZBgEIAEoCRrJAQoh",
            "Q2xpZW50VGVsZW1ldHJ5UHJvZmVzc2lvbk1haW5NZW51EhQKDHBsYXllcl9s",
            "ZXZlbBgBIAEoBRIgChhhY3RpdmVfcHJvZmVzc2lvbl9nbXRfaWQYAiABKAkS",
            "bAoTcHJvZmVzc2lvbl9wcm9ncmVzcxgDIAMoCzJPLldVUHJvdG9zLkRhdGEu",
            "TGV4aWNvbkFwcHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRy",
            "eVByb2Zlc3Npb25Qcm9ncmVzcxpnCh5DbGllbnRUZWxlbWV0cnlPdXRwb3N0",
            "SW50ZXJhY3QSFAoMb3V0cG9zdF90eXBlGAEgASgJEi8KC2NvbW1vbl9kYXRh",
            "GAIgASgLMhouV1VQcm90b3MuRGF0YS5QT0lJbnRlcmFjdBppCh9DbGllbnRU",
            "ZWxlbWV0cnlMYW5kbWFya0ludGVyYWN0EhUKDWxhbmRtYXJrX3R5cGUYASAB",
            "KAkSLwoLY29tbW9uX2RhdGEYAiABKAsyGi5XVVByb3Rvcy5EYXRhLlBPSUlu",
            "dGVyYWN0GlQKIUNsaWVudFRlbGVtZXRyeUdyZWVuaG91c2VJbnRlcmFjdBIv",
            "Cgtjb21tb25fZGF0YRgBIAEoCzIaLldVUHJvdG9zLkRhdGEuUE9JSW50ZXJh",
            "Y3QavwEKK0NsaWVudFRlbGVtZXRyeUNvbWJhdEdhbWVQcm90ZWdvQ2FzdEF0",
            "dGVtcHQSFAoMcGxheWVyX2xldmVsGAEgASgFEhQKDGVuY291bnRlcl9pZBgC",
            "IAEoCRIQCghzcGVsbF9pZBgDIAEoCRIzCgdvdXRjb21lGAQgASgOMiIuV1VQ",
            "cm90b3MuRW51bXMuQ29tYmF0UGhhc2VPdXRjb21lEh0KFWNoZWNrcG9pbnRf",
            "ZmFpbF9yb3VuZBgFIAEoBRrCAQouQ2xpZW50VGVsZW1ldHJ5Q29tYmF0R2Ft",
            "ZU9mZmVuc2l2ZVRyYWNlQXR0ZW1wdBIUCgxwbGF5ZXJfbGV2ZWwYASABKAUS",
            "FAoMZW5jb3VudGVyX2lkGAIgASgJEhAKCHNwZWxsX2lkGAMgASgJEjMKB291",
            "dGNvbWUYBCABKA4yIi5XVVByb3Rvcy5FbnVtcy5Db21iYXRQaGFzZU91dGNv",
            "bWUSHQoVY2hlY2twb2ludF9mYWlsX3JvdW5kGAUgASgFGqkBCi9DbGllbnRU",
            "ZWxlbWV0cnlDb21iYXRHYW1lT2ZmZW5zaXZlTG9ja09uQXR0ZW1wdBIUCgxw",
            "bGF5ZXJfbGV2ZWwYASABKAUSFAoMZW5jb3VudGVyX2lkGAIgASgJEhUKDW5v",
            "ZGVfbG9jYXRpb24YAyABKAkSMwoHb3V0Y29tZRgEIAEoDjIiLldVUHJvdG9z",
            "LkVudW1zLkNvbWJhdFBoYXNlT3V0Y29tZRp8CiZDbGllbnRUZWxlbWV0cnlQ",
            "b3J0a2V5c0FkdmFuY2VkQVJDaGVjaxIWCg5hZHZhbmNlZF9hcl9vbhgBIAEo",
            "CBISCgpwb3J0a2V5X2lkGAIgASgJEiYKB2FyX21vZGUYAyABKA4yFS5XVVBy",
            "b3Rvcy5EYXRhLkFSTW9kZRo6CiFDbGllbnRUZWxlbWV0cnlWYXVsdFRhYklt",
            "cHJlc3Npb24SFQoNY2F0ZWdvcnlfbmFtZRgBIAEoCRo7CiJDbGllbnRUZWxl",
            "bWV0cnlWYXVsdEl0ZW1JbXByZXNzaW9uEhUKDXZhdWx0X2l0ZW1faWQYASAB",
            "KAkauwMKIENsaWVudFRlbGVtZXRyeVN3aXNoU3BlbGxHYW1lRW5kEhQKDGVu",
            "Y291bnRlcl9pZBgBIAEoCRIWCg5hdHRlbXB0X251bWJlchgCIAEoBRIPCgdz",
            "dWNjZXNzGAMgASgIEm4KC2ZhaWxfcmVhc29uGAQgASgOMlkuV1VQcm90b3Mu",
            "RGF0YS5MZXhpY29uQXBwcm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVs",
            "ZW1ldHJ5U3dpc2hTcGVsbEdhbWVFbmQuRmFpbFJlYXNvbhIRCgljYXN0X3Rp",
            "bWUYBSABKAESIAoYZmFpbGVkX2NoZWNrcG9pbnRfbnVtYmVyGAYgASgFEh0K",
            "FWF2ZXJhZ2VfZHJhd2luZ19lcnJvchgHIAEoARIcChRtZWRpYW5fZHJhd2lu",
            "Z19lcnJvchgIIAEoARIcChRmaW5hbF9zcGVsbGJhcl9zY29yZRgJIAEoARIa",
            "ChJlbmNvdW50ZXJfcHJvdG9faWQYCiABKAkiPAoKRmFpbFJlYXNvbhIICgRu",
            "b25lEAASCQoFdGltZXIQARIOCgpjaGVja3BvaW50EAISCQoFc2NvcmUQAxpS",
            "Ch9DbGllbnRUZWxlbWV0cnlTdXJmYWNlRGV0ZWN0aW9uEhgKEGVuY291bnRl",
            "cl9nbXRfaWQYASABKAkSFQoNZm91bmRfc3VyZmFjZRgCIAEoCBouChtDbGll",
            "bnRUZWxlbWV0cnlTdG9yZVRhYk9wZW4SDwoHcGFnZV9pZBgBIAEoCRrCAQod",
            "Q2xpZW50VGVsZW1ldHJ5U3RvcmVQb3B1cE9wZW4SDwoHcGFja19pZBgBIAEo",
            "CRIZChFwbGF5ZXJfY2FuX2FmZm9yZBgCIAEoCBIVCg1jdXJyZW5jeV90eXBl",
            "GAMgAygJEgwKBGNvc3QYBCADKAMSFQoNcGxheWVyX3dhbGxldBgFIAMoAxIX",
            "Cg9yZWFsX21vbmV5X2Nvc3QYBiABKAESIAoYcmVhbF9tb25leV9jdXJyZW5j",
            "eV9jb2RlGAcgASgJGlkKGENsaWVudFRlbGVtZXRyeVN0b3B3YXRjaBISCgpl",
            "dmVudF9uYW1lGAEgASgJEgsKA21pbhgCIAEoARILCgNtYXgYAyABKAESDwoH",
            "YXZlcmFnZRgEIAEoARpBCilDbGllbnRUZWxlbWV0cnlTZXR0aW5nc0JhdHRl",
            "cnlNb2RlVG9nZ2xlZBIUCgxiYXR0ZXJ5X21vZGUYASABKAgadAoiQ2xpZW50",
            "VGVsZW1ldHJ5U2V0dGluZ3NBdXRoVXBkYXRlZBIcChRwcmltYXJ5X2F1dGhf",
            "Y2hhbm5lbBgBIAEoCRIeChZzZWNvbmRhcnlfYXV0aF9jaGFubmVsGAIgASgJ",
            "EhAKCHBsYXRmb3JtGAMgASgJGjYKHUNsaWVudFRlbGVtZXRyeVN0aWNrZXJE",
            "ZXRhaWxzEhUKDWNvbGxlY3Rpb25faWQYASABKAkagwIKJUNsaWVudFRlbGVt",
            "ZXRyeVByb2ZpbGVCdXR0b25SYW5kb21pemUSdwoIY2F0ZWdvcnkYASABKA4y",
            "ZS5XVVByb3Rvcy5EYXRhLkxleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRy",
            "eS5DbGllbnRUZWxlbWV0cnlQcm9maWxlQnV0dG9uUmFuZG9taXplLkNhdGVn",
            "b3J5UmFuZG9taXplImEKEUNhdGVnb3J5UmFuZG9taXplEhwKGENBVEVHT1JZ",
            "X1JBTkRPTUlaRV9VTlNFVBAAEhIKDlJBTkRPTUlaRV9MRU5TEAESGgoWUkFO",
            "RE9NSVpFX0ZJTFRFUl9GUkFNRRACGqUCCiBDbGllbnRUZWxlbWV0cnlQcm9m",
            "aWxlQnV0dG9uTGVucxIZChFwcmVzc2VkX2J1dHRvbl9pZBgBIAEoCRJyCg1s",
            "ZW5zX2NhdGVnb3J5GAIgASgOMlsuV1VQcm90b3MuRGF0YS5MZXhpY29uQXBw",
            "cm92ZWRDbGllbnRUZWxlbWV0cnkuQ2xpZW50VGVsZW1ldHJ5UHJvZmlsZUJ1",
            "dHRvbkxlbnMuQ2F0ZWdvcnlMZW5zInIKDENhdGVnb3J5TGVucxIXChNDQVRF",
            "R09SWV9MRU5TX1VOU0VUEAASFQoRQ0FURUdPUllfTEVOU19UT1AQARIYChRD",
            "QVRFR09SWV9MRU5TX01JRERMRRACEhgKFENBVEVHT1JZX0xFTlNfQk9UVE9N",
            "EAMa6wIKIkNsaWVudFRlbGVtZXRyeVByb2ZpbGVCdXR0b25Bc3NzZXQSGQoR",
            "cHJlc3NlZF9idXR0b25faWQYASABKAkSEwoLc3RpY2tlcl9hZGQYAiABKAgS",
            "dgoKYXNzZXRfdHlwZRgDIAEoDjJiLldVUHJvdG9zLkRhdGEuTGV4aWNvbkFw",
            "cHJvdmVkQ2xpZW50VGVsZW1ldHJ5LkNsaWVudFRlbGVtZXRyeVByb2ZpbGVC",
            "dXR0b25Bc3NzZXQuQ2F0ZWdvcnlBc3NldFR5cGUinAEKEUNhdGVnb3J5QXNz",
            "ZXRUeXBlEh0KGUNBVEVHT1JZX0FTU0VUX1RZUEVfVU5TRVQQABIXChNDQVRF",
            "R09SWV9BU1NFVF9MRU5TEAESGQoVQ0FURUdPUllfQVNTRVRfRklMVEVSEAIS",
            "GAoUQ0FURUdPUllfQVNTRVRfRlJBTUUQAxIaChZDQVRFR09SWV9BU1NFVF9T",
            "VElDS0VSEAQa7gEKJ0NsaWVudFRlbGVtZXRyeVBvdGlvbnNNYXN0ZXJOb3Rl",
            "QXR0ZW1wdBIWCg5wb3Rpb25fbmFtZV9pZBgBIAEoCRITCgtjYXVsZHJvbl9p",
            "ZBgCIAEoCRIWCg5tYXN0ZXJfbm90ZV9pZBgDIAEoCRIVCg1nZXN0dXJlX2Nv",
            "dW50GAQgASgFEhUKDWdlc3R1cmVfc3RlcHMYBSADKAkSGQoRbWFzdGVyX25v",
            "dGVfc3RhcnQYBiABKAgSHAoUZ2VzdHVyZV9hdHRlbXB0X3N0ZXAYByABKAUS",
            "FwoPZ2VzdHVyZV9zdWNjZXNzGAggASgIGlQKJ0NsaWVudFRlbGVtZXRyeVBv",
            "cnRrZXlzV3JhY2tzcHVydFRhcHBlZBIVCg13cmFja3NwdXJ0X2lkGAEgASgJ",
            "EhIKCnBvcnRrZXlfaWQYAiABKAkaPwopQ2xpZW50VGVsZW1ldHJ5UG9ydGtl",
            "eXNPdXRPZkJvdW5kc1JlYWNoZWQSEgoKcG9ydGtleV9pZBgCIAEoCRpPCiND",
            "bGllbnRUZWxlbWV0cnlQZXJtaXNzaW9uc1JlcXVlc3RlZBIXCg9wZXJtaXNz",
            "aW9uX3R5cGUYASABKAkSDwoHZ3JhbnRlZBgCIAEoCBpACiVDbGllbnRUZWxl",
            "bWV0cnlQZXJtaXNzaW9uc0NoZWNrRmFpbGVkEhcKD3Blcm1pc3Npb25fdHlw",
            "ZRgBIAEoCRo1ChlDbGllbnRUZWxlbWV0cnlMb2dpblN0YXJ0EhgKEGF1dGhf",
            "cHJvdmlkZXJfaWQYASABKAkaTQocQ2xpZW50VGVsZW1ldHJ5TG9naW5Db21w",
            "bGV0ZRIYChBhdXRoX3Byb3ZpZGVyX2lkGAEgASgJEhMKC2F1dGhfc3RhdHVz",
            "GAIgASgJGkMKGUNsaWVudFRlbGVtZXRyeUltcHJlc3Npb24SEgoKb3V0cG9z",
            "dF9pZBgBIAEoCRISCgpwYXJ0bmVyX2lkGAIgASgJGlsKJENsaWVudFRlbGVt",
            "ZXRyeUh5cGVybGlua0NsaWNrdGhyb3VnaBILCgN1cmwYASABKAkSEgoKb3V0",
            "cG9zdF9pZBgCIAEoCRISCgpwYXJ0bmVyX2lkGAMgASgJGjEKHENsaWVudFRl",
            "bGVtZXRyeUZhbWlseURldGFpbHMSEQoJZmFtaWx5X2lkGAEgASgJGkcKGENs",
            "aWVudFRlbGVtZXRyeUV4Y2VwdGlvbhIWCg5leGNlcHRpb25fdHlwZRgBIAEo",
            "CRITCgtzdGFja190cmFjZRgCIAEoCRqbAQopQ2xpZW50VGVsZW1ldHJ5RW52",
            "aXJvbm1lbnRhbFRhZ3NVSUVudGVyZWQSFAoMcGxheWVyX2xldmVsGAEgASgF",
            "EhgKEHdhcm5pbmdfc2V2ZXJpdHkYAiABKAkSEwoLd2VhdGhlcl90YWcYAyAB",
            "KAkSEAoIbW9vbl90YWcYBCABKAkSFwoPdGltZV9vZl9kYXlfdGFnGAUgASgJ",
            "GmoKOENsaWVudFRlbGVtZXRyeUVudmlyb25tZW50YWxUYWdTZXZlcmVXZWF0",
            "aGVyQWNrbm93bGVkZ2VkEhQKDHBsYXllcl9sZXZlbBgBIAEoBRIYChB3YXJu",
            "aW5nX3NldmVyaXR5GAIgASgJGjkKHUNsaWVudFRlbGVtZXRyeUVuY291bnRl",
            "clN0YXJ0EhgKEGJhdHRlcnlfc2F2ZXJfb24YASABKAgaUAomQ2xpZW50VGVs",
            "ZW1ldHJ5RGVzY3JpcHRpb25DbGlja3Rocm91Z2gSEgoKb3V0cG9zdF9pZBgB",
            "IAEoCRISCgpwYXJ0bmVyX2lkGAIgASgJGlwKIENsaWVudFRlbGVtZXRyeURl",
            "ZXBsaW5rVHJpZ2dlcmVkEgwKBGxpbmsYASABKAkSEAoIcmVqZWN0ZWQYAiAB",
            "KAgSGAoQcmVqZWN0aW9uX3JlYXNvbhgDIAEoCRpkCiVDbGllbnRUZWxlbWV0",
            "cnlDb21iYXRHYW1lUG90aW9uQnV0dG9uEhQKDHBsYXllcl9sZXZlbBgBIAEo",
            "BRIUCgxlbmNvdW50ZXJfaWQYAiABKAkSDwoHYXR0ZW1wdBgDIAEoBRpgCjJD",
            "bGllbnRUZWxlbWV0cnlDb21iYXRHYW1lT3V0T2ZFbmVyZ3lQdXJjaGFzZUJ1",
            "dHRvbhIUCgxwbGF5ZXJfbGV2ZWwYASABKAUSFAoMZW5jb3VudGVyX2lkGAIg",
            "ASgJGl0KL0NsaWVudFRlbGVtZXRyeUNvbWJhdEdhbWVPdXRPZkVuZXJneURp",
            "YWxvZ1Nob3duEhQKDHBsYXllcl9sZXZlbBgBIAEoBRIUCgxlbmNvdW50ZXJf",
            "aWQYAiABKAkaNwoaQ2xpZW50VGVsZW1ldHJ5QnV0dG9uUHJlc3MSGQoRcHJl",
            "c3NlZF9idXR0b25faWQYASABKAkaWwodQ2xpZW50VGVsZW1ldHJ5QnVuZGxl",
            "RG93bmxvYWQSEwoLYnVuZGxlX25hbWUYASABKAkSEgoKYnVuZGxlX3VybBgC",
            "IAEoCRIRCglsb2FkX3RpbWUYAyABKAEaNQodQ2xpZW50VGVsZW1ldHJ5QXZh",
            "dGFySW50ZXJhY3QSFAoMcGxheWVyX2xldmVsGAEgASgDGlwKGENsaWVudFRl",
            "bGVtZXRyeUFzc2V0TG9hZBISCgphc3NldF9uYW1lGAEgASgJEhcKD3RvdGFs",
            "X2xvYWRfdGltZRgCIAEoARITCgtidW5kbGVfbmFtZRgDIAMoCRpYChpDbGll",
            "bnRUZWxlbWV0cnlSZXdhcmRzRmxvdxIcChRza2lwcGVkX2xvbmdfcmV3YXJk",
            "cxgBIAEoCBIcChRjdXJyZW50X3BsYXllcl9sZXZlbBgCIAEoAhpfChZDbGll",
            "bnRUZWxlbWV0cnlSYXRlQXBwEhsKE2hhdmluZ19mdW5fcmVzcG9uc2UYASAB",
            "KAgSEAoIcGxhdGZvcm0YAiABKAkSFgoOY2xpZW50X3ZlcnNpb24YAyABKAka",
            "kAEKGENsaWVudFRlbGVtZXRyeVNtb2tlVGVzdBIgChhjdXJyZW50X2JvdF9w",
            "cm9ncmFtX25hbWUYASABKAkSEgoKdGltZV9zdGFydBgCIAEoARIQCgh0aW1l",
            "X2VuZBgDIAEoARISCgp0aW1lX2RlbHRhGAQgASgBEhgKEHNtb2tlX3Rlc3Rf",
            "Y291bnQYBSABKAUaHQobQ2xpZW50VGVsZW1ldHJ5UmVnaXN0cnlJbmZvGmcK",
            "ElBsYXRmb3JtU2VydmVyRGF0YRIPCgd1c2VyX2lkGAEgASgJEhQKDHRlbGVt",
            "ZXRyeV9pZBgCIAEoCRISCgpzZXNzaW9uX2lkGAMgASgJEhYKDmV4cGVyaW1l",
            "bnRfaWRzGAQgAygFQg8KDVRlbGVtZXRyeURhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.ARModeReflection.Descriptor, global::WUProtos.Enums.CombatPhaseOutcomeReflection.Descriptor, global::WUProtos.Data.POIInteractReflection.Descriptor, global::WUProtos.Enums.CategoryShareLocationReflection.Descriptor, global::WUProtos.Enums.DownloadTypeReflection.Descriptor, global::WUProtos.Enums.ActiveEngagementReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry), global::WUProtos.Data.LexiconApprovedClientTelemetry.Parser, new[]{ "Startup", "SwishSpellGameStart", "SwishSpellGameEnd", "AssetLoad", "BundleDownload", "Stopwatch", "SmokeTest", "EnvironmentalTagsUiEntered", "EnvironmentalTagsWeatherAcknowledged", "AvatarInteract", "RewardsFlow", "PortkeysWrackspurtTapped", "PortkeysOutOfBoundsReached", "PortkeysAdvancedArCheck", "ProfessionMainMenu", "ProfessionNodeSelected", "ButtonPress", "SelectMob", "MoreInfo", "LandmarkInteract", "LockOnAttempt", "OffensiveTraceAttempt", "ProtegoCastAttempt", "OutOfEnergyShown", "OutOfEnergyPurchase", "CombatPotionButton", "Impression", "DescriptionClickthrough", "HyperlinkClickthrough", "SurfaceDetection", "EncounterStart", "PermissionRequested", "PermissionCheckFailed", "DeeplinkTriggered", "LoginStart", "LoginComplete", "PotionsMasterNoteAttempt", "ProfilePortraitAction", "ProfileButtonRandomize", "ProfileButtonLens", "ProfileButtonAsset", "ProfileScreengrab", "OutpostInteract", "GreenhouseInteract", "FamilyDetailsClicked", "StickerDetailsClicked", "RegistryInfoClicked", "RateApp", "ExceptionInfo", "ArModeToggled", "BatteryModeToggled", "AuthUpdated", "StorePopupOpen", "StoreTabOpen", "VaultPopupOpen", "VaultTabOpen", "ServerData" }, new[]{ "TelemetryData" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart.Parser, new[]{ "EncounterId", "AttemptNumber", "PlayerLevel", "EncounterProtoId", "SpellPattern", "ArMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob.Parser, new[]{ "MobLevel", "MobAffinity", "MobGmtId", "PlayerProfessionRank", "PlayerProfessionGmtId", "IsMobAlreadyEngaged", "PlayerEngagementWithMob" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo.Parser, new[]{ "MobLevel", "MobAffinity", "PlayerProfessionRank", "PlayerProfessionGmtId", "IsMobAlreadyEngaged" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Parser, new[]{ "ClientVersion", "DeviceType", "FirstTime", "LoadToTosLoginTime", "LoadToMapTime", "DeviceOs", "GraphicsDeviceVendor", "GraphicsDeviceName", "GraphicsDeviceType", "GraphicsShaderLevel", "SubsystemLoadTimes", "PlayerNickname" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup.Parser, new[]{ "SystemName", "LoadTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled.Parser, new[]{ "ArMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab.Parser, new[]{ "ScreengrabLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Parser, new[]{ "BaselineSrc", "PortraitFormat", "PortraitAction", "PortraitLensTop", "PortraitLensMid", "PortraitLensBottom", "PortraitFrame", "PortraitFilter", "PortraitStickerIds", "PortraitStickerCount", "ShareSource", "ShareType", "ShareNetwork", "DownloadSource", "DownloadType" }, null, new[]{ typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitAction), typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitType), typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.ProfileTabSource) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress.Parser, new[]{ "ProfessionGmtId", "RankPoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected.Parser, new[]{ "PlayerLevel", "ActiveProfessionGmtId", "ProfessionProgress", "NodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu.Parser, new[]{ "PlayerLevel", "ActiveProfessionGmtId", "ProfessionProgress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract.Parser, new[]{ "OutpostType", "CommonData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract.Parser, new[]{ "LandmarkType", "CommonData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract.Parser, new[]{ "CommonData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt.Parser, new[]{ "PlayerLevel", "EncounterId", "SpellId", "Outcome", "CheckpointFailRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt.Parser, new[]{ "PlayerLevel", "EncounterId", "SpellId", "Outcome", "CheckpointFailRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt.Parser, new[]{ "PlayerLevel", "EncounterId", "NodeLocation", "Outcome" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck.Parser, new[]{ "AdvancedArOn", "PortkeyId", "ArMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression.Parser, new[]{ "CategoryName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression.Parser, new[]{ "VaultItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd.Parser, new[]{ "EncounterId", "AttemptNumber", "Success", "FailReason", "CastTime", "FailedCheckpointNumber", "AverageDrawingError", "MedianDrawingError", "FinalSpellbarScore", "EncounterProtoId" }, null, new[]{ typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd.Types.FailReason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection.Parser, new[]{ "EncounterGmtId", "FoundSurface" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen.Parser, new[]{ "PageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen.Parser, new[]{ "PackId", "PlayerCanAfford", "CurrencyType", "Cost", "PlayerWallet", "RealMoneyCost", "RealMoneyCurrencyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch.Parser, new[]{ "EventName", "Min", "Max", "Average" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled.Parser, new[]{ "BatteryMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated.Parser, new[]{ "PrimaryAuthChannel", "SecondaryAuthChannel", "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails.Parser, new[]{ "CollectionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize.Parser, new[]{ "Category" }, null, new[]{ typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize.Types.CategoryRandomize) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens.Parser, new[]{ "PressedButtonId", "LensCategory" }, null, new[]{ typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens.Types.CategoryLens) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset.Parser, new[]{ "PressedButtonId", "StickerAdd", "AssetType" }, null, new[]{ typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset.Types.CategoryAssetType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt.Parser, new[]{ "PotionNameId", "CauldronId", "MasterNoteId", "GestureCount", "GestureSteps", "MasterNoteStart", "GestureAttemptStep", "GestureSuccess" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped.Parser, new[]{ "WrackspurtId", "PortkeyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached.Parser, new[]{ "PortkeyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested.Parser, new[]{ "PermissionType", "Granted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed.Parser, new[]{ "PermissionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart.Parser, new[]{ "AuthProviderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete.Parser, new[]{ "AuthProviderId", "AuthStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression.Parser, new[]{ "OutpostId", "PartnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough.Parser, new[]{ "Url", "OutpostId", "PartnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails.Parser, new[]{ "FamilyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException.Parser, new[]{ "ExceptionType", "StackTrace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered.Parser, new[]{ "PlayerLevel", "WarningSeverity", "WeatherTag", "MoonTag", "TimeOfDayTag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged.Parser, new[]{ "PlayerLevel", "WarningSeverity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart.Parser, new[]{ "BatterySaverOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough.Parser, new[]{ "OutpostId", "PartnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered.Parser, new[]{ "Link", "Rejected", "RejectionReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton.Parser, new[]{ "PlayerLevel", "EncounterId", "Attempt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton.Parser, new[]{ "PlayerLevel", "EncounterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown.Parser, new[]{ "PlayerLevel", "EncounterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress.Parser, new[]{ "PressedButtonId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload.Parser, new[]{ "BundleName", "BundleUrl", "LoadTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract.Parser, new[]{ "PlayerLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad.Parser, new[]{ "AssetName", "TotalLoadTime", "BundleName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow.Parser, new[]{ "SkippedLongRewards", "CurrentPlayerLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp.Parser, new[]{ "HavingFunResponse", "Platform", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest.Parser, new[]{ "CurrentBotProgramName", "TimeStart", "TimeEnd", "TimeDelta", "SmokeTestCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.PlatformServerData), global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.PlatformServerData.Parser, new[]{ "UserId", "TelemetryId", "SessionId", "ExperimentIds" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LexiconApprovedClientTelemetry : pb::IMessage<LexiconApprovedClientTelemetry> {
    private static readonly pb::MessageParser<LexiconApprovedClientTelemetry> _parser = new pb::MessageParser<LexiconApprovedClientTelemetry>(() => new LexiconApprovedClientTelemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LexiconApprovedClientTelemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.LexiconApprovedClientTelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LexiconApprovedClientTelemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LexiconApprovedClientTelemetry(LexiconApprovedClientTelemetry other) : this() {
      serverData_ = other.serverData_ != null ? other.serverData_.Clone() : null;
      switch (other.TelemetryDataCase) {
        case TelemetryDataOneofCase.Startup:
          Startup = other.Startup.Clone();
          break;
        case TelemetryDataOneofCase.SwishSpellGameStart:
          SwishSpellGameStart = other.SwishSpellGameStart.Clone();
          break;
        case TelemetryDataOneofCase.SwishSpellGameEnd:
          SwishSpellGameEnd = other.SwishSpellGameEnd.Clone();
          break;
        case TelemetryDataOneofCase.AssetLoad:
          AssetLoad = other.AssetLoad.Clone();
          break;
        case TelemetryDataOneofCase.BundleDownload:
          BundleDownload = other.BundleDownload.Clone();
          break;
        case TelemetryDataOneofCase.Stopwatch:
          Stopwatch = other.Stopwatch.Clone();
          break;
        case TelemetryDataOneofCase.SmokeTest:
          SmokeTest = other.SmokeTest.Clone();
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsUiEntered:
          EnvironmentalTagsUiEntered = other.EnvironmentalTagsUiEntered.Clone();
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged:
          EnvironmentalTagsWeatherAcknowledged = other.EnvironmentalTagsWeatherAcknowledged.Clone();
          break;
        case TelemetryDataOneofCase.AvatarInteract:
          AvatarInteract = other.AvatarInteract.Clone();
          break;
        case TelemetryDataOneofCase.RewardsFlow:
          RewardsFlow = other.RewardsFlow.Clone();
          break;
        case TelemetryDataOneofCase.PortkeysWrackspurtTapped:
          PortkeysWrackspurtTapped = other.PortkeysWrackspurtTapped.Clone();
          break;
        case TelemetryDataOneofCase.PortkeysOutOfBoundsReached:
          PortkeysOutOfBoundsReached = other.PortkeysOutOfBoundsReached.Clone();
          break;
        case TelemetryDataOneofCase.PortkeysAdvancedArCheck:
          PortkeysAdvancedArCheck = other.PortkeysAdvancedArCheck.Clone();
          break;
        case TelemetryDataOneofCase.ProfessionMainMenu:
          ProfessionMainMenu = other.ProfessionMainMenu.Clone();
          break;
        case TelemetryDataOneofCase.ProfessionNodeSelected:
          ProfessionNodeSelected = other.ProfessionNodeSelected.Clone();
          break;
        case TelemetryDataOneofCase.ButtonPress:
          ButtonPress = other.ButtonPress.Clone();
          break;
        case TelemetryDataOneofCase.SelectMob:
          SelectMob = other.SelectMob.Clone();
          break;
        case TelemetryDataOneofCase.MoreInfo:
          MoreInfo = other.MoreInfo.Clone();
          break;
        case TelemetryDataOneofCase.LandmarkInteract:
          LandmarkInteract = other.LandmarkInteract.Clone();
          break;
        case TelemetryDataOneofCase.LockOnAttempt:
          LockOnAttempt = other.LockOnAttempt.Clone();
          break;
        case TelemetryDataOneofCase.OffensiveTraceAttempt:
          OffensiveTraceAttempt = other.OffensiveTraceAttempt.Clone();
          break;
        case TelemetryDataOneofCase.ProtegoCastAttempt:
          ProtegoCastAttempt = other.ProtegoCastAttempt.Clone();
          break;
        case TelemetryDataOneofCase.OutOfEnergyShown:
          OutOfEnergyShown = other.OutOfEnergyShown.Clone();
          break;
        case TelemetryDataOneofCase.OutOfEnergyPurchase:
          OutOfEnergyPurchase = other.OutOfEnergyPurchase.Clone();
          break;
        case TelemetryDataOneofCase.CombatPotionButton:
          CombatPotionButton = other.CombatPotionButton.Clone();
          break;
        case TelemetryDataOneofCase.Impression:
          Impression = other.Impression.Clone();
          break;
        case TelemetryDataOneofCase.DescriptionClickthrough:
          DescriptionClickthrough = other.DescriptionClickthrough.Clone();
          break;
        case TelemetryDataOneofCase.HyperlinkClickthrough:
          HyperlinkClickthrough = other.HyperlinkClickthrough.Clone();
          break;
        case TelemetryDataOneofCase.SurfaceDetection:
          SurfaceDetection = other.SurfaceDetection.Clone();
          break;
        case TelemetryDataOneofCase.EncounterStart:
          EncounterStart = other.EncounterStart.Clone();
          break;
        case TelemetryDataOneofCase.PermissionRequested:
          PermissionRequested = other.PermissionRequested.Clone();
          break;
        case TelemetryDataOneofCase.PermissionCheckFailed:
          PermissionCheckFailed = other.PermissionCheckFailed.Clone();
          break;
        case TelemetryDataOneofCase.DeeplinkTriggered:
          DeeplinkTriggered = other.DeeplinkTriggered.Clone();
          break;
        case TelemetryDataOneofCase.LoginStart:
          LoginStart = other.LoginStart.Clone();
          break;
        case TelemetryDataOneofCase.LoginComplete:
          LoginComplete = other.LoginComplete.Clone();
          break;
        case TelemetryDataOneofCase.PotionsMasterNoteAttempt:
          PotionsMasterNoteAttempt = other.PotionsMasterNoteAttempt.Clone();
          break;
        case TelemetryDataOneofCase.ProfilePortraitAction:
          ProfilePortraitAction = other.ProfilePortraitAction.Clone();
          break;
        case TelemetryDataOneofCase.ProfileButtonRandomize:
          ProfileButtonRandomize = other.ProfileButtonRandomize.Clone();
          break;
        case TelemetryDataOneofCase.ProfileButtonLens:
          ProfileButtonLens = other.ProfileButtonLens.Clone();
          break;
        case TelemetryDataOneofCase.ProfileButtonAsset:
          ProfileButtonAsset = other.ProfileButtonAsset.Clone();
          break;
        case TelemetryDataOneofCase.ProfileScreengrab:
          ProfileScreengrab = other.ProfileScreengrab.Clone();
          break;
        case TelemetryDataOneofCase.OutpostInteract:
          OutpostInteract = other.OutpostInteract.Clone();
          break;
        case TelemetryDataOneofCase.GreenhouseInteract:
          GreenhouseInteract = other.GreenhouseInteract.Clone();
          break;
        case TelemetryDataOneofCase.FamilyDetailsClicked:
          FamilyDetailsClicked = other.FamilyDetailsClicked.Clone();
          break;
        case TelemetryDataOneofCase.StickerDetailsClicked:
          StickerDetailsClicked = other.StickerDetailsClicked.Clone();
          break;
        case TelemetryDataOneofCase.RegistryInfoClicked:
          RegistryInfoClicked = other.RegistryInfoClicked.Clone();
          break;
        case TelemetryDataOneofCase.RateApp:
          RateApp = other.RateApp.Clone();
          break;
        case TelemetryDataOneofCase.ExceptionInfo:
          ExceptionInfo = other.ExceptionInfo.Clone();
          break;
        case TelemetryDataOneofCase.ArModeToggled:
          ArModeToggled = other.ArModeToggled.Clone();
          break;
        case TelemetryDataOneofCase.BatteryModeToggled:
          BatteryModeToggled = other.BatteryModeToggled.Clone();
          break;
        case TelemetryDataOneofCase.AuthUpdated:
          AuthUpdated = other.AuthUpdated.Clone();
          break;
        case TelemetryDataOneofCase.StorePopupOpen:
          StorePopupOpen = other.StorePopupOpen.Clone();
          break;
        case TelemetryDataOneofCase.StoreTabOpen:
          StoreTabOpen = other.StoreTabOpen.Clone();
          break;
        case TelemetryDataOneofCase.VaultPopupOpen:
          VaultPopupOpen = other.VaultPopupOpen.Clone();
          break;
        case TelemetryDataOneofCase.VaultTabOpen:
          VaultTabOpen = other.VaultTabOpen.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LexiconApprovedClientTelemetry Clone() {
      return new LexiconApprovedClientTelemetry(this);
    }

    /// <summary>Field number for the "startup" field.</summary>
    public const int StartupFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup Startup {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.Startup ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.Startup;
      }
    }

    /// <summary>Field number for the "swish_spell_game_start" field.</summary>
    public const int SwishSpellGameStartFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart SwishSpellGameStart {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SwishSpellGameStart;
      }
    }

    /// <summary>Field number for the "swish_spell_game_end" field.</summary>
    public const int SwishSpellGameEndFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd SwishSpellGameEnd {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SwishSpellGameEnd;
      }
    }

    /// <summary>Field number for the "asset_load" field.</summary>
    public const int AssetLoadFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad AssetLoad {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.AssetLoad;
      }
    }

    /// <summary>Field number for the "bundle_download" field.</summary>
    public const int BundleDownloadFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload BundleDownload {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.BundleDownload;
      }
    }

    /// <summary>Field number for the "stopwatch" field.</summary>
    public const int StopwatchFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch Stopwatch {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.Stopwatch;
      }
    }

    /// <summary>Field number for the "smoke_test" field.</summary>
    public const int SmokeTestFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest SmokeTest {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SmokeTest;
      }
    }

    /// <summary>Field number for the "environmental_tags_ui_entered" field.</summary>
    public const int EnvironmentalTagsUiEnteredFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered EnvironmentalTagsUiEntered {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.EnvironmentalTagsUiEntered;
      }
    }

    /// <summary>Field number for the "environmental_tags_weather_acknowledged" field.</summary>
    public const int EnvironmentalTagsWeatherAcknowledgedFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged EnvironmentalTagsWeatherAcknowledged {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged;
      }
    }

    /// <summary>Field number for the "avatar_interact" field.</summary>
    public const int AvatarInteractFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract AvatarInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.AvatarInteract;
      }
    }

    /// <summary>Field number for the "rewards_flow" field.</summary>
    public const int RewardsFlowFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow RewardsFlow {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.RewardsFlow;
      }
    }

    /// <summary>Field number for the "portkeys_wrackspurt_tapped" field.</summary>
    public const int PortkeysWrackspurtTappedFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped PortkeysWrackspurtTapped {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PortkeysWrackspurtTapped;
      }
    }

    /// <summary>Field number for the "portkeys_out_of_bounds_reached" field.</summary>
    public const int PortkeysOutOfBoundsReachedFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached PortkeysOutOfBoundsReached {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PortkeysOutOfBoundsReached;
      }
    }

    /// <summary>Field number for the "portkeys_advanced_ar_check" field.</summary>
    public const int PortkeysAdvancedArCheckFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck PortkeysAdvancedArCheck {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PortkeysAdvancedArCheck;
      }
    }

    /// <summary>Field number for the "profession_main_menu" field.</summary>
    public const int ProfessionMainMenuFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu ProfessionMainMenu {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfessionMainMenu;
      }
    }

    /// <summary>Field number for the "profession_node_selected" field.</summary>
    public const int ProfessionNodeSelectedFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected ProfessionNodeSelected {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfessionNodeSelected;
      }
    }

    /// <summary>Field number for the "button_press" field.</summary>
    public const int ButtonPressFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress ButtonPress {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ButtonPress;
      }
    }

    /// <summary>Field number for the "select_mob" field.</summary>
    public const int SelectMobFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob SelectMob {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SelectMob ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SelectMob;
      }
    }

    /// <summary>Field number for the "more_info" field.</summary>
    public const int MoreInfoFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo MoreInfo {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.MoreInfo;
      }
    }

    /// <summary>Field number for the "landmark_interact" field.</summary>
    public const int LandmarkInteractFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract LandmarkInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LandmarkInteract;
      }
    }

    /// <summary>Field number for the "lock_on_attempt" field.</summary>
    public const int LockOnAttemptFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt LockOnAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LockOnAttempt;
      }
    }

    /// <summary>Field number for the "offensive_trace_attempt" field.</summary>
    public const int OffensiveTraceAttemptFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt OffensiveTraceAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OffensiveTraceAttempt;
      }
    }

    /// <summary>Field number for the "protego_cast_attempt" field.</summary>
    public const int ProtegoCastAttemptFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt ProtegoCastAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProtegoCastAttempt;
      }
    }

    /// <summary>Field number for the "out_of_energy_shown" field.</summary>
    public const int OutOfEnergyShownFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown OutOfEnergyShown {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OutOfEnergyShown;
      }
    }

    /// <summary>Field number for the "out_of_energy_purchase" field.</summary>
    public const int OutOfEnergyPurchaseFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton OutOfEnergyPurchase {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OutOfEnergyPurchase;
      }
    }

    /// <summary>Field number for the "combat_potion_button" field.</summary>
    public const int CombatPotionButtonFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton CombatPotionButton {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.CombatPotionButton;
      }
    }

    /// <summary>Field number for the "impression" field.</summary>
    public const int ImpressionFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression Impression {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.Impression ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.Impression;
      }
    }

    /// <summary>Field number for the "description_clickthrough" field.</summary>
    public const int DescriptionClickthroughFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough DescriptionClickthrough {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.DescriptionClickthrough;
      }
    }

    /// <summary>Field number for the "hyperlink_clickthrough" field.</summary>
    public const int HyperlinkClickthroughFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough HyperlinkClickthrough {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.HyperlinkClickthrough;
      }
    }

    /// <summary>Field number for the "surface_detection" field.</summary>
    public const int SurfaceDetectionFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection SurfaceDetection {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SurfaceDetection;
      }
    }

    /// <summary>Field number for the "encounter_start" field.</summary>
    public const int EncounterStartFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart EncounterStart {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.EncounterStart;
      }
    }

    /// <summary>Field number for the "permission_requested" field.</summary>
    public const int PermissionRequestedFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested PermissionRequested {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PermissionRequested;
      }
    }

    /// <summary>Field number for the "permission_check_failed" field.</summary>
    public const int PermissionCheckFailedFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed PermissionCheckFailed {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PermissionCheckFailed;
      }
    }

    /// <summary>Field number for the "deeplink_triggered" field.</summary>
    public const int DeeplinkTriggeredFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered DeeplinkTriggered {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.DeeplinkTriggered;
      }
    }

    /// <summary>Field number for the "login_start" field.</summary>
    public const int LoginStartFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart LoginStart {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LoginStart ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LoginStart;
      }
    }

    /// <summary>Field number for the "login_complete" field.</summary>
    public const int LoginCompleteFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete LoginComplete {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LoginComplete;
      }
    }

    /// <summary>Field number for the "potions_master_note_attempt" field.</summary>
    public const int PotionsMasterNoteAttemptFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt PotionsMasterNoteAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PotionsMasterNoteAttempt;
      }
    }

    /// <summary>Field number for the "profile_portrait_action" field.</summary>
    public const int ProfilePortraitActionFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction ProfilePortraitAction {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfilePortraitAction;
      }
    }

    /// <summary>Field number for the "profile_button_randomize" field.</summary>
    public const int ProfileButtonRandomizeFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize ProfileButtonRandomize {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileButtonRandomize;
      }
    }

    /// <summary>Field number for the "profile_button_lens" field.</summary>
    public const int ProfileButtonLensFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens ProfileButtonLens {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileButtonLens;
      }
    }

    /// <summary>Field number for the "profile_button_asset" field.</summary>
    public const int ProfileButtonAssetFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset ProfileButtonAsset {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileButtonAsset;
      }
    }

    /// <summary>Field number for the "profile_screengrab" field.</summary>
    public const int ProfileScreengrabFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab ProfileScreengrab {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileScreengrab;
      }
    }

    /// <summary>Field number for the "outpost_interact" field.</summary>
    public const int OutpostInteractFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract OutpostInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OutpostInteract;
      }
    }

    /// <summary>Field number for the "greenhouse_interact" field.</summary>
    public const int GreenhouseInteractFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract GreenhouseInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.GreenhouseInteract;
      }
    }

    /// <summary>Field number for the "family_details_clicked" field.</summary>
    public const int FamilyDetailsClickedFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails FamilyDetailsClicked {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.FamilyDetailsClicked;
      }
    }

    /// <summary>Field number for the "sticker_details_clicked" field.</summary>
    public const int StickerDetailsClickedFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails StickerDetailsClicked {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.StickerDetailsClicked;
      }
    }

    /// <summary>Field number for the "registry_info_clicked" field.</summary>
    public const int RegistryInfoClickedFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo RegistryInfoClicked {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.RegistryInfoClicked;
      }
    }

    /// <summary>Field number for the "rate_app" field.</summary>
    public const int RateAppFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp RateApp {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.RateApp ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.RateApp;
      }
    }

    /// <summary>Field number for the "exception_info" field.</summary>
    public const int ExceptionInfoFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException ExceptionInfo {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ExceptionInfo;
      }
    }

    /// <summary>Field number for the "ar_mode_toggled" field.</summary>
    public const int ArModeToggledFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled ArModeToggled {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ArModeToggled;
      }
    }

    /// <summary>Field number for the "battery_mode_toggled" field.</summary>
    public const int BatteryModeToggledFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled BatteryModeToggled {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.BatteryModeToggled;
      }
    }

    /// <summary>Field number for the "auth_updated" field.</summary>
    public const int AuthUpdatedFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated AuthUpdated {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.AuthUpdated;
      }
    }

    /// <summary>Field number for the "store_popup_open" field.</summary>
    public const int StorePopupOpenFieldNumber = 53;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen StorePopupOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.StorePopupOpen;
      }
    }

    /// <summary>Field number for the "store_tab_open" field.</summary>
    public const int StoreTabOpenFieldNumber = 54;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen StoreTabOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.StoreTabOpen;
      }
    }

    /// <summary>Field number for the "vault_popup_open" field.</summary>
    public const int VaultPopupOpenFieldNumber = 55;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression VaultPopupOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.VaultPopupOpen;
      }
    }

    /// <summary>Field number for the "vault_tab_open" field.</summary>
    public const int VaultTabOpenFieldNumber = 56;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression VaultTabOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen ? (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.VaultTabOpen;
      }
    }

    /// <summary>Field number for the "server_data" field.</summary>
    public const int ServerDataFieldNumber = 1001;
    private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.PlatformServerData serverData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.PlatformServerData ServerData {
      get { return serverData_; }
      set {
        serverData_ = value;
      }
    }

    private object telemetryData_;
    /// <summary>Enum of possible cases for the "TelemetryData" oneof.</summary>
    public enum TelemetryDataOneofCase {
      None = 0,
      Startup = 1,
      SwishSpellGameStart = 2,
      SwishSpellGameEnd = 3,
      AssetLoad = 4,
      BundleDownload = 5,
      Stopwatch = 6,
      SmokeTest = 7,
      EnvironmentalTagsUiEntered = 8,
      EnvironmentalTagsWeatherAcknowledged = 9,
      AvatarInteract = 10,
      RewardsFlow = 11,
      PortkeysWrackspurtTapped = 12,
      PortkeysOutOfBoundsReached = 13,
      PortkeysAdvancedArCheck = 14,
      ProfessionMainMenu = 15,
      ProfessionNodeSelected = 16,
      ButtonPress = 17,
      SelectMob = 18,
      MoreInfo = 19,
      LandmarkInteract = 20,
      LockOnAttempt = 21,
      OffensiveTraceAttempt = 22,
      ProtegoCastAttempt = 23,
      OutOfEnergyShown = 24,
      OutOfEnergyPurchase = 25,
      CombatPotionButton = 26,
      Impression = 27,
      DescriptionClickthrough = 28,
      HyperlinkClickthrough = 29,
      SurfaceDetection = 30,
      EncounterStart = 31,
      PermissionRequested = 32,
      PermissionCheckFailed = 33,
      DeeplinkTriggered = 34,
      LoginStart = 35,
      LoginComplete = 36,
      PotionsMasterNoteAttempt = 37,
      ProfilePortraitAction = 38,
      ProfileButtonRandomize = 39,
      ProfileButtonLens = 40,
      ProfileButtonAsset = 41,
      ProfileScreengrab = 42,
      OutpostInteract = 43,
      GreenhouseInteract = 44,
      FamilyDetailsClicked = 45,
      StickerDetailsClicked = 46,
      RegistryInfoClicked = 47,
      RateApp = 48,
      ExceptionInfo = 49,
      ArModeToggled = 50,
      BatteryModeToggled = 51,
      AuthUpdated = 52,
      StorePopupOpen = 53,
      StoreTabOpen = 54,
      VaultPopupOpen = 55,
      VaultTabOpen = 56,
    }
    private TelemetryDataOneofCase telemetryDataCase_ = TelemetryDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryDataOneofCase TelemetryDataCase {
      get { return telemetryDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTelemetryData() {
      telemetryDataCase_ = TelemetryDataOneofCase.None;
      telemetryData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LexiconApprovedClientTelemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LexiconApprovedClientTelemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Startup, other.Startup)) return false;
      if (!object.Equals(SwishSpellGameStart, other.SwishSpellGameStart)) return false;
      if (!object.Equals(SwishSpellGameEnd, other.SwishSpellGameEnd)) return false;
      if (!object.Equals(AssetLoad, other.AssetLoad)) return false;
      if (!object.Equals(BundleDownload, other.BundleDownload)) return false;
      if (!object.Equals(Stopwatch, other.Stopwatch)) return false;
      if (!object.Equals(SmokeTest, other.SmokeTest)) return false;
      if (!object.Equals(EnvironmentalTagsUiEntered, other.EnvironmentalTagsUiEntered)) return false;
      if (!object.Equals(EnvironmentalTagsWeatherAcknowledged, other.EnvironmentalTagsWeatherAcknowledged)) return false;
      if (!object.Equals(AvatarInteract, other.AvatarInteract)) return false;
      if (!object.Equals(RewardsFlow, other.RewardsFlow)) return false;
      if (!object.Equals(PortkeysWrackspurtTapped, other.PortkeysWrackspurtTapped)) return false;
      if (!object.Equals(PortkeysOutOfBoundsReached, other.PortkeysOutOfBoundsReached)) return false;
      if (!object.Equals(PortkeysAdvancedArCheck, other.PortkeysAdvancedArCheck)) return false;
      if (!object.Equals(ProfessionMainMenu, other.ProfessionMainMenu)) return false;
      if (!object.Equals(ProfessionNodeSelected, other.ProfessionNodeSelected)) return false;
      if (!object.Equals(ButtonPress, other.ButtonPress)) return false;
      if (!object.Equals(SelectMob, other.SelectMob)) return false;
      if (!object.Equals(MoreInfo, other.MoreInfo)) return false;
      if (!object.Equals(LandmarkInteract, other.LandmarkInteract)) return false;
      if (!object.Equals(LockOnAttempt, other.LockOnAttempt)) return false;
      if (!object.Equals(OffensiveTraceAttempt, other.OffensiveTraceAttempt)) return false;
      if (!object.Equals(ProtegoCastAttempt, other.ProtegoCastAttempt)) return false;
      if (!object.Equals(OutOfEnergyShown, other.OutOfEnergyShown)) return false;
      if (!object.Equals(OutOfEnergyPurchase, other.OutOfEnergyPurchase)) return false;
      if (!object.Equals(CombatPotionButton, other.CombatPotionButton)) return false;
      if (!object.Equals(Impression, other.Impression)) return false;
      if (!object.Equals(DescriptionClickthrough, other.DescriptionClickthrough)) return false;
      if (!object.Equals(HyperlinkClickthrough, other.HyperlinkClickthrough)) return false;
      if (!object.Equals(SurfaceDetection, other.SurfaceDetection)) return false;
      if (!object.Equals(EncounterStart, other.EncounterStart)) return false;
      if (!object.Equals(PermissionRequested, other.PermissionRequested)) return false;
      if (!object.Equals(PermissionCheckFailed, other.PermissionCheckFailed)) return false;
      if (!object.Equals(DeeplinkTriggered, other.DeeplinkTriggered)) return false;
      if (!object.Equals(LoginStart, other.LoginStart)) return false;
      if (!object.Equals(LoginComplete, other.LoginComplete)) return false;
      if (!object.Equals(PotionsMasterNoteAttempt, other.PotionsMasterNoteAttempt)) return false;
      if (!object.Equals(ProfilePortraitAction, other.ProfilePortraitAction)) return false;
      if (!object.Equals(ProfileButtonRandomize, other.ProfileButtonRandomize)) return false;
      if (!object.Equals(ProfileButtonLens, other.ProfileButtonLens)) return false;
      if (!object.Equals(ProfileButtonAsset, other.ProfileButtonAsset)) return false;
      if (!object.Equals(ProfileScreengrab, other.ProfileScreengrab)) return false;
      if (!object.Equals(OutpostInteract, other.OutpostInteract)) return false;
      if (!object.Equals(GreenhouseInteract, other.GreenhouseInteract)) return false;
      if (!object.Equals(FamilyDetailsClicked, other.FamilyDetailsClicked)) return false;
      if (!object.Equals(StickerDetailsClicked, other.StickerDetailsClicked)) return false;
      if (!object.Equals(RegistryInfoClicked, other.RegistryInfoClicked)) return false;
      if (!object.Equals(RateApp, other.RateApp)) return false;
      if (!object.Equals(ExceptionInfo, other.ExceptionInfo)) return false;
      if (!object.Equals(ArModeToggled, other.ArModeToggled)) return false;
      if (!object.Equals(BatteryModeToggled, other.BatteryModeToggled)) return false;
      if (!object.Equals(AuthUpdated, other.AuthUpdated)) return false;
      if (!object.Equals(StorePopupOpen, other.StorePopupOpen)) return false;
      if (!object.Equals(StoreTabOpen, other.StoreTabOpen)) return false;
      if (!object.Equals(VaultPopupOpen, other.VaultPopupOpen)) return false;
      if (!object.Equals(VaultTabOpen, other.VaultTabOpen)) return false;
      if (!object.Equals(ServerData, other.ServerData)) return false;
      if (TelemetryDataCase != other.TelemetryDataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) hash ^= Startup.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) hash ^= SwishSpellGameStart.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) hash ^= SwishSpellGameEnd.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) hash ^= AssetLoad.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) hash ^= BundleDownload.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) hash ^= Stopwatch.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) hash ^= SmokeTest.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) hash ^= EnvironmentalTagsUiEntered.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) hash ^= EnvironmentalTagsWeatherAcknowledged.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) hash ^= AvatarInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) hash ^= RewardsFlow.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) hash ^= PortkeysWrackspurtTapped.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) hash ^= PortkeysOutOfBoundsReached.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) hash ^= PortkeysAdvancedArCheck.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) hash ^= ProfessionMainMenu.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) hash ^= ProfessionNodeSelected.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) hash ^= ButtonPress.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) hash ^= SelectMob.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) hash ^= MoreInfo.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) hash ^= LandmarkInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) hash ^= LockOnAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) hash ^= OffensiveTraceAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) hash ^= ProtegoCastAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) hash ^= OutOfEnergyShown.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) hash ^= OutOfEnergyPurchase.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) hash ^= CombatPotionButton.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) hash ^= Impression.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) hash ^= DescriptionClickthrough.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) hash ^= HyperlinkClickthrough.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) hash ^= SurfaceDetection.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) hash ^= EncounterStart.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) hash ^= PermissionRequested.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) hash ^= PermissionCheckFailed.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) hash ^= DeeplinkTriggered.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) hash ^= LoginStart.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) hash ^= LoginComplete.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) hash ^= PotionsMasterNoteAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) hash ^= ProfilePortraitAction.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) hash ^= ProfileButtonRandomize.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) hash ^= ProfileButtonLens.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) hash ^= ProfileButtonAsset.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) hash ^= ProfileScreengrab.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) hash ^= OutpostInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) hash ^= GreenhouseInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) hash ^= FamilyDetailsClicked.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) hash ^= StickerDetailsClicked.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) hash ^= RegistryInfoClicked.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) hash ^= RateApp.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) hash ^= ExceptionInfo.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) hash ^= ArModeToggled.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) hash ^= BatteryModeToggled.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) hash ^= AuthUpdated.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) hash ^= StorePopupOpen.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) hash ^= StoreTabOpen.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) hash ^= VaultPopupOpen.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) hash ^= VaultTabOpen.GetHashCode();
      if (serverData_ != null) hash ^= ServerData.GetHashCode();
      hash ^= (int) telemetryDataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) {
        output.WriteRawTag(10);
        output.WriteMessage(Startup);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) {
        output.WriteRawTag(18);
        output.WriteMessage(SwishSpellGameStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) {
        output.WriteRawTag(26);
        output.WriteMessage(SwishSpellGameEnd);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) {
        output.WriteRawTag(34);
        output.WriteMessage(AssetLoad);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) {
        output.WriteRawTag(42);
        output.WriteMessage(BundleDownload);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) {
        output.WriteRawTag(50);
        output.WriteMessage(Stopwatch);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) {
        output.WriteRawTag(58);
        output.WriteMessage(SmokeTest);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) {
        output.WriteRawTag(66);
        output.WriteMessage(EnvironmentalTagsUiEntered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) {
        output.WriteRawTag(74);
        output.WriteMessage(EnvironmentalTagsWeatherAcknowledged);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) {
        output.WriteRawTag(82);
        output.WriteMessage(AvatarInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) {
        output.WriteRawTag(90);
        output.WriteMessage(RewardsFlow);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) {
        output.WriteRawTag(98);
        output.WriteMessage(PortkeysWrackspurtTapped);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) {
        output.WriteRawTag(106);
        output.WriteMessage(PortkeysOutOfBoundsReached);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) {
        output.WriteRawTag(114);
        output.WriteMessage(PortkeysAdvancedArCheck);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) {
        output.WriteRawTag(122);
        output.WriteMessage(ProfessionMainMenu);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ProfessionNodeSelected);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ButtonPress);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SelectMob);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(MoreInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LandmarkInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LockOnAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(OffensiveTraceAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ProtegoCastAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(OutOfEnergyShown);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(OutOfEnergyPurchase);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(CombatPotionButton);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Impression);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(DescriptionClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(HyperlinkClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(SurfaceDetection);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(EncounterStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(PermissionRequested);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(PermissionCheckFailed);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(DeeplinkTriggered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(LoginStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LoginComplete);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(PotionsMasterNoteAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(ProfilePortraitAction);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(ProfileButtonRandomize);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(ProfileButtonLens);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ProfileButtonAsset);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(ProfileScreengrab);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(OutpostInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(GreenhouseInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(FamilyDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(StickerDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(RegistryInfoClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(RateApp);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(ExceptionInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ArModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(BatteryModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AuthUpdated);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(StorePopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(StoreTabOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(VaultPopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(VaultTabOpen);
      }
      if (serverData_ != null) {
        output.WriteRawTag(202, 62);
        output.WriteMessage(ServerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Startup);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwishSpellGameStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwishSpellGameEnd);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssetLoad);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BundleDownload);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stopwatch);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmokeTest);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentalTagsUiEntered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentalTagsWeatherAcknowledged);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardsFlow);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeysWrackspurtTapped);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeysOutOfBoundsReached);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeysAdvancedArCheck);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionMainMenu);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfessionNodeSelected);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ButtonPress);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectMob);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MoreInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LandmarkInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LockOnAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OffensiveTraceAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProtegoCastAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutOfEnergyShown);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutOfEnergyPurchase);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CombatPotionButton);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Impression);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DescriptionClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HyperlinkClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SurfaceDetection);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncounterStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PermissionRequested);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PermissionCheckFailed);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeeplinkTriggered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoginStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoginComplete);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PotionsMasterNoteAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfilePortraitAction);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileButtonRandomize);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileButtonLens);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileButtonAsset);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileScreengrab);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutpostInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GreenhouseInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FamilyDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StickerDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegistryInfoClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RateApp);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExceptionInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BatteryModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthUpdated);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorePopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoreTabOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultPopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultTabOpen);
      }
      if (serverData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LexiconApprovedClientTelemetry other) {
      if (other == null) {
        return;
      }
      if (other.serverData_ != null) {
        if (serverData_ == null) {
          ServerData = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.PlatformServerData();
        }
        ServerData.MergeFrom(other.ServerData);
      }
      switch (other.TelemetryDataCase) {
        case TelemetryDataOneofCase.Startup:
          if (Startup == null) {
            Startup = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup();
          }
          Startup.MergeFrom(other.Startup);
          break;
        case TelemetryDataOneofCase.SwishSpellGameStart:
          if (SwishSpellGameStart == null) {
            SwishSpellGameStart = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart();
          }
          SwishSpellGameStart.MergeFrom(other.SwishSpellGameStart);
          break;
        case TelemetryDataOneofCase.SwishSpellGameEnd:
          if (SwishSpellGameEnd == null) {
            SwishSpellGameEnd = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd();
          }
          SwishSpellGameEnd.MergeFrom(other.SwishSpellGameEnd);
          break;
        case TelemetryDataOneofCase.AssetLoad:
          if (AssetLoad == null) {
            AssetLoad = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad();
          }
          AssetLoad.MergeFrom(other.AssetLoad);
          break;
        case TelemetryDataOneofCase.BundleDownload:
          if (BundleDownload == null) {
            BundleDownload = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload();
          }
          BundleDownload.MergeFrom(other.BundleDownload);
          break;
        case TelemetryDataOneofCase.Stopwatch:
          if (Stopwatch == null) {
            Stopwatch = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch();
          }
          Stopwatch.MergeFrom(other.Stopwatch);
          break;
        case TelemetryDataOneofCase.SmokeTest:
          if (SmokeTest == null) {
            SmokeTest = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest();
          }
          SmokeTest.MergeFrom(other.SmokeTest);
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsUiEntered:
          if (EnvironmentalTagsUiEntered == null) {
            EnvironmentalTagsUiEntered = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered();
          }
          EnvironmentalTagsUiEntered.MergeFrom(other.EnvironmentalTagsUiEntered);
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged:
          if (EnvironmentalTagsWeatherAcknowledged == null) {
            EnvironmentalTagsWeatherAcknowledged = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged();
          }
          EnvironmentalTagsWeatherAcknowledged.MergeFrom(other.EnvironmentalTagsWeatherAcknowledged);
          break;
        case TelemetryDataOneofCase.AvatarInteract:
          if (AvatarInteract == null) {
            AvatarInteract = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract();
          }
          AvatarInteract.MergeFrom(other.AvatarInteract);
          break;
        case TelemetryDataOneofCase.RewardsFlow:
          if (RewardsFlow == null) {
            RewardsFlow = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow();
          }
          RewardsFlow.MergeFrom(other.RewardsFlow);
          break;
        case TelemetryDataOneofCase.PortkeysWrackspurtTapped:
          if (PortkeysWrackspurtTapped == null) {
            PortkeysWrackspurtTapped = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped();
          }
          PortkeysWrackspurtTapped.MergeFrom(other.PortkeysWrackspurtTapped);
          break;
        case TelemetryDataOneofCase.PortkeysOutOfBoundsReached:
          if (PortkeysOutOfBoundsReached == null) {
            PortkeysOutOfBoundsReached = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached();
          }
          PortkeysOutOfBoundsReached.MergeFrom(other.PortkeysOutOfBoundsReached);
          break;
        case TelemetryDataOneofCase.PortkeysAdvancedArCheck:
          if (PortkeysAdvancedArCheck == null) {
            PortkeysAdvancedArCheck = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck();
          }
          PortkeysAdvancedArCheck.MergeFrom(other.PortkeysAdvancedArCheck);
          break;
        case TelemetryDataOneofCase.ProfessionMainMenu:
          if (ProfessionMainMenu == null) {
            ProfessionMainMenu = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu();
          }
          ProfessionMainMenu.MergeFrom(other.ProfessionMainMenu);
          break;
        case TelemetryDataOneofCase.ProfessionNodeSelected:
          if (ProfessionNodeSelected == null) {
            ProfessionNodeSelected = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected();
          }
          ProfessionNodeSelected.MergeFrom(other.ProfessionNodeSelected);
          break;
        case TelemetryDataOneofCase.ButtonPress:
          if (ButtonPress == null) {
            ButtonPress = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress();
          }
          ButtonPress.MergeFrom(other.ButtonPress);
          break;
        case TelemetryDataOneofCase.SelectMob:
          if (SelectMob == null) {
            SelectMob = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob();
          }
          SelectMob.MergeFrom(other.SelectMob);
          break;
        case TelemetryDataOneofCase.MoreInfo:
          if (MoreInfo == null) {
            MoreInfo = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo();
          }
          MoreInfo.MergeFrom(other.MoreInfo);
          break;
        case TelemetryDataOneofCase.LandmarkInteract:
          if (LandmarkInteract == null) {
            LandmarkInteract = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract();
          }
          LandmarkInteract.MergeFrom(other.LandmarkInteract);
          break;
        case TelemetryDataOneofCase.LockOnAttempt:
          if (LockOnAttempt == null) {
            LockOnAttempt = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt();
          }
          LockOnAttempt.MergeFrom(other.LockOnAttempt);
          break;
        case TelemetryDataOneofCase.OffensiveTraceAttempt:
          if (OffensiveTraceAttempt == null) {
            OffensiveTraceAttempt = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt();
          }
          OffensiveTraceAttempt.MergeFrom(other.OffensiveTraceAttempt);
          break;
        case TelemetryDataOneofCase.ProtegoCastAttempt:
          if (ProtegoCastAttempt == null) {
            ProtegoCastAttempt = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt();
          }
          ProtegoCastAttempt.MergeFrom(other.ProtegoCastAttempt);
          break;
        case TelemetryDataOneofCase.OutOfEnergyShown:
          if (OutOfEnergyShown == null) {
            OutOfEnergyShown = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown();
          }
          OutOfEnergyShown.MergeFrom(other.OutOfEnergyShown);
          break;
        case TelemetryDataOneofCase.OutOfEnergyPurchase:
          if (OutOfEnergyPurchase == null) {
            OutOfEnergyPurchase = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton();
          }
          OutOfEnergyPurchase.MergeFrom(other.OutOfEnergyPurchase);
          break;
        case TelemetryDataOneofCase.CombatPotionButton:
          if (CombatPotionButton == null) {
            CombatPotionButton = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton();
          }
          CombatPotionButton.MergeFrom(other.CombatPotionButton);
          break;
        case TelemetryDataOneofCase.Impression:
          if (Impression == null) {
            Impression = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression();
          }
          Impression.MergeFrom(other.Impression);
          break;
        case TelemetryDataOneofCase.DescriptionClickthrough:
          if (DescriptionClickthrough == null) {
            DescriptionClickthrough = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough();
          }
          DescriptionClickthrough.MergeFrom(other.DescriptionClickthrough);
          break;
        case TelemetryDataOneofCase.HyperlinkClickthrough:
          if (HyperlinkClickthrough == null) {
            HyperlinkClickthrough = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough();
          }
          HyperlinkClickthrough.MergeFrom(other.HyperlinkClickthrough);
          break;
        case TelemetryDataOneofCase.SurfaceDetection:
          if (SurfaceDetection == null) {
            SurfaceDetection = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection();
          }
          SurfaceDetection.MergeFrom(other.SurfaceDetection);
          break;
        case TelemetryDataOneofCase.EncounterStart:
          if (EncounterStart == null) {
            EncounterStart = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart();
          }
          EncounterStart.MergeFrom(other.EncounterStart);
          break;
        case TelemetryDataOneofCase.PermissionRequested:
          if (PermissionRequested == null) {
            PermissionRequested = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested();
          }
          PermissionRequested.MergeFrom(other.PermissionRequested);
          break;
        case TelemetryDataOneofCase.PermissionCheckFailed:
          if (PermissionCheckFailed == null) {
            PermissionCheckFailed = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed();
          }
          PermissionCheckFailed.MergeFrom(other.PermissionCheckFailed);
          break;
        case TelemetryDataOneofCase.DeeplinkTriggered:
          if (DeeplinkTriggered == null) {
            DeeplinkTriggered = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered();
          }
          DeeplinkTriggered.MergeFrom(other.DeeplinkTriggered);
          break;
        case TelemetryDataOneofCase.LoginStart:
          if (LoginStart == null) {
            LoginStart = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart();
          }
          LoginStart.MergeFrom(other.LoginStart);
          break;
        case TelemetryDataOneofCase.LoginComplete:
          if (LoginComplete == null) {
            LoginComplete = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete();
          }
          LoginComplete.MergeFrom(other.LoginComplete);
          break;
        case TelemetryDataOneofCase.PotionsMasterNoteAttempt:
          if (PotionsMasterNoteAttempt == null) {
            PotionsMasterNoteAttempt = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt();
          }
          PotionsMasterNoteAttempt.MergeFrom(other.PotionsMasterNoteAttempt);
          break;
        case TelemetryDataOneofCase.ProfilePortraitAction:
          if (ProfilePortraitAction == null) {
            ProfilePortraitAction = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction();
          }
          ProfilePortraitAction.MergeFrom(other.ProfilePortraitAction);
          break;
        case TelemetryDataOneofCase.ProfileButtonRandomize:
          if (ProfileButtonRandomize == null) {
            ProfileButtonRandomize = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize();
          }
          ProfileButtonRandomize.MergeFrom(other.ProfileButtonRandomize);
          break;
        case TelemetryDataOneofCase.ProfileButtonLens:
          if (ProfileButtonLens == null) {
            ProfileButtonLens = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens();
          }
          ProfileButtonLens.MergeFrom(other.ProfileButtonLens);
          break;
        case TelemetryDataOneofCase.ProfileButtonAsset:
          if (ProfileButtonAsset == null) {
            ProfileButtonAsset = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset();
          }
          ProfileButtonAsset.MergeFrom(other.ProfileButtonAsset);
          break;
        case TelemetryDataOneofCase.ProfileScreengrab:
          if (ProfileScreengrab == null) {
            ProfileScreengrab = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab();
          }
          ProfileScreengrab.MergeFrom(other.ProfileScreengrab);
          break;
        case TelemetryDataOneofCase.OutpostInteract:
          if (OutpostInteract == null) {
            OutpostInteract = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract();
          }
          OutpostInteract.MergeFrom(other.OutpostInteract);
          break;
        case TelemetryDataOneofCase.GreenhouseInteract:
          if (GreenhouseInteract == null) {
            GreenhouseInteract = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract();
          }
          GreenhouseInteract.MergeFrom(other.GreenhouseInteract);
          break;
        case TelemetryDataOneofCase.FamilyDetailsClicked:
          if (FamilyDetailsClicked == null) {
            FamilyDetailsClicked = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails();
          }
          FamilyDetailsClicked.MergeFrom(other.FamilyDetailsClicked);
          break;
        case TelemetryDataOneofCase.StickerDetailsClicked:
          if (StickerDetailsClicked == null) {
            StickerDetailsClicked = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails();
          }
          StickerDetailsClicked.MergeFrom(other.StickerDetailsClicked);
          break;
        case TelemetryDataOneofCase.RegistryInfoClicked:
          if (RegistryInfoClicked == null) {
            RegistryInfoClicked = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo();
          }
          RegistryInfoClicked.MergeFrom(other.RegistryInfoClicked);
          break;
        case TelemetryDataOneofCase.RateApp:
          if (RateApp == null) {
            RateApp = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp();
          }
          RateApp.MergeFrom(other.RateApp);
          break;
        case TelemetryDataOneofCase.ExceptionInfo:
          if (ExceptionInfo == null) {
            ExceptionInfo = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException();
          }
          ExceptionInfo.MergeFrom(other.ExceptionInfo);
          break;
        case TelemetryDataOneofCase.ArModeToggled:
          if (ArModeToggled == null) {
            ArModeToggled = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled();
          }
          ArModeToggled.MergeFrom(other.ArModeToggled);
          break;
        case TelemetryDataOneofCase.BatteryModeToggled:
          if (BatteryModeToggled == null) {
            BatteryModeToggled = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled();
          }
          BatteryModeToggled.MergeFrom(other.BatteryModeToggled);
          break;
        case TelemetryDataOneofCase.AuthUpdated:
          if (AuthUpdated == null) {
            AuthUpdated = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated();
          }
          AuthUpdated.MergeFrom(other.AuthUpdated);
          break;
        case TelemetryDataOneofCase.StorePopupOpen:
          if (StorePopupOpen == null) {
            StorePopupOpen = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen();
          }
          StorePopupOpen.MergeFrom(other.StorePopupOpen);
          break;
        case TelemetryDataOneofCase.StoreTabOpen:
          if (StoreTabOpen == null) {
            StoreTabOpen = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen();
          }
          StoreTabOpen.MergeFrom(other.StoreTabOpen);
          break;
        case TelemetryDataOneofCase.VaultPopupOpen:
          if (VaultPopupOpen == null) {
            VaultPopupOpen = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression();
          }
          VaultPopupOpen.MergeFrom(other.VaultPopupOpen);
          break;
        case TelemetryDataOneofCase.VaultTabOpen:
          if (VaultTabOpen == null) {
            VaultTabOpen = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression();
          }
          VaultTabOpen.MergeFrom(other.VaultTabOpen);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup();
            if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) {
              subBuilder.MergeFrom(Startup);
            }
            input.ReadMessage(subBuilder);
            Startup = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameStart();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) {
              subBuilder.MergeFrom(SwishSpellGameStart);
            }
            input.ReadMessage(subBuilder);
            SwishSpellGameStart = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) {
              subBuilder.MergeFrom(SwishSpellGameEnd);
            }
            input.ReadMessage(subBuilder);
            SwishSpellGameEnd = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAssetLoad();
            if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) {
              subBuilder.MergeFrom(AssetLoad);
            }
            input.ReadMessage(subBuilder);
            AssetLoad = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryBundleDownload();
            if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) {
              subBuilder.MergeFrom(BundleDownload);
            }
            input.ReadMessage(subBuilder);
            BundleDownload = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStopwatch();
            if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) {
              subBuilder.MergeFrom(Stopwatch);
            }
            input.ReadMessage(subBuilder);
            Stopwatch = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySmokeTest();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) {
              subBuilder.MergeFrom(SmokeTest);
            }
            input.ReadMessage(subBuilder);
            SmokeTest = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagsUIEntered();
            if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) {
              subBuilder.MergeFrom(EnvironmentalTagsUiEntered);
            }
            input.ReadMessage(subBuilder);
            EnvironmentalTagsUiEntered = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged();
            if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) {
              subBuilder.MergeFrom(EnvironmentalTagsWeatherAcknowledged);
            }
            input.ReadMessage(subBuilder);
            EnvironmentalTagsWeatherAcknowledged = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryAvatarInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) {
              subBuilder.MergeFrom(AvatarInteract);
            }
            input.ReadMessage(subBuilder);
            AvatarInteract = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRewardsFlow();
            if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) {
              subBuilder.MergeFrom(RewardsFlow);
            }
            input.ReadMessage(subBuilder);
            RewardsFlow = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysWrackspurtTapped();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) {
              subBuilder.MergeFrom(PortkeysWrackspurtTapped);
            }
            input.ReadMessage(subBuilder);
            PortkeysWrackspurtTapped = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysOutOfBoundsReached();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) {
              subBuilder.MergeFrom(PortkeysOutOfBoundsReached);
            }
            input.ReadMessage(subBuilder);
            PortkeysOutOfBoundsReached = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPortkeysAdvancedARCheck();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) {
              subBuilder.MergeFrom(PortkeysAdvancedArCheck);
            }
            input.ReadMessage(subBuilder);
            PortkeysAdvancedArCheck = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionMainMenu();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) {
              subBuilder.MergeFrom(ProfessionMainMenu);
            }
            input.ReadMessage(subBuilder);
            ProfessionMainMenu = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionNodeSelected();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) {
              subBuilder.MergeFrom(ProfessionNodeSelected);
            }
            input.ReadMessage(subBuilder);
            ProfessionNodeSelected = subBuilder;
            break;
          }
          case 138: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryButtonPress();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) {
              subBuilder.MergeFrom(ButtonPress);
            }
            input.ReadMessage(subBuilder);
            ButtonPress = subBuilder;
            break;
          }
          case 146: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeSelectMob();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) {
              subBuilder.MergeFrom(SelectMob);
            }
            input.ReadMessage(subBuilder);
            SelectMob = subBuilder;
            break;
          }
          case 154: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryWizardingChallengeMoreInfo();
            if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) {
              subBuilder.MergeFrom(MoreInfo);
            }
            input.ReadMessage(subBuilder);
            MoreInfo = subBuilder;
            break;
          }
          case 162: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLandmarkInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) {
              subBuilder.MergeFrom(LandmarkInteract);
            }
            input.ReadMessage(subBuilder);
            LandmarkInteract = subBuilder;
            break;
          }
          case 170: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveLockOnAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) {
              subBuilder.MergeFrom(LockOnAttempt);
            }
            input.ReadMessage(subBuilder);
            LockOnAttempt = subBuilder;
            break;
          }
          case 178: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOffensiveTraceAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) {
              subBuilder.MergeFrom(OffensiveTraceAttempt);
            }
            input.ReadMessage(subBuilder);
            OffensiveTraceAttempt = subBuilder;
            break;
          }
          case 186: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameProtegoCastAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) {
              subBuilder.MergeFrom(ProtegoCastAttempt);
            }
            input.ReadMessage(subBuilder);
            ProtegoCastAttempt = subBuilder;
            break;
          }
          case 194: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyDialogShown();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) {
              subBuilder.MergeFrom(OutOfEnergyShown);
            }
            input.ReadMessage(subBuilder);
            OutOfEnergyShown = subBuilder;
            break;
          }
          case 202: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGameOutOfEnergyPurchaseButton();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) {
              subBuilder.MergeFrom(OutOfEnergyPurchase);
            }
            input.ReadMessage(subBuilder);
            OutOfEnergyPurchase = subBuilder;
            break;
          }
          case 210: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryCombatGamePotionButton();
            if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) {
              subBuilder.MergeFrom(CombatPotionButton);
            }
            input.ReadMessage(subBuilder);
            CombatPotionButton = subBuilder;
            break;
          }
          case 218: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryImpression();
            if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) {
              subBuilder.MergeFrom(Impression);
            }
            input.ReadMessage(subBuilder);
            Impression = subBuilder;
            break;
          }
          case 226: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDescriptionClickthrough();
            if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) {
              subBuilder.MergeFrom(DescriptionClickthrough);
            }
            input.ReadMessage(subBuilder);
            DescriptionClickthrough = subBuilder;
            break;
          }
          case 234: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryHyperlinkClickthrough();
            if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) {
              subBuilder.MergeFrom(HyperlinkClickthrough);
            }
            input.ReadMessage(subBuilder);
            HyperlinkClickthrough = subBuilder;
            break;
          }
          case 242: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySurfaceDetection();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) {
              subBuilder.MergeFrom(SurfaceDetection);
            }
            input.ReadMessage(subBuilder);
            SurfaceDetection = subBuilder;
            break;
          }
          case 250: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryEncounterStart();
            if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) {
              subBuilder.MergeFrom(EncounterStart);
            }
            input.ReadMessage(subBuilder);
            EncounterStart = subBuilder;
            break;
          }
          case 258: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsRequested();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) {
              subBuilder.MergeFrom(PermissionRequested);
            }
            input.ReadMessage(subBuilder);
            PermissionRequested = subBuilder;
            break;
          }
          case 266: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPermissionsCheckFailed();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) {
              subBuilder.MergeFrom(PermissionCheckFailed);
            }
            input.ReadMessage(subBuilder);
            PermissionCheckFailed = subBuilder;
            break;
          }
          case 274: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryDeeplinkTriggered();
            if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) {
              subBuilder.MergeFrom(DeeplinkTriggered);
            }
            input.ReadMessage(subBuilder);
            DeeplinkTriggered = subBuilder;
            break;
          }
          case 282: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginStart();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) {
              subBuilder.MergeFrom(LoginStart);
            }
            input.ReadMessage(subBuilder);
            LoginStart = subBuilder;
            break;
          }
          case 290: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryLoginComplete();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) {
              subBuilder.MergeFrom(LoginComplete);
            }
            input.ReadMessage(subBuilder);
            LoginComplete = subBuilder;
            break;
          }
          case 298: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryPotionsMasterNoteAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) {
              subBuilder.MergeFrom(PotionsMasterNoteAttempt);
            }
            input.ReadMessage(subBuilder);
            PotionsMasterNoteAttempt = subBuilder;
            break;
          }
          case 306: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) {
              subBuilder.MergeFrom(ProfilePortraitAction);
            }
            input.ReadMessage(subBuilder);
            ProfilePortraitAction = subBuilder;
            break;
          }
          case 314: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) {
              subBuilder.MergeFrom(ProfileButtonRandomize);
            }
            input.ReadMessage(subBuilder);
            ProfileButtonRandomize = subBuilder;
            break;
          }
          case 322: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) {
              subBuilder.MergeFrom(ProfileButtonLens);
            }
            input.ReadMessage(subBuilder);
            ProfileButtonLens = subBuilder;
            break;
          }
          case 330: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) {
              subBuilder.MergeFrom(ProfileButtonAsset);
            }
            input.ReadMessage(subBuilder);
            ProfileButtonAsset = subBuilder;
            break;
          }
          case 338: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileScreenGrab();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) {
              subBuilder.MergeFrom(ProfileScreengrab);
            }
            input.ReadMessage(subBuilder);
            ProfileScreengrab = subBuilder;
            break;
          }
          case 346: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryOutpostInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) {
              subBuilder.MergeFrom(OutpostInteract);
            }
            input.ReadMessage(subBuilder);
            OutpostInteract = subBuilder;
            break;
          }
          case 354: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryGreenhouseInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) {
              subBuilder.MergeFrom(GreenhouseInteract);
            }
            input.ReadMessage(subBuilder);
            GreenhouseInteract = subBuilder;
            break;
          }
          case 362: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryFamilyDetails();
            if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) {
              subBuilder.MergeFrom(FamilyDetailsClicked);
            }
            input.ReadMessage(subBuilder);
            FamilyDetailsClicked = subBuilder;
            break;
          }
          case 370: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStickerDetails();
            if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) {
              subBuilder.MergeFrom(StickerDetailsClicked);
            }
            input.ReadMessage(subBuilder);
            StickerDetailsClicked = subBuilder;
            break;
          }
          case 378: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRegistryInfo();
            if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) {
              subBuilder.MergeFrom(RegistryInfoClicked);
            }
            input.ReadMessage(subBuilder);
            RegistryInfoClicked = subBuilder;
            break;
          }
          case 386: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryRateApp();
            if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) {
              subBuilder.MergeFrom(RateApp);
            }
            input.ReadMessage(subBuilder);
            RateApp = subBuilder;
            break;
          }
          case 394: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryException();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) {
              subBuilder.MergeFrom(ExceptionInfo);
            }
            input.ReadMessage(subBuilder);
            ExceptionInfo = subBuilder;
            break;
          }
          case 402: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsARModeToggled();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) {
              subBuilder.MergeFrom(ArModeToggled);
            }
            input.ReadMessage(subBuilder);
            ArModeToggled = subBuilder;
            break;
          }
          case 410: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsBatteryModeToggled();
            if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) {
              subBuilder.MergeFrom(BatteryModeToggled);
            }
            input.ReadMessage(subBuilder);
            BatteryModeToggled = subBuilder;
            break;
          }
          case 418: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySettingsAuthUpdated();
            if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) {
              subBuilder.MergeFrom(AuthUpdated);
            }
            input.ReadMessage(subBuilder);
            AuthUpdated = subBuilder;
            break;
          }
          case 426: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStorePopupOpen();
            if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) {
              subBuilder.MergeFrom(StorePopupOpen);
            }
            input.ReadMessage(subBuilder);
            StorePopupOpen = subBuilder;
            break;
          }
          case 434: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStoreTabOpen();
            if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) {
              subBuilder.MergeFrom(StoreTabOpen);
            }
            input.ReadMessage(subBuilder);
            StoreTabOpen = subBuilder;
            break;
          }
          case 442: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultItemImpression();
            if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) {
              subBuilder.MergeFrom(VaultPopupOpen);
            }
            input.ReadMessage(subBuilder);
            VaultPopupOpen = subBuilder;
            break;
          }
          case 450: {
            global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression subBuilder = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryVaultTabImpression();
            if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) {
              subBuilder.MergeFrom(VaultTabOpen);
            }
            input.ReadMessage(subBuilder);
            VaultTabOpen = subBuilder;
            break;
          }
          case 8010: {
            if (serverData_ == null) {
              ServerData = new global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.PlatformServerData();
            }
            input.ReadMessage(ServerData);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LexiconApprovedClientTelemetry message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ClientTelemetrySwishSpellGameStart : pb::IMessage<ClientTelemetrySwishSpellGameStart> {
        private static readonly pb::MessageParser<ClientTelemetrySwishSpellGameStart> _parser = new pb::MessageParser<ClientTelemetrySwishSpellGameStart>(() => new ClientTelemetrySwishSpellGameStart());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySwishSpellGameStart> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySwishSpellGameStart() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySwishSpellGameStart(ClientTelemetrySwishSpellGameStart other) : this() {
          encounterId_ = other.encounterId_;
          attemptNumber_ = other.attemptNumber_;
          playerLevel_ = other.playerLevel_;
          encounterProtoId_ = other.encounterProtoId_;
          spellPattern_ = other.spellPattern_;
          arMode_ = other.arMode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySwishSpellGameStart Clone() {
          return new ClientTelemetrySwishSpellGameStart(this);
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 1;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "attempt_number" field.</summary>
        public const int AttemptNumberFieldNumber = 2;
        private int attemptNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttemptNumber {
          get { return attemptNumber_; }
          set {
            attemptNumber_ = value;
          }
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 3;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_proto_id" field.</summary>
        public const int EncounterProtoIdFieldNumber = 4;
        private string encounterProtoId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterProtoId {
          get { return encounterProtoId_; }
          set {
            encounterProtoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spell_pattern" field.</summary>
        public const int SpellPatternFieldNumber = 5;
        private string spellPattern_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SpellPattern {
          get { return spellPattern_; }
          set {
            spellPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ar_mode" field.</summary>
        public const int ArModeFieldNumber = 6;
        private global::WUProtos.Data.ARMode arMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ARMode ArMode {
          get { return arMode_; }
          set {
            arMode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySwishSpellGameStart);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySwishSpellGameStart other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EncounterId != other.EncounterId) return false;
          if (AttemptNumber != other.AttemptNumber) return false;
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterProtoId != other.EncounterProtoId) return false;
          if (SpellPattern != other.SpellPattern) return false;
          if (ArMode != other.ArMode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (AttemptNumber != 0) hash ^= AttemptNumber.GetHashCode();
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterProtoId.Length != 0) hash ^= EncounterProtoId.GetHashCode();
          if (SpellPattern.Length != 0) hash ^= SpellPattern.GetHashCode();
          if (ArMode != 0) hash ^= ArMode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EncounterId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EncounterId);
          }
          if (AttemptNumber != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AttemptNumber);
          }
          if (PlayerLevel != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterProtoId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(EncounterProtoId);
          }
          if (SpellPattern.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SpellPattern);
          }
          if (ArMode != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) ArMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (AttemptNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttemptNumber);
          }
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterProtoId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterProtoId);
          }
          if (SpellPattern.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpellPattern);
          }
          if (ArMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ArMode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySwishSpellGameStart other) {
          if (other == null) {
            return;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          if (other.AttemptNumber != 0) {
            AttemptNumber = other.AttemptNumber;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterProtoId.Length != 0) {
            EncounterProtoId = other.EncounterProtoId;
          }
          if (other.SpellPattern.Length != 0) {
            SpellPattern = other.SpellPattern;
          }
          if (other.ArMode != 0) {
            ArMode = other.ArMode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EncounterId = input.ReadString();
                break;
              }
              case 16: {
                AttemptNumber = input.ReadInt32();
                break;
              }
              case 24: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 34: {
                EncounterProtoId = input.ReadString();
                break;
              }
              case 42: {
                SpellPattern = input.ReadString();
                break;
              }
              case 48: {
                ArMode = (global::WUProtos.Data.ARMode) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryWizardingChallengeSelectMob : pb::IMessage<ClientTelemetryWizardingChallengeSelectMob> {
        private static readonly pb::MessageParser<ClientTelemetryWizardingChallengeSelectMob> _parser = new pb::MessageParser<ClientTelemetryWizardingChallengeSelectMob>(() => new ClientTelemetryWizardingChallengeSelectMob());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryWizardingChallengeSelectMob> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryWizardingChallengeSelectMob() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryWizardingChallengeSelectMob(ClientTelemetryWizardingChallengeSelectMob other) : this() {
          mobLevel_ = other.mobLevel_;
          mobAffinity_ = other.mobAffinity_;
          mobGmtId_ = other.mobGmtId_;
          playerProfessionRank_ = other.playerProfessionRank_;
          playerProfessionGmtId_ = other.playerProfessionGmtId_;
          isMobAlreadyEngaged_ = other.isMobAlreadyEngaged_;
          playerEngagementWithMob_ = other.playerEngagementWithMob_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryWizardingChallengeSelectMob Clone() {
          return new ClientTelemetryWizardingChallengeSelectMob(this);
        }

        /// <summary>Field number for the "mob_level" field.</summary>
        public const int MobLevelFieldNumber = 1;
        private int mobLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MobLevel {
          get { return mobLevel_; }
          set {
            mobLevel_ = value;
          }
        }

        /// <summary>Field number for the "mob_affinity" field.</summary>
        public const int MobAffinityFieldNumber = 2;
        private string mobAffinity_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MobAffinity {
          get { return mobAffinity_; }
          set {
            mobAffinity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "mob_gmt_id" field.</summary>
        public const int MobGmtIdFieldNumber = 3;
        private string mobGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MobGmtId {
          get { return mobGmtId_; }
          set {
            mobGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "player_profession_rank" field.</summary>
        public const int PlayerProfessionRankFieldNumber = 4;
        private int playerProfessionRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerProfessionRank {
          get { return playerProfessionRank_; }
          set {
            playerProfessionRank_ = value;
          }
        }

        /// <summary>Field number for the "player_profession_gmt_id" field.</summary>
        public const int PlayerProfessionGmtIdFieldNumber = 5;
        private string playerProfessionGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerProfessionGmtId {
          get { return playerProfessionGmtId_; }
          set {
            playerProfessionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_mob_already_engaged" field.</summary>
        public const int IsMobAlreadyEngagedFieldNumber = 6;
        private global::WUProtos.Enums.ActiveEngagement isMobAlreadyEngaged_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.ActiveEngagement IsMobAlreadyEngaged {
          get { return isMobAlreadyEngaged_; }
          set {
            isMobAlreadyEngaged_ = value;
          }
        }

        /// <summary>Field number for the "player_engagement_with_mob" field.</summary>
        public const int PlayerEngagementWithMobFieldNumber = 7;
        private string playerEngagementWithMob_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerEngagementWithMob {
          get { return playerEngagementWithMob_; }
          set {
            playerEngagementWithMob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryWizardingChallengeSelectMob);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryWizardingChallengeSelectMob other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MobLevel != other.MobLevel) return false;
          if (MobAffinity != other.MobAffinity) return false;
          if (MobGmtId != other.MobGmtId) return false;
          if (PlayerProfessionRank != other.PlayerProfessionRank) return false;
          if (PlayerProfessionGmtId != other.PlayerProfessionGmtId) return false;
          if (IsMobAlreadyEngaged != other.IsMobAlreadyEngaged) return false;
          if (PlayerEngagementWithMob != other.PlayerEngagementWithMob) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MobLevel != 0) hash ^= MobLevel.GetHashCode();
          if (MobAffinity.Length != 0) hash ^= MobAffinity.GetHashCode();
          if (MobGmtId.Length != 0) hash ^= MobGmtId.GetHashCode();
          if (PlayerProfessionRank != 0) hash ^= PlayerProfessionRank.GetHashCode();
          if (PlayerProfessionGmtId.Length != 0) hash ^= PlayerProfessionGmtId.GetHashCode();
          if (IsMobAlreadyEngaged != 0) hash ^= IsMobAlreadyEngaged.GetHashCode();
          if (PlayerEngagementWithMob.Length != 0) hash ^= PlayerEngagementWithMob.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MobLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MobLevel);
          }
          if (MobAffinity.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(MobAffinity);
          }
          if (MobGmtId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(MobGmtId);
          }
          if (PlayerProfessionRank != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(PlayerProfessionRank);
          }
          if (PlayerProfessionGmtId.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PlayerProfessionGmtId);
          }
          if (IsMobAlreadyEngaged != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) IsMobAlreadyEngaged);
          }
          if (PlayerEngagementWithMob.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(PlayerEngagementWithMob);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MobLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MobLevel);
          }
          if (MobAffinity.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MobAffinity);
          }
          if (MobGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MobGmtId);
          }
          if (PlayerProfessionRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerProfessionRank);
          }
          if (PlayerProfessionGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerProfessionGmtId);
          }
          if (IsMobAlreadyEngaged != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsMobAlreadyEngaged);
          }
          if (PlayerEngagementWithMob.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerEngagementWithMob);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryWizardingChallengeSelectMob other) {
          if (other == null) {
            return;
          }
          if (other.MobLevel != 0) {
            MobLevel = other.MobLevel;
          }
          if (other.MobAffinity.Length != 0) {
            MobAffinity = other.MobAffinity;
          }
          if (other.MobGmtId.Length != 0) {
            MobGmtId = other.MobGmtId;
          }
          if (other.PlayerProfessionRank != 0) {
            PlayerProfessionRank = other.PlayerProfessionRank;
          }
          if (other.PlayerProfessionGmtId.Length != 0) {
            PlayerProfessionGmtId = other.PlayerProfessionGmtId;
          }
          if (other.IsMobAlreadyEngaged != 0) {
            IsMobAlreadyEngaged = other.IsMobAlreadyEngaged;
          }
          if (other.PlayerEngagementWithMob.Length != 0) {
            PlayerEngagementWithMob = other.PlayerEngagementWithMob;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MobLevel = input.ReadInt32();
                break;
              }
              case 18: {
                MobAffinity = input.ReadString();
                break;
              }
              case 26: {
                MobGmtId = input.ReadString();
                break;
              }
              case 32: {
                PlayerProfessionRank = input.ReadInt32();
                break;
              }
              case 42: {
                PlayerProfessionGmtId = input.ReadString();
                break;
              }
              case 48: {
                IsMobAlreadyEngaged = (global::WUProtos.Enums.ActiveEngagement) input.ReadEnum();
                break;
              }
              case 58: {
                PlayerEngagementWithMob = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryWizardingChallengeMoreInfo : pb::IMessage<ClientTelemetryWizardingChallengeMoreInfo> {
        private static readonly pb::MessageParser<ClientTelemetryWizardingChallengeMoreInfo> _parser = new pb::MessageParser<ClientTelemetryWizardingChallengeMoreInfo>(() => new ClientTelemetryWizardingChallengeMoreInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryWizardingChallengeMoreInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryWizardingChallengeMoreInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryWizardingChallengeMoreInfo(ClientTelemetryWizardingChallengeMoreInfo other) : this() {
          mobLevel_ = other.mobLevel_;
          mobAffinity_ = other.mobAffinity_;
          playerProfessionRank_ = other.playerProfessionRank_;
          playerProfessionGmtId_ = other.playerProfessionGmtId_;
          isMobAlreadyEngaged_ = other.isMobAlreadyEngaged_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryWizardingChallengeMoreInfo Clone() {
          return new ClientTelemetryWizardingChallengeMoreInfo(this);
        }

        /// <summary>Field number for the "mob_level" field.</summary>
        public const int MobLevelFieldNumber = 1;
        private int mobLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MobLevel {
          get { return mobLevel_; }
          set {
            mobLevel_ = value;
          }
        }

        /// <summary>Field number for the "mob_affinity" field.</summary>
        public const int MobAffinityFieldNumber = 2;
        private string mobAffinity_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MobAffinity {
          get { return mobAffinity_; }
          set {
            mobAffinity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "player_profession_rank" field.</summary>
        public const int PlayerProfessionRankFieldNumber = 3;
        private int playerProfessionRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerProfessionRank {
          get { return playerProfessionRank_; }
          set {
            playerProfessionRank_ = value;
          }
        }

        /// <summary>Field number for the "player_profession_gmt_id" field.</summary>
        public const int PlayerProfessionGmtIdFieldNumber = 4;
        private string playerProfessionGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerProfessionGmtId {
          get { return playerProfessionGmtId_; }
          set {
            playerProfessionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_mob_already_engaged" field.</summary>
        public const int IsMobAlreadyEngagedFieldNumber = 5;
        private global::WUProtos.Enums.ActiveEngagement isMobAlreadyEngaged_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.ActiveEngagement IsMobAlreadyEngaged {
          get { return isMobAlreadyEngaged_; }
          set {
            isMobAlreadyEngaged_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryWizardingChallengeMoreInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryWizardingChallengeMoreInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MobLevel != other.MobLevel) return false;
          if (MobAffinity != other.MobAffinity) return false;
          if (PlayerProfessionRank != other.PlayerProfessionRank) return false;
          if (PlayerProfessionGmtId != other.PlayerProfessionGmtId) return false;
          if (IsMobAlreadyEngaged != other.IsMobAlreadyEngaged) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MobLevel != 0) hash ^= MobLevel.GetHashCode();
          if (MobAffinity.Length != 0) hash ^= MobAffinity.GetHashCode();
          if (PlayerProfessionRank != 0) hash ^= PlayerProfessionRank.GetHashCode();
          if (PlayerProfessionGmtId.Length != 0) hash ^= PlayerProfessionGmtId.GetHashCode();
          if (IsMobAlreadyEngaged != 0) hash ^= IsMobAlreadyEngaged.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MobLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MobLevel);
          }
          if (MobAffinity.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(MobAffinity);
          }
          if (PlayerProfessionRank != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PlayerProfessionRank);
          }
          if (PlayerProfessionGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(PlayerProfessionGmtId);
          }
          if (IsMobAlreadyEngaged != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) IsMobAlreadyEngaged);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MobLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MobLevel);
          }
          if (MobAffinity.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MobAffinity);
          }
          if (PlayerProfessionRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerProfessionRank);
          }
          if (PlayerProfessionGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerProfessionGmtId);
          }
          if (IsMobAlreadyEngaged != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsMobAlreadyEngaged);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryWizardingChallengeMoreInfo other) {
          if (other == null) {
            return;
          }
          if (other.MobLevel != 0) {
            MobLevel = other.MobLevel;
          }
          if (other.MobAffinity.Length != 0) {
            MobAffinity = other.MobAffinity;
          }
          if (other.PlayerProfessionRank != 0) {
            PlayerProfessionRank = other.PlayerProfessionRank;
          }
          if (other.PlayerProfessionGmtId.Length != 0) {
            PlayerProfessionGmtId = other.PlayerProfessionGmtId;
          }
          if (other.IsMobAlreadyEngaged != 0) {
            IsMobAlreadyEngaged = other.IsMobAlreadyEngaged;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MobLevel = input.ReadInt32();
                break;
              }
              case 18: {
                MobAffinity = input.ReadString();
                break;
              }
              case 24: {
                PlayerProfessionRank = input.ReadInt32();
                break;
              }
              case 34: {
                PlayerProfessionGmtId = input.ReadString();
                break;
              }
              case 40: {
                IsMobAlreadyEngaged = (global::WUProtos.Enums.ActiveEngagement) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryStartup : pb::IMessage<ClientTelemetryStartup> {
        private static readonly pb::MessageParser<ClientTelemetryStartup> _parser = new pb::MessageParser<ClientTelemetryStartup>(() => new ClientTelemetryStartup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryStartup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStartup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStartup(ClientTelemetryStartup other) : this() {
          clientVersion_ = other.clientVersion_;
          deviceType_ = other.deviceType_;
          firstTime_ = other.firstTime_;
          loadToTosLoginTime_ = other.loadToTosLoginTime_;
          loadToMapTime_ = other.loadToMapTime_;
          deviceOs_ = other.deviceOs_;
          graphicsDeviceVendor_ = other.graphicsDeviceVendor_;
          graphicsDeviceName_ = other.graphicsDeviceName_;
          graphicsDeviceType_ = other.graphicsDeviceType_;
          graphicsShaderLevel_ = other.graphicsShaderLevel_;
          subsystemLoadTimes_ = other.subsystemLoadTimes_.Clone();
          playerNickname_ = other.playerNickname_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStartup Clone() {
          return new ClientTelemetryStartup(this);
        }

        /// <summary>Field number for the "client_version" field.</summary>
        public const int ClientVersionFieldNumber = 2;
        private string clientVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientVersion {
          get { return clientVersion_; }
          set {
            clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "device_type" field.</summary>
        public const int DeviceTypeFieldNumber = 3;
        private string deviceType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceType {
          get { return deviceType_; }
          set {
            deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "first_time" field.</summary>
        public const int FirstTimeFieldNumber = 4;
        private bool firstTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FirstTime {
          get { return firstTime_; }
          set {
            firstTime_ = value;
          }
        }

        /// <summary>Field number for the "load_to_tos_login_time" field.</summary>
        public const int LoadToTosLoginTimeFieldNumber = 5;
        private double loadToTosLoginTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LoadToTosLoginTime {
          get { return loadToTosLoginTime_; }
          set {
            loadToTosLoginTime_ = value;
          }
        }

        /// <summary>Field number for the "load_to_map_time" field.</summary>
        public const int LoadToMapTimeFieldNumber = 6;
        private double loadToMapTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LoadToMapTime {
          get { return loadToMapTime_; }
          set {
            loadToMapTime_ = value;
          }
        }

        /// <summary>Field number for the "device_os" field.</summary>
        public const int DeviceOsFieldNumber = 7;
        private string deviceOs_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceOs {
          get { return deviceOs_; }
          set {
            deviceOs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "graphics_device_vendor" field.</summary>
        public const int GraphicsDeviceVendorFieldNumber = 8;
        private string graphicsDeviceVendor_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GraphicsDeviceVendor {
          get { return graphicsDeviceVendor_; }
          set {
            graphicsDeviceVendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "graphics_device_name" field.</summary>
        public const int GraphicsDeviceNameFieldNumber = 9;
        private string graphicsDeviceName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GraphicsDeviceName {
          get { return graphicsDeviceName_; }
          set {
            graphicsDeviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "graphics_device_type" field.</summary>
        public const int GraphicsDeviceTypeFieldNumber = 10;
        private string graphicsDeviceType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GraphicsDeviceType {
          get { return graphicsDeviceType_; }
          set {
            graphicsDeviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "graphics_shader_level" field.</summary>
        public const int GraphicsShaderLevelFieldNumber = 11;
        private double graphicsShaderLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GraphicsShaderLevel {
          get { return graphicsShaderLevel_; }
          set {
            graphicsShaderLevel_ = value;
          }
        }

        /// <summary>Field number for the "subsystem_load_times" field.</summary>
        public const int SubsystemLoadTimesFieldNumber = 12;
        private static readonly pb::FieldCodec<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup> _repeated_subsystemLoadTimes_codec
            = pb::FieldCodec.ForMessage(98, global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup> subsystemLoadTimes_ = new pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Types.ClientTelemetrySubsystemStartup> SubsystemLoadTimes {
          get { return subsystemLoadTimes_; }
        }

        /// <summary>Field number for the "player_nickname" field.</summary>
        public const int PlayerNicknameFieldNumber = 13;
        private string playerNickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerNickname {
          get { return playerNickname_; }
          set {
            playerNickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryStartup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryStartup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClientVersion != other.ClientVersion) return false;
          if (DeviceType != other.DeviceType) return false;
          if (FirstTime != other.FirstTime) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LoadToTosLoginTime, other.LoadToTosLoginTime)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LoadToMapTime, other.LoadToMapTime)) return false;
          if (DeviceOs != other.DeviceOs) return false;
          if (GraphicsDeviceVendor != other.GraphicsDeviceVendor) return false;
          if (GraphicsDeviceName != other.GraphicsDeviceName) return false;
          if (GraphicsDeviceType != other.GraphicsDeviceType) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GraphicsShaderLevel, other.GraphicsShaderLevel)) return false;
          if(!subsystemLoadTimes_.Equals(other.subsystemLoadTimes_)) return false;
          if (PlayerNickname != other.PlayerNickname) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
          if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
          if (FirstTime != false) hash ^= FirstTime.GetHashCode();
          if (LoadToTosLoginTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LoadToTosLoginTime);
          if (LoadToMapTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LoadToMapTime);
          if (DeviceOs.Length != 0) hash ^= DeviceOs.GetHashCode();
          if (GraphicsDeviceVendor.Length != 0) hash ^= GraphicsDeviceVendor.GetHashCode();
          if (GraphicsDeviceName.Length != 0) hash ^= GraphicsDeviceName.GetHashCode();
          if (GraphicsDeviceType.Length != 0) hash ^= GraphicsDeviceType.GetHashCode();
          if (GraphicsShaderLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GraphicsShaderLevel);
          hash ^= subsystemLoadTimes_.GetHashCode();
          if (PlayerNickname.Length != 0) hash ^= PlayerNickname.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ClientVersion.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClientVersion);
          }
          if (DeviceType.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DeviceType);
          }
          if (FirstTime != false) {
            output.WriteRawTag(32);
            output.WriteBool(FirstTime);
          }
          if (LoadToTosLoginTime != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(LoadToTosLoginTime);
          }
          if (LoadToMapTime != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(LoadToMapTime);
          }
          if (DeviceOs.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(DeviceOs);
          }
          if (GraphicsDeviceVendor.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(GraphicsDeviceVendor);
          }
          if (GraphicsDeviceName.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(GraphicsDeviceName);
          }
          if (GraphicsDeviceType.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(GraphicsDeviceType);
          }
          if (GraphicsShaderLevel != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(GraphicsShaderLevel);
          }
          subsystemLoadTimes_.WriteTo(output, _repeated_subsystemLoadTimes_codec);
          if (PlayerNickname.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(PlayerNickname);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ClientVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
          }
          if (DeviceType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
          }
          if (FirstTime != false) {
            size += 1 + 1;
          }
          if (LoadToTosLoginTime != 0D) {
            size += 1 + 8;
          }
          if (LoadToMapTime != 0D) {
            size += 1 + 8;
          }
          if (DeviceOs.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceOs);
          }
          if (GraphicsDeviceVendor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsDeviceVendor);
          }
          if (GraphicsDeviceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsDeviceName);
          }
          if (GraphicsDeviceType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsDeviceType);
          }
          if (GraphicsShaderLevel != 0D) {
            size += 1 + 8;
          }
          size += subsystemLoadTimes_.CalculateSize(_repeated_subsystemLoadTimes_codec);
          if (PlayerNickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerNickname);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryStartup other) {
          if (other == null) {
            return;
          }
          if (other.ClientVersion.Length != 0) {
            ClientVersion = other.ClientVersion;
          }
          if (other.DeviceType.Length != 0) {
            DeviceType = other.DeviceType;
          }
          if (other.FirstTime != false) {
            FirstTime = other.FirstTime;
          }
          if (other.LoadToTosLoginTime != 0D) {
            LoadToTosLoginTime = other.LoadToTosLoginTime;
          }
          if (other.LoadToMapTime != 0D) {
            LoadToMapTime = other.LoadToMapTime;
          }
          if (other.DeviceOs.Length != 0) {
            DeviceOs = other.DeviceOs;
          }
          if (other.GraphicsDeviceVendor.Length != 0) {
            GraphicsDeviceVendor = other.GraphicsDeviceVendor;
          }
          if (other.GraphicsDeviceName.Length != 0) {
            GraphicsDeviceName = other.GraphicsDeviceName;
          }
          if (other.GraphicsDeviceType.Length != 0) {
            GraphicsDeviceType = other.GraphicsDeviceType;
          }
          if (other.GraphicsShaderLevel != 0D) {
            GraphicsShaderLevel = other.GraphicsShaderLevel;
          }
          subsystemLoadTimes_.Add(other.subsystemLoadTimes_);
          if (other.PlayerNickname.Length != 0) {
            PlayerNickname = other.PlayerNickname;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                ClientVersion = input.ReadString();
                break;
              }
              case 26: {
                DeviceType = input.ReadString();
                break;
              }
              case 32: {
                FirstTime = input.ReadBool();
                break;
              }
              case 41: {
                LoadToTosLoginTime = input.ReadDouble();
                break;
              }
              case 49: {
                LoadToMapTime = input.ReadDouble();
                break;
              }
              case 58: {
                DeviceOs = input.ReadString();
                break;
              }
              case 66: {
                GraphicsDeviceVendor = input.ReadString();
                break;
              }
              case 74: {
                GraphicsDeviceName = input.ReadString();
                break;
              }
              case 82: {
                GraphicsDeviceType = input.ReadString();
                break;
              }
              case 89: {
                GraphicsShaderLevel = input.ReadDouble();
                break;
              }
              case 98: {
                subsystemLoadTimes_.AddEntriesFrom(input, _repeated_subsystemLoadTimes_codec);
                break;
              }
              case 106: {
                PlayerNickname = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientTelemetryStartup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ClientTelemetrySubsystemStartup : pb::IMessage<ClientTelemetrySubsystemStartup> {
            private static readonly pb::MessageParser<ClientTelemetrySubsystemStartup> _parser = new pb::MessageParser<ClientTelemetrySubsystemStartup>(() => new ClientTelemetrySubsystemStartup());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ClientTelemetrySubsystemStartup> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryStartup.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClientTelemetrySubsystemStartup() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClientTelemetrySubsystemStartup(ClientTelemetrySubsystemStartup other) : this() {
              systemName_ = other.systemName_;
              loadTime_ = other.loadTime_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClientTelemetrySubsystemStartup Clone() {
              return new ClientTelemetrySubsystemStartup(this);
            }

            /// <summary>Field number for the "system_name" field.</summary>
            public const int SystemNameFieldNumber = 1;
            private string systemName_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SystemName {
              get { return systemName_; }
              set {
                systemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "load_time" field.</summary>
            public const int LoadTimeFieldNumber = 2;
            private float loadTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float LoadTime {
              get { return loadTime_; }
              set {
                loadTime_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ClientTelemetrySubsystemStartup);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ClientTelemetrySubsystemStartup other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SystemName != other.SystemName) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadTime, other.LoadTime)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SystemName.Length != 0) hash ^= SystemName.GetHashCode();
              if (LoadTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadTime);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SystemName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(SystemName);
              }
              if (LoadTime != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(LoadTime);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SystemName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemName);
              }
              if (LoadTime != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ClientTelemetrySubsystemStartup other) {
              if (other == null) {
                return;
              }
              if (other.SystemName.Length != 0) {
                SystemName = other.SystemName;
              }
              if (other.LoadTime != 0F) {
                LoadTime = other.LoadTime;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    SystemName = input.ReadString();
                    break;
                  }
                  case 21: {
                    LoadTime = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class ClientTelemetrySettingsARModeToggled : pb::IMessage<ClientTelemetrySettingsARModeToggled> {
        private static readonly pb::MessageParser<ClientTelemetrySettingsARModeToggled> _parser = new pb::MessageParser<ClientTelemetrySettingsARModeToggled>(() => new ClientTelemetrySettingsARModeToggled());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySettingsARModeToggled> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsARModeToggled() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsARModeToggled(ClientTelemetrySettingsARModeToggled other) : this() {
          arMode_ = other.arMode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsARModeToggled Clone() {
          return new ClientTelemetrySettingsARModeToggled(this);
        }

        /// <summary>Field number for the "ar_mode" field.</summary>
        public const int ArModeFieldNumber = 1;
        private global::WUProtos.Data.ARMode arMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ARMode ArMode {
          get { return arMode_; }
          set {
            arMode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySettingsARModeToggled);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySettingsARModeToggled other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ArMode != other.ArMode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ArMode != 0) hash ^= ArMode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ArMode != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ArMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ArMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ArMode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySettingsARModeToggled other) {
          if (other == null) {
            return;
          }
          if (other.ArMode != 0) {
            ArMode = other.ArMode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ArMode = (global::WUProtos.Data.ARMode) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryProfileScreenGrab : pb::IMessage<ClientTelemetryProfileScreenGrab> {
        private static readonly pb::MessageParser<ClientTelemetryProfileScreenGrab> _parser = new pb::MessageParser<ClientTelemetryProfileScreenGrab>(() => new ClientTelemetryProfileScreenGrab());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfileScreenGrab> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileScreenGrab() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileScreenGrab(ClientTelemetryProfileScreenGrab other) : this() {
          screengrabLocation_ = other.screengrabLocation_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileScreenGrab Clone() {
          return new ClientTelemetryProfileScreenGrab(this);
        }

        /// <summary>Field number for the "screengrab_location" field.</summary>
        public const int ScreengrabLocationFieldNumber = 1;
        private global::WUProtos.Enums.CategoryShareLocation screengrabLocation_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.CategoryShareLocation ScreengrabLocation {
          get { return screengrabLocation_; }
          set {
            screengrabLocation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfileScreenGrab);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfileScreenGrab other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ScreengrabLocation != other.ScreengrabLocation) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ScreengrabLocation != 0) hash ^= ScreengrabLocation.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ScreengrabLocation != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ScreengrabLocation);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ScreengrabLocation != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScreengrabLocation);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfileScreenGrab other) {
          if (other == null) {
            return;
          }
          if (other.ScreengrabLocation != 0) {
            ScreengrabLocation = other.ScreengrabLocation;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ScreengrabLocation = (global::WUProtos.Enums.CategoryShareLocation) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryProfilePortraitAction : pb::IMessage<ClientTelemetryProfilePortraitAction> {
        private static readonly pb::MessageParser<ClientTelemetryProfilePortraitAction> _parser = new pb::MessageParser<ClientTelemetryProfilePortraitAction>(() => new ClientTelemetryProfilePortraitAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfilePortraitAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfilePortraitAction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfilePortraitAction(ClientTelemetryProfilePortraitAction other) : this() {
          baselineSrc_ = other.baselineSrc_;
          portraitFormat_ = other.portraitFormat_;
          portraitAction_ = other.portraitAction_;
          portraitLensTop_ = other.portraitLensTop_;
          portraitLensMid_ = other.portraitLensMid_;
          portraitLensBottom_ = other.portraitLensBottom_;
          portraitFrame_ = other.portraitFrame_;
          portraitFilter_ = other.portraitFilter_;
          portraitStickerIds_ = other.portraitStickerIds_.Clone();
          portraitStickerCount_ = other.portraitStickerCount_;
          shareSource_ = other.shareSource_;
          shareType_ = other.shareType_;
          shareNetwork_ = other.shareNetwork_;
          downloadSource_ = other.downloadSource_;
          downloadType_ = other.downloadType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfilePortraitAction Clone() {
          return new ClientTelemetryProfilePortraitAction(this);
        }

        /// <summary>Field number for the "baseline_src" field.</summary>
        public const int BaselineSrcFieldNumber = 1;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.ProfileTabSource baselineSrc_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.ProfileTabSource BaselineSrc {
          get { return baselineSrc_; }
          set {
            baselineSrc_ = value;
          }
        }

        /// <summary>Field number for the "portrait_format" field.</summary>
        public const int PortraitFormatFieldNumber = 2;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitType portraitFormat_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitType PortraitFormat {
          get { return portraitFormat_; }
          set {
            portraitFormat_ = value;
          }
        }

        /// <summary>Field number for the "portrait_action" field.</summary>
        public const int PortraitActionFieldNumber = 3;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitAction portraitAction_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitAction PortraitAction {
          get { return portraitAction_; }
          set {
            portraitAction_ = value;
          }
        }

        /// <summary>Field number for the "portrait_lens_top" field.</summary>
        public const int PortraitLensTopFieldNumber = 4;
        private string portraitLensTop_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortraitLensTop {
          get { return portraitLensTop_; }
          set {
            portraitLensTop_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portrait_lens_mid" field.</summary>
        public const int PortraitLensMidFieldNumber = 5;
        private string portraitLensMid_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortraitLensMid {
          get { return portraitLensMid_; }
          set {
            portraitLensMid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portrait_lens_bottom" field.</summary>
        public const int PortraitLensBottomFieldNumber = 6;
        private string portraitLensBottom_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortraitLensBottom {
          get { return portraitLensBottom_; }
          set {
            portraitLensBottom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portrait_frame" field.</summary>
        public const int PortraitFrameFieldNumber = 7;
        private string portraitFrame_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortraitFrame {
          get { return portraitFrame_; }
          set {
            portraitFrame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portrait_filter" field.</summary>
        public const int PortraitFilterFieldNumber = 8;
        private string portraitFilter_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortraitFilter {
          get { return portraitFilter_; }
          set {
            portraitFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portrait_sticker_ids" field.</summary>
        public const int PortraitStickerIdsFieldNumber = 9;
        private static readonly pb::FieldCodec<string> _repeated_portraitStickerIds_codec
            = pb::FieldCodec.ForString(74);
        private readonly pbc::RepeatedField<string> portraitStickerIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> PortraitStickerIds {
          get { return portraitStickerIds_; }
        }

        /// <summary>Field number for the "portrait_sticker_count" field.</summary>
        public const int PortraitStickerCountFieldNumber = 10;
        private int portraitStickerCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PortraitStickerCount {
          get { return portraitStickerCount_; }
          set {
            portraitStickerCount_ = value;
          }
        }

        /// <summary>Field number for the "share_source" field.</summary>
        public const int ShareSourceFieldNumber = 11;
        private global::WUProtos.Enums.CategoryShareLocation shareSource_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.CategoryShareLocation ShareSource {
          get { return shareSource_; }
          set {
            shareSource_ = value;
          }
        }

        /// <summary>Field number for the "share_type" field.</summary>
        public const int ShareTypeFieldNumber = 12;
        private global::WUProtos.Enums.DownloadType shareType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.DownloadType ShareType {
          get { return shareType_; }
          set {
            shareType_ = value;
          }
        }

        /// <summary>Field number for the "share_network" field.</summary>
        public const int ShareNetworkFieldNumber = 13;
        private string shareNetwork_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShareNetwork {
          get { return shareNetwork_; }
          set {
            shareNetwork_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "download_source" field.</summary>
        public const int DownloadSourceFieldNumber = 14;
        private global::WUProtos.Enums.CategoryShareLocation downloadSource_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.CategoryShareLocation DownloadSource {
          get { return downloadSource_; }
          set {
            downloadSource_ = value;
          }
        }

        /// <summary>Field number for the "download_type" field.</summary>
        public const int DownloadTypeFieldNumber = 15;
        private global::WUProtos.Enums.DownloadType downloadType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.DownloadType DownloadType {
          get { return downloadType_; }
          set {
            downloadType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfilePortraitAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfilePortraitAction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BaselineSrc != other.BaselineSrc) return false;
          if (PortraitFormat != other.PortraitFormat) return false;
          if (PortraitAction != other.PortraitAction) return false;
          if (PortraitLensTop != other.PortraitLensTop) return false;
          if (PortraitLensMid != other.PortraitLensMid) return false;
          if (PortraitLensBottom != other.PortraitLensBottom) return false;
          if (PortraitFrame != other.PortraitFrame) return false;
          if (PortraitFilter != other.PortraitFilter) return false;
          if(!portraitStickerIds_.Equals(other.portraitStickerIds_)) return false;
          if (PortraitStickerCount != other.PortraitStickerCount) return false;
          if (ShareSource != other.ShareSource) return false;
          if (ShareType != other.ShareType) return false;
          if (ShareNetwork != other.ShareNetwork) return false;
          if (DownloadSource != other.DownloadSource) return false;
          if (DownloadType != other.DownloadType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BaselineSrc != 0) hash ^= BaselineSrc.GetHashCode();
          if (PortraitFormat != 0) hash ^= PortraitFormat.GetHashCode();
          if (PortraitAction != 0) hash ^= PortraitAction.GetHashCode();
          if (PortraitLensTop.Length != 0) hash ^= PortraitLensTop.GetHashCode();
          if (PortraitLensMid.Length != 0) hash ^= PortraitLensMid.GetHashCode();
          if (PortraitLensBottom.Length != 0) hash ^= PortraitLensBottom.GetHashCode();
          if (PortraitFrame.Length != 0) hash ^= PortraitFrame.GetHashCode();
          if (PortraitFilter.Length != 0) hash ^= PortraitFilter.GetHashCode();
          hash ^= portraitStickerIds_.GetHashCode();
          if (PortraitStickerCount != 0) hash ^= PortraitStickerCount.GetHashCode();
          if (ShareSource != 0) hash ^= ShareSource.GetHashCode();
          if (ShareType != 0) hash ^= ShareType.GetHashCode();
          if (ShareNetwork.Length != 0) hash ^= ShareNetwork.GetHashCode();
          if (DownloadSource != 0) hash ^= DownloadSource.GetHashCode();
          if (DownloadType != 0) hash ^= DownloadType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BaselineSrc != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) BaselineSrc);
          }
          if (PortraitFormat != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) PortraitFormat);
          }
          if (PortraitAction != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) PortraitAction);
          }
          if (PortraitLensTop.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(PortraitLensTop);
          }
          if (PortraitLensMid.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(PortraitLensMid);
          }
          if (PortraitLensBottom.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(PortraitLensBottom);
          }
          if (PortraitFrame.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(PortraitFrame);
          }
          if (PortraitFilter.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(PortraitFilter);
          }
          portraitStickerIds_.WriteTo(output, _repeated_portraitStickerIds_codec);
          if (PortraitStickerCount != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(PortraitStickerCount);
          }
          if (ShareSource != 0) {
            output.WriteRawTag(88);
            output.WriteEnum((int) ShareSource);
          }
          if (ShareType != 0) {
            output.WriteRawTag(96);
            output.WriteEnum((int) ShareType);
          }
          if (ShareNetwork.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ShareNetwork);
          }
          if (DownloadSource != 0) {
            output.WriteRawTag(112);
            output.WriteEnum((int) DownloadSource);
          }
          if (DownloadType != 0) {
            output.WriteRawTag(120);
            output.WriteEnum((int) DownloadType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BaselineSrc != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BaselineSrc);
          }
          if (PortraitFormat != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PortraitFormat);
          }
          if (PortraitAction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PortraitAction);
          }
          if (PortraitLensTop.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitLensTop);
          }
          if (PortraitLensMid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitLensMid);
          }
          if (PortraitLensBottom.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitLensBottom);
          }
          if (PortraitFrame.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitFrame);
          }
          if (PortraitFilter.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitFilter);
          }
          size += portraitStickerIds_.CalculateSize(_repeated_portraitStickerIds_codec);
          if (PortraitStickerCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortraitStickerCount);
          }
          if (ShareSource != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShareSource);
          }
          if (ShareType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShareType);
          }
          if (ShareNetwork.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ShareNetwork);
          }
          if (DownloadSource != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DownloadSource);
          }
          if (DownloadType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DownloadType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfilePortraitAction other) {
          if (other == null) {
            return;
          }
          if (other.BaselineSrc != 0) {
            BaselineSrc = other.BaselineSrc;
          }
          if (other.PortraitFormat != 0) {
            PortraitFormat = other.PortraitFormat;
          }
          if (other.PortraitAction != 0) {
            PortraitAction = other.PortraitAction;
          }
          if (other.PortraitLensTop.Length != 0) {
            PortraitLensTop = other.PortraitLensTop;
          }
          if (other.PortraitLensMid.Length != 0) {
            PortraitLensMid = other.PortraitLensMid;
          }
          if (other.PortraitLensBottom.Length != 0) {
            PortraitLensBottom = other.PortraitLensBottom;
          }
          if (other.PortraitFrame.Length != 0) {
            PortraitFrame = other.PortraitFrame;
          }
          if (other.PortraitFilter.Length != 0) {
            PortraitFilter = other.PortraitFilter;
          }
          portraitStickerIds_.Add(other.portraitStickerIds_);
          if (other.PortraitStickerCount != 0) {
            PortraitStickerCount = other.PortraitStickerCount;
          }
          if (other.ShareSource != 0) {
            ShareSource = other.ShareSource;
          }
          if (other.ShareType != 0) {
            ShareType = other.ShareType;
          }
          if (other.ShareNetwork.Length != 0) {
            ShareNetwork = other.ShareNetwork;
          }
          if (other.DownloadSource != 0) {
            DownloadSource = other.DownloadSource;
          }
          if (other.DownloadType != 0) {
            DownloadType = other.DownloadType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BaselineSrc = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.ProfileTabSource) input.ReadEnum();
                break;
              }
              case 16: {
                PortraitFormat = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitType) input.ReadEnum();
                break;
              }
              case 24: {
                PortraitAction = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfilePortraitAction.Types.PortraitAction) input.ReadEnum();
                break;
              }
              case 34: {
                PortraitLensTop = input.ReadString();
                break;
              }
              case 42: {
                PortraitLensMid = input.ReadString();
                break;
              }
              case 50: {
                PortraitLensBottom = input.ReadString();
                break;
              }
              case 58: {
                PortraitFrame = input.ReadString();
                break;
              }
              case 66: {
                PortraitFilter = input.ReadString();
                break;
              }
              case 74: {
                portraitStickerIds_.AddEntriesFrom(input, _repeated_portraitStickerIds_codec);
                break;
              }
              case 80: {
                PortraitStickerCount = input.ReadInt32();
                break;
              }
              case 88: {
                ShareSource = (global::WUProtos.Enums.CategoryShareLocation) input.ReadEnum();
                break;
              }
              case 96: {
                ShareType = (global::WUProtos.Enums.DownloadType) input.ReadEnum();
                break;
              }
              case 106: {
                ShareNetwork = input.ReadString();
                break;
              }
              case 112: {
                DownloadSource = (global::WUProtos.Enums.CategoryShareLocation) input.ReadEnum();
                break;
              }
              case 120: {
                DownloadType = (global::WUProtos.Enums.DownloadType) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientTelemetryProfilePortraitAction message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum PortraitAction {
            [pbr::OriginalName("PORTRATE_ACTION_UNSET")] PortrateActionUnset = 0,
            [pbr::OriginalName("PORTRAIT_ACTION_SAVE")] Save = 1,
            [pbr::OriginalName("PORTRAIT_ACTION_DOWNLOAD")] Download = 2,
            [pbr::OriginalName("PORTRAIT_ACTION_SHARE")] Share = 3,
          }

          public enum PortraitType {
            [pbr::OriginalName("PORTRAIT_TYPE_UNSET")] Unset = 0,
            [pbr::OriginalName("PORTRAIT_PHOTO")] PortraitPhoto = 1,
            [pbr::OriginalName("PORTRAIT_VIDEO")] PortraitVideo = 2,
          }

          public enum ProfileTabSource {
            [pbr::OriginalName("PROFILE_TAB_SOURCE_UNSET")] Unset = 0,
            [pbr::OriginalName("TAB_NEW")] TabNew = 1,
            [pbr::OriginalName("TAB_LAST_PHOTO")] TabLastPhoto = 2,
            [pbr::OriginalName("TAB_STOCK_PHOTO")] TabStockPhoto = 3,
            [pbr::OriginalName("TAB_GALLERY")] TabGallery = 4,
          }

        }
        #endregion

      }

      public sealed partial class ClientTelemetryProfessionProgress : pb::IMessage<ClientTelemetryProfessionProgress> {
        private static readonly pb::MessageParser<ClientTelemetryProfessionProgress> _parser = new pb::MessageParser<ClientTelemetryProfessionProgress>(() => new ClientTelemetryProfessionProgress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfessionProgress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionProgress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionProgress(ClientTelemetryProfessionProgress other) : this() {
          professionGmtId_ = other.professionGmtId_;
          rankPoints_ = other.rankPoints_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionProgress Clone() {
          return new ClientTelemetryProfessionProgress(this);
        }

        /// <summary>Field number for the "profession_gmt_id" field.</summary>
        public const int ProfessionGmtIdFieldNumber = 1;
        private string professionGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProfessionGmtId {
          get { return professionGmtId_; }
          set {
            professionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rank_points" field.</summary>
        public const int RankPointsFieldNumber = 2;
        private uint rankPoints_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RankPoints {
          get { return rankPoints_; }
          set {
            rankPoints_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfessionProgress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfessionProgress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ProfessionGmtId != other.ProfessionGmtId) return false;
          if (RankPoints != other.RankPoints) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ProfessionGmtId.Length != 0) hash ^= ProfessionGmtId.GetHashCode();
          if (RankPoints != 0) hash ^= RankPoints.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ProfessionGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ProfessionGmtId);
          }
          if (RankPoints != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RankPoints);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ProfessionGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionGmtId);
          }
          if (RankPoints != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankPoints);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfessionProgress other) {
          if (other == null) {
            return;
          }
          if (other.ProfessionGmtId.Length != 0) {
            ProfessionGmtId = other.ProfessionGmtId;
          }
          if (other.RankPoints != 0) {
            RankPoints = other.RankPoints;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ProfessionGmtId = input.ReadString();
                break;
              }
              case 16: {
                RankPoints = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryProfessionNodeSelected : pb::IMessage<ClientTelemetryProfessionNodeSelected> {
        private static readonly pb::MessageParser<ClientTelemetryProfessionNodeSelected> _parser = new pb::MessageParser<ClientTelemetryProfessionNodeSelected>(() => new ClientTelemetryProfessionNodeSelected());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfessionNodeSelected> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionNodeSelected() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionNodeSelected(ClientTelemetryProfessionNodeSelected other) : this() {
          playerLevel_ = other.playerLevel_;
          activeProfessionGmtId_ = other.activeProfessionGmtId_;
          professionProgress_ = other.professionProgress_.Clone();
          nodeId_ = other.nodeId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionNodeSelected Clone() {
          return new ClientTelemetryProfessionNodeSelected(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "active_profession_gmt_id" field.</summary>
        public const int ActiveProfessionGmtIdFieldNumber = 2;
        private string activeProfessionGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ActiveProfessionGmtId {
          get { return activeProfessionGmtId_; }
          set {
            activeProfessionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "profession_progress" field.</summary>
        public const int ProfessionProgressFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress> _repeated_professionProgress_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress> professionProgress_ = new pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress> ProfessionProgress {
          get { return professionProgress_; }
        }

        /// <summary>Field number for the "node_id" field.</summary>
        public const int NodeIdFieldNumber = 4;
        private string nodeId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfessionNodeSelected);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfessionNodeSelected other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (ActiveProfessionGmtId != other.ActiveProfessionGmtId) return false;
          if(!professionProgress_.Equals(other.professionProgress_)) return false;
          if (NodeId != other.NodeId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (ActiveProfessionGmtId.Length != 0) hash ^= ActiveProfessionGmtId.GetHashCode();
          hash ^= professionProgress_.GetHashCode();
          if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (ActiveProfessionGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ActiveProfessionGmtId);
          }
          professionProgress_.WriteTo(output, _repeated_professionProgress_codec);
          if (NodeId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(NodeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (ActiveProfessionGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveProfessionGmtId);
          }
          size += professionProgress_.CalculateSize(_repeated_professionProgress_codec);
          if (NodeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfessionNodeSelected other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.ActiveProfessionGmtId.Length != 0) {
            ActiveProfessionGmtId = other.ActiveProfessionGmtId;
          }
          professionProgress_.Add(other.professionProgress_);
          if (other.NodeId.Length != 0) {
            NodeId = other.NodeId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                ActiveProfessionGmtId = input.ReadString();
                break;
              }
              case 26: {
                professionProgress_.AddEntriesFrom(input, _repeated_professionProgress_codec);
                break;
              }
              case 34: {
                NodeId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryProfessionMainMenu : pb::IMessage<ClientTelemetryProfessionMainMenu> {
        private static readonly pb::MessageParser<ClientTelemetryProfessionMainMenu> _parser = new pb::MessageParser<ClientTelemetryProfessionMainMenu>(() => new ClientTelemetryProfessionMainMenu());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfessionMainMenu> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionMainMenu() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionMainMenu(ClientTelemetryProfessionMainMenu other) : this() {
          playerLevel_ = other.playerLevel_;
          activeProfessionGmtId_ = other.activeProfessionGmtId_;
          professionProgress_ = other.professionProgress_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfessionMainMenu Clone() {
          return new ClientTelemetryProfessionMainMenu(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "active_profession_gmt_id" field.</summary>
        public const int ActiveProfessionGmtIdFieldNumber = 2;
        private string activeProfessionGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ActiveProfessionGmtId {
          get { return activeProfessionGmtId_; }
          set {
            activeProfessionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "profession_progress" field.</summary>
        public const int ProfessionProgressFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress> _repeated_professionProgress_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress> professionProgress_ = new pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfessionProgress> ProfessionProgress {
          get { return professionProgress_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfessionMainMenu);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfessionMainMenu other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (ActiveProfessionGmtId != other.ActiveProfessionGmtId) return false;
          if(!professionProgress_.Equals(other.professionProgress_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (ActiveProfessionGmtId.Length != 0) hash ^= ActiveProfessionGmtId.GetHashCode();
          hash ^= professionProgress_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (ActiveProfessionGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ActiveProfessionGmtId);
          }
          professionProgress_.WriteTo(output, _repeated_professionProgress_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (ActiveProfessionGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveProfessionGmtId);
          }
          size += professionProgress_.CalculateSize(_repeated_professionProgress_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfessionMainMenu other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.ActiveProfessionGmtId.Length != 0) {
            ActiveProfessionGmtId = other.ActiveProfessionGmtId;
          }
          professionProgress_.Add(other.professionProgress_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                ActiveProfessionGmtId = input.ReadString();
                break;
              }
              case 26: {
                professionProgress_.AddEntriesFrom(input, _repeated_professionProgress_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryOutpostInteract : pb::IMessage<ClientTelemetryOutpostInteract> {
        private static readonly pb::MessageParser<ClientTelemetryOutpostInteract> _parser = new pb::MessageParser<ClientTelemetryOutpostInteract>(() => new ClientTelemetryOutpostInteract());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryOutpostInteract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryOutpostInteract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryOutpostInteract(ClientTelemetryOutpostInteract other) : this() {
          outpostType_ = other.outpostType_;
          commonData_ = other.commonData_ != null ? other.commonData_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryOutpostInteract Clone() {
          return new ClientTelemetryOutpostInteract(this);
        }

        /// <summary>Field number for the "outpost_type" field.</summary>
        public const int OutpostTypeFieldNumber = 1;
        private string outpostType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OutpostType {
          get { return outpostType_; }
          set {
            outpostType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "common_data" field.</summary>
        public const int CommonDataFieldNumber = 2;
        private global::WUProtos.Data.POIInteract commonData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.POIInteract CommonData {
          get { return commonData_; }
          set {
            commonData_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryOutpostInteract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryOutpostInteract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OutpostType != other.OutpostType) return false;
          if (!object.Equals(CommonData, other.CommonData)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OutpostType.Length != 0) hash ^= OutpostType.GetHashCode();
          if (commonData_ != null) hash ^= CommonData.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OutpostType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(OutpostType);
          }
          if (commonData_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CommonData);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OutpostType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OutpostType);
          }
          if (commonData_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonData);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryOutpostInteract other) {
          if (other == null) {
            return;
          }
          if (other.OutpostType.Length != 0) {
            OutpostType = other.OutpostType;
          }
          if (other.commonData_ != null) {
            if (commonData_ == null) {
              CommonData = new global::WUProtos.Data.POIInteract();
            }
            CommonData.MergeFrom(other.CommonData);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                OutpostType = input.ReadString();
                break;
              }
              case 18: {
                if (commonData_ == null) {
                  CommonData = new global::WUProtos.Data.POIInteract();
                }
                input.ReadMessage(CommonData);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryLandmarkInteract : pb::IMessage<ClientTelemetryLandmarkInteract> {
        private static readonly pb::MessageParser<ClientTelemetryLandmarkInteract> _parser = new pb::MessageParser<ClientTelemetryLandmarkInteract>(() => new ClientTelemetryLandmarkInteract());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryLandmarkInteract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLandmarkInteract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLandmarkInteract(ClientTelemetryLandmarkInteract other) : this() {
          landmarkType_ = other.landmarkType_;
          commonData_ = other.commonData_ != null ? other.commonData_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLandmarkInteract Clone() {
          return new ClientTelemetryLandmarkInteract(this);
        }

        /// <summary>Field number for the "landmark_type" field.</summary>
        public const int LandmarkTypeFieldNumber = 1;
        private string landmarkType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LandmarkType {
          get { return landmarkType_; }
          set {
            landmarkType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "common_data" field.</summary>
        public const int CommonDataFieldNumber = 2;
        private global::WUProtos.Data.POIInteract commonData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.POIInteract CommonData {
          get { return commonData_; }
          set {
            commonData_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryLandmarkInteract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryLandmarkInteract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LandmarkType != other.LandmarkType) return false;
          if (!object.Equals(CommonData, other.CommonData)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LandmarkType.Length != 0) hash ^= LandmarkType.GetHashCode();
          if (commonData_ != null) hash ^= CommonData.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LandmarkType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LandmarkType);
          }
          if (commonData_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CommonData);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LandmarkType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LandmarkType);
          }
          if (commonData_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonData);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryLandmarkInteract other) {
          if (other == null) {
            return;
          }
          if (other.LandmarkType.Length != 0) {
            LandmarkType = other.LandmarkType;
          }
          if (other.commonData_ != null) {
            if (commonData_ == null) {
              CommonData = new global::WUProtos.Data.POIInteract();
            }
            CommonData.MergeFrom(other.CommonData);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                LandmarkType = input.ReadString();
                break;
              }
              case 18: {
                if (commonData_ == null) {
                  CommonData = new global::WUProtos.Data.POIInteract();
                }
                input.ReadMessage(CommonData);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryGreenhouseInteract : pb::IMessage<ClientTelemetryGreenhouseInteract> {
        private static readonly pb::MessageParser<ClientTelemetryGreenhouseInteract> _parser = new pb::MessageParser<ClientTelemetryGreenhouseInteract>(() => new ClientTelemetryGreenhouseInteract());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryGreenhouseInteract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryGreenhouseInteract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryGreenhouseInteract(ClientTelemetryGreenhouseInteract other) : this() {
          commonData_ = other.commonData_ != null ? other.commonData_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryGreenhouseInteract Clone() {
          return new ClientTelemetryGreenhouseInteract(this);
        }

        /// <summary>Field number for the "common_data" field.</summary>
        public const int CommonDataFieldNumber = 1;
        private global::WUProtos.Data.POIInteract commonData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.POIInteract CommonData {
          get { return commonData_; }
          set {
            commonData_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryGreenhouseInteract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryGreenhouseInteract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(CommonData, other.CommonData)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commonData_ != null) hash ^= CommonData.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commonData_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(CommonData);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commonData_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonData);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryGreenhouseInteract other) {
          if (other == null) {
            return;
          }
          if (other.commonData_ != null) {
            if (commonData_ == null) {
              CommonData = new global::WUProtos.Data.POIInteract();
            }
            CommonData.MergeFrom(other.CommonData);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (commonData_ == null) {
                  CommonData = new global::WUProtos.Data.POIInteract();
                }
                input.ReadMessage(CommonData);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryCombatGameProtegoCastAttempt : pb::IMessage<ClientTelemetryCombatGameProtegoCastAttempt> {
        private static readonly pb::MessageParser<ClientTelemetryCombatGameProtegoCastAttempt> _parser = new pb::MessageParser<ClientTelemetryCombatGameProtegoCastAttempt>(() => new ClientTelemetryCombatGameProtegoCastAttempt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryCombatGameProtegoCastAttempt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameProtegoCastAttempt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameProtegoCastAttempt(ClientTelemetryCombatGameProtegoCastAttempt other) : this() {
          playerLevel_ = other.playerLevel_;
          encounterId_ = other.encounterId_;
          spellId_ = other.spellId_;
          outcome_ = other.outcome_;
          checkpointFailRound_ = other.checkpointFailRound_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameProtegoCastAttempt Clone() {
          return new ClientTelemetryCombatGameProtegoCastAttempt(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 2;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spell_id" field.</summary>
        public const int SpellIdFieldNumber = 3;
        private string spellId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SpellId {
          get { return spellId_; }
          set {
            spellId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "outcome" field.</summary>
        public const int OutcomeFieldNumber = 4;
        private global::WUProtos.Enums.CombatPhaseOutcome outcome_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.CombatPhaseOutcome Outcome {
          get { return outcome_; }
          set {
            outcome_ = value;
          }
        }

        /// <summary>Field number for the "checkpoint_fail_round" field.</summary>
        public const int CheckpointFailRoundFieldNumber = 5;
        private int checkpointFailRound_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CheckpointFailRound {
          get { return checkpointFailRound_; }
          set {
            checkpointFailRound_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryCombatGameProtegoCastAttempt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryCombatGameProtegoCastAttempt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterId != other.EncounterId) return false;
          if (SpellId != other.SpellId) return false;
          if (Outcome != other.Outcome) return false;
          if (CheckpointFailRound != other.CheckpointFailRound) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (SpellId.Length != 0) hash ^= SpellId.GetHashCode();
          if (Outcome != 0) hash ^= Outcome.GetHashCode();
          if (CheckpointFailRound != 0) hash ^= CheckpointFailRound.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterId);
          }
          if (SpellId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(SpellId);
          }
          if (Outcome != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Outcome);
          }
          if (CheckpointFailRound != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CheckpointFailRound);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (SpellId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpellId);
          }
          if (Outcome != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
          }
          if (CheckpointFailRound != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointFailRound);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryCombatGameProtegoCastAttempt other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          if (other.SpellId.Length != 0) {
            SpellId = other.SpellId;
          }
          if (other.Outcome != 0) {
            Outcome = other.Outcome;
          }
          if (other.CheckpointFailRound != 0) {
            CheckpointFailRound = other.CheckpointFailRound;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                EncounterId = input.ReadString();
                break;
              }
              case 26: {
                SpellId = input.ReadString();
                break;
              }
              case 32: {
                Outcome = (global::WUProtos.Enums.CombatPhaseOutcome) input.ReadEnum();
                break;
              }
              case 40: {
                CheckpointFailRound = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryCombatGameOffensiveTraceAttempt : pb::IMessage<ClientTelemetryCombatGameOffensiveTraceAttempt> {
        private static readonly pb::MessageParser<ClientTelemetryCombatGameOffensiveTraceAttempt> _parser = new pb::MessageParser<ClientTelemetryCombatGameOffensiveTraceAttempt>(() => new ClientTelemetryCombatGameOffensiveTraceAttempt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryCombatGameOffensiveTraceAttempt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOffensiveTraceAttempt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOffensiveTraceAttempt(ClientTelemetryCombatGameOffensiveTraceAttempt other) : this() {
          playerLevel_ = other.playerLevel_;
          encounterId_ = other.encounterId_;
          spellId_ = other.spellId_;
          outcome_ = other.outcome_;
          checkpointFailRound_ = other.checkpointFailRound_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOffensiveTraceAttempt Clone() {
          return new ClientTelemetryCombatGameOffensiveTraceAttempt(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 2;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spell_id" field.</summary>
        public const int SpellIdFieldNumber = 3;
        private string spellId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SpellId {
          get { return spellId_; }
          set {
            spellId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "outcome" field.</summary>
        public const int OutcomeFieldNumber = 4;
        private global::WUProtos.Enums.CombatPhaseOutcome outcome_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.CombatPhaseOutcome Outcome {
          get { return outcome_; }
          set {
            outcome_ = value;
          }
        }

        /// <summary>Field number for the "checkpoint_fail_round" field.</summary>
        public const int CheckpointFailRoundFieldNumber = 5;
        private int checkpointFailRound_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CheckpointFailRound {
          get { return checkpointFailRound_; }
          set {
            checkpointFailRound_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryCombatGameOffensiveTraceAttempt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryCombatGameOffensiveTraceAttempt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterId != other.EncounterId) return false;
          if (SpellId != other.SpellId) return false;
          if (Outcome != other.Outcome) return false;
          if (CheckpointFailRound != other.CheckpointFailRound) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (SpellId.Length != 0) hash ^= SpellId.GetHashCode();
          if (Outcome != 0) hash ^= Outcome.GetHashCode();
          if (CheckpointFailRound != 0) hash ^= CheckpointFailRound.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterId);
          }
          if (SpellId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(SpellId);
          }
          if (Outcome != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Outcome);
          }
          if (CheckpointFailRound != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CheckpointFailRound);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (SpellId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpellId);
          }
          if (Outcome != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
          }
          if (CheckpointFailRound != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointFailRound);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryCombatGameOffensiveTraceAttempt other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          if (other.SpellId.Length != 0) {
            SpellId = other.SpellId;
          }
          if (other.Outcome != 0) {
            Outcome = other.Outcome;
          }
          if (other.CheckpointFailRound != 0) {
            CheckpointFailRound = other.CheckpointFailRound;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                EncounterId = input.ReadString();
                break;
              }
              case 26: {
                SpellId = input.ReadString();
                break;
              }
              case 32: {
                Outcome = (global::WUProtos.Enums.CombatPhaseOutcome) input.ReadEnum();
                break;
              }
              case 40: {
                CheckpointFailRound = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryCombatGameOffensiveLockOnAttempt : pb::IMessage<ClientTelemetryCombatGameOffensiveLockOnAttempt> {
        private static readonly pb::MessageParser<ClientTelemetryCombatGameOffensiveLockOnAttempt> _parser = new pb::MessageParser<ClientTelemetryCombatGameOffensiveLockOnAttempt>(() => new ClientTelemetryCombatGameOffensiveLockOnAttempt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryCombatGameOffensiveLockOnAttempt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOffensiveLockOnAttempt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOffensiveLockOnAttempt(ClientTelemetryCombatGameOffensiveLockOnAttempt other) : this() {
          playerLevel_ = other.playerLevel_;
          encounterId_ = other.encounterId_;
          nodeLocation_ = other.nodeLocation_;
          outcome_ = other.outcome_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOffensiveLockOnAttempt Clone() {
          return new ClientTelemetryCombatGameOffensiveLockOnAttempt(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 2;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "node_location" field.</summary>
        public const int NodeLocationFieldNumber = 3;
        private string nodeLocation_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NodeLocation {
          get { return nodeLocation_; }
          set {
            nodeLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "outcome" field.</summary>
        public const int OutcomeFieldNumber = 4;
        private global::WUProtos.Enums.CombatPhaseOutcome outcome_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.CombatPhaseOutcome Outcome {
          get { return outcome_; }
          set {
            outcome_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryCombatGameOffensiveLockOnAttempt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryCombatGameOffensiveLockOnAttempt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterId != other.EncounterId) return false;
          if (NodeLocation != other.NodeLocation) return false;
          if (Outcome != other.Outcome) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (NodeLocation.Length != 0) hash ^= NodeLocation.GetHashCode();
          if (Outcome != 0) hash ^= Outcome.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterId);
          }
          if (NodeLocation.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(NodeLocation);
          }
          if (Outcome != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Outcome);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (NodeLocation.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeLocation);
          }
          if (Outcome != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryCombatGameOffensiveLockOnAttempt other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          if (other.NodeLocation.Length != 0) {
            NodeLocation = other.NodeLocation;
          }
          if (other.Outcome != 0) {
            Outcome = other.Outcome;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                EncounterId = input.ReadString();
                break;
              }
              case 26: {
                NodeLocation = input.ReadString();
                break;
              }
              case 32: {
                Outcome = (global::WUProtos.Enums.CombatPhaseOutcome) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryPortkeysAdvancedARCheck : pb::IMessage<ClientTelemetryPortkeysAdvancedARCheck> {
        private static readonly pb::MessageParser<ClientTelemetryPortkeysAdvancedARCheck> _parser = new pb::MessageParser<ClientTelemetryPortkeysAdvancedARCheck>(() => new ClientTelemetryPortkeysAdvancedARCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryPortkeysAdvancedARCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysAdvancedARCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysAdvancedARCheck(ClientTelemetryPortkeysAdvancedARCheck other) : this() {
          advancedArOn_ = other.advancedArOn_;
          portkeyId_ = other.portkeyId_;
          arMode_ = other.arMode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysAdvancedARCheck Clone() {
          return new ClientTelemetryPortkeysAdvancedARCheck(this);
        }

        /// <summary>Field number for the "advanced_ar_on" field.</summary>
        public const int AdvancedArOnFieldNumber = 1;
        private bool advancedArOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AdvancedArOn {
          get { return advancedArOn_; }
          set {
            advancedArOn_ = value;
          }
        }

        /// <summary>Field number for the "portkey_id" field.</summary>
        public const int PortkeyIdFieldNumber = 2;
        private string portkeyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortkeyId {
          get { return portkeyId_; }
          set {
            portkeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ar_mode" field.</summary>
        public const int ArModeFieldNumber = 3;
        private global::WUProtos.Data.ARMode arMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ARMode ArMode {
          get { return arMode_; }
          set {
            arMode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryPortkeysAdvancedARCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryPortkeysAdvancedARCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AdvancedArOn != other.AdvancedArOn) return false;
          if (PortkeyId != other.PortkeyId) return false;
          if (ArMode != other.ArMode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AdvancedArOn != false) hash ^= AdvancedArOn.GetHashCode();
          if (PortkeyId.Length != 0) hash ^= PortkeyId.GetHashCode();
          if (ArMode != 0) hash ^= ArMode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AdvancedArOn != false) {
            output.WriteRawTag(8);
            output.WriteBool(AdvancedArOn);
          }
          if (PortkeyId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PortkeyId);
          }
          if (ArMode != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) ArMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AdvancedArOn != false) {
            size += 1 + 1;
          }
          if (PortkeyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortkeyId);
          }
          if (ArMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ArMode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryPortkeysAdvancedARCheck other) {
          if (other == null) {
            return;
          }
          if (other.AdvancedArOn != false) {
            AdvancedArOn = other.AdvancedArOn;
          }
          if (other.PortkeyId.Length != 0) {
            PortkeyId = other.PortkeyId;
          }
          if (other.ArMode != 0) {
            ArMode = other.ArMode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AdvancedArOn = input.ReadBool();
                break;
              }
              case 18: {
                PortkeyId = input.ReadString();
                break;
              }
              case 24: {
                ArMode = (global::WUProtos.Data.ARMode) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryVaultTabImpression : pb::IMessage<ClientTelemetryVaultTabImpression> {
        private static readonly pb::MessageParser<ClientTelemetryVaultTabImpression> _parser = new pb::MessageParser<ClientTelemetryVaultTabImpression>(() => new ClientTelemetryVaultTabImpression());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryVaultTabImpression> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryVaultTabImpression() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryVaultTabImpression(ClientTelemetryVaultTabImpression other) : this() {
          categoryName_ = other.categoryName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryVaultTabImpression Clone() {
          return new ClientTelemetryVaultTabImpression(this);
        }

        /// <summary>Field number for the "category_name" field.</summary>
        public const int CategoryNameFieldNumber = 1;
        private string categoryName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CategoryName {
          get { return categoryName_; }
          set {
            categoryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryVaultTabImpression);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryVaultTabImpression other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CategoryName != other.CategoryName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CategoryName.Length != 0) hash ^= CategoryName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CategoryName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CategoryName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CategoryName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryVaultTabImpression other) {
          if (other == null) {
            return;
          }
          if (other.CategoryName.Length != 0) {
            CategoryName = other.CategoryName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CategoryName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryVaultItemImpression : pb::IMessage<ClientTelemetryVaultItemImpression> {
        private static readonly pb::MessageParser<ClientTelemetryVaultItemImpression> _parser = new pb::MessageParser<ClientTelemetryVaultItemImpression>(() => new ClientTelemetryVaultItemImpression());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryVaultItemImpression> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryVaultItemImpression() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryVaultItemImpression(ClientTelemetryVaultItemImpression other) : this() {
          vaultItemId_ = other.vaultItemId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryVaultItemImpression Clone() {
          return new ClientTelemetryVaultItemImpression(this);
        }

        /// <summary>Field number for the "vault_item_id" field.</summary>
        public const int VaultItemIdFieldNumber = 1;
        private string vaultItemId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VaultItemId {
          get { return vaultItemId_; }
          set {
            vaultItemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryVaultItemImpression);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryVaultItemImpression other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VaultItemId != other.VaultItemId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (VaultItemId.Length != 0) hash ^= VaultItemId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (VaultItemId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(VaultItemId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (VaultItemId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VaultItemId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryVaultItemImpression other) {
          if (other == null) {
            return;
          }
          if (other.VaultItemId.Length != 0) {
            VaultItemId = other.VaultItemId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VaultItemId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetrySwishSpellGameEnd : pb::IMessage<ClientTelemetrySwishSpellGameEnd> {
        private static readonly pb::MessageParser<ClientTelemetrySwishSpellGameEnd> _parser = new pb::MessageParser<ClientTelemetrySwishSpellGameEnd>(() => new ClientTelemetrySwishSpellGameEnd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySwishSpellGameEnd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySwishSpellGameEnd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySwishSpellGameEnd(ClientTelemetrySwishSpellGameEnd other) : this() {
          encounterId_ = other.encounterId_;
          attemptNumber_ = other.attemptNumber_;
          success_ = other.success_;
          failReason_ = other.failReason_;
          castTime_ = other.castTime_;
          failedCheckpointNumber_ = other.failedCheckpointNumber_;
          averageDrawingError_ = other.averageDrawingError_;
          medianDrawingError_ = other.medianDrawingError_;
          finalSpellbarScore_ = other.finalSpellbarScore_;
          encounterProtoId_ = other.encounterProtoId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySwishSpellGameEnd Clone() {
          return new ClientTelemetrySwishSpellGameEnd(this);
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 1;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "attempt_number" field.</summary>
        public const int AttemptNumberFieldNumber = 2;
        private int attemptNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttemptNumber {
          get { return attemptNumber_; }
          set {
            attemptNumber_ = value;
          }
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 3;
        private bool success_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Success {
          get { return success_; }
          set {
            success_ = value;
          }
        }

        /// <summary>Field number for the "fail_reason" field.</summary>
        public const int FailReasonFieldNumber = 4;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd.Types.FailReason failReason_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd.Types.FailReason FailReason {
          get { return failReason_; }
          set {
            failReason_ = value;
          }
        }

        /// <summary>Field number for the "cast_time" field.</summary>
        public const int CastTimeFieldNumber = 5;
        private double castTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double CastTime {
          get { return castTime_; }
          set {
            castTime_ = value;
          }
        }

        /// <summary>Field number for the "failed_checkpoint_number" field.</summary>
        public const int FailedCheckpointNumberFieldNumber = 6;
        private int failedCheckpointNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FailedCheckpointNumber {
          get { return failedCheckpointNumber_; }
          set {
            failedCheckpointNumber_ = value;
          }
        }

        /// <summary>Field number for the "average_drawing_error" field.</summary>
        public const int AverageDrawingErrorFieldNumber = 7;
        private double averageDrawingError_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AverageDrawingError {
          get { return averageDrawingError_; }
          set {
            averageDrawingError_ = value;
          }
        }

        /// <summary>Field number for the "median_drawing_error" field.</summary>
        public const int MedianDrawingErrorFieldNumber = 8;
        private double medianDrawingError_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MedianDrawingError {
          get { return medianDrawingError_; }
          set {
            medianDrawingError_ = value;
          }
        }

        /// <summary>Field number for the "final_spellbar_score" field.</summary>
        public const int FinalSpellbarScoreFieldNumber = 9;
        private double finalSpellbarScore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FinalSpellbarScore {
          get { return finalSpellbarScore_; }
          set {
            finalSpellbarScore_ = value;
          }
        }

        /// <summary>Field number for the "encounter_proto_id" field.</summary>
        public const int EncounterProtoIdFieldNumber = 10;
        private string encounterProtoId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterProtoId {
          get { return encounterProtoId_; }
          set {
            encounterProtoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySwishSpellGameEnd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySwishSpellGameEnd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EncounterId != other.EncounterId) return false;
          if (AttemptNumber != other.AttemptNumber) return false;
          if (Success != other.Success) return false;
          if (FailReason != other.FailReason) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CastTime, other.CastTime)) return false;
          if (FailedCheckpointNumber != other.FailedCheckpointNumber) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageDrawingError, other.AverageDrawingError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MedianDrawingError, other.MedianDrawingError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FinalSpellbarScore, other.FinalSpellbarScore)) return false;
          if (EncounterProtoId != other.EncounterProtoId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (AttemptNumber != 0) hash ^= AttemptNumber.GetHashCode();
          if (Success != false) hash ^= Success.GetHashCode();
          if (FailReason != 0) hash ^= FailReason.GetHashCode();
          if (CastTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CastTime);
          if (FailedCheckpointNumber != 0) hash ^= FailedCheckpointNumber.GetHashCode();
          if (AverageDrawingError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageDrawingError);
          if (MedianDrawingError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MedianDrawingError);
          if (FinalSpellbarScore != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FinalSpellbarScore);
          if (EncounterProtoId.Length != 0) hash ^= EncounterProtoId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EncounterId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EncounterId);
          }
          if (AttemptNumber != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AttemptNumber);
          }
          if (Success != false) {
            output.WriteRawTag(24);
            output.WriteBool(Success);
          }
          if (FailReason != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) FailReason);
          }
          if (CastTime != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(CastTime);
          }
          if (FailedCheckpointNumber != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(FailedCheckpointNumber);
          }
          if (AverageDrawingError != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(AverageDrawingError);
          }
          if (MedianDrawingError != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(MedianDrawingError);
          }
          if (FinalSpellbarScore != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(FinalSpellbarScore);
          }
          if (EncounterProtoId.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(EncounterProtoId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (AttemptNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttemptNumber);
          }
          if (Success != false) {
            size += 1 + 1;
          }
          if (FailReason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailReason);
          }
          if (CastTime != 0D) {
            size += 1 + 8;
          }
          if (FailedCheckpointNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailedCheckpointNumber);
          }
          if (AverageDrawingError != 0D) {
            size += 1 + 8;
          }
          if (MedianDrawingError != 0D) {
            size += 1 + 8;
          }
          if (FinalSpellbarScore != 0D) {
            size += 1 + 8;
          }
          if (EncounterProtoId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterProtoId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySwishSpellGameEnd other) {
          if (other == null) {
            return;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          if (other.AttemptNumber != 0) {
            AttemptNumber = other.AttemptNumber;
          }
          if (other.Success != false) {
            Success = other.Success;
          }
          if (other.FailReason != 0) {
            FailReason = other.FailReason;
          }
          if (other.CastTime != 0D) {
            CastTime = other.CastTime;
          }
          if (other.FailedCheckpointNumber != 0) {
            FailedCheckpointNumber = other.FailedCheckpointNumber;
          }
          if (other.AverageDrawingError != 0D) {
            AverageDrawingError = other.AverageDrawingError;
          }
          if (other.MedianDrawingError != 0D) {
            MedianDrawingError = other.MedianDrawingError;
          }
          if (other.FinalSpellbarScore != 0D) {
            FinalSpellbarScore = other.FinalSpellbarScore;
          }
          if (other.EncounterProtoId.Length != 0) {
            EncounterProtoId = other.EncounterProtoId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EncounterId = input.ReadString();
                break;
              }
              case 16: {
                AttemptNumber = input.ReadInt32();
                break;
              }
              case 24: {
                Success = input.ReadBool();
                break;
              }
              case 32: {
                FailReason = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetrySwishSpellGameEnd.Types.FailReason) input.ReadEnum();
                break;
              }
              case 41: {
                CastTime = input.ReadDouble();
                break;
              }
              case 48: {
                FailedCheckpointNumber = input.ReadInt32();
                break;
              }
              case 57: {
                AverageDrawingError = input.ReadDouble();
                break;
              }
              case 65: {
                MedianDrawingError = input.ReadDouble();
                break;
              }
              case 73: {
                FinalSpellbarScore = input.ReadDouble();
                break;
              }
              case 82: {
                EncounterProtoId = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientTelemetrySwishSpellGameEnd message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum FailReason {
            [pbr::OriginalName("none")] None = 0,
            [pbr::OriginalName("timer")] Timer = 1,
            [pbr::OriginalName("checkpoint")] Checkpoint = 2,
            [pbr::OriginalName("score")] Score = 3,
          }

        }
        #endregion

      }

      public sealed partial class ClientTelemetrySurfaceDetection : pb::IMessage<ClientTelemetrySurfaceDetection> {
        private static readonly pb::MessageParser<ClientTelemetrySurfaceDetection> _parser = new pb::MessageParser<ClientTelemetrySurfaceDetection>(() => new ClientTelemetrySurfaceDetection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySurfaceDetection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySurfaceDetection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySurfaceDetection(ClientTelemetrySurfaceDetection other) : this() {
          encounterGmtId_ = other.encounterGmtId_;
          foundSurface_ = other.foundSurface_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySurfaceDetection Clone() {
          return new ClientTelemetrySurfaceDetection(this);
        }

        /// <summary>Field number for the "encounter_gmt_id" field.</summary>
        public const int EncounterGmtIdFieldNumber = 1;
        private string encounterGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterGmtId {
          get { return encounterGmtId_; }
          set {
            encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "found_surface" field.</summary>
        public const int FoundSurfaceFieldNumber = 2;
        private bool foundSurface_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FoundSurface {
          get { return foundSurface_; }
          set {
            foundSurface_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySurfaceDetection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySurfaceDetection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EncounterGmtId != other.EncounterGmtId) return false;
          if (FoundSurface != other.FoundSurface) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
          if (FoundSurface != false) hash ^= FoundSurface.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EncounterGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EncounterGmtId);
          }
          if (FoundSurface != false) {
            output.WriteRawTag(16);
            output.WriteBool(FoundSurface);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EncounterGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
          }
          if (FoundSurface != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySurfaceDetection other) {
          if (other == null) {
            return;
          }
          if (other.EncounterGmtId.Length != 0) {
            EncounterGmtId = other.EncounterGmtId;
          }
          if (other.FoundSurface != false) {
            FoundSurface = other.FoundSurface;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EncounterGmtId = input.ReadString();
                break;
              }
              case 16: {
                FoundSurface = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryStoreTabOpen : pb::IMessage<ClientTelemetryStoreTabOpen> {
        private static readonly pb::MessageParser<ClientTelemetryStoreTabOpen> _parser = new pb::MessageParser<ClientTelemetryStoreTabOpen>(() => new ClientTelemetryStoreTabOpen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryStoreTabOpen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStoreTabOpen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStoreTabOpen(ClientTelemetryStoreTabOpen other) : this() {
          pageId_ = other.pageId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStoreTabOpen Clone() {
          return new ClientTelemetryStoreTabOpen(this);
        }

        /// <summary>Field number for the "page_id" field.</summary>
        public const int PageIdFieldNumber = 1;
        private string pageId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PageId {
          get { return pageId_; }
          set {
            pageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryStoreTabOpen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryStoreTabOpen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PageId != other.PageId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PageId.Length != 0) hash ^= PageId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PageId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PageId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PageId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PageId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryStoreTabOpen other) {
          if (other == null) {
            return;
          }
          if (other.PageId.Length != 0) {
            PageId = other.PageId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PageId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryStorePopupOpen : pb::IMessage<ClientTelemetryStorePopupOpen> {
        private static readonly pb::MessageParser<ClientTelemetryStorePopupOpen> _parser = new pb::MessageParser<ClientTelemetryStorePopupOpen>(() => new ClientTelemetryStorePopupOpen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryStorePopupOpen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStorePopupOpen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStorePopupOpen(ClientTelemetryStorePopupOpen other) : this() {
          packId_ = other.packId_;
          playerCanAfford_ = other.playerCanAfford_;
          currencyType_ = other.currencyType_.Clone();
          cost_ = other.cost_.Clone();
          playerWallet_ = other.playerWallet_.Clone();
          realMoneyCost_ = other.realMoneyCost_;
          realMoneyCurrencyCode_ = other.realMoneyCurrencyCode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStorePopupOpen Clone() {
          return new ClientTelemetryStorePopupOpen(this);
        }

        /// <summary>Field number for the "pack_id" field.</summary>
        public const int PackIdFieldNumber = 1;
        private string packId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PackId {
          get { return packId_; }
          set {
            packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "player_can_afford" field.</summary>
        public const int PlayerCanAffordFieldNumber = 2;
        private bool playerCanAfford_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PlayerCanAfford {
          get { return playerCanAfford_; }
          set {
            playerCanAfford_ = value;
          }
        }

        /// <summary>Field number for the "currency_type" field.</summary>
        public const int CurrencyTypeFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_currencyType_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> currencyType_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> CurrencyType {
          get { return currencyType_; }
        }

        /// <summary>Field number for the "cost" field.</summary>
        public const int CostFieldNumber = 4;
        private static readonly pb::FieldCodec<long> _repeated_cost_codec
            = pb::FieldCodec.ForInt64(34);
        private readonly pbc::RepeatedField<long> cost_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Cost {
          get { return cost_; }
        }

        /// <summary>Field number for the "player_wallet" field.</summary>
        public const int PlayerWalletFieldNumber = 5;
        private static readonly pb::FieldCodec<long> _repeated_playerWallet_codec
            = pb::FieldCodec.ForInt64(42);
        private readonly pbc::RepeatedField<long> playerWallet_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> PlayerWallet {
          get { return playerWallet_; }
        }

        /// <summary>Field number for the "real_money_cost" field.</summary>
        public const int RealMoneyCostFieldNumber = 6;
        private double realMoneyCost_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RealMoneyCost {
          get { return realMoneyCost_; }
          set {
            realMoneyCost_ = value;
          }
        }

        /// <summary>Field number for the "real_money_currency_code" field.</summary>
        public const int RealMoneyCurrencyCodeFieldNumber = 7;
        private string realMoneyCurrencyCode_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RealMoneyCurrencyCode {
          get { return realMoneyCurrencyCode_; }
          set {
            realMoneyCurrencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryStorePopupOpen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryStorePopupOpen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PackId != other.PackId) return false;
          if (PlayerCanAfford != other.PlayerCanAfford) return false;
          if(!currencyType_.Equals(other.currencyType_)) return false;
          if(!cost_.Equals(other.cost_)) return false;
          if(!playerWallet_.Equals(other.playerWallet_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RealMoneyCost, other.RealMoneyCost)) return false;
          if (RealMoneyCurrencyCode != other.RealMoneyCurrencyCode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PackId.Length != 0) hash ^= PackId.GetHashCode();
          if (PlayerCanAfford != false) hash ^= PlayerCanAfford.GetHashCode();
          hash ^= currencyType_.GetHashCode();
          hash ^= cost_.GetHashCode();
          hash ^= playerWallet_.GetHashCode();
          if (RealMoneyCost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RealMoneyCost);
          if (RealMoneyCurrencyCode.Length != 0) hash ^= RealMoneyCurrencyCode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PackId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PackId);
          }
          if (PlayerCanAfford != false) {
            output.WriteRawTag(16);
            output.WriteBool(PlayerCanAfford);
          }
          currencyType_.WriteTo(output, _repeated_currencyType_codec);
          cost_.WriteTo(output, _repeated_cost_codec);
          playerWallet_.WriteTo(output, _repeated_playerWallet_codec);
          if (RealMoneyCost != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(RealMoneyCost);
          }
          if (RealMoneyCurrencyCode.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(RealMoneyCurrencyCode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PackId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PackId);
          }
          if (PlayerCanAfford != false) {
            size += 1 + 1;
          }
          size += currencyType_.CalculateSize(_repeated_currencyType_codec);
          size += cost_.CalculateSize(_repeated_cost_codec);
          size += playerWallet_.CalculateSize(_repeated_playerWallet_codec);
          if (RealMoneyCost != 0D) {
            size += 1 + 8;
          }
          if (RealMoneyCurrencyCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RealMoneyCurrencyCode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryStorePopupOpen other) {
          if (other == null) {
            return;
          }
          if (other.PackId.Length != 0) {
            PackId = other.PackId;
          }
          if (other.PlayerCanAfford != false) {
            PlayerCanAfford = other.PlayerCanAfford;
          }
          currencyType_.Add(other.currencyType_);
          cost_.Add(other.cost_);
          playerWallet_.Add(other.playerWallet_);
          if (other.RealMoneyCost != 0D) {
            RealMoneyCost = other.RealMoneyCost;
          }
          if (other.RealMoneyCurrencyCode.Length != 0) {
            RealMoneyCurrencyCode = other.RealMoneyCurrencyCode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PackId = input.ReadString();
                break;
              }
              case 16: {
                PlayerCanAfford = input.ReadBool();
                break;
              }
              case 26: {
                currencyType_.AddEntriesFrom(input, _repeated_currencyType_codec);
                break;
              }
              case 34:
              case 32: {
                cost_.AddEntriesFrom(input, _repeated_cost_codec);
                break;
              }
              case 42:
              case 40: {
                playerWallet_.AddEntriesFrom(input, _repeated_playerWallet_codec);
                break;
              }
              case 49: {
                RealMoneyCost = input.ReadDouble();
                break;
              }
              case 58: {
                RealMoneyCurrencyCode = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryStopwatch : pb::IMessage<ClientTelemetryStopwatch> {
        private static readonly pb::MessageParser<ClientTelemetryStopwatch> _parser = new pb::MessageParser<ClientTelemetryStopwatch>(() => new ClientTelemetryStopwatch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryStopwatch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStopwatch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStopwatch(ClientTelemetryStopwatch other) : this() {
          eventName_ = other.eventName_;
          min_ = other.min_;
          max_ = other.max_;
          average_ = other.average_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStopwatch Clone() {
          return new ClientTelemetryStopwatch(this);
        }

        /// <summary>Field number for the "event_name" field.</summary>
        public const int EventNameFieldNumber = 1;
        private string eventName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventName {
          get { return eventName_; }
          set {
            eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 2;
        private double min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 3;
        private double max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        /// <summary>Field number for the "average" field.</summary>
        public const int AverageFieldNumber = 4;
        private double average_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Average {
          get { return average_; }
          set {
            average_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryStopwatch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryStopwatch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventName != other.EventName) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Average, other.Average)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EventName.Length != 0) hash ^= EventName.GetHashCode();
          if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
          if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
          if (Average != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Average);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EventName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EventName);
          }
          if (Min != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Min);
          }
          if (Max != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Max);
          }
          if (Average != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Average);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EventName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
          }
          if (Min != 0D) {
            size += 1 + 8;
          }
          if (Max != 0D) {
            size += 1 + 8;
          }
          if (Average != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryStopwatch other) {
          if (other == null) {
            return;
          }
          if (other.EventName.Length != 0) {
            EventName = other.EventName;
          }
          if (other.Min != 0D) {
            Min = other.Min;
          }
          if (other.Max != 0D) {
            Max = other.Max;
          }
          if (other.Average != 0D) {
            Average = other.Average;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EventName = input.ReadString();
                break;
              }
              case 17: {
                Min = input.ReadDouble();
                break;
              }
              case 25: {
                Max = input.ReadDouble();
                break;
              }
              case 33: {
                Average = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetrySettingsBatteryModeToggled : pb::IMessage<ClientTelemetrySettingsBatteryModeToggled> {
        private static readonly pb::MessageParser<ClientTelemetrySettingsBatteryModeToggled> _parser = new pb::MessageParser<ClientTelemetrySettingsBatteryModeToggled>(() => new ClientTelemetrySettingsBatteryModeToggled());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySettingsBatteryModeToggled> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsBatteryModeToggled() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsBatteryModeToggled(ClientTelemetrySettingsBatteryModeToggled other) : this() {
          batteryMode_ = other.batteryMode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsBatteryModeToggled Clone() {
          return new ClientTelemetrySettingsBatteryModeToggled(this);
        }

        /// <summary>Field number for the "battery_mode" field.</summary>
        public const int BatteryModeFieldNumber = 1;
        private bool batteryMode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BatteryMode {
          get { return batteryMode_; }
          set {
            batteryMode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySettingsBatteryModeToggled);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySettingsBatteryModeToggled other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BatteryMode != other.BatteryMode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BatteryMode != false) hash ^= BatteryMode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BatteryMode != false) {
            output.WriteRawTag(8);
            output.WriteBool(BatteryMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BatteryMode != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySettingsBatteryModeToggled other) {
          if (other == null) {
            return;
          }
          if (other.BatteryMode != false) {
            BatteryMode = other.BatteryMode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BatteryMode = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetrySettingsAuthUpdated : pb::IMessage<ClientTelemetrySettingsAuthUpdated> {
        private static readonly pb::MessageParser<ClientTelemetrySettingsAuthUpdated> _parser = new pb::MessageParser<ClientTelemetrySettingsAuthUpdated>(() => new ClientTelemetrySettingsAuthUpdated());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySettingsAuthUpdated> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsAuthUpdated() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsAuthUpdated(ClientTelemetrySettingsAuthUpdated other) : this() {
          primaryAuthChannel_ = other.primaryAuthChannel_;
          secondaryAuthChannel_ = other.secondaryAuthChannel_;
          platform_ = other.platform_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySettingsAuthUpdated Clone() {
          return new ClientTelemetrySettingsAuthUpdated(this);
        }

        /// <summary>Field number for the "primary_auth_channel" field.</summary>
        public const int PrimaryAuthChannelFieldNumber = 1;
        private string primaryAuthChannel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PrimaryAuthChannel {
          get { return primaryAuthChannel_; }
          set {
            primaryAuthChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "secondary_auth_channel" field.</summary>
        public const int SecondaryAuthChannelFieldNumber = 2;
        private string secondaryAuthChannel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecondaryAuthChannel {
          get { return secondaryAuthChannel_; }
          set {
            secondaryAuthChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "platform" field.</summary>
        public const int PlatformFieldNumber = 3;
        private string platform_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Platform {
          get { return platform_; }
          set {
            platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySettingsAuthUpdated);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySettingsAuthUpdated other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PrimaryAuthChannel != other.PrimaryAuthChannel) return false;
          if (SecondaryAuthChannel != other.SecondaryAuthChannel) return false;
          if (Platform != other.Platform) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PrimaryAuthChannel.Length != 0) hash ^= PrimaryAuthChannel.GetHashCode();
          if (SecondaryAuthChannel.Length != 0) hash ^= SecondaryAuthChannel.GetHashCode();
          if (Platform.Length != 0) hash ^= Platform.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PrimaryAuthChannel.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PrimaryAuthChannel);
          }
          if (SecondaryAuthChannel.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(SecondaryAuthChannel);
          }
          if (Platform.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Platform);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PrimaryAuthChannel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryAuthChannel);
          }
          if (SecondaryAuthChannel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondaryAuthChannel);
          }
          if (Platform.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySettingsAuthUpdated other) {
          if (other == null) {
            return;
          }
          if (other.PrimaryAuthChannel.Length != 0) {
            PrimaryAuthChannel = other.PrimaryAuthChannel;
          }
          if (other.SecondaryAuthChannel.Length != 0) {
            SecondaryAuthChannel = other.SecondaryAuthChannel;
          }
          if (other.Platform.Length != 0) {
            Platform = other.Platform;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PrimaryAuthChannel = input.ReadString();
                break;
              }
              case 18: {
                SecondaryAuthChannel = input.ReadString();
                break;
              }
              case 26: {
                Platform = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryStickerDetails : pb::IMessage<ClientTelemetryStickerDetails> {
        private static readonly pb::MessageParser<ClientTelemetryStickerDetails> _parser = new pb::MessageParser<ClientTelemetryStickerDetails>(() => new ClientTelemetryStickerDetails());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryStickerDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStickerDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStickerDetails(ClientTelemetryStickerDetails other) : this() {
          collectionId_ = other.collectionId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryStickerDetails Clone() {
          return new ClientTelemetryStickerDetails(this);
        }

        /// <summary>Field number for the "collection_id" field.</summary>
        public const int CollectionIdFieldNumber = 1;
        private string collectionId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CollectionId {
          get { return collectionId_; }
          set {
            collectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryStickerDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryStickerDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CollectionId != other.CollectionId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CollectionId.Length != 0) hash ^= CollectionId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CollectionId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CollectionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CollectionId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryStickerDetails other) {
          if (other == null) {
            return;
          }
          if (other.CollectionId.Length != 0) {
            CollectionId = other.CollectionId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CollectionId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryProfileButtonRandomize : pb::IMessage<ClientTelemetryProfileButtonRandomize> {
        private static readonly pb::MessageParser<ClientTelemetryProfileButtonRandomize> _parser = new pb::MessageParser<ClientTelemetryProfileButtonRandomize>(() => new ClientTelemetryProfileButtonRandomize());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfileButtonRandomize> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonRandomize() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonRandomize(ClientTelemetryProfileButtonRandomize other) : this() {
          category_ = other.category_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonRandomize Clone() {
          return new ClientTelemetryProfileButtonRandomize(this);
        }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 1;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize.Types.CategoryRandomize category_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize.Types.CategoryRandomize Category {
          get { return category_; }
          set {
            category_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfileButtonRandomize);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfileButtonRandomize other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Category != other.Category) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Category != 0) hash ^= Category.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Category != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Category);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Category != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfileButtonRandomize other) {
          if (other == null) {
            return;
          }
          if (other.Category != 0) {
            Category = other.Category;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Category = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonRandomize.Types.CategoryRandomize) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientTelemetryProfileButtonRandomize message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CategoryRandomize {
            [pbr::OriginalName("CATEGORY_RANDOMIZE_UNSET")] Unset = 0,
            [pbr::OriginalName("RANDOMIZE_LENS")] RandomizeLens = 1,
            [pbr::OriginalName("RANDOMIZE_FILTER_FRAME")] RandomizeFilterFrame = 2,
          }

        }
        #endregion

      }

      public sealed partial class ClientTelemetryProfileButtonLens : pb::IMessage<ClientTelemetryProfileButtonLens> {
        private static readonly pb::MessageParser<ClientTelemetryProfileButtonLens> _parser = new pb::MessageParser<ClientTelemetryProfileButtonLens>(() => new ClientTelemetryProfileButtonLens());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfileButtonLens> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonLens() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonLens(ClientTelemetryProfileButtonLens other) : this() {
          pressedButtonId_ = other.pressedButtonId_;
          lensCategory_ = other.lensCategory_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonLens Clone() {
          return new ClientTelemetryProfileButtonLens(this);
        }

        /// <summary>Field number for the "pressed_button_id" field.</summary>
        public const int PressedButtonIdFieldNumber = 1;
        private string pressedButtonId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PressedButtonId {
          get { return pressedButtonId_; }
          set {
            pressedButtonId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "lens_category" field.</summary>
        public const int LensCategoryFieldNumber = 2;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens.Types.CategoryLens lensCategory_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens.Types.CategoryLens LensCategory {
          get { return lensCategory_; }
          set {
            lensCategory_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfileButtonLens);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfileButtonLens other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PressedButtonId != other.PressedButtonId) return false;
          if (LensCategory != other.LensCategory) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PressedButtonId.Length != 0) hash ^= PressedButtonId.GetHashCode();
          if (LensCategory != 0) hash ^= LensCategory.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PressedButtonId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PressedButtonId);
          }
          if (LensCategory != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) LensCategory);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PressedButtonId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PressedButtonId);
          }
          if (LensCategory != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LensCategory);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfileButtonLens other) {
          if (other == null) {
            return;
          }
          if (other.PressedButtonId.Length != 0) {
            PressedButtonId = other.PressedButtonId;
          }
          if (other.LensCategory != 0) {
            LensCategory = other.LensCategory;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PressedButtonId = input.ReadString();
                break;
              }
              case 16: {
                LensCategory = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonLens.Types.CategoryLens) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientTelemetryProfileButtonLens message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CategoryLens {
            [pbr::OriginalName("CATEGORY_LENS_UNSET")] Unset = 0,
            [pbr::OriginalName("CATEGORY_LENS_TOP")] Top = 1,
            [pbr::OriginalName("CATEGORY_LENS_MIDDLE")] Middle = 2,
            [pbr::OriginalName("CATEGORY_LENS_BOTTOM")] Bottom = 3,
          }

        }
        #endregion

      }

      public sealed partial class ClientTelemetryProfileButtonAssset : pb::IMessage<ClientTelemetryProfileButtonAssset> {
        private static readonly pb::MessageParser<ClientTelemetryProfileButtonAssset> _parser = new pb::MessageParser<ClientTelemetryProfileButtonAssset>(() => new ClientTelemetryProfileButtonAssset());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryProfileButtonAssset> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonAssset() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonAssset(ClientTelemetryProfileButtonAssset other) : this() {
          pressedButtonId_ = other.pressedButtonId_;
          stickerAdd_ = other.stickerAdd_;
          assetType_ = other.assetType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryProfileButtonAssset Clone() {
          return new ClientTelemetryProfileButtonAssset(this);
        }

        /// <summary>Field number for the "pressed_button_id" field.</summary>
        public const int PressedButtonIdFieldNumber = 1;
        private string pressedButtonId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PressedButtonId {
          get { return pressedButtonId_; }
          set {
            pressedButtonId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sticker_add" field.</summary>
        public const int StickerAddFieldNumber = 2;
        private bool stickerAdd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool StickerAdd {
          get { return stickerAdd_; }
          set {
            stickerAdd_ = value;
          }
        }

        /// <summary>Field number for the "asset_type" field.</summary>
        public const int AssetTypeFieldNumber = 3;
        private global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset.Types.CategoryAssetType assetType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset.Types.CategoryAssetType AssetType {
          get { return assetType_; }
          set {
            assetType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryProfileButtonAssset);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryProfileButtonAssset other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PressedButtonId != other.PressedButtonId) return false;
          if (StickerAdd != other.StickerAdd) return false;
          if (AssetType != other.AssetType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PressedButtonId.Length != 0) hash ^= PressedButtonId.GetHashCode();
          if (StickerAdd != false) hash ^= StickerAdd.GetHashCode();
          if (AssetType != 0) hash ^= AssetType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PressedButtonId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PressedButtonId);
          }
          if (StickerAdd != false) {
            output.WriteRawTag(16);
            output.WriteBool(StickerAdd);
          }
          if (AssetType != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) AssetType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PressedButtonId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PressedButtonId);
          }
          if (StickerAdd != false) {
            size += 1 + 1;
          }
          if (AssetType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryProfileButtonAssset other) {
          if (other == null) {
            return;
          }
          if (other.PressedButtonId.Length != 0) {
            PressedButtonId = other.PressedButtonId;
          }
          if (other.StickerAdd != false) {
            StickerAdd = other.StickerAdd;
          }
          if (other.AssetType != 0) {
            AssetType = other.AssetType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PressedButtonId = input.ReadString();
                break;
              }
              case 16: {
                StickerAdd = input.ReadBool();
                break;
              }
              case 24: {
                AssetType = (global::WUProtos.Data.LexiconApprovedClientTelemetry.Types.ClientTelemetryProfileButtonAssset.Types.CategoryAssetType) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientTelemetryProfileButtonAssset message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CategoryAssetType {
            [pbr::OriginalName("CATEGORY_ASSET_TYPE_UNSET")] Unset = 0,
            [pbr::OriginalName("CATEGORY_ASSET_LENS")] CategoryAssetLens = 1,
            [pbr::OriginalName("CATEGORY_ASSET_FILTER")] CategoryAssetFilter = 2,
            [pbr::OriginalName("CATEGORY_ASSET_FRAME")] CategoryAssetFrame = 3,
            [pbr::OriginalName("CATEGORY_ASSET_STICKER")] CategoryAssetSticker = 4,
          }

        }
        #endregion

      }

      public sealed partial class ClientTelemetryPotionsMasterNoteAttempt : pb::IMessage<ClientTelemetryPotionsMasterNoteAttempt> {
        private static readonly pb::MessageParser<ClientTelemetryPotionsMasterNoteAttempt> _parser = new pb::MessageParser<ClientTelemetryPotionsMasterNoteAttempt>(() => new ClientTelemetryPotionsMasterNoteAttempt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryPotionsMasterNoteAttempt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPotionsMasterNoteAttempt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPotionsMasterNoteAttempt(ClientTelemetryPotionsMasterNoteAttempt other) : this() {
          potionNameId_ = other.potionNameId_;
          cauldronId_ = other.cauldronId_;
          masterNoteId_ = other.masterNoteId_;
          gestureCount_ = other.gestureCount_;
          gestureSteps_ = other.gestureSteps_.Clone();
          masterNoteStart_ = other.masterNoteStart_;
          gestureAttemptStep_ = other.gestureAttemptStep_;
          gestureSuccess_ = other.gestureSuccess_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPotionsMasterNoteAttempt Clone() {
          return new ClientTelemetryPotionsMasterNoteAttempt(this);
        }

        /// <summary>Field number for the "potion_name_id" field.</summary>
        public const int PotionNameIdFieldNumber = 1;
        private string potionNameId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PotionNameId {
          get { return potionNameId_; }
          set {
            potionNameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cauldron_id" field.</summary>
        public const int CauldronIdFieldNumber = 2;
        private string cauldronId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CauldronId {
          get { return cauldronId_; }
          set {
            cauldronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "master_note_id" field.</summary>
        public const int MasterNoteIdFieldNumber = 3;
        private string masterNoteId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MasterNoteId {
          get { return masterNoteId_; }
          set {
            masterNoteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "gesture_count" field.</summary>
        public const int GestureCountFieldNumber = 4;
        private int gestureCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GestureCount {
          get { return gestureCount_; }
          set {
            gestureCount_ = value;
          }
        }

        /// <summary>Field number for the "gesture_steps" field.</summary>
        public const int GestureStepsFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_gestureSteps_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> gestureSteps_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> GestureSteps {
          get { return gestureSteps_; }
        }

        /// <summary>Field number for the "master_note_start" field.</summary>
        public const int MasterNoteStartFieldNumber = 6;
        private bool masterNoteStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MasterNoteStart {
          get { return masterNoteStart_; }
          set {
            masterNoteStart_ = value;
          }
        }

        /// <summary>Field number for the "gesture_attempt_step" field.</summary>
        public const int GestureAttemptStepFieldNumber = 7;
        private int gestureAttemptStep_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GestureAttemptStep {
          get { return gestureAttemptStep_; }
          set {
            gestureAttemptStep_ = value;
          }
        }

        /// <summary>Field number for the "gesture_success" field.</summary>
        public const int GestureSuccessFieldNumber = 8;
        private bool gestureSuccess_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool GestureSuccess {
          get { return gestureSuccess_; }
          set {
            gestureSuccess_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryPotionsMasterNoteAttempt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryPotionsMasterNoteAttempt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PotionNameId != other.PotionNameId) return false;
          if (CauldronId != other.CauldronId) return false;
          if (MasterNoteId != other.MasterNoteId) return false;
          if (GestureCount != other.GestureCount) return false;
          if(!gestureSteps_.Equals(other.gestureSteps_)) return false;
          if (MasterNoteStart != other.MasterNoteStart) return false;
          if (GestureAttemptStep != other.GestureAttemptStep) return false;
          if (GestureSuccess != other.GestureSuccess) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PotionNameId.Length != 0) hash ^= PotionNameId.GetHashCode();
          if (CauldronId.Length != 0) hash ^= CauldronId.GetHashCode();
          if (MasterNoteId.Length != 0) hash ^= MasterNoteId.GetHashCode();
          if (GestureCount != 0) hash ^= GestureCount.GetHashCode();
          hash ^= gestureSteps_.GetHashCode();
          if (MasterNoteStart != false) hash ^= MasterNoteStart.GetHashCode();
          if (GestureAttemptStep != 0) hash ^= GestureAttemptStep.GetHashCode();
          if (GestureSuccess != false) hash ^= GestureSuccess.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PotionNameId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PotionNameId);
          }
          if (CauldronId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CauldronId);
          }
          if (MasterNoteId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(MasterNoteId);
          }
          if (GestureCount != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(GestureCount);
          }
          gestureSteps_.WriteTo(output, _repeated_gestureSteps_codec);
          if (MasterNoteStart != false) {
            output.WriteRawTag(48);
            output.WriteBool(MasterNoteStart);
          }
          if (GestureAttemptStep != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(GestureAttemptStep);
          }
          if (GestureSuccess != false) {
            output.WriteRawTag(64);
            output.WriteBool(GestureSuccess);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PotionNameId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PotionNameId);
          }
          if (CauldronId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CauldronId);
          }
          if (MasterNoteId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterNoteId);
          }
          if (GestureCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GestureCount);
          }
          size += gestureSteps_.CalculateSize(_repeated_gestureSteps_codec);
          if (MasterNoteStart != false) {
            size += 1 + 1;
          }
          if (GestureAttemptStep != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GestureAttemptStep);
          }
          if (GestureSuccess != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryPotionsMasterNoteAttempt other) {
          if (other == null) {
            return;
          }
          if (other.PotionNameId.Length != 0) {
            PotionNameId = other.PotionNameId;
          }
          if (other.CauldronId.Length != 0) {
            CauldronId = other.CauldronId;
          }
          if (other.MasterNoteId.Length != 0) {
            MasterNoteId = other.MasterNoteId;
          }
          if (other.GestureCount != 0) {
            GestureCount = other.GestureCount;
          }
          gestureSteps_.Add(other.gestureSteps_);
          if (other.MasterNoteStart != false) {
            MasterNoteStart = other.MasterNoteStart;
          }
          if (other.GestureAttemptStep != 0) {
            GestureAttemptStep = other.GestureAttemptStep;
          }
          if (other.GestureSuccess != false) {
            GestureSuccess = other.GestureSuccess;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PotionNameId = input.ReadString();
                break;
              }
              case 18: {
                CauldronId = input.ReadString();
                break;
              }
              case 26: {
                MasterNoteId = input.ReadString();
                break;
              }
              case 32: {
                GestureCount = input.ReadInt32();
                break;
              }
              case 42: {
                gestureSteps_.AddEntriesFrom(input, _repeated_gestureSteps_codec);
                break;
              }
              case 48: {
                MasterNoteStart = input.ReadBool();
                break;
              }
              case 56: {
                GestureAttemptStep = input.ReadInt32();
                break;
              }
              case 64: {
                GestureSuccess = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryPortkeysWrackspurtTapped : pb::IMessage<ClientTelemetryPortkeysWrackspurtTapped> {
        private static readonly pb::MessageParser<ClientTelemetryPortkeysWrackspurtTapped> _parser = new pb::MessageParser<ClientTelemetryPortkeysWrackspurtTapped>(() => new ClientTelemetryPortkeysWrackspurtTapped());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryPortkeysWrackspurtTapped> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysWrackspurtTapped() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysWrackspurtTapped(ClientTelemetryPortkeysWrackspurtTapped other) : this() {
          wrackspurtId_ = other.wrackspurtId_;
          portkeyId_ = other.portkeyId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysWrackspurtTapped Clone() {
          return new ClientTelemetryPortkeysWrackspurtTapped(this);
        }

        /// <summary>Field number for the "wrackspurt_id" field.</summary>
        public const int WrackspurtIdFieldNumber = 1;
        private string wrackspurtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WrackspurtId {
          get { return wrackspurtId_; }
          set {
            wrackspurtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "portkey_id" field.</summary>
        public const int PortkeyIdFieldNumber = 2;
        private string portkeyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortkeyId {
          get { return portkeyId_; }
          set {
            portkeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryPortkeysWrackspurtTapped);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryPortkeysWrackspurtTapped other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (WrackspurtId != other.WrackspurtId) return false;
          if (PortkeyId != other.PortkeyId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (WrackspurtId.Length != 0) hash ^= WrackspurtId.GetHashCode();
          if (PortkeyId.Length != 0) hash ^= PortkeyId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (WrackspurtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(WrackspurtId);
          }
          if (PortkeyId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PortkeyId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (WrackspurtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WrackspurtId);
          }
          if (PortkeyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortkeyId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryPortkeysWrackspurtTapped other) {
          if (other == null) {
            return;
          }
          if (other.WrackspurtId.Length != 0) {
            WrackspurtId = other.WrackspurtId;
          }
          if (other.PortkeyId.Length != 0) {
            PortkeyId = other.PortkeyId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                WrackspurtId = input.ReadString();
                break;
              }
              case 18: {
                PortkeyId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryPortkeysOutOfBoundsReached : pb::IMessage<ClientTelemetryPortkeysOutOfBoundsReached> {
        private static readonly pb::MessageParser<ClientTelemetryPortkeysOutOfBoundsReached> _parser = new pb::MessageParser<ClientTelemetryPortkeysOutOfBoundsReached>(() => new ClientTelemetryPortkeysOutOfBoundsReached());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryPortkeysOutOfBoundsReached> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysOutOfBoundsReached() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysOutOfBoundsReached(ClientTelemetryPortkeysOutOfBoundsReached other) : this() {
          portkeyId_ = other.portkeyId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPortkeysOutOfBoundsReached Clone() {
          return new ClientTelemetryPortkeysOutOfBoundsReached(this);
        }

        /// <summary>Field number for the "portkey_id" field.</summary>
        public const int PortkeyIdFieldNumber = 2;
        private string portkeyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PortkeyId {
          get { return portkeyId_; }
          set {
            portkeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryPortkeysOutOfBoundsReached);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryPortkeysOutOfBoundsReached other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PortkeyId != other.PortkeyId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PortkeyId.Length != 0) hash ^= PortkeyId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PortkeyId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PortkeyId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PortkeyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PortkeyId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryPortkeysOutOfBoundsReached other) {
          if (other == null) {
            return;
          }
          if (other.PortkeyId.Length != 0) {
            PortkeyId = other.PortkeyId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                PortkeyId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryPermissionsRequested : pb::IMessage<ClientTelemetryPermissionsRequested> {
        private static readonly pb::MessageParser<ClientTelemetryPermissionsRequested> _parser = new pb::MessageParser<ClientTelemetryPermissionsRequested>(() => new ClientTelemetryPermissionsRequested());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryPermissionsRequested> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPermissionsRequested() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPermissionsRequested(ClientTelemetryPermissionsRequested other) : this() {
          permissionType_ = other.permissionType_;
          granted_ = other.granted_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPermissionsRequested Clone() {
          return new ClientTelemetryPermissionsRequested(this);
        }

        /// <summary>Field number for the "permission_type" field.</summary>
        public const int PermissionTypeFieldNumber = 1;
        private string permissionType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PermissionType {
          get { return permissionType_; }
          set {
            permissionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "granted" field.</summary>
        public const int GrantedFieldNumber = 2;
        private bool granted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Granted {
          get { return granted_; }
          set {
            granted_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryPermissionsRequested);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryPermissionsRequested other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PermissionType != other.PermissionType) return false;
          if (Granted != other.Granted) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PermissionType.Length != 0) hash ^= PermissionType.GetHashCode();
          if (Granted != false) hash ^= Granted.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PermissionType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PermissionType);
          }
          if (Granted != false) {
            output.WriteRawTag(16);
            output.WriteBool(Granted);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PermissionType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionType);
          }
          if (Granted != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryPermissionsRequested other) {
          if (other == null) {
            return;
          }
          if (other.PermissionType.Length != 0) {
            PermissionType = other.PermissionType;
          }
          if (other.Granted != false) {
            Granted = other.Granted;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PermissionType = input.ReadString();
                break;
              }
              case 16: {
                Granted = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryPermissionsCheckFailed : pb::IMessage<ClientTelemetryPermissionsCheckFailed> {
        private static readonly pb::MessageParser<ClientTelemetryPermissionsCheckFailed> _parser = new pb::MessageParser<ClientTelemetryPermissionsCheckFailed>(() => new ClientTelemetryPermissionsCheckFailed());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryPermissionsCheckFailed> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPermissionsCheckFailed() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPermissionsCheckFailed(ClientTelemetryPermissionsCheckFailed other) : this() {
          permissionType_ = other.permissionType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryPermissionsCheckFailed Clone() {
          return new ClientTelemetryPermissionsCheckFailed(this);
        }

        /// <summary>Field number for the "permission_type" field.</summary>
        public const int PermissionTypeFieldNumber = 1;
        private string permissionType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PermissionType {
          get { return permissionType_; }
          set {
            permissionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryPermissionsCheckFailed);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryPermissionsCheckFailed other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PermissionType != other.PermissionType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PermissionType.Length != 0) hash ^= PermissionType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PermissionType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PermissionType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PermissionType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryPermissionsCheckFailed other) {
          if (other == null) {
            return;
          }
          if (other.PermissionType.Length != 0) {
            PermissionType = other.PermissionType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PermissionType = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryLoginStart : pb::IMessage<ClientTelemetryLoginStart> {
        private static readonly pb::MessageParser<ClientTelemetryLoginStart> _parser = new pb::MessageParser<ClientTelemetryLoginStart>(() => new ClientTelemetryLoginStart());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryLoginStart> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLoginStart() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLoginStart(ClientTelemetryLoginStart other) : this() {
          authProviderId_ = other.authProviderId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLoginStart Clone() {
          return new ClientTelemetryLoginStart(this);
        }

        /// <summary>Field number for the "auth_provider_id" field.</summary>
        public const int AuthProviderIdFieldNumber = 1;
        private string authProviderId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AuthProviderId {
          get { return authProviderId_; }
          set {
            authProviderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryLoginStart);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryLoginStart other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AuthProviderId != other.AuthProviderId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AuthProviderId.Length != 0) hash ^= AuthProviderId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AuthProviderId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AuthProviderId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AuthProviderId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthProviderId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryLoginStart other) {
          if (other == null) {
            return;
          }
          if (other.AuthProviderId.Length != 0) {
            AuthProviderId = other.AuthProviderId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AuthProviderId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryLoginComplete : pb::IMessage<ClientTelemetryLoginComplete> {
        private static readonly pb::MessageParser<ClientTelemetryLoginComplete> _parser = new pb::MessageParser<ClientTelemetryLoginComplete>(() => new ClientTelemetryLoginComplete());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryLoginComplete> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLoginComplete() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLoginComplete(ClientTelemetryLoginComplete other) : this() {
          authProviderId_ = other.authProviderId_;
          authStatus_ = other.authStatus_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryLoginComplete Clone() {
          return new ClientTelemetryLoginComplete(this);
        }

        /// <summary>Field number for the "auth_provider_id" field.</summary>
        public const int AuthProviderIdFieldNumber = 1;
        private string authProviderId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AuthProviderId {
          get { return authProviderId_; }
          set {
            authProviderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "auth_status" field.</summary>
        public const int AuthStatusFieldNumber = 2;
        private string authStatus_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AuthStatus {
          get { return authStatus_; }
          set {
            authStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryLoginComplete);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryLoginComplete other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AuthProviderId != other.AuthProviderId) return false;
          if (AuthStatus != other.AuthStatus) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AuthProviderId.Length != 0) hash ^= AuthProviderId.GetHashCode();
          if (AuthStatus.Length != 0) hash ^= AuthStatus.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AuthProviderId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AuthProviderId);
          }
          if (AuthStatus.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AuthStatus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AuthProviderId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthProviderId);
          }
          if (AuthStatus.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthStatus);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryLoginComplete other) {
          if (other == null) {
            return;
          }
          if (other.AuthProviderId.Length != 0) {
            AuthProviderId = other.AuthProviderId;
          }
          if (other.AuthStatus.Length != 0) {
            AuthStatus = other.AuthStatus;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AuthProviderId = input.ReadString();
                break;
              }
              case 18: {
                AuthStatus = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryImpression : pb::IMessage<ClientTelemetryImpression> {
        private static readonly pb::MessageParser<ClientTelemetryImpression> _parser = new pb::MessageParser<ClientTelemetryImpression>(() => new ClientTelemetryImpression());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryImpression> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryImpression() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryImpression(ClientTelemetryImpression other) : this() {
          outpostId_ = other.outpostId_;
          partnerId_ = other.partnerId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryImpression Clone() {
          return new ClientTelemetryImpression(this);
        }

        /// <summary>Field number for the "outpost_id" field.</summary>
        public const int OutpostIdFieldNumber = 1;
        private string outpostId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OutpostId {
          get { return outpostId_; }
          set {
            outpostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "partner_id" field.</summary>
        public const int PartnerIdFieldNumber = 2;
        private string partnerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PartnerId {
          get { return partnerId_; }
          set {
            partnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryImpression);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryImpression other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OutpostId != other.OutpostId) return false;
          if (PartnerId != other.PartnerId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OutpostId.Length != 0) hash ^= OutpostId.GetHashCode();
          if (PartnerId.Length != 0) hash ^= PartnerId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OutpostId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(OutpostId);
          }
          if (PartnerId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PartnerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OutpostId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OutpostId);
          }
          if (PartnerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PartnerId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryImpression other) {
          if (other == null) {
            return;
          }
          if (other.OutpostId.Length != 0) {
            OutpostId = other.OutpostId;
          }
          if (other.PartnerId.Length != 0) {
            PartnerId = other.PartnerId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                OutpostId = input.ReadString();
                break;
              }
              case 18: {
                PartnerId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryHyperlinkClickthrough : pb::IMessage<ClientTelemetryHyperlinkClickthrough> {
        private static readonly pb::MessageParser<ClientTelemetryHyperlinkClickthrough> _parser = new pb::MessageParser<ClientTelemetryHyperlinkClickthrough>(() => new ClientTelemetryHyperlinkClickthrough());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryHyperlinkClickthrough> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryHyperlinkClickthrough() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryHyperlinkClickthrough(ClientTelemetryHyperlinkClickthrough other) : this() {
          url_ = other.url_;
          outpostId_ = other.outpostId_;
          partnerId_ = other.partnerId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryHyperlinkClickthrough Clone() {
          return new ClientTelemetryHyperlinkClickthrough(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "outpost_id" field.</summary>
        public const int OutpostIdFieldNumber = 2;
        private string outpostId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OutpostId {
          get { return outpostId_; }
          set {
            outpostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "partner_id" field.</summary>
        public const int PartnerIdFieldNumber = 3;
        private string partnerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PartnerId {
          get { return partnerId_; }
          set {
            partnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryHyperlinkClickthrough);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryHyperlinkClickthrough other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (OutpostId != other.OutpostId) return false;
          if (PartnerId != other.PartnerId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (OutpostId.Length != 0) hash ^= OutpostId.GetHashCode();
          if (PartnerId.Length != 0) hash ^= PartnerId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (OutpostId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(OutpostId);
          }
          if (PartnerId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(PartnerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (OutpostId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OutpostId);
          }
          if (PartnerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PartnerId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryHyperlinkClickthrough other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          if (other.OutpostId.Length != 0) {
            OutpostId = other.OutpostId;
          }
          if (other.PartnerId.Length != 0) {
            PartnerId = other.PartnerId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                OutpostId = input.ReadString();
                break;
              }
              case 26: {
                PartnerId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryFamilyDetails : pb::IMessage<ClientTelemetryFamilyDetails> {
        private static readonly pb::MessageParser<ClientTelemetryFamilyDetails> _parser = new pb::MessageParser<ClientTelemetryFamilyDetails>(() => new ClientTelemetryFamilyDetails());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryFamilyDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryFamilyDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryFamilyDetails(ClientTelemetryFamilyDetails other) : this() {
          familyId_ = other.familyId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryFamilyDetails Clone() {
          return new ClientTelemetryFamilyDetails(this);
        }

        /// <summary>Field number for the "family_id" field.</summary>
        public const int FamilyIdFieldNumber = 1;
        private string familyId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FamilyId {
          get { return familyId_; }
          set {
            familyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryFamilyDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryFamilyDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FamilyId != other.FamilyId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FamilyId.Length != 0) hash ^= FamilyId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FamilyId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FamilyId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FamilyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryFamilyDetails other) {
          if (other == null) {
            return;
          }
          if (other.FamilyId.Length != 0) {
            FamilyId = other.FamilyId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FamilyId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryException : pb::IMessage<ClientTelemetryException> {
        private static readonly pb::MessageParser<ClientTelemetryException> _parser = new pb::MessageParser<ClientTelemetryException>(() => new ClientTelemetryException());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryException> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryException() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryException(ClientTelemetryException other) : this() {
          exceptionType_ = other.exceptionType_;
          stackTrace_ = other.stackTrace_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryException Clone() {
          return new ClientTelemetryException(this);
        }

        /// <summary>Field number for the "exception_type" field.</summary>
        public const int ExceptionTypeFieldNumber = 1;
        private string exceptionType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExceptionType {
          get { return exceptionType_; }
          set {
            exceptionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stack_trace" field.</summary>
        public const int StackTraceFieldNumber = 2;
        private string stackTrace_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StackTrace {
          get { return stackTrace_; }
          set {
            stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryException);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryException other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExceptionType != other.ExceptionType) return false;
          if (StackTrace != other.StackTrace) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ExceptionType.Length != 0) hash ^= ExceptionType.GetHashCode();
          if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ExceptionType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ExceptionType);
          }
          if (StackTrace.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(StackTrace);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ExceptionType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionType);
          }
          if (StackTrace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryException other) {
          if (other == null) {
            return;
          }
          if (other.ExceptionType.Length != 0) {
            ExceptionType = other.ExceptionType;
          }
          if (other.StackTrace.Length != 0) {
            StackTrace = other.StackTrace;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ExceptionType = input.ReadString();
                break;
              }
              case 18: {
                StackTrace = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryEnvironmentalTagsUIEntered : pb::IMessage<ClientTelemetryEnvironmentalTagsUIEntered> {
        private static readonly pb::MessageParser<ClientTelemetryEnvironmentalTagsUIEntered> _parser = new pb::MessageParser<ClientTelemetryEnvironmentalTagsUIEntered>(() => new ClientTelemetryEnvironmentalTagsUIEntered());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryEnvironmentalTagsUIEntered> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEnvironmentalTagsUIEntered() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEnvironmentalTagsUIEntered(ClientTelemetryEnvironmentalTagsUIEntered other) : this() {
          playerLevel_ = other.playerLevel_;
          warningSeverity_ = other.warningSeverity_;
          weatherTag_ = other.weatherTag_;
          moonTag_ = other.moonTag_;
          timeOfDayTag_ = other.timeOfDayTag_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEnvironmentalTagsUIEntered Clone() {
          return new ClientTelemetryEnvironmentalTagsUIEntered(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "warning_severity" field.</summary>
        public const int WarningSeverityFieldNumber = 2;
        private string warningSeverity_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WarningSeverity {
          get { return warningSeverity_; }
          set {
            warningSeverity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "weather_tag" field.</summary>
        public const int WeatherTagFieldNumber = 3;
        private string weatherTag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WeatherTag {
          get { return weatherTag_; }
          set {
            weatherTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "moon_tag" field.</summary>
        public const int MoonTagFieldNumber = 4;
        private string moonTag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MoonTag {
          get { return moonTag_; }
          set {
            moonTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "time_of_day_tag" field.</summary>
        public const int TimeOfDayTagFieldNumber = 5;
        private string timeOfDayTag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TimeOfDayTag {
          get { return timeOfDayTag_; }
          set {
            timeOfDayTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryEnvironmentalTagsUIEntered);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryEnvironmentalTagsUIEntered other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (WarningSeverity != other.WarningSeverity) return false;
          if (WeatherTag != other.WeatherTag) return false;
          if (MoonTag != other.MoonTag) return false;
          if (TimeOfDayTag != other.TimeOfDayTag) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (WarningSeverity.Length != 0) hash ^= WarningSeverity.GetHashCode();
          if (WeatherTag.Length != 0) hash ^= WeatherTag.GetHashCode();
          if (MoonTag.Length != 0) hash ^= MoonTag.GetHashCode();
          if (TimeOfDayTag.Length != 0) hash ^= TimeOfDayTag.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (WarningSeverity.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(WarningSeverity);
          }
          if (WeatherTag.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(WeatherTag);
          }
          if (MoonTag.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(MoonTag);
          }
          if (TimeOfDayTag.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(TimeOfDayTag);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (WarningSeverity.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WarningSeverity);
          }
          if (WeatherTag.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WeatherTag);
          }
          if (MoonTag.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MoonTag);
          }
          if (TimeOfDayTag.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeOfDayTag);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryEnvironmentalTagsUIEntered other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.WarningSeverity.Length != 0) {
            WarningSeverity = other.WarningSeverity;
          }
          if (other.WeatherTag.Length != 0) {
            WeatherTag = other.WeatherTag;
          }
          if (other.MoonTag.Length != 0) {
            MoonTag = other.MoonTag;
          }
          if (other.TimeOfDayTag.Length != 0) {
            TimeOfDayTag = other.TimeOfDayTag;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                WarningSeverity = input.ReadString();
                break;
              }
              case 26: {
                WeatherTag = input.ReadString();
                break;
              }
              case 34: {
                MoonTag = input.ReadString();
                break;
              }
              case 42: {
                TimeOfDayTag = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged : pb::IMessage<ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged> {
        private static readonly pb::MessageParser<ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged> _parser = new pb::MessageParser<ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged>(() => new ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged(ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged other) : this() {
          playerLevel_ = other.playerLevel_;
          warningSeverity_ = other.warningSeverity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged Clone() {
          return new ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "warning_severity" field.</summary>
        public const int WarningSeverityFieldNumber = 2;
        private string warningSeverity_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WarningSeverity {
          get { return warningSeverity_; }
          set {
            warningSeverity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (WarningSeverity != other.WarningSeverity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (WarningSeverity.Length != 0) hash ^= WarningSeverity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (WarningSeverity.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(WarningSeverity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (WarningSeverity.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WarningSeverity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.WarningSeverity.Length != 0) {
            WarningSeverity = other.WarningSeverity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                WarningSeverity = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryEncounterStart : pb::IMessage<ClientTelemetryEncounterStart> {
        private static readonly pb::MessageParser<ClientTelemetryEncounterStart> _parser = new pb::MessageParser<ClientTelemetryEncounterStart>(() => new ClientTelemetryEncounterStart());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryEncounterStart> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[43]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEncounterStart() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEncounterStart(ClientTelemetryEncounterStart other) : this() {
          batterySaverOn_ = other.batterySaverOn_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryEncounterStart Clone() {
          return new ClientTelemetryEncounterStart(this);
        }

        /// <summary>Field number for the "battery_saver_on" field.</summary>
        public const int BatterySaverOnFieldNumber = 1;
        private bool batterySaverOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BatterySaverOn {
          get { return batterySaverOn_; }
          set {
            batterySaverOn_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryEncounterStart);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryEncounterStart other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BatterySaverOn != other.BatterySaverOn) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BatterySaverOn != false) hash ^= BatterySaverOn.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BatterySaverOn != false) {
            output.WriteRawTag(8);
            output.WriteBool(BatterySaverOn);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BatterySaverOn != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryEncounterStart other) {
          if (other == null) {
            return;
          }
          if (other.BatterySaverOn != false) {
            BatterySaverOn = other.BatterySaverOn;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BatterySaverOn = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryDescriptionClickthrough : pb::IMessage<ClientTelemetryDescriptionClickthrough> {
        private static readonly pb::MessageParser<ClientTelemetryDescriptionClickthrough> _parser = new pb::MessageParser<ClientTelemetryDescriptionClickthrough>(() => new ClientTelemetryDescriptionClickthrough());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryDescriptionClickthrough> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[44]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryDescriptionClickthrough() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryDescriptionClickthrough(ClientTelemetryDescriptionClickthrough other) : this() {
          outpostId_ = other.outpostId_;
          partnerId_ = other.partnerId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryDescriptionClickthrough Clone() {
          return new ClientTelemetryDescriptionClickthrough(this);
        }

        /// <summary>Field number for the "outpost_id" field.</summary>
        public const int OutpostIdFieldNumber = 1;
        private string outpostId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OutpostId {
          get { return outpostId_; }
          set {
            outpostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "partner_id" field.</summary>
        public const int PartnerIdFieldNumber = 2;
        private string partnerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PartnerId {
          get { return partnerId_; }
          set {
            partnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryDescriptionClickthrough);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryDescriptionClickthrough other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OutpostId != other.OutpostId) return false;
          if (PartnerId != other.PartnerId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OutpostId.Length != 0) hash ^= OutpostId.GetHashCode();
          if (PartnerId.Length != 0) hash ^= PartnerId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OutpostId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(OutpostId);
          }
          if (PartnerId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PartnerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OutpostId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OutpostId);
          }
          if (PartnerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PartnerId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryDescriptionClickthrough other) {
          if (other == null) {
            return;
          }
          if (other.OutpostId.Length != 0) {
            OutpostId = other.OutpostId;
          }
          if (other.PartnerId.Length != 0) {
            PartnerId = other.PartnerId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                OutpostId = input.ReadString();
                break;
              }
              case 18: {
                PartnerId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryDeeplinkTriggered : pb::IMessage<ClientTelemetryDeeplinkTriggered> {
        private static readonly pb::MessageParser<ClientTelemetryDeeplinkTriggered> _parser = new pb::MessageParser<ClientTelemetryDeeplinkTriggered>(() => new ClientTelemetryDeeplinkTriggered());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryDeeplinkTriggered> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[45]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryDeeplinkTriggered() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryDeeplinkTriggered(ClientTelemetryDeeplinkTriggered other) : this() {
          link_ = other.link_;
          rejected_ = other.rejected_;
          rejectionReason_ = other.rejectionReason_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryDeeplinkTriggered Clone() {
          return new ClientTelemetryDeeplinkTriggered(this);
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 1;
        private string link_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Link {
          get { return link_; }
          set {
            link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rejected" field.</summary>
        public const int RejectedFieldNumber = 2;
        private bool rejected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Rejected {
          get { return rejected_; }
          set {
            rejected_ = value;
          }
        }

        /// <summary>Field number for the "rejection_reason" field.</summary>
        public const int RejectionReasonFieldNumber = 3;
        private string rejectionReason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RejectionReason {
          get { return rejectionReason_; }
          set {
            rejectionReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryDeeplinkTriggered);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryDeeplinkTriggered other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Link != other.Link) return false;
          if (Rejected != other.Rejected) return false;
          if (RejectionReason != other.RejectionReason) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Link.Length != 0) hash ^= Link.GetHashCode();
          if (Rejected != false) hash ^= Rejected.GetHashCode();
          if (RejectionReason.Length != 0) hash ^= RejectionReason.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Link.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Link);
          }
          if (Rejected != false) {
            output.WriteRawTag(16);
            output.WriteBool(Rejected);
          }
          if (RejectionReason.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RejectionReason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Link.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
          }
          if (Rejected != false) {
            size += 1 + 1;
          }
          if (RejectionReason.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectionReason);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryDeeplinkTriggered other) {
          if (other == null) {
            return;
          }
          if (other.Link.Length != 0) {
            Link = other.Link;
          }
          if (other.Rejected != false) {
            Rejected = other.Rejected;
          }
          if (other.RejectionReason.Length != 0) {
            RejectionReason = other.RejectionReason;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Link = input.ReadString();
                break;
              }
              case 16: {
                Rejected = input.ReadBool();
                break;
              }
              case 26: {
                RejectionReason = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryCombatGamePotionButton : pb::IMessage<ClientTelemetryCombatGamePotionButton> {
        private static readonly pb::MessageParser<ClientTelemetryCombatGamePotionButton> _parser = new pb::MessageParser<ClientTelemetryCombatGamePotionButton>(() => new ClientTelemetryCombatGamePotionButton());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryCombatGamePotionButton> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[46]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGamePotionButton() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGamePotionButton(ClientTelemetryCombatGamePotionButton other) : this() {
          playerLevel_ = other.playerLevel_;
          encounterId_ = other.encounterId_;
          attempt_ = other.attempt_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGamePotionButton Clone() {
          return new ClientTelemetryCombatGamePotionButton(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 2;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "attempt" field.</summary>
        public const int AttemptFieldNumber = 3;
        private int attempt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Attempt {
          get { return attempt_; }
          set {
            attempt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryCombatGamePotionButton);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryCombatGamePotionButton other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterId != other.EncounterId) return false;
          if (Attempt != other.Attempt) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (Attempt != 0) hash ^= Attempt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterId);
          }
          if (Attempt != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Attempt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (Attempt != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attempt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryCombatGamePotionButton other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          if (other.Attempt != 0) {
            Attempt = other.Attempt;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                EncounterId = input.ReadString();
                break;
              }
              case 24: {
                Attempt = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryCombatGameOutOfEnergyPurchaseButton : pb::IMessage<ClientTelemetryCombatGameOutOfEnergyPurchaseButton> {
        private static readonly pb::MessageParser<ClientTelemetryCombatGameOutOfEnergyPurchaseButton> _parser = new pb::MessageParser<ClientTelemetryCombatGameOutOfEnergyPurchaseButton>(() => new ClientTelemetryCombatGameOutOfEnergyPurchaseButton());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryCombatGameOutOfEnergyPurchaseButton> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[47]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOutOfEnergyPurchaseButton() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOutOfEnergyPurchaseButton(ClientTelemetryCombatGameOutOfEnergyPurchaseButton other) : this() {
          playerLevel_ = other.playerLevel_;
          encounterId_ = other.encounterId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOutOfEnergyPurchaseButton Clone() {
          return new ClientTelemetryCombatGameOutOfEnergyPurchaseButton(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 2;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryCombatGameOutOfEnergyPurchaseButton);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryCombatGameOutOfEnergyPurchaseButton other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterId != other.EncounterId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryCombatGameOutOfEnergyPurchaseButton other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                EncounterId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryCombatGameOutOfEnergyDialogShown : pb::IMessage<ClientTelemetryCombatGameOutOfEnergyDialogShown> {
        private static readonly pb::MessageParser<ClientTelemetryCombatGameOutOfEnergyDialogShown> _parser = new pb::MessageParser<ClientTelemetryCombatGameOutOfEnergyDialogShown>(() => new ClientTelemetryCombatGameOutOfEnergyDialogShown());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryCombatGameOutOfEnergyDialogShown> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[48]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOutOfEnergyDialogShown() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOutOfEnergyDialogShown(ClientTelemetryCombatGameOutOfEnergyDialogShown other) : this() {
          playerLevel_ = other.playerLevel_;
          encounterId_ = other.encounterId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryCombatGameOutOfEnergyDialogShown Clone() {
          return new ClientTelemetryCombatGameOutOfEnergyDialogShown(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private int playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        /// <summary>Field number for the "encounter_id" field.</summary>
        public const int EncounterIdFieldNumber = 2;
        private string encounterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterId {
          get { return encounterId_; }
          set {
            encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryCombatGameOutOfEnergyDialogShown);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryCombatGameOutOfEnergyDialogShown other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          if (EncounterId != other.EncounterId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
          if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
          }
          if (EncounterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryCombatGameOutOfEnergyDialogShown other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0) {
            PlayerLevel = other.PlayerLevel;
          }
          if (other.EncounterId.Length != 0) {
            EncounterId = other.EncounterId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt32();
                break;
              }
              case 18: {
                EncounterId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryButtonPress : pb::IMessage<ClientTelemetryButtonPress> {
        private static readonly pb::MessageParser<ClientTelemetryButtonPress> _parser = new pb::MessageParser<ClientTelemetryButtonPress>(() => new ClientTelemetryButtonPress());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryButtonPress> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[49]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryButtonPress() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryButtonPress(ClientTelemetryButtonPress other) : this() {
          pressedButtonId_ = other.pressedButtonId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryButtonPress Clone() {
          return new ClientTelemetryButtonPress(this);
        }

        /// <summary>Field number for the "pressed_button_id" field.</summary>
        public const int PressedButtonIdFieldNumber = 1;
        private string pressedButtonId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PressedButtonId {
          get { return pressedButtonId_; }
          set {
            pressedButtonId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryButtonPress);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryButtonPress other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PressedButtonId != other.PressedButtonId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PressedButtonId.Length != 0) hash ^= PressedButtonId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PressedButtonId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PressedButtonId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PressedButtonId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PressedButtonId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryButtonPress other) {
          if (other == null) {
            return;
          }
          if (other.PressedButtonId.Length != 0) {
            PressedButtonId = other.PressedButtonId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PressedButtonId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryBundleDownload : pb::IMessage<ClientTelemetryBundleDownload> {
        private static readonly pb::MessageParser<ClientTelemetryBundleDownload> _parser = new pb::MessageParser<ClientTelemetryBundleDownload>(() => new ClientTelemetryBundleDownload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryBundleDownload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[50]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryBundleDownload() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryBundleDownload(ClientTelemetryBundleDownload other) : this() {
          bundleName_ = other.bundleName_;
          bundleUrl_ = other.bundleUrl_;
          loadTime_ = other.loadTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryBundleDownload Clone() {
          return new ClientTelemetryBundleDownload(this);
        }

        /// <summary>Field number for the "bundle_name" field.</summary>
        public const int BundleNameFieldNumber = 1;
        private string bundleName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BundleName {
          get { return bundleName_; }
          set {
            bundleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bundle_url" field.</summary>
        public const int BundleUrlFieldNumber = 2;
        private string bundleUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BundleUrl {
          get { return bundleUrl_; }
          set {
            bundleUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "load_time" field.</summary>
        public const int LoadTimeFieldNumber = 3;
        private double loadTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LoadTime {
          get { return loadTime_; }
          set {
            loadTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryBundleDownload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryBundleDownload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BundleName != other.BundleName) return false;
          if (BundleUrl != other.BundleUrl) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LoadTime, other.LoadTime)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BundleName.Length != 0) hash ^= BundleName.GetHashCode();
          if (BundleUrl.Length != 0) hash ^= BundleUrl.GetHashCode();
          if (LoadTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LoadTime);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BundleName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BundleName);
          }
          if (BundleUrl.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(BundleUrl);
          }
          if (LoadTime != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(LoadTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BundleName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleName);
          }
          if (BundleUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleUrl);
          }
          if (LoadTime != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryBundleDownload other) {
          if (other == null) {
            return;
          }
          if (other.BundleName.Length != 0) {
            BundleName = other.BundleName;
          }
          if (other.BundleUrl.Length != 0) {
            BundleUrl = other.BundleUrl;
          }
          if (other.LoadTime != 0D) {
            LoadTime = other.LoadTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                BundleName = input.ReadString();
                break;
              }
              case 18: {
                BundleUrl = input.ReadString();
                break;
              }
              case 25: {
                LoadTime = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryAvatarInteract : pb::IMessage<ClientTelemetryAvatarInteract> {
        private static readonly pb::MessageParser<ClientTelemetryAvatarInteract> _parser = new pb::MessageParser<ClientTelemetryAvatarInteract>(() => new ClientTelemetryAvatarInteract());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryAvatarInteract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[51]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryAvatarInteract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryAvatarInteract(ClientTelemetryAvatarInteract other) : this() {
          playerLevel_ = other.playerLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryAvatarInteract Clone() {
          return new ClientTelemetryAvatarInteract(this);
        }

        /// <summary>Field number for the "player_level" field.</summary>
        public const int PlayerLevelFieldNumber = 1;
        private long playerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PlayerLevel {
          get { return playerLevel_; }
          set {
            playerLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryAvatarInteract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryAvatarInteract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerLevel != other.PlayerLevel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerLevel != 0L) hash ^= PlayerLevel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerLevel != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(PlayerLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerLevel != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerLevel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryAvatarInteract other) {
          if (other == null) {
            return;
          }
          if (other.PlayerLevel != 0L) {
            PlayerLevel = other.PlayerLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerLevel = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryAssetLoad : pb::IMessage<ClientTelemetryAssetLoad> {
        private static readonly pb::MessageParser<ClientTelemetryAssetLoad> _parser = new pb::MessageParser<ClientTelemetryAssetLoad>(() => new ClientTelemetryAssetLoad());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryAssetLoad> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[52]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryAssetLoad() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryAssetLoad(ClientTelemetryAssetLoad other) : this() {
          assetName_ = other.assetName_;
          totalLoadTime_ = other.totalLoadTime_;
          bundleName_ = other.bundleName_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryAssetLoad Clone() {
          return new ClientTelemetryAssetLoad(this);
        }

        /// <summary>Field number for the "asset_name" field.</summary>
        public const int AssetNameFieldNumber = 1;
        private string assetName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AssetName {
          get { return assetName_; }
          set {
            assetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "total_load_time" field.</summary>
        public const int TotalLoadTimeFieldNumber = 2;
        private double totalLoadTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TotalLoadTime {
          get { return totalLoadTime_; }
          set {
            totalLoadTime_ = value;
          }
        }

        /// <summary>Field number for the "bundle_name" field.</summary>
        public const int BundleNameFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_bundleName_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> bundleName_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> BundleName {
          get { return bundleName_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryAssetLoad);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryAssetLoad other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AssetName != other.AssetName) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalLoadTime, other.TotalLoadTime)) return false;
          if(!bundleName_.Equals(other.bundleName_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
          if (TotalLoadTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalLoadTime);
          hash ^= bundleName_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AssetName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AssetName);
          }
          if (TotalLoadTime != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TotalLoadTime);
          }
          bundleName_.WriteTo(output, _repeated_bundleName_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AssetName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetName);
          }
          if (TotalLoadTime != 0D) {
            size += 1 + 8;
          }
          size += bundleName_.CalculateSize(_repeated_bundleName_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryAssetLoad other) {
          if (other == null) {
            return;
          }
          if (other.AssetName.Length != 0) {
            AssetName = other.AssetName;
          }
          if (other.TotalLoadTime != 0D) {
            TotalLoadTime = other.TotalLoadTime;
          }
          bundleName_.Add(other.bundleName_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                AssetName = input.ReadString();
                break;
              }
              case 17: {
                TotalLoadTime = input.ReadDouble();
                break;
              }
              case 26: {
                bundleName_.AddEntriesFrom(input, _repeated_bundleName_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryRewardsFlow : pb::IMessage<ClientTelemetryRewardsFlow> {
        private static readonly pb::MessageParser<ClientTelemetryRewardsFlow> _parser = new pb::MessageParser<ClientTelemetryRewardsFlow>(() => new ClientTelemetryRewardsFlow());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryRewardsFlow> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[53]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRewardsFlow() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRewardsFlow(ClientTelemetryRewardsFlow other) : this() {
          skippedLongRewards_ = other.skippedLongRewards_;
          currentPlayerLevel_ = other.currentPlayerLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRewardsFlow Clone() {
          return new ClientTelemetryRewardsFlow(this);
        }

        /// <summary>Field number for the "skipped_long_rewards" field.</summary>
        public const int SkippedLongRewardsFieldNumber = 1;
        private bool skippedLongRewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SkippedLongRewards {
          get { return skippedLongRewards_; }
          set {
            skippedLongRewards_ = value;
          }
        }

        /// <summary>Field number for the "current_player_level" field.</summary>
        public const int CurrentPlayerLevelFieldNumber = 2;
        private float currentPlayerLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CurrentPlayerLevel {
          get { return currentPlayerLevel_; }
          set {
            currentPlayerLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryRewardsFlow);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryRewardsFlow other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SkippedLongRewards != other.SkippedLongRewards) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentPlayerLevel, other.CurrentPlayerLevel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SkippedLongRewards != false) hash ^= SkippedLongRewards.GetHashCode();
          if (CurrentPlayerLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentPlayerLevel);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SkippedLongRewards != false) {
            output.WriteRawTag(8);
            output.WriteBool(SkippedLongRewards);
          }
          if (CurrentPlayerLevel != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(CurrentPlayerLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SkippedLongRewards != false) {
            size += 1 + 1;
          }
          if (CurrentPlayerLevel != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryRewardsFlow other) {
          if (other == null) {
            return;
          }
          if (other.SkippedLongRewards != false) {
            SkippedLongRewards = other.SkippedLongRewards;
          }
          if (other.CurrentPlayerLevel != 0F) {
            CurrentPlayerLevel = other.CurrentPlayerLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SkippedLongRewards = input.ReadBool();
                break;
              }
              case 21: {
                CurrentPlayerLevel = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryRateApp : pb::IMessage<ClientTelemetryRateApp> {
        private static readonly pb::MessageParser<ClientTelemetryRateApp> _parser = new pb::MessageParser<ClientTelemetryRateApp>(() => new ClientTelemetryRateApp());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryRateApp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[54]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRateApp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRateApp(ClientTelemetryRateApp other) : this() {
          havingFunResponse_ = other.havingFunResponse_;
          platform_ = other.platform_;
          clientVersion_ = other.clientVersion_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRateApp Clone() {
          return new ClientTelemetryRateApp(this);
        }

        /// <summary>Field number for the "having_fun_response" field.</summary>
        public const int HavingFunResponseFieldNumber = 1;
        private bool havingFunResponse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HavingFunResponse {
          get { return havingFunResponse_; }
          set {
            havingFunResponse_ = value;
          }
        }

        /// <summary>Field number for the "platform" field.</summary>
        public const int PlatformFieldNumber = 2;
        private string platform_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Platform {
          get { return platform_; }
          set {
            platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "client_version" field.</summary>
        public const int ClientVersionFieldNumber = 3;
        private string clientVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientVersion {
          get { return clientVersion_; }
          set {
            clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryRateApp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryRateApp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HavingFunResponse != other.HavingFunResponse) return false;
          if (Platform != other.Platform) return false;
          if (ClientVersion != other.ClientVersion) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HavingFunResponse != false) hash ^= HavingFunResponse.GetHashCode();
          if (Platform.Length != 0) hash ^= Platform.GetHashCode();
          if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HavingFunResponse != false) {
            output.WriteRawTag(8);
            output.WriteBool(HavingFunResponse);
          }
          if (Platform.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Platform);
          }
          if (ClientVersion.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ClientVersion);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HavingFunResponse != false) {
            size += 1 + 1;
          }
          if (Platform.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
          }
          if (ClientVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryRateApp other) {
          if (other == null) {
            return;
          }
          if (other.HavingFunResponse != false) {
            HavingFunResponse = other.HavingFunResponse;
          }
          if (other.Platform.Length != 0) {
            Platform = other.Platform;
          }
          if (other.ClientVersion.Length != 0) {
            ClientVersion = other.ClientVersion;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HavingFunResponse = input.ReadBool();
                break;
              }
              case 18: {
                Platform = input.ReadString();
                break;
              }
              case 26: {
                ClientVersion = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetrySmokeTest : pb::IMessage<ClientTelemetrySmokeTest> {
        private static readonly pb::MessageParser<ClientTelemetrySmokeTest> _parser = new pb::MessageParser<ClientTelemetrySmokeTest>(() => new ClientTelemetrySmokeTest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetrySmokeTest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[55]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySmokeTest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySmokeTest(ClientTelemetrySmokeTest other) : this() {
          currentBotProgramName_ = other.currentBotProgramName_;
          timeStart_ = other.timeStart_;
          timeEnd_ = other.timeEnd_;
          timeDelta_ = other.timeDelta_;
          smokeTestCount_ = other.smokeTestCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetrySmokeTest Clone() {
          return new ClientTelemetrySmokeTest(this);
        }

        /// <summary>Field number for the "current_bot_program_name" field.</summary>
        public const int CurrentBotProgramNameFieldNumber = 1;
        private string currentBotProgramName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentBotProgramName {
          get { return currentBotProgramName_; }
          set {
            currentBotProgramName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "time_start" field.</summary>
        public const int TimeStartFieldNumber = 2;
        private double timeStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TimeStart {
          get { return timeStart_; }
          set {
            timeStart_ = value;
          }
        }

        /// <summary>Field number for the "time_end" field.</summary>
        public const int TimeEndFieldNumber = 3;
        private double timeEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TimeEnd {
          get { return timeEnd_; }
          set {
            timeEnd_ = value;
          }
        }

        /// <summary>Field number for the "time_delta" field.</summary>
        public const int TimeDeltaFieldNumber = 4;
        private double timeDelta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TimeDelta {
          get { return timeDelta_; }
          set {
            timeDelta_ = value;
          }
        }

        /// <summary>Field number for the "smoke_test_count" field.</summary>
        public const int SmokeTestCountFieldNumber = 5;
        private int smokeTestCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SmokeTestCount {
          get { return smokeTestCount_; }
          set {
            smokeTestCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetrySmokeTest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetrySmokeTest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CurrentBotProgramName != other.CurrentBotProgramName) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeStart, other.TimeStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeEnd, other.TimeEnd)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeDelta, other.TimeDelta)) return false;
          if (SmokeTestCount != other.SmokeTestCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentBotProgramName.Length != 0) hash ^= CurrentBotProgramName.GetHashCode();
          if (TimeStart != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeStart);
          if (TimeEnd != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeEnd);
          if (TimeDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeDelta);
          if (SmokeTestCount != 0) hash ^= SmokeTestCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentBotProgramName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CurrentBotProgramName);
          }
          if (TimeStart != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TimeStart);
          }
          if (TimeEnd != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(TimeEnd);
          }
          if (TimeDelta != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(TimeDelta);
          }
          if (SmokeTestCount != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(SmokeTestCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentBotProgramName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentBotProgramName);
          }
          if (TimeStart != 0D) {
            size += 1 + 8;
          }
          if (TimeEnd != 0D) {
            size += 1 + 8;
          }
          if (TimeDelta != 0D) {
            size += 1 + 8;
          }
          if (SmokeTestCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmokeTestCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetrySmokeTest other) {
          if (other == null) {
            return;
          }
          if (other.CurrentBotProgramName.Length != 0) {
            CurrentBotProgramName = other.CurrentBotProgramName;
          }
          if (other.TimeStart != 0D) {
            TimeStart = other.TimeStart;
          }
          if (other.TimeEnd != 0D) {
            TimeEnd = other.TimeEnd;
          }
          if (other.TimeDelta != 0D) {
            TimeDelta = other.TimeDelta;
          }
          if (other.SmokeTestCount != 0) {
            SmokeTestCount = other.SmokeTestCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CurrentBotProgramName = input.ReadString();
                break;
              }
              case 17: {
                TimeStart = input.ReadDouble();
                break;
              }
              case 25: {
                TimeEnd = input.ReadDouble();
                break;
              }
              case 33: {
                TimeDelta = input.ReadDouble();
                break;
              }
              case 40: {
                SmokeTestCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClientTelemetryRegistryInfo : pb::IMessage<ClientTelemetryRegistryInfo> {
        private static readonly pb::MessageParser<ClientTelemetryRegistryInfo> _parser = new pb::MessageParser<ClientTelemetryRegistryInfo>(() => new ClientTelemetryRegistryInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTelemetryRegistryInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[56]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRegistryInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRegistryInfo(ClientTelemetryRegistryInfo other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientTelemetryRegistryInfo Clone() {
          return new ClientTelemetryRegistryInfo(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClientTelemetryRegistryInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientTelemetryRegistryInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientTelemetryRegistryInfo other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class PlatformServerData : pb::IMessage<PlatformServerData> {
        private static readonly pb::MessageParser<PlatformServerData> _parser = new pb::MessageParser<PlatformServerData>(() => new PlatformServerData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlatformServerData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.LexiconApprovedClientTelemetry.Descriptor.NestedTypes[57]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlatformServerData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlatformServerData(PlatformServerData other) : this() {
          userId_ = other.userId_;
          telemetryId_ = other.telemetryId_;
          sessionId_ = other.sessionId_;
          experimentIds_ = other.experimentIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlatformServerData Clone() {
          return new PlatformServerData(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "telemetry_id" field.</summary>
        public const int TelemetryIdFieldNumber = 2;
        private string telemetryId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TelemetryId {
          get { return telemetryId_; }
          set {
            telemetryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "session_id" field.</summary>
        public const int SessionIdFieldNumber = 3;
        private string sessionId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SessionId {
          get { return sessionId_; }
          set {
            sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "experiment_ids" field.</summary>
        public const int ExperimentIdsFieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_experimentIds_codec
            = pb::FieldCodec.ForInt32(34);
        private readonly pbc::RepeatedField<int> experimentIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> ExperimentIds {
          get { return experimentIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlatformServerData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlatformServerData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (TelemetryId != other.TelemetryId) return false;
          if (SessionId != other.SessionId) return false;
          if(!experimentIds_.Equals(other.experimentIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          if (TelemetryId.Length != 0) hash ^= TelemetryId.GetHashCode();
          if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
          hash ^= experimentIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UserId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          if (TelemetryId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TelemetryId);
          }
          if (SessionId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(SessionId);
          }
          experimentIds_.WriteTo(output, _repeated_experimentIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          if (TelemetryId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TelemetryId);
          }
          if (SessionId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
          }
          size += experimentIds_.CalculateSize(_repeated_experimentIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlatformServerData other) {
          if (other == null) {
            return;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
          if (other.TelemetryId.Length != 0) {
            TelemetryId = other.TelemetryId;
          }
          if (other.SessionId.Length != 0) {
            SessionId = other.SessionId;
          }
          experimentIds_.Add(other.experimentIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 18: {
                TelemetryId = input.ReadString();
                break;
              }
              case 26: {
                SessionId = input.ReadString();
                break;
              }
              case 34:
              case 32: {
                experimentIds_.AddEntriesFrom(input, _repeated_experimentIds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
