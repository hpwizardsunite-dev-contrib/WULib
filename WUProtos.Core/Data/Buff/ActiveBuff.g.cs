// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Buff/ActiveBuff.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Buff {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Buff/ActiveBuff.proto</summary>
  public static partial class ActiveBuffReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Buff/ActiveBuff.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ActiveBuffReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNXVVByb3Rvcy9EYXRhL0J1ZmYvQWN0aXZlQnVmZi5wcm90bxISV1VQcm90",
            "b3MuRGF0YS5CdWZmIqcMCgpBY3RpdmVCdWZmEhMKC2dtdF9idWZmX2lkGAEg",
            "ASgJEkcKCmV4cGlyYXRpb24YAiABKAsyMy5XVVByb3Rvcy5EYXRhLkJ1ZmYu",
            "QWN0aXZlQnVmZi5BY3RpdmVCdWZmRXhwaXJhdGlvbhI/CgZzb3VyY2UYAyAB",
            "KAsyLy5XVVByb3Rvcy5EYXRhLkJ1ZmYuQWN0aXZlQnVmZi5BY3RpdmVCdWZm",
            "U291cmNlEhUKDXN0YXJ0X3RpbWVfbXMYBSABKAMa+QUKFEFjdGl2ZUJ1ZmZF",
            "eHBpcmF0aW9uElwKBHRpbWUYASABKAsyTC5XVVByb3Rvcy5EYXRhLkJ1ZmYu",
            "QWN0aXZlQnVmZi5BY3RpdmVCdWZmRXhwaXJhdGlvbi5UaW1lQWN0aXZlQnVm",
            "ZkV4cGlyYXRpb25IABJiCgdjaGFyZ2VzGAIgASgLMk8uV1VQcm90b3MuRGF0",
            "YS5CdWZmLkFjdGl2ZUJ1ZmYuQWN0aXZlQnVmZkV4cGlyYXRpb24uQ2hhcmdl",
            "c0FjdGl2ZUJ1ZmZFeHBpcmF0aW9uSAASYgoKcHJvZmVzc2lvbhgDIAEoCzJM",
            "LldVUHJvdG9zLkRhdGEuQnVmZi5BY3RpdmVCdWZmLkFjdGl2ZUJ1ZmZFeHBp",
            "cmF0aW9uLlByb2Zlc3Npb25CdWZmRXhwaXJhdGlvbkgAEmAKCXBlcm1hbmVu",
            "dBgEIAEoCzJLLldVUHJvdG9zLkRhdGEuQnVmZi5BY3RpdmVCdWZmLkFjdGl2",
            "ZUJ1ZmZFeHBpcmF0aW9uLlBlcm1hbmVudEJ1ZmZFeHBpcmF0aW9uSAASYAoJ",
            "Y2hhbGxlbmdlGAYgASgLMksuV1VQcm90b3MuRGF0YS5CdWZmLkFjdGl2ZUJ1",
            "ZmYuQWN0aXZlQnVmZkV4cGlyYXRpb24uQ2hhbGxlbmdlQnVmZkV4cGlyYXRp",
            "b25IABoyChhUaW1lQWN0aXZlQnVmZkV4cGlyYXRpb24SFgoOZXhwaXJ5X3Rp",
            "bWVfbXMYASABKAMaTgobQ2hhcmdlc0FjdGl2ZUJ1ZmZFeHBpcmF0aW9uEhQK",
            "DGVuY291bnRlcl9pZBgBIAEoDBIZChFyZW1haW5pbmdfY2hhcmdlcxgCIAEo",
            "BRoZChdQZXJtYW5lbnRCdWZmRXhwaXJhdGlvbhoZChdDaGFsbGVuZ2VCdWZm",
            "RXhwaXJhdGlvbho1ChhQcm9mZXNzaW9uQnVmZkV4cGlyYXRpb24SGQoRcHJv",
            "ZmVzc2lvbl9nbXRfaWQYASABKAlCBgoEVHlwZRrmBAoQQWN0aXZlQnVmZlNv",
            "dXJjZRJfCgp2YXVsdF9pdGVtGAEgASgLMkkuV1VQcm90b3MuRGF0YS5CdWZm",
            "LkFjdGl2ZUJ1ZmYuQWN0aXZlQnVmZlNvdXJjZS5WYXVsdEl0ZW1BY3RpdmVC",
            "dWZmU291cmNlSAASYAoKcHJvZmVzc2lvbhgCIAEoCzJKLldVUHJvdG9zLkRh",
            "dGEuQnVmZi5BY3RpdmVCdWZmLkFjdGl2ZUJ1ZmZTb3VyY2UuUHJvZmVzc2lv",
            "bkFjdGl2ZUJ1ZmZTb3VyY2VIABJhCgttYXBfYWJpbGl0eRgDIAEoCzJKLldV",
            "UHJvdG9zLkRhdGEuQnVmZi5BY3RpdmVCdWZmLkFjdGl2ZUJ1ZmZTb3VyY2Uu",
            "TWFwQWJpbGl0eUFjdGl2ZUJ1ZmZTb3VyY2VIABp2ChpQcm9mZXNzaW9uQWN0",
            "aXZlQnVmZlNvdXJjZRIZChFwcm9mZXNzaW9uX2dtdF9pZBgBIAEoCRIeChZw",
            "cm9mZXNzaW9uX2dtdF9ub2RlX2lkGAIgASgJEh0KFXByb2Zlc3Npb25fbm9k",
            "ZV9sZXZlbBgDIAEoDRp0ChpNYXBBYmlsaXR5QWN0aXZlQnVmZlNvdXJjZRIa",
            "ChJtYXBfYWJpbGl0eV9nbXRfaWQYASABKAkSGQoRbWFwX2FiaWxpdHlfbGV2",
            "ZWwYAiABKA0SHwoXY2FzdGluZ19wbGF5ZXJfbmlja25hbWUYAyABKAkaNgoZ",
            "VmF1bHRJdGVtQWN0aXZlQnVmZlNvdXJjZRIZChF2YXVsdF9pdGVtX2dtdF9p",
            "ZBgBIAEoCUIGCgRUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff), global::WUProtos.Data.Buff.ActiveBuff.Parser, new[]{ "GmtBuffId", "Expiration", "Source", "StartTimeMs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Parser, new[]{ "Time", "Charges", "Profession", "Permanent", "Challenge" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration.Parser, new[]{ "ExpiryTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration.Parser, new[]{ "EncounterId", "RemainingCharges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration.Parser, new[]{ "ProfessionGmtId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Parser, new[]{ "VaultItem", "Profession", "MapAbility" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource.Parser, new[]{ "ProfessionGmtId", "ProfessionGmtNodeId", "ProfessionNodeLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource.Parser, new[]{ "MapAbilityGmtId", "MapAbilityLevel", "CastingPlayerNickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource), global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource.Parser, new[]{ "VaultItemGmtId" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActiveBuff : pb::IMessage<ActiveBuff> {
    private static readonly pb::MessageParser<ActiveBuff> _parser = new pb::MessageParser<ActiveBuff>(() => new ActiveBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Buff.ActiveBuffReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveBuff(ActiveBuff other) : this() {
      gmtBuffId_ = other.gmtBuffId_;
      expiration_ = other.expiration_ != null ? other.expiration_.Clone() : null;
      source_ = other.source_ != null ? other.source_.Clone() : null;
      startTimeMs_ = other.startTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveBuff Clone() {
      return new ActiveBuff(this);
    }

    /// <summary>Field number for the "gmt_buff_id" field.</summary>
    public const int GmtBuffIdFieldNumber = 1;
    private string gmtBuffId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GmtBuffId {
      get { return gmtBuffId_; }
      set {
        gmtBuffId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 2;
    private global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "start_time_ms" field.</summary>
    public const int StartTimeMsFieldNumber = 5;
    private long startTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeMs {
      get { return startTimeMs_; }
      set {
        startTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GmtBuffId != other.GmtBuffId) return false;
      if (!object.Equals(Expiration, other.Expiration)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (StartTimeMs != other.StartTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GmtBuffId.Length != 0) hash ^= GmtBuffId.GetHashCode();
      if (expiration_ != null) hash ^= Expiration.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (StartTimeMs != 0L) hash ^= StartTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GmtBuffId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GmtBuffId);
      }
      if (expiration_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expiration);
      }
      if (source_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Source);
      }
      if (StartTimeMs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GmtBuffId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GmtBuffId);
      }
      if (expiration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiration);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (StartTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveBuff other) {
      if (other == null) {
        return;
      }
      if (other.GmtBuffId.Length != 0) {
        GmtBuffId = other.GmtBuffId;
      }
      if (other.expiration_ != null) {
        if (expiration_ == null) {
          Expiration = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration();
        }
        Expiration.MergeFrom(other.Expiration);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.StartTimeMs != 0L) {
        StartTimeMs = other.StartTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GmtBuffId = input.ReadString();
            break;
          }
          case 18: {
            if (expiration_ == null) {
              Expiration = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration();
            }
            input.ReadMessage(Expiration);
            break;
          }
          case 26: {
            if (source_ == null) {
              Source = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource();
            }
            input.ReadMessage(Source);
            break;
          }
          case 40: {
            StartTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ActiveBuff message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ActiveBuffExpiration : pb::IMessage<ActiveBuffExpiration> {
        private static readonly pb::MessageParser<ActiveBuffExpiration> _parser = new pb::MessageParser<ActiveBuffExpiration>(() => new ActiveBuffExpiration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActiveBuffExpiration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Buff.ActiveBuff.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveBuffExpiration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveBuffExpiration(ActiveBuffExpiration other) : this() {
          switch (other.TypeCase) {
            case TypeOneofCase.Time:
              Time = other.Time.Clone();
              break;
            case TypeOneofCase.Charges:
              Charges = other.Charges.Clone();
              break;
            case TypeOneofCase.Profession:
              Profession = other.Profession.Clone();
              break;
            case TypeOneofCase.Permanent:
              Permanent = other.Permanent.Clone();
              break;
            case TypeOneofCase.Challenge:
              Challenge = other.Challenge.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveBuffExpiration Clone() {
          return new ActiveBuffExpiration(this);
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration Time {
          get { return typeCase_ == TypeOneofCase.Time ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Time;
          }
        }

        /// <summary>Field number for the "charges" field.</summary>
        public const int ChargesFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration Charges {
          get { return typeCase_ == TypeOneofCase.Charges ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Charges;
          }
        }

        /// <summary>Field number for the "profession" field.</summary>
        public const int ProfessionFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration Profession {
          get { return typeCase_ == TypeOneofCase.Profession ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Profession;
          }
        }

        /// <summary>Field number for the "permanent" field.</summary>
        public const int PermanentFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration Permanent {
          get { return typeCase_ == TypeOneofCase.Permanent ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Permanent;
          }
        }

        /// <summary>Field number for the "challenge" field.</summary>
        public const int ChallengeFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration Challenge {
          get { return typeCase_ == TypeOneofCase.Challenge ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Challenge;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "Type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          Time = 1,
          Charges = 2,
          Profession = 3,
          Permanent = 4,
          Challenge = 6,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ActiveBuffExpiration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActiveBuffExpiration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Time, other.Time)) return false;
          if (!object.Equals(Charges, other.Charges)) return false;
          if (!object.Equals(Profession, other.Profession)) return false;
          if (!object.Equals(Permanent, other.Permanent)) return false;
          if (!object.Equals(Challenge, other.Challenge)) return false;
          if (TypeCase != other.TypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (typeCase_ == TypeOneofCase.Time) hash ^= Time.GetHashCode();
          if (typeCase_ == TypeOneofCase.Charges) hash ^= Charges.GetHashCode();
          if (typeCase_ == TypeOneofCase.Profession) hash ^= Profession.GetHashCode();
          if (typeCase_ == TypeOneofCase.Permanent) hash ^= Permanent.GetHashCode();
          if (typeCase_ == TypeOneofCase.Challenge) hash ^= Challenge.GetHashCode();
          hash ^= (int) typeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (typeCase_ == TypeOneofCase.Time) {
            output.WriteRawTag(10);
            output.WriteMessage(Time);
          }
          if (typeCase_ == TypeOneofCase.Charges) {
            output.WriteRawTag(18);
            output.WriteMessage(Charges);
          }
          if (typeCase_ == TypeOneofCase.Profession) {
            output.WriteRawTag(26);
            output.WriteMessage(Profession);
          }
          if (typeCase_ == TypeOneofCase.Permanent) {
            output.WriteRawTag(34);
            output.WriteMessage(Permanent);
          }
          if (typeCase_ == TypeOneofCase.Challenge) {
            output.WriteRawTag(50);
            output.WriteMessage(Challenge);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (typeCase_ == TypeOneofCase.Time) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
          }
          if (typeCase_ == TypeOneofCase.Charges) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Charges);
          }
          if (typeCase_ == TypeOneofCase.Profession) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profession);
          }
          if (typeCase_ == TypeOneofCase.Permanent) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Permanent);
          }
          if (typeCase_ == TypeOneofCase.Challenge) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActiveBuffExpiration other) {
          if (other == null) {
            return;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.Time:
              if (Time == null) {
                Time = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration();
              }
              Time.MergeFrom(other.Time);
              break;
            case TypeOneofCase.Charges:
              if (Charges == null) {
                Charges = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration();
              }
              Charges.MergeFrom(other.Charges);
              break;
            case TypeOneofCase.Profession:
              if (Profession == null) {
                Profession = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration();
              }
              Profession.MergeFrom(other.Profession);
              break;
            case TypeOneofCase.Permanent:
              if (Permanent == null) {
                Permanent = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration();
              }
              Permanent.MergeFrom(other.Permanent);
              break;
            case TypeOneofCase.Challenge:
              if (Challenge == null) {
                Challenge = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration();
              }
              Challenge.MergeFrom(other.Challenge);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.TimeActiveBuffExpiration();
                if (typeCase_ == TypeOneofCase.Time) {
                  subBuilder.MergeFrom(Time);
                }
                input.ReadMessage(subBuilder);
                Time = subBuilder;
                break;
              }
              case 18: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChargesActiveBuffExpiration();
                if (typeCase_ == TypeOneofCase.Charges) {
                  subBuilder.MergeFrom(Charges);
                }
                input.ReadMessage(subBuilder);
                Charges = subBuilder;
                break;
              }
              case 26: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ProfessionBuffExpiration();
                if (typeCase_ == TypeOneofCase.Profession) {
                  subBuilder.MergeFrom(Profession);
                }
                input.ReadMessage(subBuilder);
                Profession = subBuilder;
                break;
              }
              case 34: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.PermanentBuffExpiration();
                if (typeCase_ == TypeOneofCase.Permanent) {
                  subBuilder.MergeFrom(Permanent);
                }
                input.ReadMessage(subBuilder);
                Permanent = subBuilder;
                break;
              }
              case 50: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Types.ChallengeBuffExpiration();
                if (typeCase_ == TypeOneofCase.Challenge) {
                  subBuilder.MergeFrom(Challenge);
                }
                input.ReadMessage(subBuilder);
                Challenge = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActiveBuffExpiration message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class TimeActiveBuffExpiration : pb::IMessage<TimeActiveBuffExpiration> {
            private static readonly pb::MessageParser<TimeActiveBuffExpiration> _parser = new pb::MessageParser<TimeActiveBuffExpiration>(() => new TimeActiveBuffExpiration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TimeActiveBuffExpiration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TimeActiveBuffExpiration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TimeActiveBuffExpiration(TimeActiveBuffExpiration other) : this() {
              expiryTimeMs_ = other.expiryTimeMs_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TimeActiveBuffExpiration Clone() {
              return new TimeActiveBuffExpiration(this);
            }

            /// <summary>Field number for the "expiry_time_ms" field.</summary>
            public const int ExpiryTimeMsFieldNumber = 1;
            private long expiryTimeMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long ExpiryTimeMs {
              get { return expiryTimeMs_; }
              set {
                expiryTimeMs_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TimeActiveBuffExpiration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TimeActiveBuffExpiration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ExpiryTimeMs != other.ExpiryTimeMs) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ExpiryTimeMs != 0L) hash ^= ExpiryTimeMs.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ExpiryTimeMs != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(ExpiryTimeMs);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ExpiryTimeMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiryTimeMs);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TimeActiveBuffExpiration other) {
              if (other == null) {
                return;
              }
              if (other.ExpiryTimeMs != 0L) {
                ExpiryTimeMs = other.ExpiryTimeMs;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    ExpiryTimeMs = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class ChargesActiveBuffExpiration : pb::IMessage<ChargesActiveBuffExpiration> {
            private static readonly pb::MessageParser<ChargesActiveBuffExpiration> _parser = new pb::MessageParser<ChargesActiveBuffExpiration>(() => new ChargesActiveBuffExpiration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChargesActiveBuffExpiration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChargesActiveBuffExpiration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChargesActiveBuffExpiration(ChargesActiveBuffExpiration other) : this() {
              encounterId_ = other.encounterId_;
              remainingCharges_ = other.remainingCharges_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChargesActiveBuffExpiration Clone() {
              return new ChargesActiveBuffExpiration(this);
            }

            /// <summary>Field number for the "encounter_id" field.</summary>
            public const int EncounterIdFieldNumber = 1;
            private pb::ByteString encounterId_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString EncounterId {
              get { return encounterId_; }
              set {
                encounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "remaining_charges" field.</summary>
            public const int RemainingChargesFieldNumber = 2;
            private int remainingCharges_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int RemainingCharges {
              get { return remainingCharges_; }
              set {
                remainingCharges_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChargesActiveBuffExpiration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChargesActiveBuffExpiration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EncounterId != other.EncounterId) return false;
              if (RemainingCharges != other.RemainingCharges) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (EncounterId.Length != 0) hash ^= EncounterId.GetHashCode();
              if (RemainingCharges != 0) hash ^= RemainingCharges.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (EncounterId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(EncounterId);
              }
              if (RemainingCharges != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(RemainingCharges);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (EncounterId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncounterId);
              }
              if (RemainingCharges != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingCharges);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChargesActiveBuffExpiration other) {
              if (other == null) {
                return;
              }
              if (other.EncounterId.Length != 0) {
                EncounterId = other.EncounterId;
              }
              if (other.RemainingCharges != 0) {
                RemainingCharges = other.RemainingCharges;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    EncounterId = input.ReadBytes();
                    break;
                  }
                  case 16: {
                    RemainingCharges = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class PermanentBuffExpiration : pb::IMessage<PermanentBuffExpiration> {
            private static readonly pb::MessageParser<PermanentBuffExpiration> _parser = new pb::MessageParser<PermanentBuffExpiration>(() => new PermanentBuffExpiration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PermanentBuffExpiration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PermanentBuffExpiration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PermanentBuffExpiration(PermanentBuffExpiration other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PermanentBuffExpiration Clone() {
              return new PermanentBuffExpiration(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PermanentBuffExpiration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PermanentBuffExpiration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PermanentBuffExpiration other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class ChallengeBuffExpiration : pb::IMessage<ChallengeBuffExpiration> {
            private static readonly pb::MessageParser<ChallengeBuffExpiration> _parser = new pb::MessageParser<ChallengeBuffExpiration>(() => new ChallengeBuffExpiration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ChallengeBuffExpiration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBuffExpiration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBuffExpiration(ChallengeBuffExpiration other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ChallengeBuffExpiration Clone() {
              return new ChallengeBuffExpiration(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ChallengeBuffExpiration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ChallengeBuffExpiration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ChallengeBuffExpiration other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          public sealed partial class ProfessionBuffExpiration : pb::IMessage<ProfessionBuffExpiration> {
            private static readonly pb::MessageParser<ProfessionBuffExpiration> _parser = new pb::MessageParser<ProfessionBuffExpiration>(() => new ProfessionBuffExpiration());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ProfessionBuffExpiration> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffExpiration.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionBuffExpiration() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionBuffExpiration(ProfessionBuffExpiration other) : this() {
              professionGmtId_ = other.professionGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionBuffExpiration Clone() {
              return new ProfessionBuffExpiration(this);
            }

            /// <summary>Field number for the "profession_gmt_id" field.</summary>
            public const int ProfessionGmtIdFieldNumber = 1;
            private string professionGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ProfessionGmtId {
              get { return professionGmtId_; }
              set {
                professionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ProfessionBuffExpiration);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ProfessionBuffExpiration other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ProfessionGmtId != other.ProfessionGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ProfessionGmtId.Length != 0) hash ^= ProfessionGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ProfessionGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ProfessionGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ProfessionGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ProfessionBuffExpiration other) {
              if (other == null) {
                return;
              }
              if (other.ProfessionGmtId.Length != 0) {
                ProfessionGmtId = other.ProfessionGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ProfessionGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class ActiveBuffSource : pb::IMessage<ActiveBuffSource> {
        private static readonly pb::MessageParser<ActiveBuffSource> _parser = new pb::MessageParser<ActiveBuffSource>(() => new ActiveBuffSource());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActiveBuffSource> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Buff.ActiveBuff.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveBuffSource() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveBuffSource(ActiveBuffSource other) : this() {
          switch (other.TypeCase) {
            case TypeOneofCase.VaultItem:
              VaultItem = other.VaultItem.Clone();
              break;
            case TypeOneofCase.Profession:
              Profession = other.Profession.Clone();
              break;
            case TypeOneofCase.MapAbility:
              MapAbility = other.MapAbility.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ActiveBuffSource Clone() {
          return new ActiveBuffSource(this);
        }

        /// <summary>Field number for the "vault_item" field.</summary>
        public const int VaultItemFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource VaultItem {
          get { return typeCase_ == TypeOneofCase.VaultItem ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.VaultItem;
          }
        }

        /// <summary>Field number for the "profession" field.</summary>
        public const int ProfessionFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource Profession {
          get { return typeCase_ == TypeOneofCase.Profession ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Profession;
          }
        }

        /// <summary>Field number for the "map_ability" field.</summary>
        public const int MapAbilityFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource MapAbility {
          get { return typeCase_ == TypeOneofCase.MapAbility ? (global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.MapAbility;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "Type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          VaultItem = 1,
          Profession = 2,
          MapAbility = 3,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ActiveBuffSource);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ActiveBuffSource other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(VaultItem, other.VaultItem)) return false;
          if (!object.Equals(Profession, other.Profession)) return false;
          if (!object.Equals(MapAbility, other.MapAbility)) return false;
          if (TypeCase != other.TypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (typeCase_ == TypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
          if (typeCase_ == TypeOneofCase.Profession) hash ^= Profession.GetHashCode();
          if (typeCase_ == TypeOneofCase.MapAbility) hash ^= MapAbility.GetHashCode();
          hash ^= (int) typeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (typeCase_ == TypeOneofCase.VaultItem) {
            output.WriteRawTag(10);
            output.WriteMessage(VaultItem);
          }
          if (typeCase_ == TypeOneofCase.Profession) {
            output.WriteRawTag(18);
            output.WriteMessage(Profession);
          }
          if (typeCase_ == TypeOneofCase.MapAbility) {
            output.WriteRawTag(26);
            output.WriteMessage(MapAbility);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (typeCase_ == TypeOneofCase.VaultItem) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultItem);
          }
          if (typeCase_ == TypeOneofCase.Profession) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profession);
          }
          if (typeCase_ == TypeOneofCase.MapAbility) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapAbility);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ActiveBuffSource other) {
          if (other == null) {
            return;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.VaultItem:
              if (VaultItem == null) {
                VaultItem = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource();
              }
              VaultItem.MergeFrom(other.VaultItem);
              break;
            case TypeOneofCase.Profession:
              if (Profession == null) {
                Profession = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource();
              }
              Profession.MergeFrom(other.Profession);
              break;
            case TypeOneofCase.MapAbility:
              if (MapAbility == null) {
                MapAbility = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource();
              }
              MapAbility.MergeFrom(other.MapAbility);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.VaultItemActiveBuffSource();
                if (typeCase_ == TypeOneofCase.VaultItem) {
                  subBuilder.MergeFrom(VaultItem);
                }
                input.ReadMessage(subBuilder);
                VaultItem = subBuilder;
                break;
              }
              case 18: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.ProfessionActiveBuffSource();
                if (typeCase_ == TypeOneofCase.Profession) {
                  subBuilder.MergeFrom(Profession);
                }
                input.ReadMessage(subBuilder);
                Profession = subBuilder;
                break;
              }
              case 26: {
                global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource subBuilder = new global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Types.MapAbilityActiveBuffSource();
                if (typeCase_ == TypeOneofCase.MapAbility) {
                  subBuilder.MergeFrom(MapAbility);
                }
                input.ReadMessage(subBuilder);
                MapAbility = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ActiveBuffSource message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ProfessionActiveBuffSource : pb::IMessage<ProfessionActiveBuffSource> {
            private static readonly pb::MessageParser<ProfessionActiveBuffSource> _parser = new pb::MessageParser<ProfessionActiveBuffSource>(() => new ProfessionActiveBuffSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ProfessionActiveBuffSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionActiveBuffSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionActiveBuffSource(ProfessionActiveBuffSource other) : this() {
              professionGmtId_ = other.professionGmtId_;
              professionGmtNodeId_ = other.professionGmtNodeId_;
              professionNodeLevel_ = other.professionNodeLevel_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ProfessionActiveBuffSource Clone() {
              return new ProfessionActiveBuffSource(this);
            }

            /// <summary>Field number for the "profession_gmt_id" field.</summary>
            public const int ProfessionGmtIdFieldNumber = 1;
            private string professionGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ProfessionGmtId {
              get { return professionGmtId_; }
              set {
                professionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "profession_gmt_node_id" field.</summary>
            public const int ProfessionGmtNodeIdFieldNumber = 2;
            private string professionGmtNodeId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ProfessionGmtNodeId {
              get { return professionGmtNodeId_; }
              set {
                professionGmtNodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "profession_node_level" field.</summary>
            public const int ProfessionNodeLevelFieldNumber = 3;
            private uint professionNodeLevel_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint ProfessionNodeLevel {
              get { return professionNodeLevel_; }
              set {
                professionNodeLevel_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ProfessionActiveBuffSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ProfessionActiveBuffSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ProfessionGmtId != other.ProfessionGmtId) return false;
              if (ProfessionGmtNodeId != other.ProfessionGmtNodeId) return false;
              if (ProfessionNodeLevel != other.ProfessionNodeLevel) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ProfessionGmtId.Length != 0) hash ^= ProfessionGmtId.GetHashCode();
              if (ProfessionGmtNodeId.Length != 0) hash ^= ProfessionGmtNodeId.GetHashCode();
              if (ProfessionNodeLevel != 0) hash ^= ProfessionNodeLevel.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ProfessionGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ProfessionGmtId);
              }
              if (ProfessionGmtNodeId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(ProfessionGmtNodeId);
              }
              if (ProfessionNodeLevel != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(ProfessionNodeLevel);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ProfessionGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionGmtId);
              }
              if (ProfessionGmtNodeId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionGmtNodeId);
              }
              if (ProfessionNodeLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProfessionNodeLevel);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ProfessionActiveBuffSource other) {
              if (other == null) {
                return;
              }
              if (other.ProfessionGmtId.Length != 0) {
                ProfessionGmtId = other.ProfessionGmtId;
              }
              if (other.ProfessionGmtNodeId.Length != 0) {
                ProfessionGmtNodeId = other.ProfessionGmtNodeId;
              }
              if (other.ProfessionNodeLevel != 0) {
                ProfessionNodeLevel = other.ProfessionNodeLevel;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ProfessionGmtId = input.ReadString();
                    break;
                  }
                  case 18: {
                    ProfessionGmtNodeId = input.ReadString();
                    break;
                  }
                  case 24: {
                    ProfessionNodeLevel = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MapAbilityActiveBuffSource : pb::IMessage<MapAbilityActiveBuffSource> {
            private static readonly pb::MessageParser<MapAbilityActiveBuffSource> _parser = new pb::MessageParser<MapAbilityActiveBuffSource>(() => new MapAbilityActiveBuffSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MapAbilityActiveBuffSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbilityActiveBuffSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbilityActiveBuffSource(MapAbilityActiveBuffSource other) : this() {
              mapAbilityGmtId_ = other.mapAbilityGmtId_;
              mapAbilityLevel_ = other.mapAbilityLevel_;
              castingPlayerNickname_ = other.castingPlayerNickname_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbilityActiveBuffSource Clone() {
              return new MapAbilityActiveBuffSource(this);
            }

            /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
            public const int MapAbilityGmtIdFieldNumber = 1;
            private string mapAbilityGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MapAbilityGmtId {
              get { return mapAbilityGmtId_; }
              set {
                mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "map_ability_level" field.</summary>
            public const int MapAbilityLevelFieldNumber = 2;
            private uint mapAbilityLevel_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MapAbilityLevel {
              get { return mapAbilityLevel_; }
              set {
                mapAbilityLevel_ = value;
              }
            }

            /// <summary>Field number for the "casting_player_nickname" field.</summary>
            public const int CastingPlayerNicknameFieldNumber = 3;
            private string castingPlayerNickname_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CastingPlayerNickname {
              get { return castingPlayerNickname_; }
              set {
                castingPlayerNickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MapAbilityActiveBuffSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MapAbilityActiveBuffSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
              if (MapAbilityLevel != other.MapAbilityLevel) return false;
              if (CastingPlayerNickname != other.CastingPlayerNickname) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
              if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
              if (CastingPlayerNickname.Length != 0) hash ^= CastingPlayerNickname.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MapAbilityGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(MapAbilityGmtId);
              }
              if (MapAbilityLevel != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(MapAbilityLevel);
              }
              if (CastingPlayerNickname.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(CastingPlayerNickname);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MapAbilityGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
              }
              if (MapAbilityLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapAbilityLevel);
              }
              if (CastingPlayerNickname.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CastingPlayerNickname);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MapAbilityActiveBuffSource other) {
              if (other == null) {
                return;
              }
              if (other.MapAbilityGmtId.Length != 0) {
                MapAbilityGmtId = other.MapAbilityGmtId;
              }
              if (other.MapAbilityLevel != 0) {
                MapAbilityLevel = other.MapAbilityLevel;
              }
              if (other.CastingPlayerNickname.Length != 0) {
                CastingPlayerNickname = other.CastingPlayerNickname;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    MapAbilityGmtId = input.ReadString();
                    break;
                  }
                  case 16: {
                    MapAbilityLevel = input.ReadUInt32();
                    break;
                  }
                  case 26: {
                    CastingPlayerNickname = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class VaultItemActiveBuffSource : pb::IMessage<VaultItemActiveBuffSource> {
            private static readonly pb::MessageParser<VaultItemActiveBuffSource> _parser = new pb::MessageParser<VaultItemActiveBuffSource>(() => new VaultItemActiveBuffSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<VaultItemActiveBuffSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.Buff.ActiveBuff.Types.ActiveBuffSource.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VaultItemActiveBuffSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VaultItemActiveBuffSource(VaultItemActiveBuffSource other) : this() {
              vaultItemGmtId_ = other.vaultItemGmtId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public VaultItemActiveBuffSource Clone() {
              return new VaultItemActiveBuffSource(this);
            }

            /// <summary>Field number for the "vault_item_gmt_id" field.</summary>
            public const int VaultItemGmtIdFieldNumber = 1;
            private string vaultItemGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string VaultItemGmtId {
              get { return vaultItemGmtId_; }
              set {
                vaultItemGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as VaultItemActiveBuffSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(VaultItemActiveBuffSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (VaultItemGmtId != other.VaultItemGmtId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (VaultItemGmtId.Length != 0) hash ^= VaultItemGmtId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (VaultItemGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(VaultItemGmtId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (VaultItemGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(VaultItemGmtId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(VaultItemActiveBuffSource other) {
              if (other == null) {
                return;
              }
              if (other.VaultItemGmtId.Length != 0) {
                VaultItemGmtId = other.VaultItemGmtId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    VaultItemGmtId = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
