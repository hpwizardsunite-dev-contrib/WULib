// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/HookQuestTask.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/HookQuestTask.proto</summary>
  public static partial class HookQuestTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/HookQuestTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HookQuestTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFXVVByb3Rvcy9EYXRhL0hvb2tRdWVzdFRhc2sucHJvdG8SDVdVUHJvdG9z",
            "LkRhdGEiwBIKDUhvb2tRdWVzdFRhc2sSTQoMZG9fZW5jb3VudGVyGAEgASgL",
            "MjUuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RUYXNrLkRvRW5jb3VudGVySG9v",
            "a1F1ZXN0VGFza0gAEksKDWxvb3Rfb3V0cG9zdHMYAiABKAsyMi5XVVByb3Rv",
            "cy5EYXRhLkhvb2tRdWVzdFRhc2suTG9vdE91dHBvc3RzUXVlc3RUYXNrSAAS",
            "RQoKd2luX3RyYWNlcxgDIAEoCzIvLldVUHJvdG9zLkRhdGEuSG9va1F1ZXN0",
            "VGFzay5XaW5UcmFjZXNRdWVzdFRhc2tIABJkChpjb2xsZWN0X3BvdGlvbl9p",
            "bmdyZWRpZW50cxgEIAEoCzI+LldVUHJvdG9zLkRhdGEuSG9va1F1ZXN0VGFz",
            "ay5Db2xsZWN0UG90aW9uSW5ncmVkaWVudHNRdWVzdFRhc2tIABJJCgxicmV3",
            "X3BvdGlvbnMYBSABKAsyMS5XVVByb3Rvcy5EYXRhLkhvb2tRdWVzdFRhc2su",
            "QnJld1BvdGlvbnNRdWVzdFRhc2tIABJLCg13YWxrX2Rpc3RhbmNlGAYgASgL",
            "MjIuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RUYXNrLldhbGtEaXN0YW5jZVF1",
            "ZXN0VGFza0gAEmAKGHBsYXlfZm9ydHJlc3NfY2hhbGxlbmdlcxgHIAEoCzI8",
            "LldVUHJvdG9zLkRhdGEuSG9va1F1ZXN0VGFzay5QbGF5Rm9ydHJlc3NDaGFs",
            "bGVuZ2VzUXVlc3RUYXNrSAASawoYZGVmZWF0X21vYl9pbl9jaGFsbGVuZ2Vz",
            "GAggASgLMkcuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RUYXNrLkRlZmVhdE1v",
            "YlR5cGVJbldpemFyZGluZ0NoYWxsZW5nZVF1ZXN0VGFza0gAElUKEnVubG9j",
            "a19wb3J0bWFudGVhdRgJIAEoCzI3LldVUHJvdG9zLkRhdGEuSG9va1F1ZXN0",
            "VGFzay5VbmxvY2tQb3J0bWFudGVhdVF1ZXN0VGFza0gAEkcKC3VzZV9wb3Rp",
            "b25zGAogASgLMjAuV1VQcm90b3MuRGF0YS5Ib29rUXVlc3RUYXNrLlVzZVBv",
            "dGlvbnNRdWVzdFRhc2tIABJNCg5wbGFjZV9zdGlja2VycxgLIAEoCzIzLldV",
            "UHJvdG9zLkRhdGEuSG9va1F1ZXN0VGFzay5QbGFjZVN0aWNrZXJzUXVlc3RU",
            "YXNrSAASUQoQY29sbGVjdF9zdGlja2VycxgMIAEoCzI1LldVUHJvdG9zLkRh",
            "dGEuSG9va1F1ZXN0VGFzay5Db2xsZWN0U3RpY2tlcnNRdWVzdFRhc2tIABJH",
            "CgtjYXN0X3NwZWxscxgNIAEoCzIwLldVUHJvdG9zLkRhdGEuSG9va1F1ZXN0",
            "VGFzay5DYXN0U3BlbGxzUXVlc3RUYXNrSAAaigEKFlBsYWNlU3RpY2tlcnNR",
            "dWVzdFRhc2sSHAoUcmVxdWlyZWRfcGxhY2VfY291bnQYASABKAMSFgoOc3Rp",
            "Y2tlcl9nbXRfaWQYAiABKAkSGwoTc3RpY2tlcl9wYWdlX2dtdF9pZBgDIAEo",
            "CRIdChVzdGlja2VyX2ZhbWlseV9nbXRfaWQYBCABKAkaaAofUGxheUZvcnRy",
            "ZXNzQ2hhbGxlbmdlc1F1ZXN0VGFzaxIgChhyZXF1aXJlZF9jaGFsbGVuZ2Vf",
            "Y291bnQYASABKAMSIwobcmVxdWlyZWRfbGVhc3RfcGxheWVyX2NvdW50GAIg",
            "ASgDGloKGlVubG9ja1BvcnRtYW50ZWF1UXVlc3RUYXNrEh0KFXJlcXVpcmVk",
            "X3VubG9ja19jb3VudBgBIAEoAxIdChVtaW5pbXVtX2Rpc3RhbmNlX3R5cGUY",
            "AiABKAIaPQoVV2Fsa0Rpc3RhbmNlUXVlc3RUYXNrEiQKHHJlcXVpcmVkX21p",
            "Y3JvbWV0ZXJzX3RvX3dhbGsYASABKAMaSgoTVXNlUG90aW9uc1F1ZXN0VGFz",
            "axIaChJyZXF1aXJlZF91c2VfY291bnQYASABKAMSFwoPcmVxdWlyZWRfcG90",
            "aW9uGAIgASgJGjMKFEJyZXdQb3Rpb25zUXVlc3RUYXNrEhsKE3JlcXVpcmVk",
            "X2JyZXdfY291bnQYASABKAMaUwoTQ2FzdFNwZWxsc1F1ZXN0VGFzaxIcChRy",
            "ZXF1aXJlZF9zcGVsbF9jb3VudBgBIAEoAxIeChZyZXF1aXJlZF9tYXN0ZXJ5",
            "X2xldmVsGAIgASgCGmgKIUNvbGxlY3RQb3Rpb25JbmdyZWRpZW50c1F1ZXN0",
            "VGFzaxIoCiByZXF1aXJlZF9wb3Rpb25faW5ncmVkaWVudF9jb3VudBgBIAEo",
            "AxIZChFpbmdyZWRpZW50X2dtdF9pZBgCIAEoCRqOAQoYQ29sbGVjdFN0aWNr",
            "ZXJzUXVlc3RUYXNrEh4KFnJlcXVpcmVkX2NvbGxlY3RfY291bnQYASABKAMS",
            "FgoOc3RpY2tlcl9nbXRfaWQYAiABKAkSGwoTc3RpY2tlcl9wYWdlX2dtdF9p",
            "ZBgDIAEoCRIdChVzdGlja2VyX2ZhbWlseV9nbXRfaWQYBCABKAkaOAoVTG9v",
            "dE91dHBvc3RzUXVlc3RUYXNrEh8KF3JlcXVpcmVkX291dHBvc3RzX2NvdW50",
            "GAEgASgDGmUKKkRlZmVhdE1vYlR5cGVJbldpemFyZGluZ0NoYWxsZW5nZVF1",
            "ZXN0VGFzaxIdChVyZXF1aXJlZF9kZWZlYXRfY291bnQYASABKAMSGAoQZW5j",
            "b3VudGVyX2dtdF9pZBgCIAEoCRpQChhEb0VuY291bnRlckhvb2tRdWVzdFRh",
            "c2sSGAoQZW5jb3VudGVyX2dtdF9pZBgBIAEoCRIaChJyZXF1aXJlZF93aW5f",
            "Y291bnQYAiABKAMalQEKEldpblRyYWNlc1F1ZXN0VGFzaxIcChRyZXF1aXJl",
            "ZF90cmFjZV9jb3VudBgBIAEoAxIYChBlbmNvdW50ZXJfZ210X2lkGAIgASgJ",
            "EhwKFHJlZ2lzdHJ5X3BhZ2VfZ210X2lkGAMgASgJEhUKDWZhbWlseV9nbXRf",
            "aWQYBCABKAkSEgoKZGlmZmljdWx0eRgFIAEoAkIGCgRUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask), global::WUProtos.Data.HookQuestTask.Parser, new[]{ "DoEncounter", "LootOutposts", "WinTraces", "CollectPotionIngredients", "BrewPotions", "WalkDistance", "PlayFortressChallenges", "DefeatMobInChallenges", "UnlockPortmanteau", "UsePotions", "PlaceStickers", "CollectStickers", "CastSpells" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask), global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask.Parser, new[]{ "RequiredPlaceCount", "StickerGmtId", "StickerPageGmtId", "StickerFamilyGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask), global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask.Parser, new[]{ "RequiredChallengeCount", "RequiredLeastPlayerCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask), global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask.Parser, new[]{ "RequiredUnlockCount", "MinimumDistanceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask), global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask.Parser, new[]{ "RequiredMicrometersToWalk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask), global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask.Parser, new[]{ "RequiredUseCount", "RequiredPotion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask), global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask.Parser, new[]{ "RequiredBrewCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask), global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask.Parser, new[]{ "RequiredSpellCount", "RequiredMasteryLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask), global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask.Parser, new[]{ "RequiredPotionIngredientCount", "IngredientGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask), global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask.Parser, new[]{ "RequiredCollectCount", "StickerGmtId", "StickerPageGmtId", "StickerFamilyGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask), global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask.Parser, new[]{ "RequiredOutpostsCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask), global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask.Parser, new[]{ "RequiredDefeatCount", "EncounterGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask), global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask.Parser, new[]{ "EncounterGmtId", "RequiredWinCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask), global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask.Parser, new[]{ "RequiredTraceCount", "EncounterGmtId", "RegistryPageGmtId", "FamilyGmtId", "Difficulty" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HookQuestTask : pb::IMessage<HookQuestTask> {
    private static readonly pb::MessageParser<HookQuestTask> _parser = new pb::MessageParser<HookQuestTask>(() => new HookQuestTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HookQuestTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.HookQuestTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookQuestTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookQuestTask(HookQuestTask other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.DoEncounter:
          DoEncounter = other.DoEncounter.Clone();
          break;
        case TypeOneofCase.LootOutposts:
          LootOutposts = other.LootOutposts.Clone();
          break;
        case TypeOneofCase.WinTraces:
          WinTraces = other.WinTraces.Clone();
          break;
        case TypeOneofCase.CollectPotionIngredients:
          CollectPotionIngredients = other.CollectPotionIngredients.Clone();
          break;
        case TypeOneofCase.BrewPotions:
          BrewPotions = other.BrewPotions.Clone();
          break;
        case TypeOneofCase.WalkDistance:
          WalkDistance = other.WalkDistance.Clone();
          break;
        case TypeOneofCase.PlayFortressChallenges:
          PlayFortressChallenges = other.PlayFortressChallenges.Clone();
          break;
        case TypeOneofCase.DefeatMobInChallenges:
          DefeatMobInChallenges = other.DefeatMobInChallenges.Clone();
          break;
        case TypeOneofCase.UnlockPortmanteau:
          UnlockPortmanteau = other.UnlockPortmanteau.Clone();
          break;
        case TypeOneofCase.UsePotions:
          UsePotions = other.UsePotions.Clone();
          break;
        case TypeOneofCase.PlaceStickers:
          PlaceStickers = other.PlaceStickers.Clone();
          break;
        case TypeOneofCase.CollectStickers:
          CollectStickers = other.CollectStickers.Clone();
          break;
        case TypeOneofCase.CastSpells:
          CastSpells = other.CastSpells.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookQuestTask Clone() {
      return new HookQuestTask(this);
    }

    /// <summary>Field number for the "do_encounter" field.</summary>
    public const int DoEncounterFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask DoEncounter {
      get { return typeCase_ == TypeOneofCase.DoEncounter ? (global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DoEncounter;
      }
    }

    /// <summary>Field number for the "loot_outposts" field.</summary>
    public const int LootOutpostsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask LootOutposts {
      get { return typeCase_ == TypeOneofCase.LootOutposts ? (global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.LootOutposts;
      }
    }

    /// <summary>Field number for the "win_traces" field.</summary>
    public const int WinTracesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask WinTraces {
      get { return typeCase_ == TypeOneofCase.WinTraces ? (global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.WinTraces;
      }
    }

    /// <summary>Field number for the "collect_potion_ingredients" field.</summary>
    public const int CollectPotionIngredientsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask CollectPotionIngredients {
      get { return typeCase_ == TypeOneofCase.CollectPotionIngredients ? (global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectPotionIngredients;
      }
    }

    /// <summary>Field number for the "brew_potions" field.</summary>
    public const int BrewPotionsFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask BrewPotions {
      get { return typeCase_ == TypeOneofCase.BrewPotions ? (global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BrewPotions;
      }
    }

    /// <summary>Field number for the "walk_distance" field.</summary>
    public const int WalkDistanceFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask WalkDistance {
      get { return typeCase_ == TypeOneofCase.WalkDistance ? (global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.WalkDistance;
      }
    }

    /// <summary>Field number for the "play_fortress_challenges" field.</summary>
    public const int PlayFortressChallengesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask PlayFortressChallenges {
      get { return typeCase_ == TypeOneofCase.PlayFortressChallenges ? (global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlayFortressChallenges;
      }
    }

    /// <summary>Field number for the "defeat_mob_in_challenges" field.</summary>
    public const int DefeatMobInChallengesFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask DefeatMobInChallenges {
      get { return typeCase_ == TypeOneofCase.DefeatMobInChallenges ? (global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DefeatMobInChallenges;
      }
    }

    /// <summary>Field number for the "unlock_portmanteau" field.</summary>
    public const int UnlockPortmanteauFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask UnlockPortmanteau {
      get { return typeCase_ == TypeOneofCase.UnlockPortmanteau ? (global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UnlockPortmanteau;
      }
    }

    /// <summary>Field number for the "use_potions" field.</summary>
    public const int UsePotionsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask UsePotions {
      get { return typeCase_ == TypeOneofCase.UsePotions ? (global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.UsePotions;
      }
    }

    /// <summary>Field number for the "place_stickers" field.</summary>
    public const int PlaceStickersFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask PlaceStickers {
      get { return typeCase_ == TypeOneofCase.PlaceStickers ? (global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlaceStickers;
      }
    }

    /// <summary>Field number for the "collect_stickers" field.</summary>
    public const int CollectStickersFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask CollectStickers {
      get { return typeCase_ == TypeOneofCase.CollectStickers ? (global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectStickers;
      }
    }

    /// <summary>Field number for the "cast_spells" field.</summary>
    public const int CastSpellsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask CastSpells {
      get { return typeCase_ == TypeOneofCase.CastSpells ? (global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CastSpells;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      DoEncounter = 1,
      LootOutposts = 2,
      WinTraces = 3,
      CollectPotionIngredients = 4,
      BrewPotions = 5,
      WalkDistance = 6,
      PlayFortressChallenges = 7,
      DefeatMobInChallenges = 8,
      UnlockPortmanteau = 9,
      UsePotions = 10,
      PlaceStickers = 11,
      CollectStickers = 12,
      CastSpells = 13,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HookQuestTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HookQuestTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DoEncounter, other.DoEncounter)) return false;
      if (!object.Equals(LootOutposts, other.LootOutposts)) return false;
      if (!object.Equals(WinTraces, other.WinTraces)) return false;
      if (!object.Equals(CollectPotionIngredients, other.CollectPotionIngredients)) return false;
      if (!object.Equals(BrewPotions, other.BrewPotions)) return false;
      if (!object.Equals(WalkDistance, other.WalkDistance)) return false;
      if (!object.Equals(PlayFortressChallenges, other.PlayFortressChallenges)) return false;
      if (!object.Equals(DefeatMobInChallenges, other.DefeatMobInChallenges)) return false;
      if (!object.Equals(UnlockPortmanteau, other.UnlockPortmanteau)) return false;
      if (!object.Equals(UsePotions, other.UsePotions)) return false;
      if (!object.Equals(PlaceStickers, other.PlaceStickers)) return false;
      if (!object.Equals(CollectStickers, other.CollectStickers)) return false;
      if (!object.Equals(CastSpells, other.CastSpells)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.DoEncounter) hash ^= DoEncounter.GetHashCode();
      if (typeCase_ == TypeOneofCase.LootOutposts) hash ^= LootOutposts.GetHashCode();
      if (typeCase_ == TypeOneofCase.WinTraces) hash ^= WinTraces.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectPotionIngredients) hash ^= CollectPotionIngredients.GetHashCode();
      if (typeCase_ == TypeOneofCase.BrewPotions) hash ^= BrewPotions.GetHashCode();
      if (typeCase_ == TypeOneofCase.WalkDistance) hash ^= WalkDistance.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayFortressChallenges) hash ^= PlayFortressChallenges.GetHashCode();
      if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) hash ^= DefeatMobInChallenges.GetHashCode();
      if (typeCase_ == TypeOneofCase.UnlockPortmanteau) hash ^= UnlockPortmanteau.GetHashCode();
      if (typeCase_ == TypeOneofCase.UsePotions) hash ^= UsePotions.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlaceStickers) hash ^= PlaceStickers.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectStickers) hash ^= CollectStickers.GetHashCode();
      if (typeCase_ == TypeOneofCase.CastSpells) hash ^= CastSpells.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.DoEncounter) {
        output.WriteRawTag(10);
        output.WriteMessage(DoEncounter);
      }
      if (typeCase_ == TypeOneofCase.LootOutposts) {
        output.WriteRawTag(18);
        output.WriteMessage(LootOutposts);
      }
      if (typeCase_ == TypeOneofCase.WinTraces) {
        output.WriteRawTag(26);
        output.WriteMessage(WinTraces);
      }
      if (typeCase_ == TypeOneofCase.CollectPotionIngredients) {
        output.WriteRawTag(34);
        output.WriteMessage(CollectPotionIngredients);
      }
      if (typeCase_ == TypeOneofCase.BrewPotions) {
        output.WriteRawTag(42);
        output.WriteMessage(BrewPotions);
      }
      if (typeCase_ == TypeOneofCase.WalkDistance) {
        output.WriteRawTag(50);
        output.WriteMessage(WalkDistance);
      }
      if (typeCase_ == TypeOneofCase.PlayFortressChallenges) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayFortressChallenges);
      }
      if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) {
        output.WriteRawTag(66);
        output.WriteMessage(DefeatMobInChallenges);
      }
      if (typeCase_ == TypeOneofCase.UnlockPortmanteau) {
        output.WriteRawTag(74);
        output.WriteMessage(UnlockPortmanteau);
      }
      if (typeCase_ == TypeOneofCase.UsePotions) {
        output.WriteRawTag(82);
        output.WriteMessage(UsePotions);
      }
      if (typeCase_ == TypeOneofCase.PlaceStickers) {
        output.WriteRawTag(90);
        output.WriteMessage(PlaceStickers);
      }
      if (typeCase_ == TypeOneofCase.CollectStickers) {
        output.WriteRawTag(98);
        output.WriteMessage(CollectStickers);
      }
      if (typeCase_ == TypeOneofCase.CastSpells) {
        output.WriteRawTag(106);
        output.WriteMessage(CastSpells);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.DoEncounter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoEncounter);
      }
      if (typeCase_ == TypeOneofCase.LootOutposts) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LootOutposts);
      }
      if (typeCase_ == TypeOneofCase.WinTraces) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WinTraces);
      }
      if (typeCase_ == TypeOneofCase.CollectPotionIngredients) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectPotionIngredients);
      }
      if (typeCase_ == TypeOneofCase.BrewPotions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BrewPotions);
      }
      if (typeCase_ == TypeOneofCase.WalkDistance) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkDistance);
      }
      if (typeCase_ == TypeOneofCase.PlayFortressChallenges) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayFortressChallenges);
      }
      if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefeatMobInChallenges);
      }
      if (typeCase_ == TypeOneofCase.UnlockPortmanteau) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockPortmanteau);
      }
      if (typeCase_ == TypeOneofCase.UsePotions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UsePotions);
      }
      if (typeCase_ == TypeOneofCase.PlaceStickers) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaceStickers);
      }
      if (typeCase_ == TypeOneofCase.CollectStickers) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectStickers);
      }
      if (typeCase_ == TypeOneofCase.CastSpells) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CastSpells);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HookQuestTask other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.DoEncounter:
          if (DoEncounter == null) {
            DoEncounter = new global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask();
          }
          DoEncounter.MergeFrom(other.DoEncounter);
          break;
        case TypeOneofCase.LootOutposts:
          if (LootOutposts == null) {
            LootOutposts = new global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask();
          }
          LootOutposts.MergeFrom(other.LootOutposts);
          break;
        case TypeOneofCase.WinTraces:
          if (WinTraces == null) {
            WinTraces = new global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask();
          }
          WinTraces.MergeFrom(other.WinTraces);
          break;
        case TypeOneofCase.CollectPotionIngredients:
          if (CollectPotionIngredients == null) {
            CollectPotionIngredients = new global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask();
          }
          CollectPotionIngredients.MergeFrom(other.CollectPotionIngredients);
          break;
        case TypeOneofCase.BrewPotions:
          if (BrewPotions == null) {
            BrewPotions = new global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask();
          }
          BrewPotions.MergeFrom(other.BrewPotions);
          break;
        case TypeOneofCase.WalkDistance:
          if (WalkDistance == null) {
            WalkDistance = new global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask();
          }
          WalkDistance.MergeFrom(other.WalkDistance);
          break;
        case TypeOneofCase.PlayFortressChallenges:
          if (PlayFortressChallenges == null) {
            PlayFortressChallenges = new global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask();
          }
          PlayFortressChallenges.MergeFrom(other.PlayFortressChallenges);
          break;
        case TypeOneofCase.DefeatMobInChallenges:
          if (DefeatMobInChallenges == null) {
            DefeatMobInChallenges = new global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask();
          }
          DefeatMobInChallenges.MergeFrom(other.DefeatMobInChallenges);
          break;
        case TypeOneofCase.UnlockPortmanteau:
          if (UnlockPortmanteau == null) {
            UnlockPortmanteau = new global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask();
          }
          UnlockPortmanteau.MergeFrom(other.UnlockPortmanteau);
          break;
        case TypeOneofCase.UsePotions:
          if (UsePotions == null) {
            UsePotions = new global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask();
          }
          UsePotions.MergeFrom(other.UsePotions);
          break;
        case TypeOneofCase.PlaceStickers:
          if (PlaceStickers == null) {
            PlaceStickers = new global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask();
          }
          PlaceStickers.MergeFrom(other.PlaceStickers);
          break;
        case TypeOneofCase.CollectStickers:
          if (CollectStickers == null) {
            CollectStickers = new global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask();
          }
          CollectStickers.MergeFrom(other.CollectStickers);
          break;
        case TypeOneofCase.CastSpells:
          if (CastSpells == null) {
            CastSpells = new global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask();
          }
          CastSpells.MergeFrom(other.CastSpells);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.DoEncounterHookQuestTask();
            if (typeCase_ == TypeOneofCase.DoEncounter) {
              subBuilder.MergeFrom(DoEncounter);
            }
            input.ReadMessage(subBuilder);
            DoEncounter = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.LootOutpostsQuestTask();
            if (typeCase_ == TypeOneofCase.LootOutposts) {
              subBuilder.MergeFrom(LootOutposts);
            }
            input.ReadMessage(subBuilder);
            LootOutposts = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.WinTracesQuestTask();
            if (typeCase_ == TypeOneofCase.WinTraces) {
              subBuilder.MergeFrom(WinTraces);
            }
            input.ReadMessage(subBuilder);
            WinTraces = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.CollectPotionIngredientsQuestTask();
            if (typeCase_ == TypeOneofCase.CollectPotionIngredients) {
              subBuilder.MergeFrom(CollectPotionIngredients);
            }
            input.ReadMessage(subBuilder);
            CollectPotionIngredients = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.BrewPotionsQuestTask();
            if (typeCase_ == TypeOneofCase.BrewPotions) {
              subBuilder.MergeFrom(BrewPotions);
            }
            input.ReadMessage(subBuilder);
            BrewPotions = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.WalkDistanceQuestTask();
            if (typeCase_ == TypeOneofCase.WalkDistance) {
              subBuilder.MergeFrom(WalkDistance);
            }
            input.ReadMessage(subBuilder);
            WalkDistance = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.PlayFortressChallengesQuestTask();
            if (typeCase_ == TypeOneofCase.PlayFortressChallenges) {
              subBuilder.MergeFrom(PlayFortressChallenges);
            }
            input.ReadMessage(subBuilder);
            PlayFortressChallenges = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.DefeatMobTypeInWizardingChallengeQuestTask();
            if (typeCase_ == TypeOneofCase.DefeatMobInChallenges) {
              subBuilder.MergeFrom(DefeatMobInChallenges);
            }
            input.ReadMessage(subBuilder);
            DefeatMobInChallenges = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.UnlockPortmanteauQuestTask();
            if (typeCase_ == TypeOneofCase.UnlockPortmanteau) {
              subBuilder.MergeFrom(UnlockPortmanteau);
            }
            input.ReadMessage(subBuilder);
            UnlockPortmanteau = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.UsePotionsQuestTask();
            if (typeCase_ == TypeOneofCase.UsePotions) {
              subBuilder.MergeFrom(UsePotions);
            }
            input.ReadMessage(subBuilder);
            UsePotions = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.PlaceStickersQuestTask();
            if (typeCase_ == TypeOneofCase.PlaceStickers) {
              subBuilder.MergeFrom(PlaceStickers);
            }
            input.ReadMessage(subBuilder);
            PlaceStickers = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.CollectStickersQuestTask();
            if (typeCase_ == TypeOneofCase.CollectStickers) {
              subBuilder.MergeFrom(CollectStickers);
            }
            input.ReadMessage(subBuilder);
            CollectStickers = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask subBuilder = new global::WUProtos.Data.HookQuestTask.Types.CastSpellsQuestTask();
            if (typeCase_ == TypeOneofCase.CastSpells) {
              subBuilder.MergeFrom(CastSpells);
            }
            input.ReadMessage(subBuilder);
            CastSpells = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HookQuestTask message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlaceStickersQuestTask : pb::IMessage<PlaceStickersQuestTask> {
        private static readonly pb::MessageParser<PlaceStickersQuestTask> _parser = new pb::MessageParser<PlaceStickersQuestTask>(() => new PlaceStickersQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlaceStickersQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlaceStickersQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlaceStickersQuestTask(PlaceStickersQuestTask other) : this() {
          requiredPlaceCount_ = other.requiredPlaceCount_;
          stickerGmtId_ = other.stickerGmtId_;
          stickerPageGmtId_ = other.stickerPageGmtId_;
          stickerFamilyGmtId_ = other.stickerFamilyGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlaceStickersQuestTask Clone() {
          return new PlaceStickersQuestTask(this);
        }

        /// <summary>Field number for the "required_place_count" field.</summary>
        public const int RequiredPlaceCountFieldNumber = 1;
        private long requiredPlaceCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredPlaceCount {
          get { return requiredPlaceCount_; }
          set {
            requiredPlaceCount_ = value;
          }
        }

        /// <summary>Field number for the "sticker_gmt_id" field.</summary>
        public const int StickerGmtIdFieldNumber = 2;
        private string stickerGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StickerGmtId {
          get { return stickerGmtId_; }
          set {
            stickerGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sticker_page_gmt_id" field.</summary>
        public const int StickerPageGmtIdFieldNumber = 3;
        private string stickerPageGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StickerPageGmtId {
          get { return stickerPageGmtId_; }
          set {
            stickerPageGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sticker_family_gmt_id" field.</summary>
        public const int StickerFamilyGmtIdFieldNumber = 4;
        private string stickerFamilyGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StickerFamilyGmtId {
          get { return stickerFamilyGmtId_; }
          set {
            stickerFamilyGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlaceStickersQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlaceStickersQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredPlaceCount != other.RequiredPlaceCount) return false;
          if (StickerGmtId != other.StickerGmtId) return false;
          if (StickerPageGmtId != other.StickerPageGmtId) return false;
          if (StickerFamilyGmtId != other.StickerFamilyGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredPlaceCount != 0L) hash ^= RequiredPlaceCount.GetHashCode();
          if (StickerGmtId.Length != 0) hash ^= StickerGmtId.GetHashCode();
          if (StickerPageGmtId.Length != 0) hash ^= StickerPageGmtId.GetHashCode();
          if (StickerFamilyGmtId.Length != 0) hash ^= StickerFamilyGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredPlaceCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredPlaceCount);
          }
          if (StickerGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(StickerGmtId);
          }
          if (StickerPageGmtId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(StickerPageGmtId);
          }
          if (StickerFamilyGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(StickerFamilyGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredPlaceCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredPlaceCount);
          }
          if (StickerGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StickerGmtId);
          }
          if (StickerPageGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StickerPageGmtId);
          }
          if (StickerFamilyGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StickerFamilyGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlaceStickersQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredPlaceCount != 0L) {
            RequiredPlaceCount = other.RequiredPlaceCount;
          }
          if (other.StickerGmtId.Length != 0) {
            StickerGmtId = other.StickerGmtId;
          }
          if (other.StickerPageGmtId.Length != 0) {
            StickerPageGmtId = other.StickerPageGmtId;
          }
          if (other.StickerFamilyGmtId.Length != 0) {
            StickerFamilyGmtId = other.StickerFamilyGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredPlaceCount = input.ReadInt64();
                break;
              }
              case 18: {
                StickerGmtId = input.ReadString();
                break;
              }
              case 26: {
                StickerPageGmtId = input.ReadString();
                break;
              }
              case 34: {
                StickerFamilyGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayFortressChallengesQuestTask : pb::IMessage<PlayFortressChallengesQuestTask> {
        private static readonly pb::MessageParser<PlayFortressChallengesQuestTask> _parser = new pb::MessageParser<PlayFortressChallengesQuestTask>(() => new PlayFortressChallengesQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayFortressChallengesQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayFortressChallengesQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayFortressChallengesQuestTask(PlayFortressChallengesQuestTask other) : this() {
          requiredChallengeCount_ = other.requiredChallengeCount_;
          requiredLeastPlayerCount_ = other.requiredLeastPlayerCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayFortressChallengesQuestTask Clone() {
          return new PlayFortressChallengesQuestTask(this);
        }

        /// <summary>Field number for the "required_challenge_count" field.</summary>
        public const int RequiredChallengeCountFieldNumber = 1;
        private long requiredChallengeCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredChallengeCount {
          get { return requiredChallengeCount_; }
          set {
            requiredChallengeCount_ = value;
          }
        }

        /// <summary>Field number for the "required_least_player_count" field.</summary>
        public const int RequiredLeastPlayerCountFieldNumber = 2;
        private long requiredLeastPlayerCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredLeastPlayerCount {
          get { return requiredLeastPlayerCount_; }
          set {
            requiredLeastPlayerCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayFortressChallengesQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayFortressChallengesQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredChallengeCount != other.RequiredChallengeCount) return false;
          if (RequiredLeastPlayerCount != other.RequiredLeastPlayerCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredChallengeCount != 0L) hash ^= RequiredChallengeCount.GetHashCode();
          if (RequiredLeastPlayerCount != 0L) hash ^= RequiredLeastPlayerCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredChallengeCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredChallengeCount);
          }
          if (RequiredLeastPlayerCount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(RequiredLeastPlayerCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredChallengeCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredChallengeCount);
          }
          if (RequiredLeastPlayerCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredLeastPlayerCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayFortressChallengesQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredChallengeCount != 0L) {
            RequiredChallengeCount = other.RequiredChallengeCount;
          }
          if (other.RequiredLeastPlayerCount != 0L) {
            RequiredLeastPlayerCount = other.RequiredLeastPlayerCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredChallengeCount = input.ReadInt64();
                break;
              }
              case 16: {
                RequiredLeastPlayerCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UnlockPortmanteauQuestTask : pb::IMessage<UnlockPortmanteauQuestTask> {
        private static readonly pb::MessageParser<UnlockPortmanteauQuestTask> _parser = new pb::MessageParser<UnlockPortmanteauQuestTask>(() => new UnlockPortmanteauQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnlockPortmanteauQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockPortmanteauQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockPortmanteauQuestTask(UnlockPortmanteauQuestTask other) : this() {
          requiredUnlockCount_ = other.requiredUnlockCount_;
          minimumDistanceType_ = other.minimumDistanceType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockPortmanteauQuestTask Clone() {
          return new UnlockPortmanteauQuestTask(this);
        }

        /// <summary>Field number for the "required_unlock_count" field.</summary>
        public const int RequiredUnlockCountFieldNumber = 1;
        private long requiredUnlockCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredUnlockCount {
          get { return requiredUnlockCount_; }
          set {
            requiredUnlockCount_ = value;
          }
        }

        /// <summary>Field number for the "minimum_distance_type" field.</summary>
        public const int MinimumDistanceTypeFieldNumber = 2;
        private float minimumDistanceType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float MinimumDistanceType {
          get { return minimumDistanceType_; }
          set {
            minimumDistanceType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UnlockPortmanteauQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnlockPortmanteauQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredUnlockCount != other.RequiredUnlockCount) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinimumDistanceType, other.MinimumDistanceType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredUnlockCount != 0L) hash ^= RequiredUnlockCount.GetHashCode();
          if (MinimumDistanceType != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinimumDistanceType);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredUnlockCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredUnlockCount);
          }
          if (MinimumDistanceType != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(MinimumDistanceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredUnlockCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredUnlockCount);
          }
          if (MinimumDistanceType != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnlockPortmanteauQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredUnlockCount != 0L) {
            RequiredUnlockCount = other.RequiredUnlockCount;
          }
          if (other.MinimumDistanceType != 0F) {
            MinimumDistanceType = other.MinimumDistanceType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredUnlockCount = input.ReadInt64();
                break;
              }
              case 21: {
                MinimumDistanceType = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WalkDistanceQuestTask : pb::IMessage<WalkDistanceQuestTask> {
        private static readonly pb::MessageParser<WalkDistanceQuestTask> _parser = new pb::MessageParser<WalkDistanceQuestTask>(() => new WalkDistanceQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WalkDistanceQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkDistanceQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkDistanceQuestTask(WalkDistanceQuestTask other) : this() {
          requiredMicrometersToWalk_ = other.requiredMicrometersToWalk_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WalkDistanceQuestTask Clone() {
          return new WalkDistanceQuestTask(this);
        }

        /// <summary>Field number for the "required_micrometers_to_walk" field.</summary>
        public const int RequiredMicrometersToWalkFieldNumber = 1;
        private long requiredMicrometersToWalk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredMicrometersToWalk {
          get { return requiredMicrometersToWalk_; }
          set {
            requiredMicrometersToWalk_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WalkDistanceQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WalkDistanceQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredMicrometersToWalk != other.RequiredMicrometersToWalk) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredMicrometersToWalk != 0L) hash ^= RequiredMicrometersToWalk.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredMicrometersToWalk != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredMicrometersToWalk);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredMicrometersToWalk != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredMicrometersToWalk);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WalkDistanceQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredMicrometersToWalk != 0L) {
            RequiredMicrometersToWalk = other.RequiredMicrometersToWalk;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredMicrometersToWalk = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class UsePotionsQuestTask : pb::IMessage<UsePotionsQuestTask> {
        private static readonly pb::MessageParser<UsePotionsQuestTask> _parser = new pb::MessageParser<UsePotionsQuestTask>(() => new UsePotionsQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UsePotionsQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsePotionsQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsePotionsQuestTask(UsePotionsQuestTask other) : this() {
          requiredUseCount_ = other.requiredUseCount_;
          requiredPotion_ = other.requiredPotion_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsePotionsQuestTask Clone() {
          return new UsePotionsQuestTask(this);
        }

        /// <summary>Field number for the "required_use_count" field.</summary>
        public const int RequiredUseCountFieldNumber = 1;
        private long requiredUseCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredUseCount {
          get { return requiredUseCount_; }
          set {
            requiredUseCount_ = value;
          }
        }

        /// <summary>Field number for the "required_potion" field.</summary>
        public const int RequiredPotionFieldNumber = 2;
        private string requiredPotion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RequiredPotion {
          get { return requiredPotion_; }
          set {
            requiredPotion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UsePotionsQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UsePotionsQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredUseCount != other.RequiredUseCount) return false;
          if (RequiredPotion != other.RequiredPotion) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredUseCount != 0L) hash ^= RequiredUseCount.GetHashCode();
          if (RequiredPotion.Length != 0) hash ^= RequiredPotion.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredUseCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredUseCount);
          }
          if (RequiredPotion.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RequiredPotion);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredUseCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredUseCount);
          }
          if (RequiredPotion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RequiredPotion);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UsePotionsQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredUseCount != 0L) {
            RequiredUseCount = other.RequiredUseCount;
          }
          if (other.RequiredPotion.Length != 0) {
            RequiredPotion = other.RequiredPotion;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredUseCount = input.ReadInt64();
                break;
              }
              case 18: {
                RequiredPotion = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BrewPotionsQuestTask : pb::IMessage<BrewPotionsQuestTask> {
        private static readonly pb::MessageParser<BrewPotionsQuestTask> _parser = new pb::MessageParser<BrewPotionsQuestTask>(() => new BrewPotionsQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BrewPotionsQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BrewPotionsQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BrewPotionsQuestTask(BrewPotionsQuestTask other) : this() {
          requiredBrewCount_ = other.requiredBrewCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BrewPotionsQuestTask Clone() {
          return new BrewPotionsQuestTask(this);
        }

        /// <summary>Field number for the "required_brew_count" field.</summary>
        public const int RequiredBrewCountFieldNumber = 1;
        private long requiredBrewCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredBrewCount {
          get { return requiredBrewCount_; }
          set {
            requiredBrewCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BrewPotionsQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BrewPotionsQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredBrewCount != other.RequiredBrewCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredBrewCount != 0L) hash ^= RequiredBrewCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredBrewCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredBrewCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredBrewCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredBrewCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BrewPotionsQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredBrewCount != 0L) {
            RequiredBrewCount = other.RequiredBrewCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredBrewCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CastSpellsQuestTask : pb::IMessage<CastSpellsQuestTask> {
        private static readonly pb::MessageParser<CastSpellsQuestTask> _parser = new pb::MessageParser<CastSpellsQuestTask>(() => new CastSpellsQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastSpellsQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastSpellsQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastSpellsQuestTask(CastSpellsQuestTask other) : this() {
          requiredSpellCount_ = other.requiredSpellCount_;
          requiredMasteryLevel_ = other.requiredMasteryLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastSpellsQuestTask Clone() {
          return new CastSpellsQuestTask(this);
        }

        /// <summary>Field number for the "required_spell_count" field.</summary>
        public const int RequiredSpellCountFieldNumber = 1;
        private long requiredSpellCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredSpellCount {
          get { return requiredSpellCount_; }
          set {
            requiredSpellCount_ = value;
          }
        }

        /// <summary>Field number for the "required_mastery_level" field.</summary>
        public const int RequiredMasteryLevelFieldNumber = 2;
        private float requiredMasteryLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RequiredMasteryLevel {
          get { return requiredMasteryLevel_; }
          set {
            requiredMasteryLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CastSpellsQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastSpellsQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredSpellCount != other.RequiredSpellCount) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RequiredMasteryLevel, other.RequiredMasteryLevel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredSpellCount != 0L) hash ^= RequiredSpellCount.GetHashCode();
          if (RequiredMasteryLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RequiredMasteryLevel);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredSpellCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredSpellCount);
          }
          if (RequiredMasteryLevel != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(RequiredMasteryLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredSpellCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredSpellCount);
          }
          if (RequiredMasteryLevel != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastSpellsQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredSpellCount != 0L) {
            RequiredSpellCount = other.RequiredSpellCount;
          }
          if (other.RequiredMasteryLevel != 0F) {
            RequiredMasteryLevel = other.RequiredMasteryLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredSpellCount = input.ReadInt64();
                break;
              }
              case 21: {
                RequiredMasteryLevel = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectPotionIngredientsQuestTask : pb::IMessage<CollectPotionIngredientsQuestTask> {
        private static readonly pb::MessageParser<CollectPotionIngredientsQuestTask> _parser = new pb::MessageParser<CollectPotionIngredientsQuestTask>(() => new CollectPotionIngredientsQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectPotionIngredientsQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectPotionIngredientsQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectPotionIngredientsQuestTask(CollectPotionIngredientsQuestTask other) : this() {
          requiredPotionIngredientCount_ = other.requiredPotionIngredientCount_;
          ingredientGmtId_ = other.ingredientGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectPotionIngredientsQuestTask Clone() {
          return new CollectPotionIngredientsQuestTask(this);
        }

        /// <summary>Field number for the "required_potion_ingredient_count" field.</summary>
        public const int RequiredPotionIngredientCountFieldNumber = 1;
        private long requiredPotionIngredientCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredPotionIngredientCount {
          get { return requiredPotionIngredientCount_; }
          set {
            requiredPotionIngredientCount_ = value;
          }
        }

        /// <summary>Field number for the "ingredient_gmt_id" field.</summary>
        public const int IngredientGmtIdFieldNumber = 2;
        private string ingredientGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string IngredientGmtId {
          get { return ingredientGmtId_; }
          set {
            ingredientGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectPotionIngredientsQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectPotionIngredientsQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredPotionIngredientCount != other.RequiredPotionIngredientCount) return false;
          if (IngredientGmtId != other.IngredientGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredPotionIngredientCount != 0L) hash ^= RequiredPotionIngredientCount.GetHashCode();
          if (IngredientGmtId.Length != 0) hash ^= IngredientGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredPotionIngredientCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredPotionIngredientCount);
          }
          if (IngredientGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(IngredientGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredPotionIngredientCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredPotionIngredientCount);
          }
          if (IngredientGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(IngredientGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectPotionIngredientsQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredPotionIngredientCount != 0L) {
            RequiredPotionIngredientCount = other.RequiredPotionIngredientCount;
          }
          if (other.IngredientGmtId.Length != 0) {
            IngredientGmtId = other.IngredientGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredPotionIngredientCount = input.ReadInt64();
                break;
              }
              case 18: {
                IngredientGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class CollectStickersQuestTask : pb::IMessage<CollectStickersQuestTask> {
        private static readonly pb::MessageParser<CollectStickersQuestTask> _parser = new pb::MessageParser<CollectStickersQuestTask>(() => new CollectStickersQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollectStickersQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectStickersQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectStickersQuestTask(CollectStickersQuestTask other) : this() {
          requiredCollectCount_ = other.requiredCollectCount_;
          stickerGmtId_ = other.stickerGmtId_;
          stickerPageGmtId_ = other.stickerPageGmtId_;
          stickerFamilyGmtId_ = other.stickerFamilyGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollectStickersQuestTask Clone() {
          return new CollectStickersQuestTask(this);
        }

        /// <summary>Field number for the "required_collect_count" field.</summary>
        public const int RequiredCollectCountFieldNumber = 1;
        private long requiredCollectCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredCollectCount {
          get { return requiredCollectCount_; }
          set {
            requiredCollectCount_ = value;
          }
        }

        /// <summary>Field number for the "sticker_gmt_id" field.</summary>
        public const int StickerGmtIdFieldNumber = 2;
        private string stickerGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StickerGmtId {
          get { return stickerGmtId_; }
          set {
            stickerGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sticker_page_gmt_id" field.</summary>
        public const int StickerPageGmtIdFieldNumber = 3;
        private string stickerPageGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StickerPageGmtId {
          get { return stickerPageGmtId_; }
          set {
            stickerPageGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sticker_family_gmt_id" field.</summary>
        public const int StickerFamilyGmtIdFieldNumber = 4;
        private string stickerFamilyGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StickerFamilyGmtId {
          get { return stickerFamilyGmtId_; }
          set {
            stickerFamilyGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollectStickersQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollectStickersQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredCollectCount != other.RequiredCollectCount) return false;
          if (StickerGmtId != other.StickerGmtId) return false;
          if (StickerPageGmtId != other.StickerPageGmtId) return false;
          if (StickerFamilyGmtId != other.StickerFamilyGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredCollectCount != 0L) hash ^= RequiredCollectCount.GetHashCode();
          if (StickerGmtId.Length != 0) hash ^= StickerGmtId.GetHashCode();
          if (StickerPageGmtId.Length != 0) hash ^= StickerPageGmtId.GetHashCode();
          if (StickerFamilyGmtId.Length != 0) hash ^= StickerFamilyGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredCollectCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredCollectCount);
          }
          if (StickerGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(StickerGmtId);
          }
          if (StickerPageGmtId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(StickerPageGmtId);
          }
          if (StickerFamilyGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(StickerFamilyGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredCollectCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredCollectCount);
          }
          if (StickerGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StickerGmtId);
          }
          if (StickerPageGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StickerPageGmtId);
          }
          if (StickerFamilyGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StickerFamilyGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollectStickersQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredCollectCount != 0L) {
            RequiredCollectCount = other.RequiredCollectCount;
          }
          if (other.StickerGmtId.Length != 0) {
            StickerGmtId = other.StickerGmtId;
          }
          if (other.StickerPageGmtId.Length != 0) {
            StickerPageGmtId = other.StickerPageGmtId;
          }
          if (other.StickerFamilyGmtId.Length != 0) {
            StickerFamilyGmtId = other.StickerFamilyGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredCollectCount = input.ReadInt64();
                break;
              }
              case 18: {
                StickerGmtId = input.ReadString();
                break;
              }
              case 26: {
                StickerPageGmtId = input.ReadString();
                break;
              }
              case 34: {
                StickerFamilyGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LootOutpostsQuestTask : pb::IMessage<LootOutpostsQuestTask> {
        private static readonly pb::MessageParser<LootOutpostsQuestTask> _parser = new pb::MessageParser<LootOutpostsQuestTask>(() => new LootOutpostsQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LootOutpostsQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootOutpostsQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootOutpostsQuestTask(LootOutpostsQuestTask other) : this() {
          requiredOutpostsCount_ = other.requiredOutpostsCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LootOutpostsQuestTask Clone() {
          return new LootOutpostsQuestTask(this);
        }

        /// <summary>Field number for the "required_outposts_count" field.</summary>
        public const int RequiredOutpostsCountFieldNumber = 1;
        private long requiredOutpostsCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredOutpostsCount {
          get { return requiredOutpostsCount_; }
          set {
            requiredOutpostsCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LootOutpostsQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LootOutpostsQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredOutpostsCount != other.RequiredOutpostsCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredOutpostsCount != 0L) hash ^= RequiredOutpostsCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredOutpostsCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredOutpostsCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredOutpostsCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredOutpostsCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LootOutpostsQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredOutpostsCount != 0L) {
            RequiredOutpostsCount = other.RequiredOutpostsCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredOutpostsCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DefeatMobTypeInWizardingChallengeQuestTask : pb::IMessage<DefeatMobTypeInWizardingChallengeQuestTask> {
        private static readonly pb::MessageParser<DefeatMobTypeInWizardingChallengeQuestTask> _parser = new pb::MessageParser<DefeatMobTypeInWizardingChallengeQuestTask>(() => new DefeatMobTypeInWizardingChallengeQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DefeatMobTypeInWizardingChallengeQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatMobTypeInWizardingChallengeQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatMobTypeInWizardingChallengeQuestTask(DefeatMobTypeInWizardingChallengeQuestTask other) : this() {
          requiredDefeatCount_ = other.requiredDefeatCount_;
          encounterGmtId_ = other.encounterGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatMobTypeInWizardingChallengeQuestTask Clone() {
          return new DefeatMobTypeInWizardingChallengeQuestTask(this);
        }

        /// <summary>Field number for the "required_defeat_count" field.</summary>
        public const int RequiredDefeatCountFieldNumber = 1;
        private long requiredDefeatCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredDefeatCount {
          get { return requiredDefeatCount_; }
          set {
            requiredDefeatCount_ = value;
          }
        }

        /// <summary>Field number for the "encounter_gmt_id" field.</summary>
        public const int EncounterGmtIdFieldNumber = 2;
        private string encounterGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterGmtId {
          get { return encounterGmtId_; }
          set {
            encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DefeatMobTypeInWizardingChallengeQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DefeatMobTypeInWizardingChallengeQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredDefeatCount != other.RequiredDefeatCount) return false;
          if (EncounterGmtId != other.EncounterGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredDefeatCount != 0L) hash ^= RequiredDefeatCount.GetHashCode();
          if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredDefeatCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredDefeatCount);
          }
          if (EncounterGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredDefeatCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredDefeatCount);
          }
          if (EncounterGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DefeatMobTypeInWizardingChallengeQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredDefeatCount != 0L) {
            RequiredDefeatCount = other.RequiredDefeatCount;
          }
          if (other.EncounterGmtId.Length != 0) {
            EncounterGmtId = other.EncounterGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredDefeatCount = input.ReadInt64();
                break;
              }
              case 18: {
                EncounterGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DoEncounterHookQuestTask : pb::IMessage<DoEncounterHookQuestTask> {
        private static readonly pb::MessageParser<DoEncounterHookQuestTask> _parser = new pb::MessageParser<DoEncounterHookQuestTask>(() => new DoEncounterHookQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DoEncounterHookQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoEncounterHookQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoEncounterHookQuestTask(DoEncounterHookQuestTask other) : this() {
          encounterGmtId_ = other.encounterGmtId_;
          requiredWinCount_ = other.requiredWinCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DoEncounterHookQuestTask Clone() {
          return new DoEncounterHookQuestTask(this);
        }

        /// <summary>Field number for the "encounter_gmt_id" field.</summary>
        public const int EncounterGmtIdFieldNumber = 1;
        private string encounterGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterGmtId {
          get { return encounterGmtId_; }
          set {
            encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "required_win_count" field.</summary>
        public const int RequiredWinCountFieldNumber = 2;
        private long requiredWinCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredWinCount {
          get { return requiredWinCount_; }
          set {
            requiredWinCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DoEncounterHookQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DoEncounterHookQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EncounterGmtId != other.EncounterGmtId) return false;
          if (RequiredWinCount != other.RequiredWinCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
          if (RequiredWinCount != 0L) hash ^= RequiredWinCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EncounterGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EncounterGmtId);
          }
          if (RequiredWinCount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(RequiredWinCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EncounterGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
          }
          if (RequiredWinCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredWinCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DoEncounterHookQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.EncounterGmtId.Length != 0) {
            EncounterGmtId = other.EncounterGmtId;
          }
          if (other.RequiredWinCount != 0L) {
            RequiredWinCount = other.RequiredWinCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EncounterGmtId = input.ReadString();
                break;
              }
              case 16: {
                RequiredWinCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WinTracesQuestTask : pb::IMessage<WinTracesQuestTask> {
        private static readonly pb::MessageParser<WinTracesQuestTask> _parser = new pb::MessageParser<WinTracesQuestTask>(() => new WinTracesQuestTask());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WinTracesQuestTask> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.HookQuestTask.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WinTracesQuestTask() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WinTracesQuestTask(WinTracesQuestTask other) : this() {
          requiredTraceCount_ = other.requiredTraceCount_;
          encounterGmtId_ = other.encounterGmtId_;
          registryPageGmtId_ = other.registryPageGmtId_;
          familyGmtId_ = other.familyGmtId_;
          difficulty_ = other.difficulty_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WinTracesQuestTask Clone() {
          return new WinTracesQuestTask(this);
        }

        /// <summary>Field number for the "required_trace_count" field.</summary>
        public const int RequiredTraceCountFieldNumber = 1;
        private long requiredTraceCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RequiredTraceCount {
          get { return requiredTraceCount_; }
          set {
            requiredTraceCount_ = value;
          }
        }

        /// <summary>Field number for the "encounter_gmt_id" field.</summary>
        public const int EncounterGmtIdFieldNumber = 2;
        private string encounterGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EncounterGmtId {
          get { return encounterGmtId_; }
          set {
            encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "registry_page_gmt_id" field.</summary>
        public const int RegistryPageGmtIdFieldNumber = 3;
        private string registryPageGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RegistryPageGmtId {
          get { return registryPageGmtId_; }
          set {
            registryPageGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "family_gmt_id" field.</summary>
        public const int FamilyGmtIdFieldNumber = 4;
        private string familyGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FamilyGmtId {
          get { return familyGmtId_; }
          set {
            familyGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "difficulty" field.</summary>
        public const int DifficultyFieldNumber = 5;
        private float difficulty_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Difficulty {
          get { return difficulty_; }
          set {
            difficulty_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WinTracesQuestTask);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WinTracesQuestTask other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RequiredTraceCount != other.RequiredTraceCount) return false;
          if (EncounterGmtId != other.EncounterGmtId) return false;
          if (RegistryPageGmtId != other.RegistryPageGmtId) return false;
          if (FamilyGmtId != other.FamilyGmtId) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Difficulty, other.Difficulty)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RequiredTraceCount != 0L) hash ^= RequiredTraceCount.GetHashCode();
          if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
          if (RegistryPageGmtId.Length != 0) hash ^= RegistryPageGmtId.GetHashCode();
          if (FamilyGmtId.Length != 0) hash ^= FamilyGmtId.GetHashCode();
          if (Difficulty != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Difficulty);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RequiredTraceCount != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(RequiredTraceCount);
          }
          if (EncounterGmtId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EncounterGmtId);
          }
          if (RegistryPageGmtId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RegistryPageGmtId);
          }
          if (FamilyGmtId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(FamilyGmtId);
          }
          if (Difficulty != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Difficulty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RequiredTraceCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredTraceCount);
          }
          if (EncounterGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
          }
          if (RegistryPageGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistryPageGmtId);
          }
          if (FamilyGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyGmtId);
          }
          if (Difficulty != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WinTracesQuestTask other) {
          if (other == null) {
            return;
          }
          if (other.RequiredTraceCount != 0L) {
            RequiredTraceCount = other.RequiredTraceCount;
          }
          if (other.EncounterGmtId.Length != 0) {
            EncounterGmtId = other.EncounterGmtId;
          }
          if (other.RegistryPageGmtId.Length != 0) {
            RegistryPageGmtId = other.RegistryPageGmtId;
          }
          if (other.FamilyGmtId.Length != 0) {
            FamilyGmtId = other.FamilyGmtId;
          }
          if (other.Difficulty != 0F) {
            Difficulty = other.Difficulty;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RequiredTraceCount = input.ReadInt64();
                break;
              }
              case 18: {
                EncounterGmtId = input.ReadString();
                break;
              }
              case 26: {
                RegistryPageGmtId = input.ReadString();
                break;
              }
              case 34: {
                FamilyGmtId = input.ReadString();
                break;
              }
              case 45: {
                Difficulty = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
