// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Challenge/ChallengeBonus.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Challenge {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Challenge/ChallengeBonus.proto</summary>
  public static partial class ChallengeBonusReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Challenge/ChallengeBonus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChallengeBonusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixXVVByb3Rvcy9EYXRhL0NoYWxsZW5nZS9DaGFsbGVuZ2VCb251cy5wcm90",
            "bxIXV1VQcm90b3MuRGF0YS5DaGFsbGVuZ2Ui/AoKDkNoYWxsZW5nZUJvbnVz",
            "EgoKAmlkGAEgASgJEkcKCHJlY2VpdmVyGAIgASgOMjUuV1VQcm90b3MuRGF0",
            "YS5DaGFsbGVuZ2UuQ2hhbGxlbmdlQm9udXMuQm9udXNSZWNlaXZlchJQCg10",
            "YXJnZXRfcmV3YXJkGAMgASgOMjkuV1VQcm90b3MuRGF0YS5DaGFsbGVuZ2Uu",
            "Q2hhbGxlbmdlQm9udXMuQm9udXNUYXJnZXRSZXdhcmQSEAoIbW9kaWZpZXIY",
            "BCABKAISGwoTbW9kaWZpZXJfcGVyY2VudGFnZRgFIAEoBRJZCgxwbGF5ZXJf",
            "Y291bnQYFCABKAsyQS5XVVByb3Rvcy5EYXRhLkNoYWxsZW5nZS5DaGFsbGVu",
            "Z2VCb251cy5QbGF5ZXJDb3VudENoYWxsZW5nZUJvbnVzSAASXwoPZmFzdF9j",
            "b21wbGV0aW9uGBUgASgLMkQuV1VQcm90b3MuRGF0YS5DaGFsbGVuZ2UuQ2hh",
            "bGxlbmdlQm9udXMuRmFzdENvbXBsZXRpb25DaGFsbGVuZ2VCb251c0gAElUK",
            "CnJ1bmVfbGV2ZWwYFiABKAsyPy5XVVByb3Rvcy5EYXRhLkNoYWxsZW5nZS5D",
            "aGFsbGVuZ2VCb251cy5SdW5lTGV2ZWxDaGFsbGVuZ2VCb251c0gAEmQKEmRl",
            "ZmVhdGVkX21vYl9jb3VudBgXIAEoCzJGLldVUHJvdG9zLkRhdGEuQ2hhbGxl",
            "bmdlLkNoYWxsZW5nZUJvbnVzLkRlZmVhdGVkTW9iQ291bnRDaGFsbGVuZ2VC",
            "b251c0gAElkKDHBsYXllcl9yYXRpbxgYIAEoCzJBLldVUHJvdG9zLkRhdGEu",
            "Q2hhbGxlbmdlLkNoYWxsZW5nZUJvbnVzLlBsYXllclJhdGlvQ2hhbGxlbmdl",
            "Qm9udXNIABJfChRwbGF5aW5nX3dpdGhfZnJpZW5kcxgZIAEoCzI/LldVUHJv",
            "dG9zLkRhdGEuQ2hhbGxlbmdlLkNoYWxsZW5nZUJvbnVzLlBsYXlpbmdXaXRo",
            "RnJpZW5kc0JvbnVzSAAaOwocRmFzdENvbXBsZXRpb25DaGFsbGVuZ2VCb251",
            "cxIbChNjb21wbGV0aW9uX3RpbWVfc2VjGAEgASgFGjQKF1BsYXlpbmdXaXRo",
            "RnJpZW5kc0JvbnVzEhkKEW51bWJlcl9vZl9mcmllbmRzGAEgASgFGjYKGVBs",
            "YXllckNvdW50Q2hhbGxlbmdlQm9udXMSGQoRbnVtYmVyX29mX3BsYXllcnMY",
            "ASABKAUaLgoZUGxheWVyUmF0aW9DaGFsbGVuZ2VCb251cxIRCgl0aHJlc2hv",
            "bGQYASABKAIaMwoeRGVmZWF0ZWRNb2JDb3VudENoYWxsZW5nZUJvbnVzEhEK",
            "CXRocmVzaG9sZBgBIAEoAhorChdSdW5lTGV2ZWxDaGFsbGVuZ2VCb251cxIQ",
            "CghydW5lX2x2bBgBIAEoBSJBCg1Cb251c1JlY2VpdmVyEhoKFkJPTlVTX1JF",
            "Q0VJVkVSX1VOS05PV04QABIICgRURUFNEAESCgoGUExBWUVSEAIi0QEKEUJv",
            "bnVzVGFyZ2V0UmV3YXJkEh8KG0JPTlVTX1RBUkdFVF9SRVdBUkRfVU5LTk9X",
            "ThAAEiAKHENIQUxMRU5HRV9DT0xMRUNUSUJMRV9TSEFSRFMQARIXChNDSEFM",
            "TEVOR0VfRkFNSUxZX1hQEAISGQoVUFJPRkVTU0lPTl9TUEVMTEJPT0tTEAMS",
            "IwofVFJBQ0VfRkFNSUxZX0NPTExFQ1RJQkxFX1NIQVJEUxAEEiAKHEFEVkVS",
            "U0FSWV9DT0xMRUNUSUJMRV9TSEFSRFMQBUILCglCb251c0tpbmRiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Parser, new[]{ "Id", "Receiver", "TargetReward", "Modifier", "ModifierPercentage", "PlayerCount", "FastCompletion", "RuneLevel", "DefeatedMobCount", "PlayerRatio", "PlayingWithFriends" }, new[]{ "BonusKind" }, new[]{ typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusReceiver), typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusTargetReward) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus.Parser, new[]{ "CompletionTimeSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus.Parser, new[]{ "NumberOfFriends" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus.Parser, new[]{ "NumberOfPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus.Parser, new[]{ "Threshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus.Parser, new[]{ "Threshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus), global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus.Parser, new[]{ "RuneLvl" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChallengeBonus : pb::IMessage<ChallengeBonus> {
    private static readonly pb::MessageParser<ChallengeBonus> _parser = new pb::MessageParser<ChallengeBonus>(() => new ChallengeBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Challenge.ChallengeBonusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeBonus(ChallengeBonus other) : this() {
      id_ = other.id_;
      receiver_ = other.receiver_;
      targetReward_ = other.targetReward_;
      modifier_ = other.modifier_;
      modifierPercentage_ = other.modifierPercentage_;
      switch (other.BonusKindCase) {
        case BonusKindOneofCase.PlayerCount:
          PlayerCount = other.PlayerCount.Clone();
          break;
        case BonusKindOneofCase.FastCompletion:
          FastCompletion = other.FastCompletion.Clone();
          break;
        case BonusKindOneofCase.RuneLevel:
          RuneLevel = other.RuneLevel.Clone();
          break;
        case BonusKindOneofCase.DefeatedMobCount:
          DefeatedMobCount = other.DefeatedMobCount.Clone();
          break;
        case BonusKindOneofCase.PlayerRatio:
          PlayerRatio = other.PlayerRatio.Clone();
          break;
        case BonusKindOneofCase.PlayingWithFriends:
          PlayingWithFriends = other.PlayingWithFriends.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeBonus Clone() {
      return new ChallengeBonus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 2;
    private global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusReceiver receiver_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusReceiver Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "target_reward" field.</summary>
    public const int TargetRewardFieldNumber = 3;
    private global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusTargetReward targetReward_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusTargetReward TargetReward {
      get { return targetReward_; }
      set {
        targetReward_ = value;
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 4;
    private float modifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Modifier {
      get { return modifier_; }
      set {
        modifier_ = value;
      }
    }

    /// <summary>Field number for the "modifier_percentage" field.</summary>
    public const int ModifierPercentageFieldNumber = 5;
    private int modifierPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifierPercentage {
      get { return modifierPercentage_; }
      set {
        modifierPercentage_ = value;
      }
    }

    /// <summary>Field number for the "player_count" field.</summary>
    public const int PlayerCountFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus PlayerCount {
      get { return bonusKindCase_ == BonusKindOneofCase.PlayerCount ? (global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus) bonusKind_ : null; }
      set {
        bonusKind_ = value;
        bonusKindCase_ = value == null ? BonusKindOneofCase.None : BonusKindOneofCase.PlayerCount;
      }
    }

    /// <summary>Field number for the "fast_completion" field.</summary>
    public const int FastCompletionFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus FastCompletion {
      get { return bonusKindCase_ == BonusKindOneofCase.FastCompletion ? (global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus) bonusKind_ : null; }
      set {
        bonusKind_ = value;
        bonusKindCase_ = value == null ? BonusKindOneofCase.None : BonusKindOneofCase.FastCompletion;
      }
    }

    /// <summary>Field number for the "rune_level" field.</summary>
    public const int RuneLevelFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus RuneLevel {
      get { return bonusKindCase_ == BonusKindOneofCase.RuneLevel ? (global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus) bonusKind_ : null; }
      set {
        bonusKind_ = value;
        bonusKindCase_ = value == null ? BonusKindOneofCase.None : BonusKindOneofCase.RuneLevel;
      }
    }

    /// <summary>Field number for the "defeated_mob_count" field.</summary>
    public const int DefeatedMobCountFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus DefeatedMobCount {
      get { return bonusKindCase_ == BonusKindOneofCase.DefeatedMobCount ? (global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus) bonusKind_ : null; }
      set {
        bonusKind_ = value;
        bonusKindCase_ = value == null ? BonusKindOneofCase.None : BonusKindOneofCase.DefeatedMobCount;
      }
    }

    /// <summary>Field number for the "player_ratio" field.</summary>
    public const int PlayerRatioFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus PlayerRatio {
      get { return bonusKindCase_ == BonusKindOneofCase.PlayerRatio ? (global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus) bonusKind_ : null; }
      set {
        bonusKind_ = value;
        bonusKindCase_ = value == null ? BonusKindOneofCase.None : BonusKindOneofCase.PlayerRatio;
      }
    }

    /// <summary>Field number for the "playing_with_friends" field.</summary>
    public const int PlayingWithFriendsFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus PlayingWithFriends {
      get { return bonusKindCase_ == BonusKindOneofCase.PlayingWithFriends ? (global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus) bonusKind_ : null; }
      set {
        bonusKind_ = value;
        bonusKindCase_ = value == null ? BonusKindOneofCase.None : BonusKindOneofCase.PlayingWithFriends;
      }
    }

    private object bonusKind_;
    /// <summary>Enum of possible cases for the "BonusKind" oneof.</summary>
    public enum BonusKindOneofCase {
      None = 0,
      PlayerCount = 20,
      FastCompletion = 21,
      RuneLevel = 22,
      DefeatedMobCount = 23,
      PlayerRatio = 24,
      PlayingWithFriends = 25,
    }
    private BonusKindOneofCase bonusKindCase_ = BonusKindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusKindOneofCase BonusKindCase {
      get { return bonusKindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonusKind() {
      bonusKindCase_ = BonusKindOneofCase.None;
      bonusKind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Receiver != other.Receiver) return false;
      if (TargetReward != other.TargetReward) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Modifier, other.Modifier)) return false;
      if (ModifierPercentage != other.ModifierPercentage) return false;
      if (!object.Equals(PlayerCount, other.PlayerCount)) return false;
      if (!object.Equals(FastCompletion, other.FastCompletion)) return false;
      if (!object.Equals(RuneLevel, other.RuneLevel)) return false;
      if (!object.Equals(DefeatedMobCount, other.DefeatedMobCount)) return false;
      if (!object.Equals(PlayerRatio, other.PlayerRatio)) return false;
      if (!object.Equals(PlayingWithFriends, other.PlayingWithFriends)) return false;
      if (BonusKindCase != other.BonusKindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Receiver != 0) hash ^= Receiver.GetHashCode();
      if (TargetReward != 0) hash ^= TargetReward.GetHashCode();
      if (Modifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Modifier);
      if (ModifierPercentage != 0) hash ^= ModifierPercentage.GetHashCode();
      if (bonusKindCase_ == BonusKindOneofCase.PlayerCount) hash ^= PlayerCount.GetHashCode();
      if (bonusKindCase_ == BonusKindOneofCase.FastCompletion) hash ^= FastCompletion.GetHashCode();
      if (bonusKindCase_ == BonusKindOneofCase.RuneLevel) hash ^= RuneLevel.GetHashCode();
      if (bonusKindCase_ == BonusKindOneofCase.DefeatedMobCount) hash ^= DefeatedMobCount.GetHashCode();
      if (bonusKindCase_ == BonusKindOneofCase.PlayerRatio) hash ^= PlayerRatio.GetHashCode();
      if (bonusKindCase_ == BonusKindOneofCase.PlayingWithFriends) hash ^= PlayingWithFriends.GetHashCode();
      hash ^= (int) bonusKindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Receiver != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Receiver);
      }
      if (TargetReward != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TargetReward);
      }
      if (Modifier != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Modifier);
      }
      if (ModifierPercentage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModifierPercentage);
      }
      if (bonusKindCase_ == BonusKindOneofCase.PlayerCount) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PlayerCount);
      }
      if (bonusKindCase_ == BonusKindOneofCase.FastCompletion) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(FastCompletion);
      }
      if (bonusKindCase_ == BonusKindOneofCase.RuneLevel) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RuneLevel);
      }
      if (bonusKindCase_ == BonusKindOneofCase.DefeatedMobCount) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(DefeatedMobCount);
      }
      if (bonusKindCase_ == BonusKindOneofCase.PlayerRatio) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(PlayerRatio);
      }
      if (bonusKindCase_ == BonusKindOneofCase.PlayingWithFriends) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PlayingWithFriends);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Receiver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Receiver);
      }
      if (TargetReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetReward);
      }
      if (Modifier != 0F) {
        size += 1 + 4;
      }
      if (ModifierPercentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifierPercentage);
      }
      if (bonusKindCase_ == BonusKindOneofCase.PlayerCount) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayerCount);
      }
      if (bonusKindCase_ == BonusKindOneofCase.FastCompletion) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FastCompletion);
      }
      if (bonusKindCase_ == BonusKindOneofCase.RuneLevel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RuneLevel);
      }
      if (bonusKindCase_ == BonusKindOneofCase.DefeatedMobCount) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefeatedMobCount);
      }
      if (bonusKindCase_ == BonusKindOneofCase.PlayerRatio) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayerRatio);
      }
      if (bonusKindCase_ == BonusKindOneofCase.PlayingWithFriends) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayingWithFriends);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeBonus other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Receiver != 0) {
        Receiver = other.Receiver;
      }
      if (other.TargetReward != 0) {
        TargetReward = other.TargetReward;
      }
      if (other.Modifier != 0F) {
        Modifier = other.Modifier;
      }
      if (other.ModifierPercentage != 0) {
        ModifierPercentage = other.ModifierPercentage;
      }
      switch (other.BonusKindCase) {
        case BonusKindOneofCase.PlayerCount:
          if (PlayerCount == null) {
            PlayerCount = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus();
          }
          PlayerCount.MergeFrom(other.PlayerCount);
          break;
        case BonusKindOneofCase.FastCompletion:
          if (FastCompletion == null) {
            FastCompletion = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus();
          }
          FastCompletion.MergeFrom(other.FastCompletion);
          break;
        case BonusKindOneofCase.RuneLevel:
          if (RuneLevel == null) {
            RuneLevel = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus();
          }
          RuneLevel.MergeFrom(other.RuneLevel);
          break;
        case BonusKindOneofCase.DefeatedMobCount:
          if (DefeatedMobCount == null) {
            DefeatedMobCount = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus();
          }
          DefeatedMobCount.MergeFrom(other.DefeatedMobCount);
          break;
        case BonusKindOneofCase.PlayerRatio:
          if (PlayerRatio == null) {
            PlayerRatio = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus();
          }
          PlayerRatio.MergeFrom(other.PlayerRatio);
          break;
        case BonusKindOneofCase.PlayingWithFriends:
          if (PlayingWithFriends == null) {
            PlayingWithFriends = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus();
          }
          PlayingWithFriends.MergeFrom(other.PlayingWithFriends);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Receiver = (global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusReceiver) input.ReadEnum();
            break;
          }
          case 24: {
            TargetReward = (global::WUProtos.Data.Challenge.ChallengeBonus.Types.BonusTargetReward) input.ReadEnum();
            break;
          }
          case 37: {
            Modifier = input.ReadFloat();
            break;
          }
          case 40: {
            ModifierPercentage = input.ReadInt32();
            break;
          }
          case 162: {
            global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerCountChallengeBonus();
            if (bonusKindCase_ == BonusKindOneofCase.PlayerCount) {
              subBuilder.MergeFrom(PlayerCount);
            }
            input.ReadMessage(subBuilder);
            PlayerCount = subBuilder;
            break;
          }
          case 170: {
            global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.FastCompletionChallengeBonus();
            if (bonusKindCase_ == BonusKindOneofCase.FastCompletion) {
              subBuilder.MergeFrom(FastCompletion);
            }
            input.ReadMessage(subBuilder);
            FastCompletion = subBuilder;
            break;
          }
          case 178: {
            global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.RuneLevelChallengeBonus();
            if (bonusKindCase_ == BonusKindOneofCase.RuneLevel) {
              subBuilder.MergeFrom(RuneLevel);
            }
            input.ReadMessage(subBuilder);
            RuneLevel = subBuilder;
            break;
          }
          case 186: {
            global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.DefeatedMobCountChallengeBonus();
            if (bonusKindCase_ == BonusKindOneofCase.DefeatedMobCount) {
              subBuilder.MergeFrom(DefeatedMobCount);
            }
            input.ReadMessage(subBuilder);
            DefeatedMobCount = subBuilder;
            break;
          }
          case 194: {
            global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayerRatioChallengeBonus();
            if (bonusKindCase_ == BonusKindOneofCase.PlayerRatio) {
              subBuilder.MergeFrom(PlayerRatio);
            }
            input.ReadMessage(subBuilder);
            PlayerRatio = subBuilder;
            break;
          }
          case 202: {
            global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus.Types.PlayingWithFriendsBonus();
            if (bonusKindCase_ == BonusKindOneofCase.PlayingWithFriends) {
              subBuilder.MergeFrom(PlayingWithFriends);
            }
            input.ReadMessage(subBuilder);
            PlayingWithFriends = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChallengeBonus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BonusReceiver {
        [pbr::OriginalName("BONUS_RECEIVER_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("TEAM")] Team = 1,
        [pbr::OriginalName("PLAYER")] Player = 2,
      }

      public enum BonusTargetReward {
        [pbr::OriginalName("BONUS_TARGET_REWARD_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CHALLENGE_COLLECTIBLE_SHARDS")] ChallengeCollectibleShards = 1,
        [pbr::OriginalName("CHALLENGE_FAMILY_XP")] ChallengeFamilyXp = 2,
        [pbr::OriginalName("PROFESSION_SPELLBOOKS")] ProfessionSpellbooks = 3,
        [pbr::OriginalName("TRACE_FAMILY_COLLECTIBLE_SHARDS")] TraceFamilyCollectibleShards = 4,
        [pbr::OriginalName("ADVERSARY_COLLECTIBLE_SHARDS")] AdversaryCollectibleShards = 5,
      }

      public sealed partial class FastCompletionChallengeBonus : pb::IMessage<FastCompletionChallengeBonus> {
        private static readonly pb::MessageParser<FastCompletionChallengeBonus> _parser = new pb::MessageParser<FastCompletionChallengeBonus>(() => new FastCompletionChallengeBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FastCompletionChallengeBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Challenge.ChallengeBonus.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FastCompletionChallengeBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FastCompletionChallengeBonus(FastCompletionChallengeBonus other) : this() {
          completionTimeSec_ = other.completionTimeSec_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FastCompletionChallengeBonus Clone() {
          return new FastCompletionChallengeBonus(this);
        }

        /// <summary>Field number for the "completion_time_sec" field.</summary>
        public const int CompletionTimeSecFieldNumber = 1;
        private int completionTimeSec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CompletionTimeSec {
          get { return completionTimeSec_; }
          set {
            completionTimeSec_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FastCompletionChallengeBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FastCompletionChallengeBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CompletionTimeSec != other.CompletionTimeSec) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CompletionTimeSec != 0) hash ^= CompletionTimeSec.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CompletionTimeSec != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(CompletionTimeSec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CompletionTimeSec != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompletionTimeSec);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FastCompletionChallengeBonus other) {
          if (other == null) {
            return;
          }
          if (other.CompletionTimeSec != 0) {
            CompletionTimeSec = other.CompletionTimeSec;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CompletionTimeSec = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayingWithFriendsBonus : pb::IMessage<PlayingWithFriendsBonus> {
        private static readonly pb::MessageParser<PlayingWithFriendsBonus> _parser = new pb::MessageParser<PlayingWithFriendsBonus>(() => new PlayingWithFriendsBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayingWithFriendsBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Challenge.ChallengeBonus.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayingWithFriendsBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayingWithFriendsBonus(PlayingWithFriendsBonus other) : this() {
          numberOfFriends_ = other.numberOfFriends_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayingWithFriendsBonus Clone() {
          return new PlayingWithFriendsBonus(this);
        }

        /// <summary>Field number for the "number_of_friends" field.</summary>
        public const int NumberOfFriendsFieldNumber = 1;
        private int numberOfFriends_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumberOfFriends {
          get { return numberOfFriends_; }
          set {
            numberOfFriends_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayingWithFriendsBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayingWithFriendsBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NumberOfFriends != other.NumberOfFriends) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NumberOfFriends != 0) hash ^= NumberOfFriends.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NumberOfFriends != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(NumberOfFriends);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NumberOfFriends != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfFriends);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayingWithFriendsBonus other) {
          if (other == null) {
            return;
          }
          if (other.NumberOfFriends != 0) {
            NumberOfFriends = other.NumberOfFriends;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NumberOfFriends = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerCountChallengeBonus : pb::IMessage<PlayerCountChallengeBonus> {
        private static readonly pb::MessageParser<PlayerCountChallengeBonus> _parser = new pb::MessageParser<PlayerCountChallengeBonus>(() => new PlayerCountChallengeBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerCountChallengeBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Challenge.ChallengeBonus.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCountChallengeBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCountChallengeBonus(PlayerCountChallengeBonus other) : this() {
          numberOfPlayers_ = other.numberOfPlayers_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerCountChallengeBonus Clone() {
          return new PlayerCountChallengeBonus(this);
        }

        /// <summary>Field number for the "number_of_players" field.</summary>
        public const int NumberOfPlayersFieldNumber = 1;
        private int numberOfPlayers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumberOfPlayers {
          get { return numberOfPlayers_; }
          set {
            numberOfPlayers_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerCountChallengeBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerCountChallengeBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NumberOfPlayers != other.NumberOfPlayers) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NumberOfPlayers != 0) hash ^= NumberOfPlayers.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NumberOfPlayers != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(NumberOfPlayers);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NumberOfPlayers != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfPlayers);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerCountChallengeBonus other) {
          if (other == null) {
            return;
          }
          if (other.NumberOfPlayers != 0) {
            NumberOfPlayers = other.NumberOfPlayers;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NumberOfPlayers = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerRatioChallengeBonus : pb::IMessage<PlayerRatioChallengeBonus> {
        private static readonly pb::MessageParser<PlayerRatioChallengeBonus> _parser = new pb::MessageParser<PlayerRatioChallengeBonus>(() => new PlayerRatioChallengeBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerRatioChallengeBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Challenge.ChallengeBonus.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerRatioChallengeBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerRatioChallengeBonus(PlayerRatioChallengeBonus other) : this() {
          threshold_ = other.threshold_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerRatioChallengeBonus Clone() {
          return new PlayerRatioChallengeBonus(this);
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 1;
        private float threshold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerRatioChallengeBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerRatioChallengeBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Threshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Threshold);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Threshold != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Threshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Threshold != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerRatioChallengeBonus other) {
          if (other == null) {
            return;
          }
          if (other.Threshold != 0F) {
            Threshold = other.Threshold;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Threshold = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DefeatedMobCountChallengeBonus : pb::IMessage<DefeatedMobCountChallengeBonus> {
        private static readonly pb::MessageParser<DefeatedMobCountChallengeBonus> _parser = new pb::MessageParser<DefeatedMobCountChallengeBonus>(() => new DefeatedMobCountChallengeBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DefeatedMobCountChallengeBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Challenge.ChallengeBonus.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatedMobCountChallengeBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatedMobCountChallengeBonus(DefeatedMobCountChallengeBonus other) : this() {
          threshold_ = other.threshold_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefeatedMobCountChallengeBonus Clone() {
          return new DefeatedMobCountChallengeBonus(this);
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 1;
        private float threshold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DefeatedMobCountChallengeBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DefeatedMobCountChallengeBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Threshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Threshold);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Threshold != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Threshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Threshold != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DefeatedMobCountChallengeBonus other) {
          if (other == null) {
            return;
          }
          if (other.Threshold != 0F) {
            Threshold = other.Threshold;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Threshold = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RuneLevelChallengeBonus : pb::IMessage<RuneLevelChallengeBonus> {
        private static readonly pb::MessageParser<RuneLevelChallengeBonus> _parser = new pb::MessageParser<RuneLevelChallengeBonus>(() => new RuneLevelChallengeBonus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RuneLevelChallengeBonus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Challenge.ChallengeBonus.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RuneLevelChallengeBonus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RuneLevelChallengeBonus(RuneLevelChallengeBonus other) : this() {
          runeLvl_ = other.runeLvl_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RuneLevelChallengeBonus Clone() {
          return new RuneLevelChallengeBonus(this);
        }

        /// <summary>Field number for the "rune_lvl" field.</summary>
        public const int RuneLvlFieldNumber = 1;
        private int runeLvl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RuneLvl {
          get { return runeLvl_; }
          set {
            runeLvl_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RuneLevelChallengeBonus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RuneLevelChallengeBonus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RuneLvl != other.RuneLvl) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RuneLvl != 0) hash ^= RuneLvl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RuneLvl != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(RuneLvl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RuneLvl != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuneLvl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RuneLevelChallengeBonus other) {
          if (other == null) {
            return;
          }
          if (other.RuneLvl != 0) {
            RuneLvl = other.RuneLvl;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RuneLvl = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
