// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Networking/Responses/DbgGetSpellcastInfoResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Networking.Responses {

  /// <summary>Holder for reflection information generated from WUProtos/Networking/Responses/DbgGetSpellcastInfoResponse.proto</summary>
  public static partial class DbgGetSpellcastInfoResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Networking/Responses/DbgGetSpellcastInfoResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbgGetSpellcastInfoResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9XVVByb3Rvcy9OZXR3b3JraW5nL1Jlc3BvbnNlcy9EYmdHZXRTcGVsbGNh",
            "c3RJbmZvUmVzcG9uc2UucHJvdG8SHVdVUHJvdG9zLk5ldHdvcmtpbmcuUmVz",
            "cG9uc2VzIncKG0RiZ0dldFNwZWxsY2FzdEluZm9SZXNwb25zZRIYChBzcGVs",
            "bF9oaXRfY2hhbmNlGAEgASgBEhYKDnNwZWxsX2hpdF9yb2xsGAIgASgBEhMK",
            "C2ZsZWVfY2hhbmNlGAMgASgBEhEKCWZsZWVfcm9sbBgEIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Networking.Responses.DbgGetSpellcastInfoResponse), global::WUProtos.Networking.Responses.DbgGetSpellcastInfoResponse.Parser, new[]{ "SpellHitChance", "SpellHitRoll", "FleeChance", "FleeRoll" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DbgGetSpellcastInfoResponse : pb::IMessage<DbgGetSpellcastInfoResponse> {
    private static readonly pb::MessageParser<DbgGetSpellcastInfoResponse> _parser = new pb::MessageParser<DbgGetSpellcastInfoResponse>(() => new DbgGetSpellcastInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DbgGetSpellcastInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Networking.Responses.DbgGetSpellcastInfoResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbgGetSpellcastInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbgGetSpellcastInfoResponse(DbgGetSpellcastInfoResponse other) : this() {
      spellHitChance_ = other.spellHitChance_;
      spellHitRoll_ = other.spellHitRoll_;
      fleeChance_ = other.fleeChance_;
      fleeRoll_ = other.fleeRoll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DbgGetSpellcastInfoResponse Clone() {
      return new DbgGetSpellcastInfoResponse(this);
    }

    /// <summary>Field number for the "spell_hit_chance" field.</summary>
    public const int SpellHitChanceFieldNumber = 1;
    private double spellHitChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpellHitChance {
      get { return spellHitChance_; }
      set {
        spellHitChance_ = value;
      }
    }

    /// <summary>Field number for the "spell_hit_roll" field.</summary>
    public const int SpellHitRollFieldNumber = 2;
    private double spellHitRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpellHitRoll {
      get { return spellHitRoll_; }
      set {
        spellHitRoll_ = value;
      }
    }

    /// <summary>Field number for the "flee_chance" field.</summary>
    public const int FleeChanceFieldNumber = 3;
    private double fleeChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FleeChance {
      get { return fleeChance_; }
      set {
        fleeChance_ = value;
      }
    }

    /// <summary>Field number for the "flee_roll" field.</summary>
    public const int FleeRollFieldNumber = 4;
    private double fleeRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FleeRoll {
      get { return fleeRoll_; }
      set {
        fleeRoll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DbgGetSpellcastInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DbgGetSpellcastInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpellHitChance, other.SpellHitChance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpellHitRoll, other.SpellHitRoll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FleeChance, other.FleeChance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FleeRoll, other.FleeRoll)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpellHitChance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpellHitChance);
      if (SpellHitRoll != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpellHitRoll);
      if (FleeChance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FleeChance);
      if (FleeRoll != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FleeRoll);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpellHitChance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SpellHitChance);
      }
      if (SpellHitRoll != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SpellHitRoll);
      }
      if (FleeChance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FleeChance);
      }
      if (FleeRoll != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FleeRoll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpellHitChance != 0D) {
        size += 1 + 8;
      }
      if (SpellHitRoll != 0D) {
        size += 1 + 8;
      }
      if (FleeChance != 0D) {
        size += 1 + 8;
      }
      if (FleeRoll != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DbgGetSpellcastInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.SpellHitChance != 0D) {
        SpellHitChance = other.SpellHitChance;
      }
      if (other.SpellHitRoll != 0D) {
        SpellHitRoll = other.SpellHitRoll;
      }
      if (other.FleeChance != 0D) {
        FleeChance = other.FleeChance;
      }
      if (other.FleeRoll != 0D) {
        FleeRoll = other.FleeRoll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SpellHitChance = input.ReadDouble();
            break;
          }
          case 17: {
            SpellHitRoll = input.ReadDouble();
            break;
          }
          case 25: {
            FleeChance = input.ReadDouble();
            break;
          }
          case 33: {
            FleeRoll = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
